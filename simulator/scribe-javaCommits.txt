commit bfbe536886fc3c614b785110f8eba663644862d7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 17:01:30 2010 -0300

    Initial commit

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f2730f1
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,10 @@
+
+# Eclipse specific settings
+
+.classpath
+.project
+.settings
+
+# Binaries
+
+target
\ No newline at end of file
diff --git a/README.textile b/README.textile
new file mode 100644
index 0000000..6d4be17
--- /dev/null
+++ b/README.textile
@@ -0,0 +1,51 @@
+!http://img411.imageshack.us/img411/2851/scribelogo.png!
+
+h1. Welcome
+
+h3. Welcome to the *new* home of **Scribe**
+
+h1. Why use Scribe?
+
+h3. Dead Simple
+
+Who said OAuth was difficult? Configuring scribe is so easy your grandma can do it! check it out:
+
+OAuthService service = new ServiceBuilder()
+                                  .provider(LinkedInApi.class)
+                                  .apiKey(YOUR_API_KEY)
+                                  .apiSecret(YOUR_API_SECRET)
+                                  .build();
+                                  
+That **single line** (added newlines for readability) is the only thing you need to configure scribe with LinkedIn's OAuth API for example.
+
+h3. Threadsafe
+
+Hit Scribe as hard and with many threads as you like.
+
+h3. Supports all major OAuth APIs out-of-the-box
+
+logos here
+
+h3. Small and modular
+
+Scribe's code is small (about 1k LOC) and simple to understand. No smart-ass or "clever" hacks here.
+
+h3. Stable & bulletproof
+
+Test coverage of about x% to keep you safe from harm. 
+
+When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
+
+h1. Getting started in less than 2 minutes
+
+Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe/getting-started page and start rocking!
+
+h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe/faq before creating an issue :)
+
+h1. About me
+
+LinkedIn "profile":http://linkedinprofile
+
+Email me: fernandezpablo85 at gmail.com
+
+Follow me: "@fernandezpablo":http://twitter.com/fernandezpablo
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..707dc1f
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,35 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.scribe</groupId>
+  <artifactId>scribe</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0.0</version>
+  <name>OAuth Library</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>commons-codec</groupId>
+      <artifactId>commons-codec</artifactId>
+      <version>1.4</version>
+    </dependency>
+    
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.8.1</version>
+    </dependency>
+    
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.6</source>
+          <target>1.6</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>  
diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
new file mode 100644
index 0000000..dd7a893
--- /dev/null
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -0,0 +1,107 @@
+package org.scribe.builder;
+
+import org.scribe.builder.api.*;
+import org.scribe.exceptions.*;
+
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+import org.scribe.utils.*;
+
+/**
+ * Implementation of the Builder pattern, with a fluent interface that creates a
+ * {@link OAuthService}
+ * 
+ * @author Pablo Fernandez
+ *
+ */
+public class ServiceBuilder
+{
+  private String apiKey;
+  private String apiSecret;
+  private String callback;
+  private Api api;
+  
+  public ServiceBuilder()
+  {
+    this.callback = OAuthConstants.OUT_OF_BAND;
+  }
+  
+  /**
+   * Configures the {@link Api}
+   * 
+   * @param apiClass the class of one of the existent {@link Api}s on org.scribe.api package
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder provider(Class<? extends Api> apiClass)
+  {
+    this.api = createApi(apiClass);
+    return this;
+  }
+
+  private Api createApi(Class<? extends Api> apiClass)
+  {
+    Preconditions.checkNotNull(apiClass, "Api class cannot be null");
+    Api api;
+    try
+    {
+      api = apiClass.newInstance();  
+    }
+    catch(Exception e)
+    {
+      throw new OAuthException("Error while creating the Api object", e);
+    }
+    return api;
+  }
+  
+  /**
+   * Adds an OAuth callback url
+   * 
+   * @param callback callback url. Must be a valid url or 'oob' for out of band OAuth
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder callback(String callback)
+  {
+    Preconditions.checkValidOAuthCallback(callback, "Callback must be a valid URL or 'oob'");
+    this.callback = callback;
+    return this;
+  }
+  
+  /**
+   * Configures the api key
+   * 
+   * @param apiKey The api key for your application
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder apiKey(String apiKey)
+  {
+    Preconditions.checkEmptyString(apiKey, "Invalid Api key");
+    this.apiKey = apiKey;
+    return this;
+  }
+  
+  /**
+   * Configures the api secret
+   * 
+   * @param apiSecret The api secret for your application
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder apiSecret(String apiSecret)
+  {
+    Preconditions.checkEmptyString(apiSecret, "Invalid Api secret");
+    this.apiSecret = apiSecret;
+    return this;
+  }
+  
+  /**
+   * Returns the fully configured {@link OAuthService}
+   * 
+   * @return fully configured {@link OAuthService}
+   */
+  public OAuthService build()
+  {
+    Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
+    Preconditions.checkEmptyString(apiKey, "You must provide an api key");
+    Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
+    return api.createService(apiKey, apiSecret, callback);
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/Api.java b/src/main/java/org/scribe/builder/api/Api.java
new file mode 100644
index 0000000..50d6d45
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/Api.java
@@ -0,0 +1,23 @@
+package org.scribe.builder.api;
+
+import org.scribe.oauth.*;
+
+/**
+ * Contains all the configuration needed to instantiate a valid {@link OAuthService}
+ * 
+ * @author Pablo Fernandez
+ *
+ */
+public interface Api
+{  
+  /**
+   * Creates an {@link OAuthService}
+   * 
+   * @param apiKey your application api key
+   * @param apiSecret your application api secret
+   * @param callback the callback url (or 'oob' for out of band OAuth)
+   * 
+   * @return fully configured {@link OAuthService}
+   */
+  OAuthService createService(String apiKey, String apiSecret, String callback);
+}
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
new file mode 100644
index 0000000..12413a7
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -0,0 +1,80 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.model.OAuthConfig;
+import org.scribe.model.Request.Verb;
+import org.scribe.oauth.OAuth10aServiceImpl;
+import org.scribe.oauth.OAuthService;
+import org.scribe.services.*;
+
+public abstract class DefaultApi10a implements Api
+{
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new TokenExtractorImpl();
+  }
+
+  public BaseStringExtractor getBaseStringExtractor()
+  {
+    return new BaseStringExtractorImpl();
+  }
+
+  public HeaderExtractor getHeaderExtractor()
+  {
+    return new HeaderExtractorImpl();
+  }
+
+  public RequestTokenExtractor getRequestTokenExtractor()
+  {
+    return new TokenExtractorImpl();
+  }
+
+  public SignatureService getSignatureService()
+  {
+    return new HMACSha1SignatureService(); 
+  }
+
+  public TimestampService getTimestampService()
+  {
+    return new TimestampServiceImpl();
+  }
+  
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.POST;
+  }
+  
+  public Verb getRequestTokenVerb()
+  {
+    return Verb.POST;
+  }
+  
+  public abstract String getRequestTokenEndpoint();
+  public abstract String getAccessTokenEndpoint();
+  
+  @Override
+  public OAuthService createService(String apiKey, String apiSecret, String callback)
+  {
+    return new OAuth10aServiceImpl( getSignatureService(), 
+                                    getTimestampService(), 
+                                    getBaseStringExtractor(), 
+                                    getHeaderExtractor(), 
+                                    getRequestTokenExtractor(), 
+                                    getAccessTokenExtractor(), 
+                                    createConfig(apiKey, apiSecret, callback));
+  }
+
+  private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
+  {
+    OAuthConfig config = new OAuthConfig();
+    config.setRequestTokenVerb(getRequestTokenVerb());
+    config.setRequestTokenEndpoint(getRequestTokenEndpoint());
+    config.setAccessTokenVerb(getAccessTokenVerb());
+    config.setAccessTokenEndpoint(getAccessTokenEndpoint());
+    config.setApiKey(apiKey);
+    config.setApiSecret(apiSecret);
+    config.setCallback(callback);
+    return config;
+  }
+
+}
diff --git a/src/main/java/org/scribe/builder/api/FoursquareApi.java b/src/main/java/org/scribe/builder/api/FoursquareApi.java
new file mode 100644
index 0000000..a48b6ee
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/FoursquareApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class FoursquareApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
new file mode 100644
index 0000000..5ce3c45
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class GoogleApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
new file mode 100644
index 0000000..bf31010
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -0,0 +1,27 @@
+package org.scribe.builder.api;
+
+import org.scribe.extensions.linkedin.*;
+import org.scribe.extractors.*;
+
+public class LinkedInApi extends DefaultApi10a
+{
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.linkedin.com/uas/oauth/accessToken";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.linkedin.com/uas/oauth/requestToken";
+  }
+  
+  @Override
+  public BaseStringExtractor getBaseStringExtractor()
+  {
+    return new LinkedInBaseStringExtractorImpl();
+  }
+
+}
diff --git a/src/main/java/org/scribe/builder/api/SalesForceApi.java b/src/main/java/org/scribe/builder/api/SalesForceApi.java
new file mode 100644
index 0000000..c50b832
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SalesForceApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class SalesForceApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://login.salesforce.com/_nc_external/system/security/oauth/AccessTokenHandler";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://login.salesforce.com/_nc_external/system/security/oauth/RequestTokenHandler";
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
new file mode 100644
index 0000000..e8b65ca
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class TwitterApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://twitter.com/oauth/access_token";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://twitter.com/oauth/request_token";
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/YahooApi.java b/src/main/java/org/scribe/builder/api/YahooApi.java
new file mode 100644
index 0000000..5767905
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/YahooApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class YahooApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.login.yahoo.com/oauth/v2/get_token";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.login.yahoo.com/oauth/v2/get_request_token";
+  }
+}
diff --git a/src/main/java/org/scribe/exceptions/OAuthException.java b/src/main/java/org/scribe/exceptions/OAuthException.java
new file mode 100644
index 0000000..78e41a4
--- /dev/null
+++ b/src/main/java/org/scribe/exceptions/OAuthException.java
@@ -0,0 +1,18 @@
+package org.scribe.exceptions;
+
+public class OAuthException extends RuntimeException
+{
+
+  public OAuthException(String message, Exception e)
+  {
+    super(message, e);
+  }
+
+  public OAuthException(String message)
+  {
+    super(message, null);
+  }
+
+  private static final long serialVersionUID = 1L;
+
+}
diff --git a/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java b/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java
new file mode 100644
index 0000000..8eb3f14
--- /dev/null
+++ b/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java
@@ -0,0 +1,16 @@
+package org.scribe.exceptions;
+
+import org.scribe.model.*;
+
+public class OAuthParametersMissingException extends OAuthException
+{
+
+  private static final long serialVersionUID = 1745308760111976671L;
+  private static final String MSG = "Could not find oauth parameters in request: %s. "
+      + "OAuth parameters must be specified with the addOAuthParameter() method";
+
+  public OAuthParametersMissingException(OAuthRequest request)
+  {
+    super(String.format(MSG, request));
+  }
+}
diff --git a/src/main/java/org/scribe/exceptions/OAuthSignatureException.java b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
new file mode 100644
index 0000000..765c10a
--- /dev/null
+++ b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
@@ -0,0 +1,12 @@
+package org.scribe.exceptions;
+
+public class OAuthSignatureException extends OAuthException
+{
+  private static final long serialVersionUID = 1L;
+  
+  public OAuthSignatureException(String stringToSign, Exception e)
+  {
+    super("Error while signing string: " + stringToSign, e);
+  }
+
+}
diff --git a/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java b/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
new file mode 100644
index 0000000..29572bc
--- /dev/null
+++ b/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
@@ -0,0 +1,15 @@
+package org.scribe.extensions.linkedin;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+
+public class LinkedInBaseStringExtractorImpl extends BaseStringExtractorImpl
+{
+
+  @Override
+  public String extract(OAuthRequest request)
+  {
+    String baseString = super.extract(request);
+    return baseString.replace("%7E", "~");
+  }
+}
diff --git a/src/main/java/org/scribe/extractors/AccessTokenExtractor.java b/src/main/java/org/scribe/extractors/AccessTokenExtractor.java
new file mode 100644
index 0000000..1754851
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/AccessTokenExtractor.java
@@ -0,0 +1,8 @@
+package org.scribe.extractors;
+
+import org.scribe.model.*;
+
+public interface AccessTokenExtractor
+{
+  public Token extract(String response);
+}
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractor.java b/src/main/java/org/scribe/extractors/BaseStringExtractor.java
new file mode 100644
index 0000000..3ea180c
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractor.java
@@ -0,0 +1,8 @@
+package org.scribe.extractors;
+
+import org.scribe.model.*;
+
+public interface BaseStringExtractor
+{
+  String extract(OAuthRequest request);
+}
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
new file mode 100644
index 0000000..4bbf20f
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -0,0 +1,42 @@
+package org.scribe.extractors;
+
+import java.util.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class BaseStringExtractorImpl implements BaseStringExtractor
+{
+
+  private static final String AMPERSAND_SEPARATED_STRING = "%s&%s&%s";
+
+  public String extract(OAuthRequest request)
+  {
+    checkPreconditions(request);
+    String verb = URLUtils.percentEncode(request.getVerb().name());
+    String url = URLUtils.percentEncode(request.getSanitizedUrl());
+    String params = getSortedAndEncodedParams(request);
+    return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
+  }
+
+  private String getSortedAndEncodedParams(OAuthRequest request)
+  {
+    Map<String, String> params = new HashMap<String, String>();
+    params.putAll(request.getQueryStringParams());
+    params.putAll(request.getBodyParams());
+    params.putAll(request.getOauthParameters());
+    params = MapUtils.sort(params);
+    return URLUtils.percentEncode(URLUtils.formURLEncodeMap(params));
+  }
+
+  private void checkPreconditions(OAuthRequest request)
+  {
+    Preconditions.checkNotNull(request, "Cannot extract base string from null object");
+
+    if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0)
+    {
+      throw new OAuthParametersMissingException(request);
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractor.java b/src/main/java/org/scribe/extractors/HeaderExtractor.java
new file mode 100644
index 0000000..8169422
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/HeaderExtractor.java
@@ -0,0 +1,8 @@
+package org.scribe.extractors;
+
+import org.scribe.model.*;
+
+public interface HeaderExtractor
+{
+  String extract(OAuthRequest request);
+}
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
new file mode 100644
index 0000000..a567711
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -0,0 +1,46 @@
+package org.scribe.extractors;
+
+import java.util.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class HeaderExtractorImpl implements HeaderExtractor
+{
+
+  private static final String PREAMBLE = "OAuth ";
+
+  public String extract(OAuthRequest request)
+  {
+    checkPreconditions(request);
+    Map<String, String> parameters = request.getOauthParameters();
+    StringBuffer header = new StringBuffer();
+    header.append(PREAMBLE);
+    for (String key : parameters.keySet())
+    {
+      addToHeader(header, key, parameters.get(key));
+    }
+    return removeTrail(header);
+  }
+
+  private void checkPreconditions(OAuthRequest request)
+  {
+    Preconditions.checkNotNull(request, "Cannot extract a header from a null object");
+
+    if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0)
+    {
+      throw new OAuthParametersMissingException(request);
+    }
+  }
+
+  private void addToHeader(StringBuffer header, String name, String value)
+  {
+    header.append(String.format("%s=\"%s\", ", name, URLUtils.percentEncode(value)));
+  }
+
+  private String removeTrail(StringBuffer header)
+  {
+    return header.toString().substring(0, header.length() - 2);
+  }
+}
diff --git a/src/main/java/org/scribe/extractors/RequestTokenExtractor.java b/src/main/java/org/scribe/extractors/RequestTokenExtractor.java
new file mode 100644
index 0000000..696c389
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/RequestTokenExtractor.java
@@ -0,0 +1,9 @@
+package org.scribe.extractors;
+
+import org.scribe.model.*;
+
+public interface RequestTokenExtractor
+{
+
+  public Token extract(String response);
+}
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
new file mode 100644
index 0000000..0147957
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -0,0 +1,29 @@
+package org.scribe.extractors;
+
+import java.util.regex.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExtractor
+{
+
+  private static final String TOKEN_REGEX = "oauth_token=(\\S*)&oauth_token_secret=(\\S*?)(&(.*))?";
+
+  public Token extract(String response)
+  {
+    Preconditions.checkEmptyString(response, "Cant extract a token from null object or an empty string.");
+
+    Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
+    if (matcher.matches())
+    {
+      String token = URLUtils.percentDecode(matcher.group(1));
+      String secret = URLUtils.percentDecode(matcher.group(2));
+      return new Token(token, secret);
+    } else
+    {
+      throw new OAuthException("Could not find request token or secret in response: " + response, null);
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
new file mode 100644
index 0000000..d2d94cc
--- /dev/null
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -0,0 +1,85 @@
+package org.scribe.model;
+
+import org.scribe.model.Request.*;
+
+public class OAuthConfig
+{
+  private String apiKey;
+  private String apiSecret;
+  private String callback;
+  private String requestTokenEndpoint;
+  private String accessTokenEndpoint;
+  private Verb requestTokenVerb;
+  private Verb accessTokenVerb;
+
+  public String getApiKey()
+  {
+    return apiKey;
+  }
+
+  public void setApiKey(String apiKey)
+  {
+    this.apiKey = apiKey;
+  }
+
+  public String getApiSecret()
+  {
+    return apiSecret;
+  }
+
+  public void setApiSecret(String apiSecret)
+  {
+    this.apiSecret = apiSecret;
+  }
+
+  public String getCallback()
+  {
+    return callback != null ? callback : OAuthConstants.OUT_OF_BAND;
+  }
+
+  public void setCallback(String callback)
+  {
+    this.callback = callback;
+  }
+
+  public String getRequestTokenEndpoint()
+  {
+    return requestTokenEndpoint;
+  }
+
+  public void setRequestTokenEndpoint(String requestTokenEndpoint)
+  {
+    this.requestTokenEndpoint = requestTokenEndpoint;
+  }
+
+  public String getAccessTokenEndpoint()
+  {
+    return accessTokenEndpoint;
+  }
+
+  public void setAccessTokenEndpoint(String accessTokenEndpoint)
+  {
+    this.accessTokenEndpoint = accessTokenEndpoint;
+  }
+
+  public Verb getRequestTokenVerb()
+  {
+    return requestTokenVerb != null ? requestTokenVerb : Verb.GET;
+  }
+
+  public void setRequestTokenVerb(Verb requestTokenVerb)
+  {
+    this.requestTokenVerb = requestTokenVerb;
+  }
+
+  public Verb getAccessTokenVerb()
+  {
+    return accessTokenVerb != null ? accessTokenVerb : Verb.GET;
+  }
+
+  public void setAccessTokenVerb(Verb accessTokenVerb)
+  {
+    this.accessTokenVerb = accessTokenVerb;
+  }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
new file mode 100644
index 0000000..51ac9a3
--- /dev/null
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -0,0 +1,41 @@
+/* 
+Copyright 2010 Pablo Fernandez
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+ */
+package org.scribe.model;
+
+/**
+ * This class contains OAuth constants, used project-wide
+ * 
+ * @author Pablo Fernandez
+ * 
+ */
+public class OAuthConstants
+{
+  public static final String TIMESTAMP = "oauth_timestamp";
+  public static final String SIGN_METHOD = "oauth_signature_method";
+  public static final String SIGNATURE = "oauth_signature";
+  public static final String CONSUMER_SECRET = "oauth_consumer_secret";
+  public static final String CONSUMER_KEY = "oauth_consumer_key";
+  public static final String CALLBACK = "oauth_callback";
+  public static final String VERSION = "oauth_version";
+  public static final String NONCE = "oauth_nonce";
+  public static final String PARAM_PREFIX = "oauth_";
+  public static final String TOKEN = "oauth_token";
+  public static final String TOKEN_SECRET = "oauth_token_secret";
+  public static final String OUT_OF_BAND = "oob";
+  public static final String VERIFIER = "oauth_verifier";
+  public static final String HEADER = "Authorization";
+  public static final Token EMPTY_TOKEN = new Token("", "");
+}
diff --git a/src/main/java/org/scribe/model/OAuthParams.java b/src/main/java/org/scribe/model/OAuthParams.java
new file mode 100644
index 0000000..f261307
--- /dev/null
+++ b/src/main/java/org/scribe/model/OAuthParams.java
@@ -0,0 +1,6 @@
+package org.scribe.model;
+
+public class OAuthParams
+{
+
+}
diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
new file mode 100644
index 0000000..0e4041a
--- /dev/null
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -0,0 +1,43 @@
+package org.scribe.model;
+
+import java.util.*;
+
+public class OAuthRequest extends Request
+{
+
+  private static final String OAUTH_PREFIX = "oauth_";
+  private Map<String, String> oauthParameters;
+
+  public OAuthRequest(Verb verb, String url)
+  {
+    super(verb, url);
+    this.oauthParameters = new HashMap<String, String>();
+  }
+
+  public void addOAuthParameter(String key, String value)
+  {
+    oauthParameters.put(checkKey(key), value);
+  }
+
+  private String checkKey(String key)
+  {
+    if (!key.startsWith(OAUTH_PREFIX))
+    {
+      throw new IllegalArgumentException(String.format("OAuth parameters must start with '%s'", OAUTH_PREFIX));
+    } else
+    {
+      return key;
+    }
+  }
+
+  public Map<String, String> getOauthParameters()
+  {
+    return oauthParameters;
+  }
+
+  @Override
+  public String toString()
+  {
+    return String.format("@OAuthRequest(%s, %s)", getVerb(), getUrl());
+  }
+}
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
new file mode 100644
index 0000000..852698e
--- /dev/null
+++ b/src/main/java/org/scribe/model/Request.java
@@ -0,0 +1,217 @@
+package org.scribe.model;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.utils.*;
+
+/**
+ * Represents an HTTP Request object
+ * 
+ * @author Pablo Fernandez
+ */
+public class Request
+{
+
+  private static final String CONTENT_LENGTH = "Content-Length";
+
+  private String url;
+  private Verb verb;
+  private Map<String, String> bodyParams;
+  private Map<String, String> headers;
+  private String payload = null;
+  private HttpURLConnection connection;
+
+  public Request(Verb verb, String url)
+  {
+    this.verb = verb;
+    this.url = url;
+    this.bodyParams = new HashMap<String, String>();
+    this.headers = new HashMap<String, String>();
+    try
+    {
+      this.connection = (HttpURLConnection) new URL(url).openConnection();
+    } catch (IOException ioe)
+    {
+      throw new OAuthException("Could not open connection to: " + url, ioe);
+    }
+  }
+
+  /**
+   * Execute the request and return a {@link Response}
+   * 
+   * @return Http Response
+   * @throws RuntimeException
+   *           if the connection cannot be created.
+   */
+  public Response send()
+  {
+    try
+    {
+      return doSend();
+    } catch (IOException ioe)
+    {
+      throw new OAuthException("Problems while creating connection", ioe);
+    }
+  }
+
+  Response doSend() throws IOException
+  {
+    connection.setRequestMethod(this.verb.name());
+    addHeaders(connection);
+    if (verb.equals(Verb.PUT) || verb.equals(Verb.POST))
+    {
+      addBody(connection, getBodyContents());
+    }
+    return new Response(connection);
+  }
+
+  void addHeaders(HttpURLConnection conn)
+  {
+    for (String key : headers.keySet())
+      conn.setRequestProperty(key, headers.get(key));
+  }
+
+  void addBody(HttpURLConnection conn, String content) throws IOException
+  {
+    conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.getBytes().length));
+    conn.setDoOutput(true);
+    conn.getOutputStream().write(content.getBytes());
+  }
+
+  /**
+   * Add an HTTP Header to the Request
+   * 
+   * @param name
+   * @param value
+   */
+  public void addHeader(String key, String value)
+  {
+    this.headers.put(key, value);
+  }
+
+  /**
+   * Add a body Parameter (for POST/ PUT Requests)
+   * 
+   * @param name
+   * @param value
+   */
+  public void addBodyParameter(String key, String value)
+  {
+    this.bodyParams.put(key, value);
+  }
+
+  /**
+   * Add body payload.
+   * 
+   * This method is used when the HTTP body is not a form-url-encoded string,
+   * but another thing. Like for example XML.
+   * 
+   * Note: The contents are not part of the OAuth signature
+   * 
+   * @param payload
+   */
+  public void addPayload(String payload)
+  {
+    this.payload = payload;
+  }
+
+  /**
+   * Get a {@link Map} of the query string parameters.
+   * 
+   * @return a map containing the query string parameters
+   */
+  public Map<String, String> getQueryStringParams()
+  {
+    try
+    {
+      Map<String, String> params = new HashMap<String, String>();
+      String query = new URL(url).getQuery();
+      if (query != null)
+      {
+        for (String param : query.split("&"))
+        {
+          String pair[] = param.split("=");
+          params.put(pair[0], pair[1]);
+        }
+      }
+      return params;
+    } catch (MalformedURLException mue)
+    {
+      throw new OAuthException("Malformed URL", mue);
+    }
+  }
+
+  /**
+   * Obtains a {@link Map} of the body parameters.
+   * 
+   * @return a map containing the body parameters.
+   */
+  public Map<String, String> getBodyParams()
+  {
+    return bodyParams;
+  }
+
+  /**
+   * Obtains the URL of the HTTP Request.
+   * 
+   * @return the original URL of the HTTP Request
+   */
+  public String getUrl()
+  {
+    return url;
+  }
+
+  /**
+   * Returns the URL without the port and the query string part.
+   * 
+   * @return the OAuth-sanitized URL
+   */
+  public String getSanitizedUrl()
+  {
+    return url.replaceAll("\\?.*", "").replace("\\:\\d{4}", "");
+  }
+
+  public String getBodyContents()
+  {
+    return (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
+  }
+
+  /**
+   * Returns the HTTP Verb
+   * 
+   * @return the verb
+   */
+  public Verb getVerb()
+  {
+    return verb;
+  }
+
+  public Map<String, String> getHeaders()
+  {
+    return headers;
+  }
+
+  void setConnection(HttpURLConnection connection)
+  {
+    this.connection = connection;
+  }
+
+  @Override
+  public String toString()
+  {
+    return String.format("@Request(%s %s)", getVerb(), getUrl());
+  }
+
+  /**
+   * An enumeration containing the most common HTTP Verbs.
+   * 
+   * @author Pablo Fernandez
+   */
+  public static enum Verb
+  {
+    GET, POST, PUT, DELETE
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
new file mode 100644
index 0000000..536225f
--- /dev/null
+++ b/src/main/java/org/scribe/model/Response.java
@@ -0,0 +1,119 @@
+package org.scribe.model;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+import org.scribe.utils.*;
+
+/**
+ * Represents an HTTP Response.
+ * 
+ * @author Pablo Fernandez
+ */
+public class Response
+{
+
+  private static final String EMPTY = "";
+
+  private int code;
+  private String body;
+  private InputStream stream;
+  private Map<String, String> headers;
+
+  Response(HttpURLConnection connection) throws IOException
+  {
+    try
+    {
+      connection.connect();
+      code = connection.getResponseCode();
+      headers = parseHeaders(connection);
+      stream = wasSuccessful() ? connection.getInputStream() : connection.getErrorStream();
+    } catch (UnknownHostException e)
+    {
+      code = 404;
+      body = EMPTY;
+    }
+  }
+
+  private String parseBodyContents()
+  {
+    body = StreamUtils.getStreamContents(getStream());
+    return body;
+  }
+
+  private Map<String, String> parseHeaders(HttpURLConnection conn)
+  {
+    Map<String, String> headers = new HashMap<String, String>();
+    for (String key : conn.getHeaderFields().keySet())
+    {
+      headers.put(key, conn.getHeaderFields().get(key).get(0));
+    }
+    return headers;
+  }
+
+  /**
+   * Checks if the code is in the successful or redirect range.
+   * 
+   * @return true if successful
+   */
+  private boolean wasSuccessful()
+  {
+    return getCode() >= 200 && getCode() < 400;
+  }
+
+  /**
+   * Obtains the HTTP Response body
+   * 
+   * @return response body
+   */
+  public String getBody()
+  {
+    return body != null ? body : parseBodyContents();
+  }
+
+  /**
+   * Obtains the meaningful stream of the HttpUrlConnection, either inputStream
+   * or errorInputStream, depending on the status code
+   * 
+   * @return input stream / error stream
+   */
+  public InputStream getStream()
+  {
+    return stream;
+  }
+
+  /**
+   * Obtains the HTTP status code
+   * 
+   * @return the status code
+   */
+  public int getCode()
+  {
+    return code;
+  }
+
+  /**
+   * Obtains a {@link Map} containing the HTTP Response Headers
+   * 
+   * @return headers
+   */
+  public Map<String, String> getHeaders()
+  {
+    return headers;
+  }
+
+  /**
+   * Obtains a single HTTP Header value, or null if undefined
+   * 
+   * @param header
+   *          name
+   * 
+   * @return header value or null
+   */
+  public String getHeader(String name)
+  {
+    return headers.get(name);
+  }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
new file mode 100644
index 0000000..ee33391
--- /dev/null
+++ b/src/main/java/org/scribe/model/Token.java
@@ -0,0 +1,30 @@
+package org.scribe.model;
+
+public class Token
+{
+
+  private final String token;
+  private final String secret;
+
+  public Token(String token, String secret)
+  {
+    this.token = token;
+    this.secret = secret;
+  }
+
+  public String getToken()
+  {
+    return token;
+  }
+
+  public String getSecret()
+  {
+    return secret;
+  }
+
+  @Override
+  public String toString()
+  {
+    return String.format("Token[%s , %s]", token, secret);
+  }
+}
diff --git a/src/main/java/org/scribe/model/Verifier.java b/src/main/java/org/scribe/model/Verifier.java
new file mode 100644
index 0000000..512ac00
--- /dev/null
+++ b/src/main/java/org/scribe/model/Verifier.java
@@ -0,0 +1,17 @@
+package org.scribe.model;
+
+public class Verifier
+{
+
+  private final String value;
+
+  public Verifier(String value)
+  {
+    this.value = value;
+  }
+
+  public String getValue()
+  {
+    return value;
+  }
+}
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
new file mode 100644
index 0000000..5545cc9
--- /dev/null
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -0,0 +1,86 @@
+package org.scribe.oauth;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.services.*;
+
+public class OAuth10aServiceImpl implements OAuthService
+{
+
+  private static final String VERSION = "1.0";
+
+  private OAuthConfig config;
+  private SignatureService signatureService;
+  private TimestampService timestampService;
+  private BaseStringExtractor baseStringExtractor;
+  private HeaderExtractor headerExtractor;
+  private RequestTokenExtractor rtExtractor;
+  private AccessTokenExtractor atExtractor;
+
+  public OAuth10aServiceImpl(SignatureService signatureService, TimestampService timestampService, BaseStringExtractor baseStringExtractor,
+      HeaderExtractor headerExtractor, RequestTokenExtractor rtExtractor, AccessTokenExtractor atExtractor, OAuthConfig config)
+  {
+    this.signatureService = signatureService;
+    this.timestampService = timestampService;
+    this.baseStringExtractor = baseStringExtractor;
+    this.headerExtractor = headerExtractor;
+    this.rtExtractor = rtExtractor;
+    this.atExtractor = atExtractor;
+    this.config = config;
+  }
+
+  public Token getRequestToken()
+  {
+    OAuthRequest request = new OAuthRequest(config.getRequestTokenVerb(), config.getRequestTokenEndpoint());
+    addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
+    addOAuthHeader(request);
+    Response response = request.send();
+    return rtExtractor.extract(response.getBody());
+  }
+
+  private void addOAuthParams(OAuthRequest request, Token token)
+  {
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, timestampService.getTimestampInSeconds());
+    request.addOAuthParameter(OAuthConstants.NONCE, timestampService.getNonce());
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());
+    request.addOAuthParameter(OAuthConstants.SIGN_METHOD, signatureService.getSignatureMethod());
+    request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
+    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
+  }
+
+  public Token getAccessToken(Token requestToken, Verifier verifier)
+  {
+    OAuthRequest request = new OAuthRequest(config.getAccessTokenVerb(), config.getAccessTokenEndpoint());
+    request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
+    request.addOAuthParameter(OAuthConstants.VERIFIER, verifier.getValue());
+    addOAuthParams(request, requestToken);
+    addOAuthHeader(request);
+    Response response = request.send();
+    return atExtractor.extract(response.getBody());
+  }
+
+  public void signRequest(Token token, OAuthRequest request)
+  {
+    request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
+    addOAuthParams(request, token);
+    addOAuthHeader(request);
+  }
+
+  public String getVersion()
+  {
+    return VERSION;
+  }
+
+  private String getSignature(OAuthRequest request, Token token)
+  {
+    String baseString = baseStringExtractor.extract(request);
+    return signatureService.getSignature(baseString, config.getApiSecret(), token.getSecret());
+  }
+
+  private void addOAuthHeader(OAuthRequest request)
+  {
+    String oauthHeader = headerExtractor.extract(request);
+    request.addHeader(OAuthConstants.HEADER, oauthHeader);
+  }
+}
diff --git a/src/main/java/org/scribe/oauth/OAuthService.java b/src/main/java/org/scribe/oauth/OAuthService.java
new file mode 100644
index 0000000..50db621
--- /dev/null
+++ b/src/main/java/org/scribe/oauth/OAuthService.java
@@ -0,0 +1,14 @@
+package org.scribe.oauth;
+
+import org.scribe.model.*;
+
+public interface OAuthService
+{
+  public Token getRequestToken();
+
+  public Token getAccessToken(Token requestToken, Verifier verifier);
+
+  public void signRequest(Token accessToken, OAuthRequest request);
+
+  public String getVersion();
+}
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
new file mode 100644
index 0000000..94db9c3
--- /dev/null
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -0,0 +1,46 @@
+package org.scribe.services;
+
+import javax.crypto.*;
+import javax.crypto.spec.*;
+
+import org.apache.commons.codec.binary.*;
+import org.scribe.exceptions.*;
+import org.scribe.utils.*;
+
+public class HMACSha1SignatureService implements SignatureService
+{
+
+  private static final String EMPTY_STRING = "";
+  private static final String CARRIAGE_RETURN = "\r\n";
+  private static final String UTF8 = "UTF-8";
+  private static final String HMAC_SHA1 = "HmacSHA1";
+  private static final String METHOD = "HMAC-SHA1";
+
+  public String getSignature(String baseString, String apiSecret, String tokenSecret)
+  {
+    try
+    {
+      Preconditions.checkEmptyString(baseString, "Base string cant be null or empty string");
+      Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
+      return doSign(baseString, apiSecret + '&' + tokenSecret);
+    } 
+    catch (Exception e)
+    {
+      throw new OAuthSignatureException(baseString, e);
+    }
+  }
+
+  private String doSign(String toSign, String keyString) throws Exception
+  {
+    SecretKeySpec key = new SecretKeySpec((keyString).getBytes(UTF8), HMAC_SHA1);
+    Mac mac = Mac.getInstance(HMAC_SHA1);
+    mac.init(key);
+    byte[] bytes = mac.doFinal(toSign.getBytes(UTF8));
+    return new String(Base64.encodeBase64(bytes)).replace(CARRIAGE_RETURN, EMPTY_STRING);
+  }
+
+  public String getSignatureMethod()
+  {
+    return METHOD;
+  }
+}
diff --git a/src/main/java/org/scribe/services/SignatureService.java b/src/main/java/org/scribe/services/SignatureService.java
new file mode 100644
index 0000000..fddf285
--- /dev/null
+++ b/src/main/java/org/scribe/services/SignatureService.java
@@ -0,0 +1,8 @@
+package org.scribe.services;
+
+public interface SignatureService
+{
+  public String getSignature(String baseString, String apiSecret, String tokenSecret);
+
+  public String getSignatureMethod();
+}
diff --git a/src/main/java/org/scribe/services/TimestampService.java b/src/main/java/org/scribe/services/TimestampService.java
new file mode 100644
index 0000000..ada540b
--- /dev/null
+++ b/src/main/java/org/scribe/services/TimestampService.java
@@ -0,0 +1,9 @@
+package org.scribe.services;
+
+public interface TimestampService
+{
+
+  public String getTimestampInSeconds();
+
+  public String getNonce();
+}
diff --git a/src/main/java/org/scribe/services/TimestampServiceImpl.java b/src/main/java/org/scribe/services/TimestampServiceImpl.java
new file mode 100644
index 0000000..894e07b
--- /dev/null
+++ b/src/main/java/org/scribe/services/TimestampServiceImpl.java
@@ -0,0 +1,49 @@
+package org.scribe.services;
+
+import java.util.*;
+
+public class TimestampServiceImpl implements TimestampService
+{
+
+  private Timer timer;
+
+  public TimestampServiceImpl()
+  {
+    timer = new Timer();
+  }
+
+  public String getNonce()
+  {
+    Long ts = getTs();
+    return String.valueOf(ts + timer.getRandomInteger());
+  }
+
+  public String getTimestampInSeconds()
+  {
+    return String.valueOf(getTs());
+  }
+
+  private Long getTs()
+  {
+    return timer.getMilis() / 1000;
+  }
+
+  void setTimer(Timer timer)
+  {
+    this.timer = timer;
+  }
+
+  static class Timer
+  {
+    public Long getMilis()
+    {
+      return System.currentTimeMillis();
+    }
+
+    public Integer getRandomInteger()
+    {
+      return new Random().nextInt();
+    }
+  }
+
+}
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
new file mode 100644
index 0000000..011d880
--- /dev/null
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -0,0 +1,26 @@
+package org.scribe.utils;
+
+import java.util.*;
+
+public class MapUtils
+{
+
+  public static final Map<String, String> sort(Map<String, String> map)
+  {
+    Preconditions.checkNotNull(map, "Cannot sort a null object.");
+
+    Map<String, String> sorted = new LinkedHashMap<String, String>();
+    for (String key : getSortedKeys(map))
+    {
+      sorted.put(key, map.get(key));
+    }
+    return sorted;
+  }
+
+  private static List<String> getSortedKeys(Map<String, String> map)
+  {
+    List<String> keys = new ArrayList<String>(map.keySet());
+    Collections.sort(keys);
+    return keys;
+  }
+}
diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
new file mode 100644
index 0000000..1370273
--- /dev/null
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -0,0 +1,48 @@
+package org.scribe.utils;
+
+import org.scribe.model.OAuthConstants;
+
+public class Preconditions
+{
+  private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
+
+  public static void checkNotNull(Object object, String errorMsg)
+  {
+    check(object != null, errorMsg);
+  }
+
+  public static void checkEmptyString(String string, String errorMsg)
+  {
+    check(string != null && !string.trim().isEmpty(), errorMsg);
+  }
+
+  public static void checkValidUrl(String url, String errorMsg)
+  {
+    checkEmptyString(url, errorMsg);
+    check(isUrl(url), errorMsg);
+  }
+  
+  public static void checkValidOAuthCallback(String url, String errorMsg)
+  {
+    checkEmptyString(url, errorMsg);
+    if(url.toLowerCase().compareToIgnoreCase(OAuthConstants.OUT_OF_BAND) != 0)
+    {
+      check(isUrl(url), errorMsg);  
+    }
+  }
+  
+  static boolean isUrl(String url)
+  {
+    return url.startsWith("http://") || url.startsWith("https://");
+  }
+  
+  private static void check(boolean requirements, String error)
+  {
+    String message = (error == null || error.trim().isEmpty()) ? DEFAULT_MESSAGE : error;
+    if (!requirements)
+    {
+      throw new IllegalArgumentException(message);
+    }
+  }
+  
+}
diff --git a/src/main/java/org/scribe/utils/StreamUtils.java b/src/main/java/org/scribe/utils/StreamUtils.java
new file mode 100644
index 0000000..20c477e
--- /dev/null
+++ b/src/main/java/org/scribe/utils/StreamUtils.java
@@ -0,0 +1,32 @@
+package org.scribe.utils;
+
+import java.io.*;
+
+public class StreamUtils
+{
+
+  public static String getStreamContents(InputStream is)
+  {
+    Preconditions.checkNotNull(is, "Cannot get String from a null object");
+    try
+    {
+      final char[] buffer = new char[0x10000];
+      StringBuilder out = new StringBuilder();
+      Reader in = new InputStreamReader(is, "UTF-8");
+      int read;
+      do
+      {
+        read = in.read(buffer, 0, buffer.length);
+        if (read > 0)
+        {
+          out.append(buffer, 0, read);
+        }
+      } while (read >= 0);
+      in.close();
+      return out.toString();
+    } catch (IOException ioe)
+    {
+      throw new RuntimeException("Error while reading response body", ioe);
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
new file mode 100644
index 0000000..7b58b0a
--- /dev/null
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -0,0 +1,63 @@
+package org.scribe.utils;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+import org.scribe.exceptions.*;
+
+public class URLUtils
+{
+
+  private static final String EMPTY_STRING = "";
+  private static final String UTF_8 = "UTF-8";
+  private static final char PAIR_SEPARATOR = '=';
+  private static final char PARAM_SEPARATOR = '&';
+
+  private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
+
+  public static String formURLEncodeMap(Map<String, String> map)
+  {
+    Preconditions.checkNotNull(map, "Cannot url-encode a null object");
+    return (map.size() <= 0) ? EMPTY_STRING : doFormUrlEncode(map);
+  }
+
+  private static String doFormUrlEncode(Map<String, String> map)
+  {
+    StringBuffer encodedString = new StringBuffer();
+    for (String key : map.keySet())
+    {
+      encodedString.append(percentEncode(key)).append(PAIR_SEPARATOR).append(percentEncode(map.get(key))).append(PARAM_SEPARATOR);
+    }
+    return removeTrailingSeparator(encodedString);
+  }
+
+  private static String removeTrailingSeparator(StringBuffer buffer)
+  {
+    return buffer.toString().substring(0, buffer.length() - 1);
+  }
+
+  public static String percentEncode(String string)
+  {
+    Preconditions.checkNotNull(string, "Cannot encode null string");
+    try
+    {
+      return URLEncoder.encode(string, UTF_8);
+    } catch (UnsupportedEncodingException uee)
+    {
+      throw new OAuthException(ERROR_MSG, uee);
+    }
+  }
+
+  public static String percentDecode(String string)
+  {
+    Preconditions.checkNotNull(string, "Cannot decode null string");
+    try
+    {
+      return URLDecoder.decode(string, UTF_8);
+    } catch (UnsupportedEncodingException uee)
+    {
+      throw new OAuthException(ERROR_MSG, uee);
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
new file mode 100644
index 0000000..e63a7c6
--- /dev/null
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -0,0 +1,45 @@
+package org.scribe.extractors;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.test.helpers.*;
+
+public class BaseStringExtractorTest
+{
+
+  private BaseStringExtractorImpl extractor;
+  private OAuthRequest request;
+
+  @Before
+  public void setup()
+  {
+    request = ObjectMother.createSampleOAuthRequest();
+    extractor = new BaseStringExtractorImpl();
+  }
+
+  @Test
+  public void shouldExtractBaseStringFromOAuthRequest()
+  {
+    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(request);
+    assertEquals(expected, baseString);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfRquestIsNull()
+  {
+    OAuthRequest nullRequest = null;
+    extractor.extract(nullRequest);
+  }
+
+  @Test(expected = OAuthParametersMissingException.class)
+  public void shouldThrowExceptionIfRquestHasNoOAuthParameters()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com");
+    extractor.extract(request);
+  }
+}
diff --git a/src/test/java/org/scribe/extractors/HeaderExtractorTest.java b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
new file mode 100644
index 0000000..ace4a24
--- /dev/null
+++ b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
@@ -0,0 +1,46 @@
+package org.scribe.extractors;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.test.helpers.*;
+
+public class HeaderExtractorTest
+{
+
+  private HeaderExtractorImpl extractor;
+  private OAuthRequest request;
+
+  @Before
+  public void setup()
+  {
+    request = ObjectMother.createSampleOAuthRequest();
+    extractor = new HeaderExtractorImpl();
+  }
+
+  @Test
+  public void shouldExtractStandardHeader()
+  {
+    String expected = "OAuth oauth_callback=\"http%3A%2F%2Fexample%2Fcallback\", " + "oauth_signature=\"OAuth-Signature\", "
+        + "oauth_consumer_key=\"AS%23%24%5E*%40%26\", " + "oauth_timestamp=\"123456\"";
+    String header = extractor.extract(request);
+    assertEquals(expected, header);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldExceptionIfRequestIsNull()
+  {
+    OAuthRequest nullRequest = null;
+    extractor.extract(nullRequest);
+  }
+
+  @Test(expected = OAuthParametersMissingException.class)
+  public void shouldExceptionIfRequestHasNoOAuthParams()
+  {
+    OAuthRequest emptyRequest = new OAuthRequest(Verb.GET, "http://example.com");
+    extractor.extract(emptyRequest);
+  }
+}
diff --git a/src/test/java/org/scribe/extractors/TokenExtractorTest.java b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
new file mode 100644
index 0000000..68ab994
--- /dev/null
+++ b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
@@ -0,0 +1,65 @@
+package org.scribe.extractors;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+
+public class TokenExtractorTest
+{
+
+  private TokenExtractorImpl extractor;
+
+  @Before
+  public void setup()
+  {
+    extractor = new TokenExtractorImpl();
+  }
+
+  @Test
+  public void shouldExtractTokenFromOAuthStandardResponse()
+  {
+    String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03";
+    Token extracted = extractor.extract(response);
+    assertEquals("hh5s93j4hdidpola", extracted.getToken());
+    assertEquals("hdhd0244k9j7ao03", extracted.getSecret());
+  }
+
+  @Test
+  public void shouldExtractTokenFromResponseWithCallbackConfirmed()
+  {
+    String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03&callback_confirmed=true";
+    Token extracted = extractor.extract(response);
+    assertEquals("hh5s93j4hdidpola", extracted.getToken());
+    assertEquals("hdhd0244k9j7ao03", extracted.getSecret());
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfTokenIsAbsent()
+  {
+    String response = "oauth_secret=hh5s93j4hdidpola&callback_confirmed=true";
+    extractor.extract(response);
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfSecretIsAbsent()
+  {
+    String response = "oauth_token=hh5s93j4hdidpola&callback_confirmed=true";
+    extractor.extract(response);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfResponseIsNull()
+  {
+    String response = null;
+    extractor.extract(response);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfResponseIsEmptyString()
+  {
+    String response = "";
+    extractor.extract(response);
+  }
+}
diff --git a/src/test/java/org/scribe/model/ConnectionStub.java b/src/test/java/org/scribe/model/ConnectionStub.java
new file mode 100644
index 0000000..934f633
--- /dev/null
+++ b/src/test/java/org/scribe/model/ConnectionStub.java
@@ -0,0 +1,80 @@
+package org.scribe.model;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+public class ConnectionStub extends HttpURLConnection
+{
+
+  private Map<String, String> headers = new HashMap<String, String>();
+  private Map<String, List<String>> responseHeaders = new HashMap<String, List<String>>();
+  private int inputStreamCalled = 0;
+
+  public ConnectionStub() throws Exception
+  {
+    super(new URL("http://example.com"));
+  }
+
+  @Override
+  public void setRequestProperty(String key, String value)
+  {
+    headers.put(key, value);
+  }
+
+  public Map<String, String> getHeaders()
+  {
+    return headers;
+  }
+
+  @Override
+  public int getResponseCode() throws IOException
+  {
+    return 200;
+  }
+
+  @Override
+  public InputStream getInputStream() throws IOException
+  {
+    inputStreamCalled++;
+    return new ByteArrayInputStream("contents".getBytes());
+  }
+
+  public int getTimesCalledInpuStream()
+  {
+    return inputStreamCalled;
+  }
+
+  @Override
+  public OutputStream getOutputStream() throws IOException
+  {
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    baos.write("contents".getBytes());
+    return baos;
+  }
+
+  @Override
+  public Map<String, List<String>> getHeaderFields()
+  {
+    return responseHeaders;
+  }
+
+  public void addResponseHeader(String key, String value)
+  {
+    responseHeaders.put(key, Arrays.asList(value));
+  }
+
+  public void connect() throws IOException
+  {
+  }
+
+  public void disconnect()
+  {
+  }
+
+  public boolean usingProxy()
+  {
+    return false;
+  }
+
+}
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
new file mode 100644
index 0000000..9c1e072
--- /dev/null
+++ b/src/test/java/org/scribe/model/OAuthConfigTest.java
@@ -0,0 +1,32 @@
+package org.scribe.model;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.model.Request.*;
+
+public class OAuthConfigTest
+{
+
+  @Test
+  public void shouldReturnDefaultValuesIfNotSet()
+  {
+    OAuthConfig config = new OAuthConfig();
+    assertEquals(Verb.GET, config.getAccessTokenVerb());
+    assertEquals(Verb.GET, config.getRequestTokenVerb());
+    assertEquals(OAuthConstants.OUT_OF_BAND, config.getCallback());
+  }
+
+  @Test
+  public void shouldOverrideDefaultsIfSet()
+  {
+    OAuthConfig config = new OAuthConfig();
+    config.setCallback("http://callback");
+    config.setAccessTokenVerb(Verb.POST);
+    config.setRequestTokenVerb(Verb.POST);
+    assertEquals("http://callback", config.getCallback());
+    assertEquals(Verb.POST, config.getAccessTokenVerb());
+    assertEquals(Verb.POST, config.getRequestTokenVerb());
+  }
+
+}
diff --git a/src/test/java/org/scribe/model/OAuthRequestTest.java b/src/test/java/org/scribe/model/OAuthRequestTest.java
new file mode 100644
index 0000000..2c2d7d2
--- /dev/null
+++ b/src/test/java/org/scribe/model/OAuthRequestTest.java
@@ -0,0 +1,34 @@
+package org.scribe.model;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.model.Request.*;
+
+public class OAuthRequestTest
+{
+
+  private OAuthRequest request;
+
+  @Before
+  public void setup()
+  {
+    request = new OAuthRequest(Verb.GET, "http://example.com");
+  }
+
+  @Test
+  public void shouldAddOAuthParamters()
+  {
+    request.addOAuthParameter(OAuthConstants.TOKEN, "token");
+    request.addOAuthParameter(OAuthConstants.NONCE, "nonce");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "ts");
+
+    assertEquals(3, request.getOauthParameters().size());
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfParameterIsNotOAuth()
+  {
+    request.addOAuthParameter("otherParam", "value");
+  }
+}
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
new file mode 100644
index 0000000..d293e08
--- /dev/null
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -0,0 +1,69 @@
+package org.scribe.model;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.model.Request.*;
+
+public class RequestTest
+{
+
+  private Request getRequest;
+  private Request postRequest;
+  private ConnectionStub connection;
+
+  @Before
+  public void setup() throws Exception
+  {
+    connection = new ConnectionStub();
+    postRequest = new Request(Verb.POST, "http://example.com");
+    postRequest.setConnection(connection);
+    getRequest = new Request(Verb.GET, "http://example.com?qsparam=value&other=value+with+spaces");
+    getRequest.setConnection(connection);
+  }
+
+  @Test
+  public void shouldSetRequestVerb()
+  {
+    getRequest.send();
+    assertEquals("GET", connection.getRequestMethod());
+  }
+
+  @Test
+  public void shouldGetQueryStringParameters()
+  {
+    assertEquals(2, getRequest.getQueryStringParams().size());
+    assertEquals(0, postRequest.getQueryStringParams().size());
+    assertTrue(getRequest.getQueryStringParams().containsKey("qsparam"));
+  }
+
+  @Test
+  public void shouldAddRequestHeaders()
+  {
+    getRequest.addHeader("Header", "1");
+    getRequest.addHeader("Header2", "2");
+    getRequest.send();
+    assertEquals(2, getRequest.getHeaders().size());
+    assertEquals(2, connection.getHeaders().size());
+  }
+
+  @Test
+  public void shouldSetBodyParamsAndHeaders()
+  {
+    postRequest.addBodyParameter("param", "value");
+    postRequest.addBodyParameter("param two", "value with spaces");
+    postRequest.send();
+    assertEquals("param+two=value+with+spaces&param=value", postRequest.getBodyContents());
+    assertTrue(connection.getHeaders().containsKey("Content-Length"));
+  }
+
+  @Test
+  public void shouldSetPayloadAndHeaders()
+  {
+    postRequest.addPayload("PAYLOAD");
+    postRequest.send();
+    assertEquals("PAYLOAD", postRequest.getBodyContents());
+    assertTrue(connection.getHeaders().containsKey("Content-Length"));
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/model/ResponseTest.java b/src/test/java/org/scribe/model/ResponseTest.java
new file mode 100644
index 0000000..a58fc03
--- /dev/null
+++ b/src/test/java/org/scribe/model/ResponseTest.java
@@ -0,0 +1,75 @@
+package org.scribe.model;
+
+import static org.junit.Assert.*;
+
+import java.io.*;
+
+import org.junit.*;
+
+public class ResponseTest
+{
+
+  private Response response;
+  private ConnectionStub connection;
+
+  @Before
+  public void setup() throws Exception
+  {
+    connection = new ConnectionStub();
+    connection.addResponseHeader("one", "one");
+    connection.addResponseHeader("two", "two");
+    response = new Response(connection);
+  }
+
+  @Test
+  public void shouldPopulateResponseHeaders()
+  {
+    assertEquals(2, response.getHeaders().size());
+    assertEquals("one", response.getHeader("one"));
+  }
+
+  @Test
+  public void shouldParseBodyContents()
+  {
+    assertEquals("contents", response.getBody());
+    assertEquals(1, connection.getTimesCalledInpuStream());
+  }
+
+  @Test
+  public void shouldParseBodyContentsOnlyOnce()
+  {
+    assertEquals("contents", response.getBody());
+    assertEquals("contents", response.getBody());
+    assertEquals("contents", response.getBody());
+    assertEquals(1, connection.getTimesCalledInpuStream());
+  }
+
+  @Test
+  public void shouldHandleAConnectionWithErrors() throws Exception
+  {
+    Response errResponse = new Response(new FaultyConnection());
+    assertEquals(400, errResponse.getCode());
+    assertEquals("errors", errResponse.getBody());
+  }
+
+  private static class FaultyConnection extends ConnectionStub
+  {
+
+    public FaultyConnection() throws Exception
+    {
+      super();
+    }
+
+    @Override
+    public InputStream getErrorStream()
+    {
+      return new ByteArrayInputStream("errors".getBytes());
+    }
+
+    @Override
+    public int getResponseCode() throws IOException
+    {
+      return 400;
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java b/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
new file mode 100644
index 0000000..0beaeab
--- /dev/null
+++ b/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
@@ -0,0 +1,59 @@
+package org.scribe.services;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.exceptions.OAuthException;
+
+public class HMACSha1SignatureServiceTest
+{
+
+  private HMACSha1SignatureService service;
+
+  @Before
+  public void setup()
+  {
+    service = new HMACSha1SignatureService();
+  }
+
+  @Test
+  public void shouldReturnSignatureMethodString()
+  {
+    String expected = "HMAC-SHA1";
+    assertEquals(expected, service.getSignatureMethod());
+  }
+
+  @Test
+  public void shouldReturnSignature()
+  {
+    String apiSecret = "api secret";
+    String tokenSecret = "token secret";
+    String baseString = "base string";
+    String signature = "cyxvUDZY/5cQBcBiKulaNgnhN/w=";
+    assertEquals(signature, service.getSignature(baseString, apiSecret, tokenSecret));
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfBaseStringIsNull()
+  {
+    service.getSignature(null, "apiSecret", "tokenSecret");
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfBaseStringIsEmpty()
+  {
+    service.getSignature("  ", "apiSecret", "tokenSecret");
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfApiSecretIsNull()
+  {
+    service.getSignature("base string", null, "tokenSecret");
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfApiSecretIsEmpty()
+  {
+    service.getSignature("base string", "  ", "tokenSecret");
+  }
+}
diff --git a/src/test/java/org/scribe/services/TimestampServiceTest.java b/src/test/java/org/scribe/services/TimestampServiceTest.java
new file mode 100644
index 0000000..352b962
--- /dev/null
+++ b/src/test/java/org/scribe/services/TimestampServiceTest.java
@@ -0,0 +1,50 @@
+package org.scribe.services;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+
+public class TimestampServiceTest
+{
+
+  private TimestampServiceImpl service;
+  private TimestampServiceImpl.Timer timerStub;
+
+  @Before
+  public void setup()
+  {
+    service = new TimestampServiceImpl();
+    timerStub = new TimerStub();
+    service.setTimer(timerStub);
+  }
+
+  @Test
+  public void shouldReturnTimestampInSeconds()
+  {
+    String expected = "1000";
+    assertEquals(expected, service.getTimestampInSeconds());
+  }
+
+  @Test
+  public void shouldReturnNonce()
+  {
+    String expected = "1042";
+    assertEquals(expected, service.getNonce());
+  }
+
+  private static class TimerStub extends TimestampServiceImpl.Timer
+  {
+
+    @Override
+    public Long getMilis()
+    {
+      return 1000000L;
+    }
+
+    @Override
+    public Integer getRandomInteger()
+    {
+      return 42;
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/specs/LinkedInSpec.java b/src/test/java/org/scribe/specs/LinkedInSpec.java
new file mode 100644
index 0000000..8f882fc
--- /dev/null
+++ b/src/test/java/org/scribe/specs/LinkedInSpec.java
@@ -0,0 +1,63 @@
+package org.scribe.specs;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class LinkedInSpec
+{
+  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(LinkedInApi.class)
+                                  .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
+                                  .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
+                                  .build();
+    
+    Scanner in = new Scanner(System.in);
+    System.out.println("=== LinkedIn's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    
+    System.out.println(service.getRequestToken());
+  }
+
+}
diff --git a/src/test/java/org/scribe/specs/TwitterSpec.java b/src/test/java/org/scribe/specs/TwitterSpec.java
new file mode 100644
index 0000000..3682418
--- /dev/null
+++ b/src/test/java/org/scribe/specs/TwitterSpec.java
@@ -0,0 +1,61 @@
+package org.scribe.specs;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class TwitterSpec
+{
+  private static final String AUTHORIZE_URL = "https://twitter.com/oauth/authorize?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(TwitterApi.class)
+                                .apiKey("6icbcAXyZx67r8uTAUM5Qw")
+                                .apiSecret("SCCAdUUc6LXxiazxH3N0QfpNUvlUy84mZ2XZKiv39s")
+                                .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Twitter's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Resin here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Resin! :)");
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/specs/YahooSpec.java b/src/test/java/org/scribe/specs/YahooSpec.java
new file mode 100644
index 0000000..d870922
--- /dev/null
+++ b/src/test/java/org/scribe/specs/YahooSpec.java
@@ -0,0 +1,63 @@
+package org.scribe.specs;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class YahooSpec
+{
+  private static final String NETWORK_NAME = "Yahoo";
+  private static final String AUTHORIZE_URL = "https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(YahooApi.class)
+                                  .apiKey("dj0yJmk9TXZDWVpNVVdGaVFmJmQ9WVdrOWMweHZXbkZLTkhVbWNHbzlNVEl5TWprd05qUTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMw--")
+                                  .apiSecret("262be559f92a2be20c4c039419018f2b48cdfce9")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
diff --git a/src/test/java/org/scribe/test/helpers/ObjectMother.java b/src/test/java/org/scribe/test/helpers/ObjectMother.java
new file mode 100644
index 0000000..32613cf
--- /dev/null
+++ b/src/test/java/org/scribe/test/helpers/ObjectMother.java
@@ -0,0 +1,18 @@
+package org.scribe.test.helpers;
+
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+
+public class ObjectMother
+{
+
+  public static OAuthRequest createSampleOAuthRequest()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
+}
diff --git a/src/test/java/org/scribe/utils/MapUtilsTest.java b/src/test/java/org/scribe/utils/MapUtilsTest.java
new file mode 100644
index 0000000..da7f5ca
--- /dev/null
+++ b/src/test/java/org/scribe/utils/MapUtilsTest.java
@@ -0,0 +1,53 @@
+package org.scribe.utils;
+
+import static org.junit.Assert.*;
+
+import java.util.*;
+
+import org.junit.*;
+
+public class MapUtilsTest
+{
+
+  private Map<String, String> unsorted;
+
+  @Before
+  public void setup()
+  {
+    unsorted = new LinkedHashMap<String, String>();
+    unsorted.put("d", "fourth");
+    unsorted.put("a", "first");
+    unsorted.put("c", "third");
+    unsorted.put("b", "second");
+  }
+
+  @Test
+  public void shouldSortMap()
+  {
+    Map<String, String> sorted = MapUtils.sort(unsorted);
+    List<String> values = new ArrayList<String>(sorted.values());
+    assertEquals("first", values.get(0));
+    assertEquals("second", values.get(1));
+    assertEquals("third", values.get(2));
+    assertEquals("fourth", values.get(3));
+  }
+
+  @Test
+  public void shouldNotModifyTheOriginalMap()
+  {
+    Map<String, String> sorted = MapUtils.sort(unsorted);
+    assertNotSame(sorted, unsorted);
+
+    List<String> values = new ArrayList<String>(unsorted.values());
+    assertEquals("fourth", values.get(0));
+    assertEquals("first", values.get(1));
+    assertEquals("third", values.get(2));
+    assertEquals("second", values.get(3));
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForNullMap()
+  {
+    MapUtils.sort(null);
+  }
+}
diff --git a/src/test/java/org/scribe/utils/PreconditionsTest.java b/src/test/java/org/scribe/utils/PreconditionsTest.java
new file mode 100644
index 0000000..f2290a3
--- /dev/null
+++ b/src/test/java/org/scribe/utils/PreconditionsTest.java
@@ -0,0 +1,60 @@
+package org.scribe.utils;
+
+import org.junit.*;
+
+public class PreconditionsTest
+{
+
+  private static final String ERROR_MSG = "";
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForNullObjects()
+  {
+    Preconditions.checkNotNull(null, ERROR_MSG);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForNullStrings()
+  {
+    Preconditions.checkEmptyString(null, ERROR_MSG);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForEmptyStrings()
+  {
+    Preconditions.checkEmptyString("", ERROR_MSG);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForSpacesOnlyStrings()
+  {
+    Preconditions.checkEmptyString("               ", ERROR_MSG);
+  }
+  
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForInvalidUrls()
+  {
+    Preconditions.checkValidUrl("this/is/not/a/valid/url", ERROR_MSG); 
+  }
+  
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionForNullUrls()
+  {
+    Preconditions.checkValidUrl(null, ERROR_MSG);
+  }
+  
+  public void shouldAllowValidUrls()
+  {
+    Preconditions.checkValidUrl("http://www.example.com", ERROR_MSG);
+  }
+  
+  public void shouldAllowSSLUrls()
+  {
+    Preconditions.checkValidUrl("https://www.example.com", ERROR_MSG);
+  }
+  
+  public void shouldAllowOutOfBandAsValidCallbackValue()
+  {
+    Preconditions.checkValidOAuthCallback("oob", ERROR_MSG);
+  }
+}
diff --git a/src/test/java/org/scribe/utils/StreamUtilsTest.java b/src/test/java/org/scribe/utils/StreamUtilsTest.java
new file mode 100644
index 0000000..976914d
--- /dev/null
+++ b/src/test/java/org/scribe/utils/StreamUtilsTest.java
@@ -0,0 +1,29 @@
+package org.scribe.utils;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class StreamUtilsTest
+{
+
+  @Test
+  public void shouldCorrectlyDecodeAStream()
+  {
+    String value = "expected";
+    InputStream is = new ByteArrayInputStream(value.getBytes());
+    String decoded = StreamUtils.getStreamContents(is);
+    assertEquals("expected", decoded);
+  }
+  
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldFailForNullParameter()
+  {
+    InputStream is = null;
+    StreamUtils.getStreamContents(is);
+    fail("Must throw exception before getting here");
+  }
+}
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
new file mode 100644
index 0000000..426c2c0
--- /dev/null
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -0,0 +1,75 @@
+package org.scribe.utils;
+
+import static org.junit.Assert.*;
+
+import java.util.*;
+
+import org.junit.*;
+
+public class URLUtilsTest
+{
+
+  @Before
+  public void setup()
+  {
+
+  }
+
+  @Test
+  public void shouldPercentEncodeMap()
+  {
+    Map<String, String> params = new LinkedHashMap<String, String>();
+    params.put("key", "value");
+    params.put("key with spaces", "value with spaces");
+    params.put("&symbols!", "#!");
+
+    String expected = "key=value&key+with+spaces=value+with+spaces&%26symbols%21=%23%21";
+    assertEquals(expected, URLUtils.formURLEncodeMap(params));
+  }
+
+  @Test
+  public void shouldReturnEmptyStringForEmptyMap()
+  {
+    Map<String, String> params = new LinkedHashMap<String, String>();
+    String expected = "";
+    assertEquals(expected, URLUtils.formURLEncodeMap(params));
+  }
+
+  @Test
+  public void shouldPercentEncodeString()
+  {
+    String toEncode = "this is a test &^";
+    String expected = "this+is+a+test+%26%5E";
+    assertEquals(expected, URLUtils.percentEncode(toEncode));
+  }
+
+  @Test
+  public void shouldPercentDecodeString()
+  {
+    String toDecode = "this+is+a+test+%26%5E";
+    String expected = "this is a test &^";
+    assertEquals(expected, URLUtils.percentDecode(toDecode));
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfMapIsNull()
+  {
+    Map<String, String> nullMap = null;
+    URLUtils.formURLEncodeMap(nullMap);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfStringToEncodeIsNull()
+  {
+    String toEncode = null;
+    URLUtils.percentEncode(toEncode);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfStringToDecodeIsNull()
+  {
+    String toDecode = null;
+    URLUtils.percentDecode(toDecode);
+  }
+
+}

commit 9300baafef312635b54a8769ecd6541b72df46f0
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 17:18:07 2010 -0300

    Formatted readme

diff --git a/README.textile b/README.textile
index 6d4be17..f649e86 100644
--- a/README.textile
+++ b/README.textile
@@ -1,20 +1,18 @@
 !http://img411.imageshack.us/img411/2851/scribelogo.png!
 
-h1. Welcome
-
-h3. Welcome to the *new* home of **Scribe**
+h1. Welcome to the home of Scribe, the simple OAuth Java lib!
 
 h1. Why use Scribe?
 
-h3. Dead Simple
+h3. Dead Simple 
 
-Who said OAuth was difficult? Configuring scribe is so easy your grandma can do it! check it out:
+Who said OAuth was difficult? Configuring scribe is __so easy your grandma can do it__! check it out:
 
-OAuthService service = new ServiceBuilder()
-                                  .provider(LinkedInApi.class)
-                                  .apiKey(YOUR_API_KEY)
-                                  .apiSecret(YOUR_API_SECRET)
-                                  .build();
+@OAuthService service = new ServiceBuilder()@
+                                  @.provider(LinkedInApi.class)@
+                                  @.apiKey(YOUR_API_KEY)@
+                                  @.apiSecret(YOUR_API_SECRET)@
+                                  @.build();@
                                   
 That **single line** (added newlines for readability) is the only thing you need to configure scribe with LinkedIn's OAuth API for example.
 
@@ -38,13 +36,13 @@ When something bad actually happens, Scribe's meaningful error messages will tel
 
 h1. Getting started in less than 2 minutes
 
-Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe/getting-started page and start rocking!
+Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe-java/getting-started page and start rocking!
 
-h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe/faq before creating an issue :)
+h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe-java/faq before creating an issue :)
 
 h1. About me
 
-LinkedIn "profile":http://linkedinprofile
+"LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85
 
 Email me: fernandezpablo85 at gmail.com
 

commit 0a5b81779957dc23b052bd4b63d5292c890e394d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 17:38:05 2010 -0300

    Renamed specs to examples.

diff --git a/src/test/java/org/scribe/examples/LinkedInExample.java b/src/test/java/org/scribe/examples/LinkedInExample.java
new file mode 100644
index 0000000..6b2240f
--- /dev/null
+++ b/src/test/java/org/scribe/examples/LinkedInExample.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class LinkedInExample
+{
+  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(LinkedInApi.class)
+                                  .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
+                                  .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
+                                  .build();
+    
+    Scanner in = new Scanner(System.in);
+    System.out.println("=== LinkedIn's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    
+    System.out.println(service.getRequestToken());
+  }
+
+}
diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
new file mode 100644
index 0000000..c81c3fd
--- /dev/null
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -0,0 +1,61 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class TwitterExample
+{
+  private static final String AUTHORIZE_URL = "https://twitter.com/oauth/authorize?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(TwitterApi.class)
+                                .apiKey("6icbcAXyZx67r8uTAUM5Qw")
+                                .apiSecret("SCCAdUUc6LXxiazxH3N0QfpNUvlUy84mZ2XZKiv39s")
+                                .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Twitter's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Resin here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Resin! :)");
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/examples/YahooExample.java b/src/test/java/org/scribe/examples/YahooExample.java
new file mode 100644
index 0000000..9140c50
--- /dev/null
+++ b/src/test/java/org/scribe/examples/YahooExample.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class YahooExample
+{
+  private static final String NETWORK_NAME = "Yahoo";
+  private static final String AUTHORIZE_URL = "https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(YahooApi.class)
+                                  .apiKey("dj0yJmk9TXZDWVpNVVdGaVFmJmQ9WVdrOWMweHZXbkZLTkhVbWNHbzlNVEl5TWprd05qUTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMw--")
+                                  .apiSecret("262be559f92a2be20c4c039419018f2b48cdfce9")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
diff --git a/src/test/java/org/scribe/specs/LinkedInSpec.java b/src/test/java/org/scribe/specs/LinkedInSpec.java
deleted file mode 100644
index 8f882fc..0000000
--- a/src/test/java/org/scribe/specs/LinkedInSpec.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.scribe.specs;
-
-import java.util.Scanner;
-
-import org.scribe.builder.*;
-import org.scribe.builder.api.*;
-import org.scribe.model.*;
-import org.scribe.model.Request.*;
-import org.scribe.oauth.*;
-
-public class LinkedInSpec
-{
-  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=";
-  private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
-  
-  public static void main(String[] args)
-  {
-    OAuthService service = new ServiceBuilder()
-                                  .provider(LinkedInApi.class)
-                                  .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
-                                  .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
-                                  .build();
-    
-    Scanner in = new Scanner(System.in);
-    System.out.println("=== LinkedIn's OAuth Workflow ===");
-    System.out.println();
-
-    // Obtain the Request Token
-    System.out.println("Fetching the Request Token...");
-    Token requestToken = service.getRequestToken();
-    System.out.println("Got the Request Token!");
-    System.out.println();
-
-    System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
-    System.out.println("And paste the verifier here");
-    System.out.print(">>");
-    Verifier verifier = new Verifier(in.nextLine());
-    System.out.println();
-
-    // Trade the Request Token and Verfier for the Access Token
-    System.out.println("Trading the Request Token for an Access Token...");
-    Token accessToken = service.getAccessToken(requestToken, verifier);
-    System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
-    System.out.println();
-
-    // Now let's go and ask for a protected resource!
-    System.out.println("Now we're going to access a protected resource...");
-    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
-    service.signRequest(accessToken, request);
-    Response response = request.send();
-    System.out.println("Got it! Lets see what we found...");
-    System.out.println();
-    System.out.println(response.getBody());
-
-    System.out.println();
-    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
-    
-    System.out.println(service.getRequestToken());
-  }
-
-}
diff --git a/src/test/java/org/scribe/specs/TwitterSpec.java b/src/test/java/org/scribe/specs/TwitterSpec.java
deleted file mode 100644
index 3682418..0000000
--- a/src/test/java/org/scribe/specs/TwitterSpec.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.scribe.specs;
-
-import java.util.Scanner;
-
-import org.scribe.builder.*;
-import org.scribe.builder.api.*;
-import org.scribe.model.*;
-import org.scribe.model.Request.*;
-import org.scribe.oauth.*;
-
-public class TwitterSpec
-{
-  private static final String AUTHORIZE_URL = "https://twitter.com/oauth/authorize?oauth_token=";
-  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
-  
-  public static void main(String[] args)
-  {
-    OAuthService service = new ServiceBuilder()
-                                .provider(TwitterApi.class)
-                                .apiKey("6icbcAXyZx67r8uTAUM5Qw")
-                                .apiSecret("SCCAdUUc6LXxiazxH3N0QfpNUvlUy84mZ2XZKiv39s")
-                                .build();
-    Scanner in = new Scanner(System.in);
-
-    System.out.println("=== Twitter's OAuth Workflow ===");
-    System.out.println();
-
-    // Obtain the Request Token
-    System.out.println("Fetching the Request Token...");
-    Token requestToken = service.getRequestToken();
-    System.out.println("Got the Request Token!");
-    System.out.println();
-
-    System.out.println("Now go and authorize Resin here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
-    System.out.println("And paste the verifier here");
-    System.out.print(">>");
-    Verifier verifier = new Verifier(in.nextLine());
-    System.out.println();
-
-    // Trade the Request Token and Verfier for the Access Token
-    System.out.println("Trading the Request Token for an Access Token...");
-    Token accessToken = service.getAccessToken(requestToken, verifier);
-    System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
-    System.out.println();
-
-    // Now let's go and ask for a protected resource!
-    System.out.println("Now we're going to access a protected resource...");
-    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
-    service.signRequest(accessToken, request);
-    Response response = request.send();
-    System.out.println("Got it! Lets see what we found...");
-    System.out.println();
-    System.out.println(response.getBody());
-
-    System.out.println();
-    System.out.println("Thats it man! Go and build something awesome with Resin! :)");
-  }
-
-}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/specs/YahooSpec.java b/src/test/java/org/scribe/specs/YahooSpec.java
deleted file mode 100644
index d870922..0000000
--- a/src/test/java/org/scribe/specs/YahooSpec.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.scribe.specs;
-
-import java.util.Scanner;
-
-import org.scribe.builder.*;
-import org.scribe.builder.api.*;
-import org.scribe.model.*;
-import org.scribe.model.Request.*;
-import org.scribe.oauth.*;
-
-public class YahooSpec
-{
-  private static final String NETWORK_NAME = "Yahoo";
-  private static final String AUTHORIZE_URL = "https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=";
-  private static final String PROTECTED_RESOURCE_URL = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";
-
-  public static void main(String[] args)
-  {
-    OAuthService service = new ServiceBuilder()
-                                  .provider(YahooApi.class)
-                                  .apiKey("dj0yJmk9TXZDWVpNVVdGaVFmJmQ9WVdrOWMweHZXbkZLTkhVbWNHbzlNVEl5TWprd05qUTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMw--")
-                                  .apiSecret("262be559f92a2be20c4c039419018f2b48cdfce9")
-                                  .build();
-    Scanner in = new Scanner(System.in);
-
-    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
-    System.out.println();
-
-    // Obtain the Request Token
-    System.out.println("Fetching the Request Token...");
-    Token requestToken = service.getRequestToken();
-    System.out.println("Got the Request Token!");
-    System.out.println();
-
-    System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
-    System.out.println("And paste the verifier here");
-    System.out.print(">>");
-    Verifier verifier = new Verifier(in.nextLine());
-    System.out.println();
-
-    // Trade the Request Token and Verfier for the Access Token
-    System.out.println("Trading the Request Token for an Access Token...");
-    Token accessToken = service.getAccessToken(requestToken, verifier);
-    System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
-    System.out.println();
-
-    // Now let's go and ask for a protected resource!
-    System.out.println("Now we're going to access a protected resource...");
-    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
-    service.signRequest(accessToken, request);
-    Response response = request.send();
-    System.out.println("Got it! Lets see what we found...");
-    System.out.println();
-    System.out.println(response.getCode());
-    System.out.println(response.getBody());
-
-    System.out.println();
-    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
-
-  }
-}

commit bf79459dc494cca669701610a59eea9fb1f49aab
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 17:42:00 2010 -0300

    Even more readme formatting

diff --git a/README.textile b/README.textile
index f649e86..ce5d672 100644
--- a/README.textile
+++ b/README.textile
@@ -1,6 +1,6 @@
 !http://img411.imageshack.us/img411/2851/scribelogo.png!
 
-h1. Welcome to the home of Scribe, the simple OAuth Java lib!
+h2. Welcome to the home of Scribe, the simple OAuth Java lib!
 
 h1. Why use Scribe?
 
@@ -22,15 +22,31 @@ Hit Scribe as hard and with many threads as you like.
 
 h3. Supports all major OAuth APIs out-of-the-box
 
-logos here
+* Google
+
+* Yahoo
+
+* LinkedIn
+
+* Twitter
+
+* Salesforce
+
+* Foursquare
+
+* and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
 
 h3. Small and modular
 
 Scribe's code is small (about 1k LOC) and simple to understand. No smart-ass or "clever" hacks here.
 
+h3. Android-Ready
+
+Works out of the box with android(TM) applications.
+
 h3. Stable & bulletproof
 
-Test coverage of about x% to keep you safe from harm. 
+Goo test coverage to keep you safe from harm. 
 
 When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
 

commit 5dfa1cf80ac98f5f76e35a742550db0d27af75d4
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 22:38:58 2010 -0300

    Added timeout to Request

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 852698e..d52c4fb 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -22,8 +22,15 @@ public class Request
   private Map<String, String> bodyParams;
   private Map<String, String> headers;
   private String payload = null;
+  private Integer timeout = null;
   private HttpURLConnection connection;
 
+  /**
+   * Creates a new Http Request
+   * 
+   * @param verb Http Verb (GET, POST, etc)
+   * @param url url with optional querystring parameters.
+   */
   public Request(Verb verb, String url)
   {
     this.verb = verb;
@@ -32,7 +39,8 @@ public class Request
     this.headers = new HashMap<String, String>();
     try
     {
-      this.connection = (HttpURLConnection) new URL(url).openConnection();
+      connection = (HttpURLConnection) new URL(url).openConnection();
+      connection.setConnectTimeout(timeout);
     } catch (IOException ioe)
     {
       throw new OAuthException("Could not open connection to: " + url, ioe);
@@ -174,6 +182,11 @@ public class Request
     return url.replaceAll("\\?.*", "").replace("\\:\\d{4}", "");
   }
 
+  /**
+   * Returns the body of the request
+   * 
+   * @return form encoded string
+   */
   public String getBodyContents()
   {
     return (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
@@ -188,12 +201,30 @@ public class Request
   {
     return verb;
   }
-
+  
+  /**
+   * Returns the connection headers as a {@link Map}
+   * 
+   * @return map of headers
+   */
   public Map<String, String> getHeaders()
   {
     return headers;
   }
 
+  /**
+   * Sets the connection timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * 
+   * @param timeout in milliseconds
+   */
+  public void setTimeout(int timeout)
+  {
+    this.timeout = timeout;
+  }
+  
+  /*
+   * We need this in order to stub the connection object for test cases
+   */
   void setConnection(HttpURLConnection connection)
   {
     this.connection = connection;

commit 26cbb06dc001f2452e3c52d666891a671a42915d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 5 22:38:58 2010 -0300

    Added timeout to Request

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 852698e..1525773 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -22,8 +22,15 @@ public class Request
   private Map<String, String> bodyParams;
   private Map<String, String> headers;
   private String payload = null;
+  private Integer timeout = null;
   private HttpURLConnection connection;
 
+  /**
+   * Creates a new Http Request
+   * 
+   * @param verb Http Verb (GET, POST, etc)
+   * @param url url with optional querystring parameters.
+   */
   public Request(Verb verb, String url)
   {
     this.verb = verb;
@@ -32,7 +39,8 @@ public class Request
     this.headers = new HashMap<String, String>();
     try
     {
-      this.connection = (HttpURLConnection) new URL(url).openConnection();
+      connection = (HttpURLConnection) new URL(url).openConnection();
+      if(timeout != null) connection.setConnectTimeout(timeout);
     } catch (IOException ioe)
     {
       throw new OAuthException("Could not open connection to: " + url, ioe);
@@ -174,6 +182,11 @@ public class Request
     return url.replaceAll("\\?.*", "").replace("\\:\\d{4}", "");
   }
 
+  /**
+   * Returns the body of the request
+   * 
+   * @return form encoded string
+   */
   public String getBodyContents()
   {
     return (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
@@ -188,12 +201,30 @@ public class Request
   {
     return verb;
   }
-
+  
+  /**
+   * Returns the connection headers as a {@link Map}
+   * 
+   * @return map of headers
+   */
   public Map<String, String> getHeaders()
   {
     return headers;
   }
 
+  /**
+   * Sets the connection timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * 
+   * @param timeout in milliseconds
+   */
+  public void setTimeout(int timeout)
+  {
+    this.timeout = timeout;
+  }
+  
+  /*
+   * We need this in order to stub the connection object for test cases
+   */
   void setConnection(HttpURLConnection connection)
   {
     this.connection = connection;

commit 75353ec36dd8b4f2bdf0b1666bacc5384a087655
Merge: 26cbb06 5dfa1cf
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 14:57:01 2010 -0300

    Fixed NPE for timeout

commit 928a32d137505f72d06fa662c2b801b2b0606417
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 15:01:34 2010 -0300

    Changed old-lib name

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index c81c3fd..ad8a33c 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -31,7 +31,7 @@ public class TwitterExample
     System.out.println("Got the Request Token!");
     System.out.println();
 
-    System.out.println("Now go and authorize Resin here:");
+    System.out.println("Now go and authorize Scribe here:");
     System.out.println(AUTHORIZE_URL + requestToken.getToken());
     System.out.println("And paste the verifier here");
     System.out.print(">>");
@@ -55,7 +55,7 @@ public class TwitterExample
     System.out.println(response.getBody());
 
     System.out.println();
-    System.out.println("Thats it man! Go and build something awesome with Resin! :)");
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
   }
 
 }
\ No newline at end of file

commit 45a0f968408e2ca825b211f6d730c5daa5a69b20
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 15:02:10 2010 -0300

    Added Foursquare example

diff --git a/README.textile b/README.textile
index ce5d672..6af42b6 100644
--- a/README.textile
+++ b/README.textile
@@ -30,8 +30,6 @@ h3. Supports all major OAuth APIs out-of-the-box
 
 * Twitter
 
-* Salesforce
-
 * Foursquare
 
 * and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
diff --git a/src/main/java/org/scribe/builder/api/FoursquareApi.java b/src/main/java/org/scribe/builder/api/FoursquareApi.java
index a48b6ee..2d5b5a8 100644
--- a/src/main/java/org/scribe/builder/api/FoursquareApi.java
+++ b/src/main/java/org/scribe/builder/api/FoursquareApi.java
@@ -5,12 +5,12 @@ public class FoursquareApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    throw new UnsupportedOperationException();
+    return "http://foursquare.com/oauth/access_token";
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    throw new UnsupportedOperationException();
+    return "http://foursquare.com/oauth/request_token";
   }
 }
diff --git a/src/test/java/org/scribe/examples/FoursquareExample.java b/src/test/java/org/scribe/examples/FoursquareExample.java
new file mode 100644
index 0000000..083f914
--- /dev/null
+++ b/src/test/java/org/scribe/examples/FoursquareExample.java
@@ -0,0 +1,61 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.model.Request.*;
+import org.scribe.oauth.*;
+
+public class FoursquareExample
+{
+  private static final String AUTHORIZE_URL = "http://foursquare.com/oauth/authorize?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.foursquare.com/v1/user";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(FoursquareApi.class)
+                                .apiKey("FEGFXJUFANVVDHVSNUAMUKTTXCP1AJQD53E33XKJ44YP1S4I")
+                                .apiSecret("AYWKUL5SWPNC0CTQ202QXRUG2NLZYXMRA34ZSDW4AUYBG2RC")
+                                .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Foursquare's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+
+}
\ No newline at end of file

commit 0222f08f40c96263aa8ee7180215fa7030fbd3f6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 15:24:15 2010 -0300

    Removed salesforce api (no support yet)

diff --git a/src/main/java/org/scribe/builder/api/SalesForceApi.java b/src/main/java/org/scribe/builder/api/SalesForceApi.java
deleted file mode 100644
index c50b832..0000000
--- a/src/main/java/org/scribe/builder/api/SalesForceApi.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.scribe.builder.api;
-
-public class SalesForceApi extends DefaultApi10a
-{
-  @Override
-  public String getAccessTokenEndpoint()
-  {
-    return "https://login.salesforce.com/_nc_external/system/security/oauth/AccessTokenHandler";
-  }
-
-  @Override
-  public String getRequestTokenEndpoint()
-  {
-    return "https://login.salesforce.com/_nc_external/system/security/oauth/RequestTokenHandler";
-  }
-}

commit f55177995a86639066769a15f031c0921e30f999
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 15:33:57 2010 -0300

    Added Google information

diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 5ce3c45..4da21a4 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -5,12 +5,12 @@ public class GoogleApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    throw new UnsupportedOperationException();
+    return "https://www.google.com/accounts/OAuthGetRequestToken"; 
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    throw new UnsupportedOperationException();
+    return "https://www.google.com/accounts/OAuthGetAccessToken";
   }
 }

commit fa8e93699532269afe24844f168e0f51b56a5294
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 6 20:24:32 2010 -0300

    Extracted Verb to it's own file and made Request package-private

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 12413a7..32c4478 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -1,10 +1,8 @@
 package org.scribe.builder.api;
 
 import org.scribe.extractors.*;
-import org.scribe.model.OAuthConfig;
-import org.scribe.model.Request.Verb;
-import org.scribe.oauth.OAuth10aServiceImpl;
-import org.scribe.oauth.OAuthService;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
 import org.scribe.services.*;
 
 public abstract class DefaultApi10a implements Api
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index d2d94cc..f2634f1 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -1,7 +1,5 @@
 package org.scribe.model;
 
-import org.scribe.model.Request.*;
-
 public class OAuthConfig
 {
   private String apiKey;
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index c74219e..f7853be 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -12,7 +12,7 @@ import org.scribe.utils.*;
  * 
  * @author Pablo Fernandez
  */
-public class Request
+class Request
 {
 
   private static final String CONTENT_LENGTH = "Content-Length";
@@ -235,14 +235,4 @@ public class Request
   {
     return String.format("@Request(%s %s)", getVerb(), getUrl());
   }
-
-  /**
-   * An enumeration containing the most common HTTP Verbs.
-   * 
-   * @author Pablo Fernandez
-   */
-  public static enum Verb
-  {
-    GET, POST, PUT, DELETE
-  }
 }
diff --git a/src/main/java/org/scribe/model/Verb.java b/src/main/java/org/scribe/model/Verb.java
new file mode 100644
index 0000000..b370791
--- /dev/null
+++ b/src/main/java/org/scribe/model/Verb.java
@@ -0,0 +1,11 @@
+package org.scribe.model;
+
+/**
+ * An enumeration containing the most common HTTP Verbs.
+ * 
+ * @author Pablo Fernandez
+ */
+public enum Verb
+{
+  GET, POST, PUT, DELETE
+}
diff --git a/src/test/java/org/scribe/examples/FoursquareExample.java b/src/test/java/org/scribe/examples/FoursquareExample.java
index 083f914..d74eb9c 100644
--- a/src/test/java/org/scribe/examples/FoursquareExample.java
+++ b/src/test/java/org/scribe/examples/FoursquareExample.java
@@ -5,7 +5,6 @@ import java.util.Scanner;
 import org.scribe.builder.*;
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.oauth.*;
 
 public class FoursquareExample
diff --git a/src/test/java/org/scribe/examples/LinkedInExample.java b/src/test/java/org/scribe/examples/LinkedInExample.java
index 6b2240f..8fd1247 100644
--- a/src/test/java/org/scribe/examples/LinkedInExample.java
+++ b/src/test/java/org/scribe/examples/LinkedInExample.java
@@ -5,7 +5,6 @@ import java.util.Scanner;
 import org.scribe.builder.*;
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.oauth.*;
 
 public class LinkedInExample
diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index ad8a33c..1891d0d 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -5,7 +5,6 @@ import java.util.Scanner;
 import org.scribe.builder.*;
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.oauth.*;
 
 public class TwitterExample
diff --git a/src/test/java/org/scribe/examples/YahooExample.java b/src/test/java/org/scribe/examples/YahooExample.java
index 9140c50..4be2109 100644
--- a/src/test/java/org/scribe/examples/YahooExample.java
+++ b/src/test/java/org/scribe/examples/YahooExample.java
@@ -5,7 +5,6 @@ import java.util.Scanner;
 import org.scribe.builder.*;
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.oauth.*;
 
 public class YahooExample
diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
index e63a7c6..d140c3a 100644
--- a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -5,7 +5,6 @@ import static org.junit.Assert.*;
 import org.junit.*;
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.test.helpers.*;
 
 public class BaseStringExtractorTest
diff --git a/src/test/java/org/scribe/extractors/HeaderExtractorTest.java b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
index ace4a24..0b461c7 100644
--- a/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
@@ -5,7 +5,6 @@ import static org.junit.Assert.*;
 import org.junit.*;
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 import org.scribe.test.helpers.*;
 
 public class HeaderExtractorTest
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
index 9c1e072..1bffac5 100644
--- a/src/test/java/org/scribe/model/OAuthConfigTest.java
+++ b/src/test/java/org/scribe/model/OAuthConfigTest.java
@@ -3,7 +3,6 @@ package org.scribe.model;
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.scribe.model.Request.*;
 
 public class OAuthConfigTest
 {
diff --git a/src/test/java/org/scribe/model/OAuthRequestTest.java b/src/test/java/org/scribe/model/OAuthRequestTest.java
index 2c2d7d2..9d2ac79 100644
--- a/src/test/java/org/scribe/model/OAuthRequestTest.java
+++ b/src/test/java/org/scribe/model/OAuthRequestTest.java
@@ -3,7 +3,6 @@ package org.scribe.model;
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.scribe.model.Request.*;
 
 public class OAuthRequestTest
 {
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index d293e08..6356177 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -3,7 +3,6 @@ package org.scribe.model;
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.scribe.model.Request.*;
 
 public class RequestTest
 {
diff --git a/src/test/java/org/scribe/test/helpers/ObjectMother.java b/src/test/java/org/scribe/test/helpers/ObjectMother.java
index 32613cf..a69a3c1 100644
--- a/src/test/java/org/scribe/test/helpers/ObjectMother.java
+++ b/src/test/java/org/scribe/test/helpers/ObjectMother.java
@@ -1,7 +1,6 @@
 package org.scribe.test.helpers;
 
 import org.scribe.model.*;
-import org.scribe.model.Request.*;
 
 public class ObjectMother
 {

commit facc73a53011c6e173af5ed2af0a07a5c3131031
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Sep 7 21:47:08 2010 -0300

    Fixed typo
    
    thanks @chrismessina for noticing it :)

diff --git a/README.textile b/README.textile
index 6af42b6..ff9f426 100644
--- a/README.textile
+++ b/README.textile
@@ -44,7 +44,7 @@ Works out of the box with android(TM) applications.
 
 h3. Stable & bulletproof
 
-Goo test coverage to keep you safe from harm. 
+Good test coverage to keep you safe from harm. 
 
 When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
 

commit ab57cf47578ee85324b99540bbd87e85822aeeb1
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 9 10:46:04 2010 -0300

    isEmpty is 1.6 only

diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index 1370273..b85c3ad 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -13,7 +13,7 @@ public class Preconditions
 
   public static void checkEmptyString(String string, String errorMsg)
   {
-    check(string != null && !string.trim().isEmpty(), errorMsg);
+    check(string != null && !string.trim().equals(""), errorMsg);
   }
 
   public static void checkValidUrl(String url, String errorMsg)

commit 129d368d923e5af1a3e9e0764a035a9eb5fa2817
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 9 10:47:07 2010 -0300

    Changed version number for new release

diff --git a/pom.xml b/pom.xml
index 707dc1f..deb0188 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.0</version>
+  <version>1.0.1</version>
   <name>OAuth Library</name>
 
   <dependencies>

commit b2147de2e52d1128ad45349b68b639b693cde405
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Sep 15 10:57:14 2010 -0300

    Removed last isEmpty for < 1.6 compatibility

diff --git a/pom.xml b/pom.xml
index deb0188..c69d844 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.1</version>
+  <version>1.0.2</version>
   <name>OAuth Library</name>
 
   <dependencies>
diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index b85c3ad..de22b4e 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -38,7 +38,7 @@ public class Preconditions
   
   private static void check(boolean requirements, String error)
   {
-    String message = (error == null || error.trim().isEmpty()) ? DEFAULT_MESSAGE : error;
+    String message = (error == null || error.trim().length() <= 0) ? DEFAULT_MESSAGE : error;
     if (!requirements)
     {
       throw new IllegalArgumentException(message);

commit 608f56d59f62c1c8aa81742713470168c629806c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 16 20:44:12 2010 -0300

    Added MIT license

diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..24261ac
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,21 @@
+The MIT License
+
+Copyright (c) 2010 Pablo Fenandez
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
\ No newline at end of file

commit 8c8f26e13474e5f083bc22ea4ae4f64cd15f996e
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Sep 17 22:43:54 2010 -0300

    Improved string concatenation algorithm

diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index a567711..4449f2f 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -8,20 +8,24 @@ import org.scribe.utils.*;
 
 public class HeaderExtractorImpl implements HeaderExtractor
 {
-
+  private static final String PARAM_SEPARATOR = ", ";
   private static final String PREAMBLE = "OAuth ";
 
   public String extract(OAuthRequest request)
   {
     checkPreconditions(request);
     Map<String, String> parameters = request.getOauthParameters();
-    StringBuffer header = new StringBuffer();
+    StringBuffer header = new StringBuffer(parameters.size() * 20);
     header.append(PREAMBLE);
     for (String key : parameters.keySet())
     {
-      addToHeader(header, key, parameters.get(key));
+      if(header.length() > PREAMBLE.length())
+      { 
+        header.append(PARAM_SEPARATOR);
+      }
+      header.append(String.format("%s=\"%s\"", key, URLUtils.percentEncode(parameters.get(key))));
     }
-    return removeTrail(header);
+    return header.toString();
   }
 
   private void checkPreconditions(OAuthRequest request)
@@ -34,13 +38,4 @@ public class HeaderExtractorImpl implements HeaderExtractor
     }
   }
 
-  private void addToHeader(StringBuffer header, String name, String value)
-  {
-    header.append(String.format("%s=\"%s\", ", name, URLUtils.percentEncode(value)));
-  }
-
-  private String removeTrail(StringBuffer header)
-  {
-    return header.toString().substring(0, header.length() - 2);
-  }
 }
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 7b58b0a..2603094 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -24,17 +24,16 @@ public class URLUtils
 
   private static String doFormUrlEncode(Map<String, String> map)
   {
-    StringBuffer encodedString = new StringBuffer();
+    StringBuffer encodedString = new StringBuffer(map.size() * 20);
     for (String key : map.keySet())
     {
-      encodedString.append(percentEncode(key)).append(PAIR_SEPARATOR).append(percentEncode(map.get(key))).append(PARAM_SEPARATOR);
+      if(encodedString.length() > 0) 
+      {
+        encodedString.append(PARAM_SEPARATOR);
+      }
+      encodedString.append(percentEncode(key)).append(PAIR_SEPARATOR).append(percentEncode(map.get(key)));
     }
-    return removeTrailingSeparator(encodedString);
-  }
-
-  private static String removeTrailingSeparator(StringBuffer buffer)
-  {
-    return buffer.toString().substring(0, buffer.length() - 1);
+    return encodedString.toString();
   }
 
   public static String percentEncode(String string)
@@ -43,7 +42,8 @@ public class URLUtils
     try
     {
       return URLEncoder.encode(string, UTF_8);
-    } catch (UnsupportedEncodingException uee)
+    } 
+    catch (UnsupportedEncodingException uee)
     {
       throw new OAuthException(ERROR_MSG, uee);
     }

commit 50c35bc6860a1cfb378153e431ce5f1b56b74332
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Sep 17 23:22:16 2010 -0300

    Changed whitespace encoding to %21 instead of '+'
    
    Changed version number for release

diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 2603094..11dbc1a 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -41,7 +41,7 @@ public class URLUtils
     Preconditions.checkNotNull(string, "Cannot encode null string");
     try
     {
-      return URLEncoder.encode(string, UTF_8);
+      return URLEncoder.encode(string, UTF_8).replaceAll("\\+", "%20");
     } 
     catch (UnsupportedEncodingException uee)
     {
diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
index d140c3a..b145592 100644
--- a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -41,4 +41,12 @@ public class BaseStringExtractorTest
     OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com");
     extractor.extract(request);
   }
+  
+  @Test
+  public void shouldProperlyEncodeSpaces()
+  {
+    String expected = "GET&http%3A%2F%2Fexample.com&body%3Dthis%2520param%2520has%2520whitespace%26oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    request.addBodyParameter("body", "this param has whitespace");
+    assertEquals(expected, extractor.extract(request));
+  }
 }
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 6356177..4034699 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -52,7 +52,7 @@ public class RequestTest
     postRequest.addBodyParameter("param", "value");
     postRequest.addBodyParameter("param two", "value with spaces");
     postRequest.send();
-    assertEquals("param+two=value+with+spaces&param=value", postRequest.getBodyContents());
+    assertEquals("param%20two=value%20with%20spaces&param=value", postRequest.getBodyContents());
     assertTrue(connection.getHeaders().containsKey("Content-Length"));
   }
 
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 426c2c0..eae99e5 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -23,7 +23,7 @@ public class URLUtilsTest
     params.put("key with spaces", "value with spaces");
     params.put("&symbols!", "#!");
 
-    String expected = "key=value&key+with+spaces=value+with+spaces&%26symbols%21=%23%21";
+    String expected = "key=value&key%20with%20spaces=value%20with%20spaces&%26symbols%21=%23%21";
     assertEquals(expected, URLUtils.formURLEncodeMap(params));
   }
 
@@ -39,7 +39,7 @@ public class URLUtilsTest
   public void shouldPercentEncodeString()
   {
     String toEncode = "this is a test &^";
-    String expected = "this+is+a+test+%26%5E";
+    String expected = "this%20is%20a%20test%20%26%5E";
     assertEquals(expected, URLUtils.percentEncode(toEncode));
   }
 

commit 36aeaeed2f96b7d430108bbf7e16cbb26890539e
Author: Brian Duff <cairndubh@gmail.com>
Date:   Tue Sep 21 19:41:16 2010 -0700

    Fix reversed URLs.

diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 4da21a4..1d9c886 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -5,12 +5,12 @@ public class GoogleApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetRequestToken"; 
+    return "https://www.google.com/accounts/OAuthGetAccessToken"; 
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetAccessToken";
+    return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
 }

commit 94df2504ec1a7c6377c84d4c3aaf8cf40d54fd48
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Sep 22 11:11:22 2010 -0300

    Changed version number

diff --git a/pom.xml b/pom.xml
index c69d844..137ccf6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.2</version>
+  <version>1.0.3</version>
   <name>OAuth Library</name>
 
   <dependencies>

commit f59c9543d59440e3361fae91a2d38bd769475503
Author: Kyle Stewart <kyle.stewart@integrumtech.com>
Date:   Thu Oct 7 15:48:03 2010 -0700

    Added vimeo support

diff --git a/src/main/java/org/scribe/builder/api/VimeoApi.java b/src/main/java/org/scribe/builder/api/VimeoApi.java
new file mode 100644
index 0000000..2fa1701
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/VimeoApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+public class VimeoApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://vimeo.com/oauth/access_token";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://vimeo.com/oauth/request_token";
+  }
+}

commit fbee85ec08431a845cde6229431cf23dcc81cc59
Merge: f59c954 36aeaee
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Oct 7 20:29:19 2010 -0300

    Fixed google-api urls.

commit ffb1042146e4d05b265b2a8892ef06e41820f1de
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Oct 7 21:09:51 2010 -0300

    Added support for custom URIs

diff --git a/pom.xml b/pom.xml
index 137ccf6..ef0710a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.3</version>
+  <version>1.0.4</version>
   <name>OAuth Library</name>
 
   <dependencies>
diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index de22b4e..06bd151 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -1,10 +1,13 @@
 package org.scribe.utils;
 
+import java.util.regex.Pattern;
+
 import org.scribe.model.OAuthConstants;
 
 public class Preconditions
 {
   private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
+  private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z]+://\\S+");
 
   public static void checkNotNull(Object object, String errorMsg)
   {
@@ -33,7 +36,7 @@ public class Preconditions
   
   static boolean isUrl(String url)
   {
-    return url.startsWith("http://") || url.startsWith("https://");
+    return URL_PATTERN.matcher(url).matches();
   }
   
   private static void check(boolean requirements, String error)
diff --git a/src/test/java/org/scribe/utils/PreconditionsTest.java b/src/test/java/org/scribe/utils/PreconditionsTest.java
index f2290a3..0add2f6 100644
--- a/src/test/java/org/scribe/utils/PreconditionsTest.java
+++ b/src/test/java/org/scribe/utils/PreconditionsTest.java
@@ -53,6 +53,17 @@ public class PreconditionsTest
     Preconditions.checkValidUrl("https://www.example.com", ERROR_MSG);
   }
   
+  public void shouldAllowNonStandarProtocolsForAndroid()
+  {
+    Preconditions.checkValidUrl("myUrl://www.example.com", ERROR_MSG);
+  }
+  
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldNotAllowStrangeProtocolNames()
+  {
+    Preconditions.checkValidUrl("_weird*://www.example.com", ERROR_MSG);
+  }
+  
   public void shouldAllowOutOfBandAsValidCallbackValue()
   {
     Preconditions.checkValidOAuthCallback("oob", ERROR_MSG);

commit 91c64ff08b248bdd6f77ab6263573976c63d4eab
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Oct 14 14:19:53 2010 -0300

    Added support for dash/underscore in custom URLs

diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index 06bd151..f63a20e 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -7,7 +7,7 @@ import org.scribe.model.OAuthConstants;
 public class Preconditions
 {
   private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
-  private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z]+://\\S+");
+  private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z_-]+://\\S+");
 
   public static void checkNotNull(Object object, String errorMsg)
   {
diff --git a/src/test/java/org/scribe/utils/PreconditionsTest.java b/src/test/java/org/scribe/utils/PreconditionsTest.java
index 0add2f6..54ec9f8 100644
--- a/src/test/java/org/scribe/utils/PreconditionsTest.java
+++ b/src/test/java/org/scribe/utils/PreconditionsTest.java
@@ -55,13 +55,13 @@ public class PreconditionsTest
   
   public void shouldAllowNonStandarProtocolsForAndroid()
   {
-    Preconditions.checkValidUrl("myUrl://www.example.com", ERROR_MSG);
+    Preconditions.checkValidUrl("x-url-custom://www.example.com", ERROR_MSG);
   }
   
   @Test(expected = IllegalArgumentException.class)
   public void shouldNotAllowStrangeProtocolNames()
   {
-    Preconditions.checkValidUrl("_weird*://www.example.com", ERROR_MSG);
+    Preconditions.checkValidUrl("$weird*://www.example.com", ERROR_MSG);
   }
   
   public void shouldAllowOutOfBandAsValidCallbackValue()

commit 32b08788c995427f79ee61fcd502309c2a88b215
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Oct 14 14:30:48 2010 -0300

    Changed version number for release

diff --git a/pom.xml b/pom.xml
index ef0710a..94c784d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.4</version>
+  <version>1.0.5</version>
   <name>OAuth Library</name>
 
   <dependencies>

commit c3f113f39b5b443a5df19e47d68754da3ed8f112
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 20 10:25:03 2010 -0300

    Added required config for publishing bundle to maven central

diff --git a/pom.xml b/pom.xml
index 94c784d..7fbc6c3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,7 +5,31 @@
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
   <version>1.0.5</version>
-  <name>OAuth Library</name>
+  <name>Scribe OAuth Library</name>
+  <description>The best OAuth library out there</description>
+  <url>github.com/fernandezpablo85/scribe-java</url>
+
+  <developers>
+    <developer>
+      <id>fernandezpablo85</id>
+      <name>Pablo Fernandez</name>
+      <email>fernandezpablo85@gmail.com</email>
+      <timezone>-3</timezone>
+    </developer>
+  </developers>
+
+  <licenses>
+    <license>
+      <name>MIT</name>
+      <url>http://github.com/fernandezpablo85/scribe-java/blob/master/LICENSE.txt</url>
+    </license>
+  </licenses>
+
+  <scm>
+    <connection>scm:http://github.com/fernandezpablo85/scribe-java.git</connection>
+    <developerConnection>scm:http://github.com/fernandezpablo85/scribe-java.git</developerConnection>
+    <url>http://github.com/fernandezpablo85/scribe-java.git</url>
+  </scm>
 
   <dependencies>
     <dependency>
@@ -30,6 +54,19 @@
           <target>1.6</target>
         </configuration>
       </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-gpg-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>sign-artifacts</id>
+            <phase>verify</phase>
+            <goals>
+              <goal>sign</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
     </plugins>
   </build>
 </project>  

commit 1f949971208519a1f73edcde3dd148aaf8d94c83
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 20 10:25:26 2010 -0300

    Added support for Google's 'scope' param

diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index dd7a893..7939287 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -20,6 +20,7 @@ public class ServiceBuilder
   private String apiSecret;
   private String callback;
   private Api api;
+  private String scope;
   
   public ServiceBuilder()
   {
@@ -93,6 +94,18 @@ public class ServiceBuilder
   }
   
   /**
+   * Configures the OAuth scope. This is only necessary in some APIs (like Google's).
+   * 
+   * @param scope The OAuth scope
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder scope(String scope)
+  {
+    this.scope = scope;
+    return this;
+  }
+  
+  /**
    * Returns the fully configured {@link OAuthService}
    * 
    * @return fully configured {@link OAuthService}
@@ -102,6 +115,6 @@ public class ServiceBuilder
     Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
     Preconditions.checkEmptyString(apiKey, "You must provide an api key");
     Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
-    return api.createService(apiKey, apiSecret, callback);
+    return api.createService(apiKey, apiSecret, callback, scope);
   }
 }
diff --git a/src/main/java/org/scribe/builder/api/Api.java b/src/main/java/org/scribe/builder/api/Api.java
index 50d6d45..9a568a9 100644
--- a/src/main/java/org/scribe/builder/api/Api.java
+++ b/src/main/java/org/scribe/builder/api/Api.java
@@ -20,4 +20,16 @@ public interface Api
    * @return fully configured {@link OAuthService}
    */
   OAuthService createService(String apiKey, String apiSecret, String callback);
+  
+  /**
+   * Creates an {@link OAuthService}
+   * 
+   * @param apiKey your application api key
+   * @param apiSecret your application api secret
+   * @param callback the callback url (or 'oob' for out of band OAuth)
+   * @param scope the OAuth scope
+   * 
+   * @return fully configured {@link OAuthService}
+   */
+  OAuthService createService(String apiKey, String apiSecret, String callback, String scope);
 }
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 32c4478..c5d0a54 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -50,7 +50,6 @@ public abstract class DefaultApi10a implements Api
   public abstract String getRequestTokenEndpoint();
   public abstract String getAccessTokenEndpoint();
   
-  @Override
   public OAuthService createService(String apiKey, String apiSecret, String callback)
   {
     return new OAuth10aServiceImpl( getSignatureService(), 
@@ -61,6 +60,13 @@ public abstract class DefaultApi10a implements Api
                                     getAccessTokenExtractor(), 
                                     createConfig(apiKey, apiSecret, callback));
   }
+  
+  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
+  {
+    OAuthService service = createService(apiKey, apiSecret, callback);
+    service.addScope(scope);
+    return service;
+  }
 
   private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
   {
diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index 51ac9a3..2c18624 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -38,4 +38,5 @@ public class OAuthConstants
   public static final String VERIFIER = "oauth_verifier";
   public static final String HEADER = "Authorization";
   public static final Token EMPTY_TOKEN = new Token("", "");
+  public static final String SCOPE = "scope";
 }
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 5545cc9..2e6562c 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -6,7 +6,7 @@ import org.scribe.services.*;
 
 public class OAuth10aServiceImpl implements OAuthService
 {
-
+  private static final String NO_SCOPE = null;
   private static final String VERSION = "1.0";
 
   private OAuthConfig config;
@@ -16,6 +16,7 @@ public class OAuth10aServiceImpl implements OAuthService
   private HeaderExtractor headerExtractor;
   private RequestTokenExtractor rtExtractor;
   private AccessTokenExtractor atExtractor;
+  private String scope;
 
   public OAuth10aServiceImpl(SignatureService signatureService, TimestampService timestampService, BaseStringExtractor baseStringExtractor,
       HeaderExtractor headerExtractor, RequestTokenExtractor rtExtractor, AccessTokenExtractor atExtractor, OAuthConfig config)
@@ -27,6 +28,7 @@ public class OAuth10aServiceImpl implements OAuthService
     this.rtExtractor = rtExtractor;
     this.atExtractor = atExtractor;
     this.config = config;
+    this.scope = NO_SCOPE;
   }
 
   public Token getRequestToken()
@@ -47,6 +49,10 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
     request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
+    if(scope != NO_SCOPE)
+    {
+      request.addOAuthParameter(OAuthConstants.SCOPE, scope);
+    }
   }
 
   public Token getAccessToken(Token requestToken, Verifier verifier)
@@ -72,6 +78,11 @@ public class OAuth10aServiceImpl implements OAuthService
     return VERSION;
   }
 
+  public void addScope(String scope)
+  {
+    this.scope = scope;
+  }
+  
   private String getSignature(OAuthRequest request, Token token)
   {
     String baseString = baseStringExtractor.extract(request);
diff --git a/src/main/java/org/scribe/oauth/OAuthService.java b/src/main/java/org/scribe/oauth/OAuthService.java
index 50db621..18da2f0 100644
--- a/src/main/java/org/scribe/oauth/OAuthService.java
+++ b/src/main/java/org/scribe/oauth/OAuthService.java
@@ -11,4 +11,6 @@ public interface OAuthService
   public void signRequest(Token accessToken, OAuthRequest request);
 
   public String getVersion();
+
+  public void addScope(String scope);
 }

commit 5d8698242149bebb88b0c8c7214f3391a5bada96
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 20 10:43:38 2010 -0300

    Added check for invalid scope

diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 7939287..18f365e 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -101,6 +101,7 @@ public class ServiceBuilder
    */
   public ServiceBuilder scope(String scope)
   {
+    Preconditions.checkEmptyString(scope, "Invalid OAuth scope");
     this.scope = scope;
     return this;
   }

commit 50b54fbfb6104473ebb6bf251c1f3a8514f3116c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 20 17:06:03 2010 -0300

    Relaxed check to allow 'scope' parameter

diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
index 0e4041a..a712ae9 100644
--- a/src/main/java/org/scribe/model/OAuthRequest.java
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -2,18 +2,38 @@ package org.scribe.model;
 
 import java.util.*;
 
+/**
+ * The representation of an OAuth HttpRequest.
+ * 
+ * Adds OAuth-related functionality to the {@link Request}  
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuthRequest extends Request
 {
-
   private static final String OAUTH_PREFIX = "oauth_";
   private Map<String, String> oauthParameters;
 
+  /**
+   * Default constructor.
+   * 
+   * @param verb Http verb/method
+   * @param url resource URL
+   */
   public OAuthRequest(Verb verb, String url)
   {
     super(verb, url);
     this.oauthParameters = new HashMap<String, String>();
   }
 
+  /**
+   * Adds an OAuth parameter.
+   * 
+   * @param key name of the parameter
+   * @param value value of the parameter
+   * 
+   * @throws IllegalArgumentException if the parameter is not an OAuth parameter
+   */
   public void addOAuthParameter(String key, String value)
   {
     oauthParameters.put(checkKey(key), value);
@@ -21,15 +41,20 @@ public class OAuthRequest extends Request
 
   private String checkKey(String key)
   {
-    if (!key.startsWith(OAUTH_PREFIX))
+    if (!key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE))
     {
-      throw new IllegalArgumentException(String.format("OAuth parameters must start with '%s'", OAUTH_PREFIX));
+      throw new IllegalArgumentException(String.format("OAuth parameters must either be %s or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
     } else
     {
       return key;
     }
   }
 
+  /**
+   * Returns the {@link Map} containing the key-value pair of parameters.
+   * 
+   * @return parameters as map
+   */
   public Map<String, String> getOauthParameters()
   {
     return oauthParameters;

commit aad8dac5802dd49d1febb5e2d14a059b2b9a02bb
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 20 17:10:11 2010 -0300

    Made get signature the last call

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 2e6562c..ccb1717 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -4,6 +4,11 @@ import org.scribe.extractors.*;
 import org.scribe.model.*;
 import org.scribe.services.*;
 
+/**
+ * OAuth 1.0a implementation of {@link OAuthService}
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuth10aServiceImpl implements OAuthService
 {
   private static final String NO_SCOPE = null;
@@ -18,6 +23,17 @@ public class OAuth10aServiceImpl implements OAuthService
   private AccessTokenExtractor atExtractor;
   private String scope;
 
+  /**
+   * Default constructor
+   * 
+   * @param signatureService OAuth 1.0a signature service
+   * @param timestampService OAuth 1.0a timestamp service
+   * @param baseStringExtractor OAuth 1.0a base string extractor
+   * @param headerExtractor OAuth 1.0a http header extractor
+   * @param rtExtractor OAuth 1.0a request token extractor
+   * @param atExtractor OAuth 1.0a access token extractor
+   * @param config OAuth 1.0a configuration param object
+   */
   public OAuth10aServiceImpl(SignatureService signatureService, TimestampService timestampService, BaseStringExtractor baseStringExtractor,
       HeaderExtractor headerExtractor, RequestTokenExtractor rtExtractor, AccessTokenExtractor atExtractor, OAuthConfig config)
   {
@@ -31,6 +47,9 @@ public class OAuth10aServiceImpl implements OAuthService
     this.scope = NO_SCOPE;
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public Token getRequestToken()
   {
     OAuthRequest request = new OAuthRequest(config.getRequestTokenVerb(), config.getRequestTokenEndpoint());
@@ -48,13 +67,13 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.SIGN_METHOD, signatureService.getSignatureMethod());
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
     request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
+    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
-    if(scope != NO_SCOPE)
-    {
-      request.addOAuthParameter(OAuthConstants.SCOPE, scope);
-    }
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
     OAuthRequest request = new OAuthRequest(config.getAccessTokenVerb(), config.getAccessTokenEndpoint());
@@ -66,6 +85,9 @@ public class OAuth10aServiceImpl implements OAuthService
     return atExtractor.extract(response.getBody());
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public void signRequest(Token token, OAuthRequest request)
   {
     request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
@@ -73,11 +95,17 @@ public class OAuth10aServiceImpl implements OAuthService
     addOAuthHeader(request);
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public String getVersion()
   {
     return VERSION;
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public void addScope(String scope)
   {
     this.scope = scope;

commit 59f16bfddaa2b7c3c8f7d7113108eaea202d1c9b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Oct 24 11:48:21 2010 -0300

    Added bunch of javadocs and restricted some visibility.
    
    No functional changes

diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 18f365e..59368d4 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -22,6 +22,9 @@ public class ServiceBuilder
   private Api api;
   private String scope;
   
+  /**
+   * Default constructor
+   */
   public ServiceBuilder()
   {
     this.callback = OAuthConstants.OUT_OF_BAND;
diff --git a/src/main/java/org/scribe/builder/api/Api.java b/src/main/java/org/scribe/builder/api/Api.java
index 9a568a9..0202098 100644
--- a/src/main/java/org/scribe/builder/api/Api.java
+++ b/src/main/java/org/scribe/builder/api/Api.java
@@ -16,17 +16,6 @@ public interface Api
    * @param apiKey your application api key
    * @param apiSecret your application api secret
    * @param callback the callback url (or 'oob' for out of band OAuth)
-   * 
-   * @return fully configured {@link OAuthService}
-   */
-  OAuthService createService(String apiKey, String apiSecret, String callback);
-  
-  /**
-   * Creates an {@link OAuthService}
-   * 
-   * @param apiKey your application api key
-   * @param apiSecret your application api secret
-   * @param callback the callback url (or 'oob' for out of band OAuth)
    * @param scope the OAuth scope
    * 
    * @return fully configured {@link OAuthService}
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index c5d0a54..b2a39e2 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -5,52 +5,89 @@ import org.scribe.model.*;
 import org.scribe.oauth.*;
 import org.scribe.services.*;
 
+/**
+ * Default implementation of the OAuth protocol, version 1.0a
+ * 
+ * This class is meant to be extended by concrete implementations of the API.
+ * If your Api adheres to the 1.0a protocol correctly, you just need to extend 
+ * this class and define the getters for your endpoints.
+ * 
+ * @author Pablo Fernandez
+ *
+ */
 public abstract class DefaultApi10a implements Api
 {
-  public AccessTokenExtractor getAccessTokenExtractor()
+  
+  protected AccessTokenExtractor getAccessTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
-  public BaseStringExtractor getBaseStringExtractor()
+  protected BaseStringExtractor getBaseStringExtractor()
   {
     return new BaseStringExtractorImpl();
   }
 
-  public HeaderExtractor getHeaderExtractor()
+  protected HeaderExtractor getHeaderExtractor()
   {
     return new HeaderExtractorImpl();
   }
 
-  public RequestTokenExtractor getRequestTokenExtractor()
+  protected RequestTokenExtractor getRequestTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
-  public SignatureService getSignatureService()
+  protected SignatureService getSignatureService()
   {
     return new HMACSha1SignatureService(); 
   }
 
-  public TimestampService getTimestampService()
+  protected TimestampService getTimestampService()
   {
     return new TimestampServiceImpl();
   }
   
-  public Verb getAccessTokenVerb()
+  protected Verb getAccessTokenVerb()
   {
     return Verb.POST;
   }
   
-  public Verb getRequestTokenVerb()
+  protected Verb getRequestTokenVerb()
   {
     return Verb.POST;
   }
   
-  public abstract String getRequestTokenEndpoint();
-  public abstract String getAccessTokenEndpoint();
+  /**
+   * Returns the URL that receives the request token requests.
+   * 
+   * @return request token URL
+   */
+  protected abstract String getRequestTokenEndpoint();
+  
+  /**
+   * Returns the URL that receives the access token requests.
+   * 
+   * @return access token URL
+   */
+  protected abstract String getAccessTokenEndpoint();
+  
+  /**
+   * Returns the {@link OAuthService} for this Api
+   * 
+   * @param apiKey Key
+   * @param apiSecret Api Secret
+   * @param callback OAuth callback (either URL or 'oob')
+   * @param scope OAuth scope (optional) 
+   */
+  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
+  {
+    OAuthService service = createService(apiKey, apiSecret, callback);
+    service.addScope(scope);
+    return service;
+  }
   
-  public OAuthService createService(String apiKey, String apiSecret, String callback)
+  private OAuthService createService(String apiKey, String apiSecret, String callback)
   {
     return new OAuth10aServiceImpl( getSignatureService(), 
                                     getTimestampService(), 
@@ -61,13 +98,6 @@ public abstract class DefaultApi10a implements Api
                                     createConfig(apiKey, apiSecret, callback));
   }
   
-  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
-  {
-    OAuthService service = createService(apiKey, apiSecret, callback);
-    service.addScope(scope);
-    return service;
-  }
-
   private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
   {
     OAuthConfig config = new OAuthConfig();
diff --git a/src/main/java/org/scribe/builder/api/FoursquareApi.java b/src/main/java/org/scribe/builder/api/FoursquareApi.java
index 2d5b5a8..1a30808 100644
--- a/src/main/java/org/scribe/builder/api/FoursquareApi.java
+++ b/src/main/java/org/scribe/builder/api/FoursquareApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class FoursquareApi extends DefaultApi10a
 {
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "http://foursquare.com/oauth/access_token";
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "http://foursquare.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 1d9c886..30980b8 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class GoogleApi extends DefaultApi10a
 {
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "https://www.google.com/accounts/OAuthGetAccessToken"; 
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index bf31010..b02a31e 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -7,19 +7,19 @@ public class LinkedInApi extends DefaultApi10a
 {
 
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "https://api.linkedin.com/uas/oauth/accessToken";
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "https://api.linkedin.com/uas/oauth/requestToken";
   }
   
   @Override
-  public BaseStringExtractor getBaseStringExtractor()
+  protected BaseStringExtractor getBaseStringExtractor()
   {
     return new LinkedInBaseStringExtractorImpl();
   }
diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index e8b65ca..652cf3f 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class TwitterApi extends DefaultApi10a
 {
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "http://twitter.com/oauth/access_token";
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "http://twitter.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/VimeoApi.java b/src/main/java/org/scribe/builder/api/VimeoApi.java
index 2fa1701..e5140b7 100644
--- a/src/main/java/org/scribe/builder/api/VimeoApi.java
+++ b/src/main/java/org/scribe/builder/api/VimeoApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class VimeoApi extends DefaultApi10a
 {
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "http://vimeo.com/oauth/access_token";
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "http://vimeo.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/YahooApi.java b/src/main/java/org/scribe/builder/api/YahooApi.java
index 5767905..ea6cba9 100644
--- a/src/main/java/org/scribe/builder/api/YahooApi.java
+++ b/src/main/java/org/scribe/builder/api/YahooApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class YahooApi extends DefaultApi10a
 {
   @Override
-  public String getAccessTokenEndpoint()
+  protected String getAccessTokenEndpoint()
   {
     return "https://api.login.yahoo.com/oauth/v2/get_token";
   }
 
   @Override
-  public String getRequestTokenEndpoint()
+  protected String getRequestTokenEndpoint()
   {
     return "https://api.login.yahoo.com/oauth/v2/get_request_token";
   }
diff --git a/src/main/java/org/scribe/exceptions/OAuthException.java b/src/main/java/org/scribe/exceptions/OAuthException.java
index 78e41a4..85f49d9 100644
--- a/src/main/java/org/scribe/exceptions/OAuthException.java
+++ b/src/main/java/org/scribe/exceptions/OAuthException.java
@@ -1,18 +1,33 @@
 package org.scribe.exceptions;
 
+/**
+ * Default scribe exception. 
+ * Represents a problem in the OAuth signing process
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuthException extends RuntimeException
 {
 
+  /**
+   * Default constructor 
+   * @param message message explaining what went wrong
+   * @param e original exception
+   */
   public OAuthException(String message, Exception e)
   {
     super(message, e);
   }
 
+  /**
+   * No-exception constructor. Used when there is no original exception
+   *  
+   * @param message message explaining what went wrong
+   */
   public OAuthException(String message)
   {
     super(message, null);
   }
 
   private static final long serialVersionUID = 1L;
-
 }
diff --git a/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java b/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java
index 8eb3f14..8407ce4 100644
--- a/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java
+++ b/src/main/java/org/scribe/exceptions/OAuthParametersMissingException.java
@@ -2,6 +2,11 @@ package org.scribe.exceptions;
 
 import org.scribe.model.*;
 
+/**
+ * Specialized exception that represents a missing OAuth parameter. 
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuthParametersMissingException extends OAuthException
 {
 
@@ -9,6 +14,11 @@ public class OAuthParametersMissingException extends OAuthException
   private static final String MSG = "Could not find oauth parameters in request: %s. "
       + "OAuth parameters must be specified with the addOAuthParameter() method";
 
+  /**
+   * Default constructor.
+   * 
+   * @param request OAuthRequest that caused the error
+   */
   public OAuthParametersMissingException(OAuthRequest request)
   {
     super(String.format(MSG, request));
diff --git a/src/main/java/org/scribe/exceptions/OAuthSignatureException.java b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
index 765c10a..50143b5 100644
--- a/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
+++ b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
@@ -1,9 +1,20 @@
 package org.scribe.exceptions;
 
+/**
+ * Specialized exception that represents a problem in the signature
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuthSignatureException extends OAuthException
 {
   private static final long serialVersionUID = 1L;
   
+  /**
+   * Default constructor
+   * 
+   * @param stringToSign plain string that gets signed (HMAC-SHA, etc)
+   * @param e original exception
+   */
   public OAuthSignatureException(String stringToSign, Exception e)
   {
     super("Error while signing string: " + stringToSign, e);
diff --git a/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java b/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
index 29572bc..0413a42 100644
--- a/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
@@ -3,9 +3,17 @@ package org.scribe.extensions.linkedin;
 import org.scribe.extractors.*;
 import org.scribe.model.*;
 
+/**
+ * LinkedIn's specific extractor that does not encode the tilde character.
+ * 
+ * @author Pablo Fernandez
+ */
 public class LinkedInBaseStringExtractorImpl extends BaseStringExtractorImpl
 {
 
+  /**
+   * {@inheritDoc}
+   */
   @Override
   public String extract(OAuthRequest request)
   {
diff --git a/src/main/java/org/scribe/extractors/AccessTokenExtractor.java b/src/main/java/org/scribe/extractors/AccessTokenExtractor.java
index 1754851..3c0dd34 100644
--- a/src/main/java/org/scribe/extractors/AccessTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/AccessTokenExtractor.java
@@ -2,7 +2,18 @@ package org.scribe.extractors;
 
 import org.scribe.model.*;
 
+/**
+ * Simple command object that extracts a {@link Token} from a String
+ * 
+ * @author Pablo Fernandez
+ */
 public interface AccessTokenExtractor
 {
+  /**
+   * Extracts the access token from the contents of an Http Response
+   *  
+   * @param response the contents of the response
+   * @return OAuth access token
+   */
   public Token extract(String response);
 }
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractor.java b/src/main/java/org/scribe/extractors/BaseStringExtractor.java
index 3ea180c..83ddd10 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractor.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractor.java
@@ -2,7 +2,20 @@ package org.scribe.extractors;
 
 import org.scribe.model.*;
 
+/**
+ * Simple command object that extracts a base string from a {@link OAuthRequest}
+ * 
+ * @author Pablo Fernandez
+ */
 public interface BaseStringExtractor
 {
+  /**
+   * Extracts an url-encoded base string from the {@link OAuthRequest}.
+   * 
+   * See <a href="http://oauth.net/core/1.0/#anchor14">the oauth spec</a> for more info on this.
+   * 
+   * @param request the OAuthRequest
+   * @return the url-encoded base string
+   */
   String extract(OAuthRequest request);
 }
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index 4bbf20f..f18c62c 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -6,11 +6,20 @@ import org.scribe.exceptions.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
 
+/**
+ * Default implementation of {@link BaseStringExtractor}. Conforms to OAuth 1.0a
+ * 
+ * @author Pablo Fernandez
+ *
+ */
 public class BaseStringExtractorImpl implements BaseStringExtractor
 {
 
   private static final String AMPERSAND_SEPARATED_STRING = "%s&%s&%s";
 
+  /**
+   * {@inheritDoc}
+   */
   public String extract(OAuthRequest request)
   {
     checkPreconditions(request);
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractor.java b/src/main/java/org/scribe/extractors/HeaderExtractor.java
index 8169422..2bc1f8b 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractor.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractor.java
@@ -2,7 +2,18 @@ package org.scribe.extractors;
 
 import org.scribe.model.*;
 
+/**
+ * Simple command object that generates an OAuth Authorization header to include in the request.
+ * 
+ * @author Pablo Fernandez
+ */
 public interface HeaderExtractor
 {
+  /**
+   * Generates an OAuth 'Authorization' Http header to include in requests as the signature.
+   * 
+   * @param request the OAuthRequest to inspect and generate the header
+   * @return the Http header value
+   */
   String extract(OAuthRequest request);
 }
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index 4449f2f..6cc1981 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -6,11 +6,20 @@ import org.scribe.exceptions.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
 
+/**
+ * Default implementation of {@link HeaderExtractor}. Conforms to OAuth 1.0a
+ * 
+ * @author Pablo Fernandez
+ *
+ */
 public class HeaderExtractorImpl implements HeaderExtractor
 {
   private static final String PARAM_SEPARATOR = ", ";
   private static final String PREAMBLE = "OAuth ";
 
+  /**
+   * {@inheritDoc}
+   */
   public String extract(OAuthRequest request)
   {
     checkPreconditions(request);
diff --git a/src/main/java/org/scribe/extractors/RequestTokenExtractor.java b/src/main/java/org/scribe/extractors/RequestTokenExtractor.java
index 696c389..1830212 100644
--- a/src/main/java/org/scribe/extractors/RequestTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/RequestTokenExtractor.java
@@ -2,8 +2,18 @@ package org.scribe.extractors;
 
 import org.scribe.model.*;
 
+/**
+ * Simple command object that extracts a {@link Token} from a String
+ * 
+ * @author Pablo Fernandez
+ */
 public interface RequestTokenExtractor
 {
-
+  /**
+   * Extracts the request token from the contents of an Http Response
+   *  
+   * @param response the contents of the response
+   * @return OAuth access token
+   */
   public Token extract(String response);
 }
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index 0147957..501c018 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -6,11 +6,20 @@ import org.scribe.exceptions.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
 
+/**
+ * Default implementation of {@RequestTokenExtractor} and {@AccessTokenExtractor}. Conforms to OAuth 1.0a
+ *
+ * The process for extracting access and request tokens is similar so this class can do both things.
+ * 
+ * @author Pablo Fernandez
+ */
 public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExtractor
 {
-
   private static final String TOKEN_REGEX = "oauth_token=(\\S*)&oauth_token_secret=(\\S*?)(&(.*))?";
 
+  /**
+   * {@inheritDoc} 
+   */
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cant extract a token from null object or an empty string.");
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index f2634f1..2521d57 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -1,5 +1,10 @@
 package org.scribe.model;
 
+/**
+ * Parameter object that groups OAuth config values
+ * 
+ * @author Pablo Fernandez
+ */
 public class OAuthConfig
 {
   private String apiKey;
diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index 2c18624..bc0010b 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -19,7 +19,6 @@ package org.scribe.model;
  * This class contains OAuth constants, used project-wide
  * 
  * @author Pablo Fernandez
- * 
  */
 public class OAuthConstants
 {
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index f7853be..9052bca 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -14,7 +14,6 @@ import org.scribe.utils.*;
  */
 class Request
 {
-
   private static final String CONTENT_LENGTH = "Content-Length";
 
   private String url;
diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
index 536225f..6164e14 100644
--- a/src/main/java/org/scribe/model/Response.java
+++ b/src/main/java/org/scribe/model/Response.java
@@ -13,7 +13,6 @@ import org.scribe.utils.*;
  */
 public class Response
 {
-
   private static final String EMPTY = "";
 
   private int code;
@@ -52,11 +51,6 @@ public class Response
     return headers;
   }
 
-  /**
-   * Checks if the code is in the successful or redirect range.
-   * 
-   * @return true if successful
-   */
   private boolean wasSuccessful()
   {
     return getCode() >= 200 && getCode() < 400;
diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
index ee33391..6084e4e 100644
--- a/src/main/java/org/scribe/model/Token.java
+++ b/src/main/java/org/scribe/model/Token.java
@@ -1,11 +1,21 @@
 package org.scribe.model;
 
+/**
+ * Represents an OAuth token (either request or access token) and its secret
+ * 
+ * @author Pablo Fernandez
+ */
 public class Token
 {
-
   private final String token;
   private final String secret;
 
+  /**
+   * Default constructor
+   * 
+   * @param token token value
+   * @param secret token secret
+   */
   public Token(String token, String secret)
   {
     this.token = token;
diff --git a/src/main/java/org/scribe/model/Verifier.java b/src/main/java/org/scribe/model/Verifier.java
index 512ac00..2a98fd6 100644
--- a/src/main/java/org/scribe/model/Verifier.java
+++ b/src/main/java/org/scribe/model/Verifier.java
@@ -1,10 +1,19 @@
 package org.scribe.model;
 
+/**
+ * Represents an OAuth verifier code.
+ * 
+ * @author Pablo Fernandez
+ */
 public class Verifier
 {
-
   private final String value;
 
+  /**
+   * Default constructor.
+   * 
+   * @param value verifier value
+   */
   public Verifier(String value)
   {
     this.value = value;
diff --git a/src/main/java/org/scribe/oauth/OAuthService.java b/src/main/java/org/scribe/oauth/OAuthService.java
index 18da2f0..0b54f51 100644
--- a/src/main/java/org/scribe/oauth/OAuthService.java
+++ b/src/main/java/org/scribe/oauth/OAuthService.java
@@ -2,15 +2,50 @@ package org.scribe.oauth;
 
 import org.scribe.model.*;
 
+/**
+ * The main Scribe object. 
+ * 
+ * A facade responsible for the retrieval of request and access tokens and for the signing of HTTP requests.  
+ * 
+ * @author Pablo Fernandez
+ */
 public interface OAuthService
 {
+  /**
+   * Retrieve the request token.
+   * 
+   * @return request token
+   */
   public Token getRequestToken();
 
+  /**
+   * Retrieve the access token
+   * 
+   * @param requestToken request token (obtained previously)
+   * @param verifier verifier code
+   * @return access token
+   */
   public Token getAccessToken(Token requestToken, Verifier verifier);
 
+  /**
+   * Signs am OAuth request
+   * 
+   * @param accessToken access token (obtained previously)
+   * @param request request to sign
+   */
   public void signRequest(Token accessToken, OAuthRequest request);
 
+  /**
+   * Returns the OAuth version of the service.
+   * 
+   * @return oauth version as string
+   */
   public String getVersion();
 
+  /**
+   * Adds the 'scope' parameter. This is **not** a default OAuth parameter and the setting is optional.
+   * 
+   * @param scope OAuth Api scope (optional)
+   */
   public void addScope(String scope);
 }
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 94db9c3..013a82d 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -7,15 +7,23 @@ import org.apache.commons.codec.binary.*;
 import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
+/**
+ * HMAC-SHA1 implementation of {@SignatureService}
+ * 
+ * @author Pablo Fernandez
+ *
+ */
 public class HMACSha1SignatureService implements SignatureService
 {
-
   private static final String EMPTY_STRING = "";
   private static final String CARRIAGE_RETURN = "\r\n";
   private static final String UTF8 = "UTF-8";
   private static final String HMAC_SHA1 = "HmacSHA1";
   private static final String METHOD = "HMAC-SHA1";
 
+  /**
+   * {@inheritDoc}
+   */
   public String getSignature(String baseString, String apiSecret, String tokenSecret)
   {
     try
@@ -39,6 +47,9 @@ public class HMACSha1SignatureService implements SignatureService
     return new String(Base64.encodeBase64(bytes)).replace(CARRIAGE_RETURN, EMPTY_STRING);
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public String getSignatureMethod()
   {
     return METHOD;
diff --git a/src/main/java/org/scribe/services/SignatureService.java b/src/main/java/org/scribe/services/SignatureService.java
index fddf285..229c2f6 100644
--- a/src/main/java/org/scribe/services/SignatureService.java
+++ b/src/main/java/org/scribe/services/SignatureService.java
@@ -1,8 +1,28 @@
 package org.scribe.services;
 
+/**
+ * Signs a base string, returning the OAuth signature
+ * 
+ * @author Pablo Fernandez
+ *
+ */
 public interface SignatureService
 {
+  /**
+   * Returns the signature
+   * 
+   * @param baseString url-encoded string to sign
+   * @param apiSecret api secret for your app
+   * @param tokenSecret token secret (empty string for the request token step)
+   * 
+   * @return signature
+   */
   public String getSignature(String baseString, String apiSecret, String tokenSecret);
 
+  /**
+   * Returns the signature method/algorithm
+   * 
+   * @return
+   */
   public String getSignatureMethod();
 }
diff --git a/src/main/java/org/scribe/services/TimestampService.java b/src/main/java/org/scribe/services/TimestampService.java
index ada540b..221a226 100644
--- a/src/main/java/org/scribe/services/TimestampService.java
+++ b/src/main/java/org/scribe/services/TimestampService.java
@@ -1,9 +1,25 @@
 package org.scribe.services;
 
+/**
+ * Unix epoch timestamp generator.
+ * 
+ * This class is useful for stubbing in tests. 
+ * 
+ * @author Pablo Fernandez
+ */
 public interface TimestampService
 {
-
+  /**
+   * Returns the unix epoch timestamp in seconds
+   * 
+   * @return timestamp
+   */
   public String getTimestampInSeconds();
 
+  /**
+   * Returns a nonce (unique value for each request)
+   * 
+   * @return nonce
+   */
   public String getNonce();
 }
diff --git a/src/main/java/org/scribe/services/TimestampServiceImpl.java b/src/main/java/org/scribe/services/TimestampServiceImpl.java
index 894e07b..4aa27e0 100644
--- a/src/main/java/org/scribe/services/TimestampServiceImpl.java
+++ b/src/main/java/org/scribe/services/TimestampServiceImpl.java
@@ -2,22 +2,35 @@ package org.scribe.services;
 
 import java.util.*;
 
+/**
+ * Implementation of {@link TimestampService} using plain java classes.
+ * 
+ * @author Pablo Fernandez
+ */
 public class TimestampServiceImpl implements TimestampService
 {
-
   private Timer timer;
 
+  /**
+   * Default constructor. 
+   */
   public TimestampServiceImpl()
   {
     timer = new Timer();
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public String getNonce()
   {
     Long ts = getTs();
     return String.valueOf(ts + timer.getRandomInteger());
   }
 
+  /**
+   * {@inheritDoc}
+   */
   public String getTimestampInSeconds()
   {
     return String.valueOf(getTs());
@@ -33,14 +46,19 @@ public class TimestampServiceImpl implements TimestampService
     this.timer = timer;
   }
 
+  /**
+   * Inner class that uses {@link System} for generating the timestamps.
+   * 
+   * @author Pablo Fernandez
+   */
   static class Timer
   {
-    public Long getMilis()
+    Long getMilis()
     {
       return System.currentTimeMillis();
     }
 
-    public Integer getRandomInteger()
+    Integer getRandomInteger()
     {
       return new Random().nextInt();
     }
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index 011d880..db08db3 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -2,9 +2,19 @@ package org.scribe.utils;
 
 import java.util.*;
 
+/**
+ * Utils for {@link Map} manipulation
+ * 
+ * @author Pablo Fernandez
+ */
 public class MapUtils
 {
-
+  /**
+   * Sorts a Map
+   * 
+   * @param map unsorted map
+   * @return sorted map
+   */
   public static final Map<String, String> sort(Map<String, String> map)
   {
     Preconditions.checkNotNull(map, "Cannot sort a null object.");
diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index f63a20e..d7a06c3 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -4,27 +4,60 @@ import java.util.regex.Pattern;
 
 import org.scribe.model.OAuthConstants;
 
+/**
+ * Utils for checking preconditions and invariants
+ * 
+ * @author Pablo Fernandez
+ */
 public class Preconditions
 {
   private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
   private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z_-]+://\\S+");
 
+  /**
+   * Checks that an object is not null.
+   * 
+   * @param object any object
+   * @param errorMsg error message
+   * 
+   * @throws IllegalArgumentException if the object is null
+   */
   public static void checkNotNull(Object object, String errorMsg)
   {
     check(object != null, errorMsg);
   }
 
+  /**
+   * Checks that a string is not null or empty
+   * 
+   * @param string any string
+   * @param errorMsg error message
+   * 
+   * @throws IllegalArgumentException if the string is null or empty
+   */
   public static void checkEmptyString(String string, String errorMsg)
   {
     check(string != null && !string.trim().equals(""), errorMsg);
   }
 
+  /**
+   * Checks that a URL is valid
+   * 
+   * @param url any string
+   * @param errorMsg error message
+   */
   public static void checkValidUrl(String url, String errorMsg)
   {
     checkEmptyString(url, errorMsg);
     check(isUrl(url), errorMsg);
   }
   
+  /**
+   * Checks that a URL is a valid OAuth callback
+   *  
+   * @param url any string
+   * @param errorMsg error message
+   */
   public static void checkValidOAuthCallback(String url, String errorMsg)
   {
     checkEmptyString(url, errorMsg);
@@ -34,7 +67,7 @@ public class Preconditions
     }
   }
   
-  static boolean isUrl(String url)
+  private static boolean isUrl(String url)
   {
     return URL_PATTERN.matcher(url).matches();
   }
diff --git a/src/main/java/org/scribe/utils/StreamUtils.java b/src/main/java/org/scribe/utils/StreamUtils.java
index 20c477e..fc5be8c 100644
--- a/src/main/java/org/scribe/utils/StreamUtils.java
+++ b/src/main/java/org/scribe/utils/StreamUtils.java
@@ -2,9 +2,19 @@ package org.scribe.utils;
 
 import java.io.*;
 
+/**
+ * Utils to deal with Streams.
+ *  
+ * @author Pablo Fernandez
+ */
 public class StreamUtils
 {
-
+  /**
+   * Returns the stream contents as an UTF-8 encoded string
+   * 
+   * @param is input stream
+   * @return string contents
+   */
   public static String getStreamContents(InputStream is)
   {
     Preconditions.checkNotNull(is, "Cannot get String from a null object");
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 11dbc1a..5cf08bd 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -6,9 +6,13 @@ import java.util.*;
 
 import org.scribe.exceptions.*;
 
+/**
+ * Utils to deal with URL and url-encodings 
+ * 
+ * @author Pablo Fernandez
+ */
 public class URLUtils
 {
-
   private static final String EMPTY_STRING = "";
   private static final String UTF_8 = "UTF-8";
   private static final char PAIR_SEPARATOR = '=';
@@ -16,6 +20,12 @@ public class URLUtils
 
   private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
 
+  /**
+   * Turns a map into a form-url-encoded string (key=value&key2=value2)
+   * 
+   * @param map any map
+   * @return form-url-encoded string
+   */
   public static String formURLEncodeMap(Map<String, String> map)
   {
     Preconditions.checkNotNull(map, "Cannot url-encode a null object");
@@ -36,6 +46,12 @@ public class URLUtils
     return encodedString.toString();
   }
 
+  /**
+   * Percent encodes a string
+   * 
+   * @param plain
+   * @return percent encoded string
+   */
   public static String percentEncode(String string)
   {
     Preconditions.checkNotNull(string, "Cannot encode null string");
@@ -49,6 +65,12 @@ public class URLUtils
     }
   }
 
+  /**
+   * Percent decodes a string
+   * 
+   * @param string percent encoded string
+   * @return plain string
+   */
   public static String percentDecode(String string)
   {
     Preconditions.checkNotNull(string, "Cannot decode null string");

commit 9b85863edf41f19b5697bee7fe2fd362499c2156
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Oct 24 12:29:20 2010 -0300

    Added some conf needed for repo publishing and set Junit dep to 'test' scope

diff --git a/pom.xml b/pom.xml
index 7fbc6c3..39ab993 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,13 @@
   <version>1.0.5</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
-  <url>github.com/fernandezpablo85/scribe-java</url>
+  <url>http://github.com/fernandezpablo85/scribe-java</url>
+
+  <parent>
+    <groupId>org.sonatype.oss</groupId>
+    <artifactId>oss-parent</artifactId>
+    <version>5</version>
+  </parent>
 
   <developers>
     <developer>
@@ -42,6 +48,7 @@
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
       <version>4.8.1</version>
+      <scope>test</scope>
     </dependency>
     
   </dependencies>

commit 843d9feddc7c70de2d360cdd95052c14e3a3b739
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Oct 24 12:30:08 2010 -0300

    Removed unused file

diff --git a/src/main/java/org/scribe/model/OAuthParams.java b/src/main/java/org/scribe/model/OAuthParams.java
deleted file mode 100644
index f261307..0000000
--- a/src/main/java/org/scribe/model/OAuthParams.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package org.scribe.model;
-
-public class OAuthParams
-{
-
-}

commit 8bd1e9428782d290578af4f594286e4f333247b6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Oct 24 17:37:08 2010 -0300

    Changed version number for deploy

diff --git a/pom.xml b/pom.xml
index 39ab993..3726de9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.5</version>
+  <version>1.0.6</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 545867ca1ded62f15be8ef88067988494a60b967
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Oct 25 09:22:11 2010 -0300

    Added maven info to homepage

diff --git a/README.textile b/README.textile
index ff9f426..c00e6c5 100644
--- a/README.textile
+++ b/README.textile
@@ -48,6 +48,16 @@ Good test coverage to keep you safe from harm.
 
 When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
 
+h3. Pull it from Maven! (new)
+
+You can pull scribe from a maven repository, just add this to your __pom.xml__ file:
+
+@<dependency>@
+  @<groupId>org.scribe</groupId>@
+  @<artifactId>scribe</artifactId>@
+  @<version>1.0.6</version>@
+@</dependency>@
+
 h1. Getting started in less than 2 minutes
 
 Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe-java/getting-started page and start rocking!

commit 874e959e0940032af2b854bc32e6fcf7e86f8bd5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Oct 25 12:11:50 2010 -0300

    Fixed bug in scope for Google

diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
index a712ae9..ec7f023 100644
--- a/src/main/java/org/scribe/model/OAuthRequest.java
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -41,7 +41,7 @@ public class OAuthRequest extends Request
 
   private String checkKey(String key)
   {
-    if (!key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE))
+    if (!key.startsWith(OAUTH_PREFIX) || !key.equals(OAuthConstants.SCOPE))
     {
       throw new IllegalArgumentException(String.format("OAuth parameters must either be %s or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
     } else

commit db27be9e2b02ab2dcaf1a922f3b518ad574085f1
Author: Owen <owen.parrish@gmail.com>
Date:   Tue Oct 26 17:45:43 2010 -0400

    Added Evernote and Yammer APIs

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
new file mode 100644
index 0000000..687edb8
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -0,0 +1,18 @@
+package org.scribe.builder.api;
+
+public class EvernoteApi extends DefaultApi10a
+{
+
+	@Override
+	public String getRequestTokenEndpoint()
+  {
+		return "https://www.evernote.com/oauth";
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+  {
+		return "https://www.evernote.com/oauth";
+	}
+
+}
diff --git a/src/main/java/org/scribe/builder/api/YammerApi.java b/src/main/java/org/scribe/builder/api/YammerApi.java
new file mode 100644
index 0000000..f017276
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/YammerApi.java
@@ -0,0 +1,17 @@
+package org.scribe.builder.api;
+
+public class YammerApi extends DefaultApi10a {
+
+	@Override
+	public String getRequestTokenEndpoint()
+  {
+		return "https://www.yammer.com/oauth/request_token";
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+  {
+		return "https://www.yammer.com/oauth/access_token";
+	}
+
+}

commit 58991e81efca16784c43664fbf7d2124e4107483
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 27 15:06:41 2010 -0300

    Changed revision number for release

diff --git a/pom.xml b/pom.xml
index 3726de9..78f282c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>
diff --git a/src/main/java/org/scribe/builder/api/YammerApi.java b/src/main/java/org/scribe/builder/api/YammerApi.java
index f017276..d987798 100644
--- a/src/main/java/org/scribe/builder/api/YammerApi.java
+++ b/src/main/java/org/scribe/builder/api/YammerApi.java
@@ -1,6 +1,7 @@
 package org.scribe.builder.api;
 
-public class YammerApi extends DefaultApi10a {
+public class YammerApi extends DefaultApi10a
+{
 
 	@Override
 	public String getRequestTokenEndpoint()

commit ed0970c8cb8e5f52a861e904312678214c52c1f4
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 27 15:12:31 2010 -0300

    Added Changelog

diff --git a/changelog.txt b/changelog.txt
new file mode 100644
index 0000000..54a9f6b
--- /dev/null
+++ b/changelog.txt
@@ -0,0 +1,8 @@
+[1.0.6]
+
+ * FEATURE: Available in maven central repositories.
+
+[1.0.7]
+
+ * FEATURE: Added support for Yammer and Evernote ( thanks oparrsih )
+ * FIX: Fixed bug that preventing setting the scope param on Google Api  

commit 9cb2af37c7c3f9fdcc3da63714ba801747df33b2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 27 15:27:35 2010 -0300

    Fixed conditional

diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
index ec7f023..4389227 100644
--- a/src/main/java/org/scribe/model/OAuthRequest.java
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -41,12 +41,13 @@ public class OAuthRequest extends Request
 
   private String checkKey(String key)
   {
-    if (!key.startsWith(OAUTH_PREFIX) || !key.equals(OAuthConstants.SCOPE))
-    {
-      throw new IllegalArgumentException(String.format("OAuth parameters must either be %s or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
-    } else
+    if (key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE))
     {
       return key;
+    } 
+    else
+    {
+      throw new IllegalArgumentException(String.format("OAuth parameters must either be '%s' or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
     }
   }
 

commit 149756e5ed484fa4e71cc84586401add1c05041d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 27 15:35:25 2010 -0300

    Added test for scope parameter

diff --git a/src/test/java/org/scribe/model/OAuthRequestTest.java b/src/test/java/org/scribe/model/OAuthRequestTest.java
index 9d2ac79..1ea2f2f 100644
--- a/src/test/java/org/scribe/model/OAuthRequestTest.java
+++ b/src/test/java/org/scribe/model/OAuthRequestTest.java
@@ -21,8 +21,9 @@ public class OAuthRequestTest
     request.addOAuthParameter(OAuthConstants.TOKEN, "token");
     request.addOAuthParameter(OAuthConstants.NONCE, "nonce");
     request.addOAuthParameter(OAuthConstants.TIMESTAMP, "ts");
+    request.addOAuthParameter(OAuthConstants.SCOPE, "feeds");
 
-    assertEquals(3, request.getOauthParameters().size());
+    assertEquals(4, request.getOauthParameters().size());
   }
 
   @Test(expected = IllegalArgumentException.class)

commit 3e7291eaee8dd971efefc9caaca364d4cfbdf00f
Author: Jamie Tsao <code@jamietsao.com>
Date:   Thu Nov 4 15:23:19 2010 -0400

    Added methods to allow for setting the connect and read timeouts on the underlying HttpURLConnection

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 9052bca..c94b7d7 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -21,7 +21,6 @@ class Request
   private Map<String, String> bodyParams;
   private Map<String, String> headers;
   private String payload = null;
-  private Integer timeout = null;
   private HttpURLConnection connection;
 
   /**
@@ -39,7 +38,6 @@ class Request
     try
     {
       connection = (HttpURLConnection) new URL(url).openConnection();
-      if(timeout != null) connection.setConnectTimeout(timeout);
     } catch (IOException ioe)
     {
       throw new OAuthException("Could not open connection to: " + url, ioe);
@@ -212,13 +210,23 @@ class Request
   }
 
   /**
-   * Sets the connection timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * Sets the connect timeout in milliseconds for the underlying {@link HttpURLConnection}
    * 
-   * @param timeout in milliseconds
+   * @param connect timeout in milliseconds
    */
-  public void setTimeout(int timeout)
+  public void setConnectTimeout(int timeout)
   {
-    this.timeout = timeout;
+    this.connection.setConnectTimeout(timeout);
+  }
+
+  /**
+   * Sets the read timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * 
+   * @param read timeout in milliseconds
+   */
+  public void setReadTimeout(int timeout)
+  {
+    this.connection.setReadTimeout(timeout);
   }
   
   /*

commit 20b200c7bc6e9cb8528acd63684bcd1998911867
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 6 19:09:28 2010 -0300

    Changed Twitter OAuth endpoints to use the new api.twitter.com

diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index 652cf3f..2a327ad 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -5,12 +5,12 @@ public class TwitterApi extends DefaultApi10a
   @Override
   protected String getAccessTokenEndpoint()
   {
-    return "http://twitter.com/oauth/access_token";
+    return "http://api.twitter.com/oauth/access_token";
   }
 
   @Override
   protected String getRequestTokenEndpoint()
   {
-    return "http://twitter.com/oauth/request_token";
+    return "http://api.twitter.com/oauth/request_token";
   }
 }
diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index 1891d0d..d98f0e2 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -9,7 +9,7 @@ import org.scribe.oauth.*;
 
 public class TwitterExample
 {
-  private static final String AUTHORIZE_URL = "https://twitter.com/oauth/authorize?oauth_token=";
+  private static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize?oauth_token=";
   private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
   
   public static void main(String[] args)

commit 029125490d87b0f336e1ca6272f1b42192990b87
Merge: 20b200c 3e7291e
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 6 19:38:39 2010 -0300

    Merge https://github.com/jamietsao/scribe-java

commit 377c3233d94d184ff52860a22c1327ee3cae812f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 6 19:54:47 2010 -0300

    Added TimeUnit for the timeout calls

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index c94b7d7..acec9f9 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -3,6 +3,7 @@ package org.scribe.model;
 import java.io.*;
 import java.net.*;
 import java.util.*;
+import java.util.concurrent.TimeUnit;
 
 import org.scribe.exceptions.*;
 import org.scribe.utils.*;
@@ -210,23 +211,27 @@ class Request
   }
 
   /**
-   * Sets the connect timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * Sets the connect timeout for the underlying {@link HttpURLConnection}
    * 
-   * @param connect timeout in milliseconds
+   * @param duration duration of the timeout
+   * 
+   * @param unit unit of time (milliseconds, seconds, etc)
    */
-  public void setConnectTimeout(int timeout)
+  public void setConnectTimeout(int duration, TimeUnit unit)
   {
-    this.connection.setConnectTimeout(timeout);
+    this.connection.setConnectTimeout((int) unit.toMillis(duration));
   }
 
   /**
-   * Sets the read timeout in milliseconds for the underlying {@link HttpURLConnection}
+   * Sets the read timeout for the underlying {@link HttpURLConnection}
+   * 
+   * @param duration duration of the timeout
    * 
-   * @param read timeout in milliseconds
+   * @param unit unit of time (milliseconds, seconds, etc)
    */
-  public void setReadTimeout(int timeout)
+  public void setReadTimeout(int duration, TimeUnit unit)
   {
-    this.connection.setReadTimeout(timeout);
+    this.connection.setReadTimeout((int) unit.toMillis(duration));
   }
   
   /*

commit dee0f55b1e04048875a0abd3c7601a9c3e16c79e
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 6 19:56:40 2010 -0300

    Updated changelog

diff --git a/changelog.txt b/changelog.txt
index 54a9f6b..5b997e6 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -6,3 +6,7 @@
 
  * FEATURE: Added support for Yammer and Evernote ( thanks oparrsih )
  * FIX: Fixed bug that preventing setting the scope param on Google Api  
+
+[1.0.8]
+
+ * FEATURE: Added setConnectTimeout and setReadTimeout for the Request Object
\ No newline at end of file

commit 9337ac01d9d7fac71d909a48553b38faff1c7253
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 6 20:03:13 2010 -0300

    Fixed EvernoteApi to use GET

diff --git a/changelog.txt b/changelog.txt
index 5b997e6..cb273cc 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -9,4 +9,5 @@
 
 [1.0.8]
 
- * FEATURE: Added setConnectTimeout and setReadTimeout for the Request Object
\ No newline at end of file
+ * FEATURE: Added setConnectTimeout and setReadTimeout for the Request Object
+ * FIX: Fixed Evernote Api (uses GET for request and access tokens)
diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index 687edb8..5d02eec 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -1,7 +1,14 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Verb;
+
 public class EvernoteApi extends DefaultApi10a
 {
+  @Override
+  protected Verb getRequestTokenVerb()
+  {
+    return Verb.GET;
+  }
 
 	@Override
 	public String getRequestTokenEndpoint()
@@ -10,9 +17,14 @@ public class EvernoteApi extends DefaultApi10a
 	}
 
 	@Override
+	protected Verb getAccessTokenVerb()
+	{
+	  return Verb.GET;
+	}
+
+	@Override
 	public String getAccessTokenEndpoint()
-  {
+	{
 		return "https://www.evernote.com/oauth";
 	}
-
 }

commit 99a03b467942102d74d81da99053e430dbf86c2d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 18:31:11 2010 -0300

    Improved TokenExtractor error messages

diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index 501c018..2bc0aa0 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -22,7 +22,7 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
    */
   public Token extract(String response)
   {
-    Preconditions.checkEmptyString(response, "Cant extract a token from null object or an empty string.");
+    Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
 
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.matches())
@@ -32,7 +32,7 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
       return new Token(token, secret);
     } else
     {
-      throw new OAuthException("Could not find request token or secret in response: " + response, null);
+      throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
     }
   }
 }

commit c0d24b556c1ab60734d7e9b01876ef8aec2b89c0
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 19:27:04 2010 -0300

    Refactored URLEncoing code

diff --git a/changelog.txt b/changelog.txt
index cb273cc..c9a88cd 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -11,3 +11,4 @@
 
  * FEATURE: Added setConnectTimeout and setReadTimeout for the Request Object
  * FIX: Fixed Evernote Api (uses GET for request and access tokens)
+ * REFACTOR: URLEncoding stuff. LinkedIn specific decoder is no longer needed
diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index b02a31e..83f064e 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -1,11 +1,7 @@
 package org.scribe.builder.api;
 
-import org.scribe.extensions.linkedin.*;
-import org.scribe.extractors.*;
-
 public class LinkedInApi extends DefaultApi10a
 {
-
   @Override
   protected String getAccessTokenEndpoint()
   {
@@ -17,11 +13,4 @@ public class LinkedInApi extends DefaultApi10a
   {
     return "https://api.linkedin.com/uas/oauth/requestToken";
   }
-  
-  @Override
-  protected BaseStringExtractor getBaseStringExtractor()
-  {
-    return new LinkedInBaseStringExtractorImpl();
-  }
-
 }
diff --git a/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java b/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
deleted file mode 100644
index 0413a42..0000000
--- a/src/main/java/org/scribe/extensions/linkedin/LinkedInBaseStringExtractorImpl.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package org.scribe.extensions.linkedin;
-
-import org.scribe.extractors.*;
-import org.scribe.model.*;
-
-/**
- * LinkedIn's specific extractor that does not encode the tilde character.
- * 
- * @author Pablo Fernandez
- */
-public class LinkedInBaseStringExtractorImpl extends BaseStringExtractorImpl
-{
-
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public String extract(OAuthRequest request)
-  {
-    String baseString = super.extract(request);
-    return baseString.replace("%7E", "~");
-  }
-}
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 5cf08bd..dc09c51 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -20,6 +20,17 @@ public class URLUtils
 
   private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
 
+  private static final Set<EncodingRule> ENCODING_RULES;
+
+  static
+  {
+    Set<EncodingRule> rules = new HashSet<EncodingRule>();
+    rules.add(new EncodingRule("*","%2A"));
+    rules.add(new EncodingRule("+","%20"));
+    rules.add(new EncodingRule("%7E", "~"));
+    ENCODING_RULES = Collections.unmodifiableSet(rules);
+  }
+
   /**
    * Turns a map into a form-url-encoded string (key=value&key2=value2)
    * 
@@ -57,7 +68,12 @@ public class URLUtils
     Preconditions.checkNotNull(string, "Cannot encode null string");
     try
     {
-      return URLEncoder.encode(string, UTF_8).replaceAll("\\+", "%20");
+      String encoded = URLEncoder.encode(string, UTF_8);
+      for(EncodingRule rule : ENCODING_RULES)
+      {
+        encoded = rule.apply(encoded);
+      }
+      return encoded;
     } 
     catch (UnsupportedEncodingException uee)
     {
@@ -77,9 +93,26 @@ public class URLUtils
     try
     {
       return URLDecoder.decode(string, UTF_8);
-    } catch (UnsupportedEncodingException uee)
+    }
+    catch (UnsupportedEncodingException uee)
     {
       throw new OAuthException(ERROR_MSG, uee);
     }
   }
+
+  private static final class EncodingRule
+  {
+    private final String ch;
+    private final String toCh;
+
+    EncodingRule(String ch, String toCh)
+    {
+      this.ch = ch;
+      this.toCh = toCh;
+    }
+
+    String apply(String string) {
+      return string.replace(ch, toCh);
+    }
+  }
 }
diff --git a/src/test/java/org/scribe/examples/LinkedInExample.java b/src/test/java/org/scribe/examples/LinkedInExample.java
index 8fd1247..daeb77e 100644
--- a/src/test/java/org/scribe/examples/LinkedInExample.java
+++ b/src/test/java/org/scribe/examples/LinkedInExample.java
@@ -55,8 +55,6 @@ public class LinkedInExample
 
     System.out.println();
     System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
-    
-    System.out.println(service.getRequestToken());
   }
 
 }
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index eae99e5..90c8d11 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -8,13 +8,6 @@ import org.junit.*;
 
 public class URLUtilsTest
 {
-
-  @Before
-  public void setup()
-  {
-
-  }
-
   @Test
   public void shouldPercentEncodeMap()
   {
@@ -51,6 +44,23 @@ public class URLUtilsTest
     assertEquals(expected, URLUtils.percentDecode(toDecode));
   }
 
+  @Test
+  public void shouldEncodeAllSpecialCharacters()
+  {
+    String plain = "!*'();:@&=+$,/?#[]";
+    String encoded = "%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D";
+    assertEquals(encoded, URLUtils.percentEncode(plain));
+    assertEquals(plain, URLUtils.percentDecode(encoded));
+  }
+
+  @Test
+  public void shouldNotEncodeReservedCharacters()
+  {
+    String plain = "abcde123456-._~";
+    String encoded = plain;
+    assertEquals(encoded, URLUtils.percentEncode(plain));
+  }
+
   @Test(expected = IllegalArgumentException.class)
   public void shouldThrowExceptionIfMapIsNull()
   {

commit 23af69cbf82ba34acb7be4412d40b3a7c5c3c0c5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 19:42:12 2010 -0300

    Minor fixes to Request javadoc

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index acec9f9..ddaee41 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -90,8 +90,8 @@ class Request
   /**
    * Add an HTTP Header to the Request
    * 
-   * @param name
-   * @param value
+   * @param key the header name
+   * @param value the header value
    */
   public void addHeader(String key, String value)
   {
@@ -101,8 +101,8 @@ class Request
   /**
    * Add a body Parameter (for POST/ PUT Requests)
    * 
-   * @param name
-   * @param value
+   * @param key the parameter name
+   * @param value the parameter value
    */
   public void addBodyParameter(String key, String value)
   {
@@ -117,7 +117,7 @@ class Request
    * 
    * Note: The contents are not part of the OAuth signature
    * 
-   * @param payload
+   * @param payload the body of the request
    */
   public void addPayload(String payload)
   {

commit 6e141ba6a2dd1e69a806ceb0a64f8ac8163489d3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 19:42:49 2010 -0300

    Added Google Example

diff --git a/changelog.txt b/changelog.txt
index c9a88cd..f3d138b 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -12,3 +12,4 @@
  * FEATURE: Added setConnectTimeout and setReadTimeout for the Request Object
  * FIX: Fixed Evernote Api (uses GET for request and access tokens)
  * REFACTOR: URLEncoding stuff. LinkedIn specific decoder is no longer needed
+ * FEATURE: Added Google example
diff --git a/src/test/java/org/scribe/examples/GoogleExample.java b/src/test/java/org/scribe/examples/GoogleExample.java
new file mode 100644
index 0000000..fef1b43
--- /dev/null
+++ b/src/test/java/org/scribe/examples/GoogleExample.java
@@ -0,0 +1,66 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class GoogleExample
+{
+  private static final String NETWORK_NAME = "Google";
+  private static final String AUTHORIZE_URL = "https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "https://docs.google.com/feeds/default/private/full/";
+  private static final String SCOPE = "https://docs.google.com/feeds/"; 
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(GoogleApi.class)
+                                  .apiKey("anonymous")
+                                  .apiSecret("anonymous")
+                                  .scope(SCOPE)
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println("(if your curious it looks like this: " + requestToken + " )");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    request.addHeader("GData-Version", "3.0");
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
\ No newline at end of file

commit ebe0ff9edaaa3e1c7ed425af500a827a4f76bc8b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 19:46:59 2010 -0300

    Fixed failing tests

diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
index b145592..8fe872f 100644
--- a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -23,7 +23,7 @@ public class BaseStringExtractorTest
   @Test
   public void shouldExtractBaseStringFromOAuthRequest()
   {
-    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
     String baseString = extractor.extract(request);
     assertEquals(expected, baseString);
   }
@@ -45,7 +45,7 @@ public class BaseStringExtractorTest
   @Test
   public void shouldProperlyEncodeSpaces()
   {
-    String expected = "GET&http%3A%2F%2Fexample.com&body%3Dthis%2520param%2520has%2520whitespace%26oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String expected = "GET&http%3A%2F%2Fexample.com&body%3Dthis%2520param%2520has%2520whitespace%26oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
     request.addBodyParameter("body", "this param has whitespace");
     assertEquals(expected, extractor.extract(request));
   }
diff --git a/src/test/java/org/scribe/extractors/HeaderExtractorTest.java b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
index 0b461c7..bdc727c 100644
--- a/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/HeaderExtractorTest.java
@@ -24,7 +24,7 @@ public class HeaderExtractorTest
   public void shouldExtractStandardHeader()
   {
     String expected = "OAuth oauth_callback=\"http%3A%2F%2Fexample%2Fcallback\", " + "oauth_signature=\"OAuth-Signature\", "
-        + "oauth_consumer_key=\"AS%23%24%5E*%40%26\", " + "oauth_timestamp=\"123456\"";
+        + "oauth_consumer_key=\"AS%23%24%5E%2A%40%26\", " + "oauth_timestamp=\"123456\"";
     String header = extractor.extract(request);
     assertEquals(expected, header);
   }

commit 83f17b06520aff9c43d5bc26548c4a360f7a6a7c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 19:49:13 2010 -0300

    Changed version number for release

diff --git a/pom.xml b/pom.xml
index 78f282c..325071e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.7</version>
+  <version>1.0.8</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit f1ecabdb52c146130a2f4389d488a4ae14b7192d
Author: klakegg <erlend@klakegg.net>
Date:   Tue Nov 23 13:03:16 2010 +0100

    Token implements Serializable - nice to have when creating web service.

diff --git a/changelog.txt b/changelog.txt
index f3d138b..d982d60 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -13,3 +13,7 @@
  * FIX: Fixed Evernote Api (uses GET for request and access tokens)
  * REFACTOR: URLEncoding stuff. LinkedIn specific decoder is no longer needed
  * FEATURE: Added Google example
+
+[1.1.0]
+
+ * FEATURE: Token made Serializable
diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
index 6084e4e..c6975ed 100644
--- a/src/main/java/org/scribe/model/Token.java
+++ b/src/main/java/org/scribe/model/Token.java
@@ -1,12 +1,16 @@
 package org.scribe.model;
 
+import java.io.Serializable;
+
 /**
  * Represents an OAuth token (either request or access token) and its secret
  * 
  * @author Pablo Fernandez
  */
-public class Token
+public class Token implements Serializable
 {
+  private static final long serialVersionUID = 715000866082812683L;
+	
   private final String token;
   private final String secret;
 

commit fc2c46bd3a361f03d042c961fb8b4ea8c8d68736
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Nov 23 17:35:42 2010 -0300

    Changed GoogleApi to use GET

diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 30980b8..c48b068 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -1,5 +1,7 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.*;
+
 public class GoogleApi extends DefaultApi10a
 {
   @Override
@@ -13,4 +15,16 @@ public class GoogleApi extends DefaultApi10a
   {
     return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
+
+  @Override
+  protected Verb getAccessTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  protected Verb getRequestTokenVerb()
+  {
+    return Verb.GET;
+  }
 }

commit 959c093620feb50e68f71b251027aaff04a47c56
Author: Roger <jaeggir@gmail.com>
Date:   Mon Nov 29 17:01:37 2010 +0100

    keyString for SecretKey must be encoded

diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 013a82d..68a0d11 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -30,7 +30,7 @@ public class HMACSha1SignatureService implements SignatureService
     {
       Preconditions.checkEmptyString(baseString, "Base string cant be null or empty string");
       Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
-      return doSign(baseString, apiSecret + '&' + tokenSecret);
+      return doSign(baseString, URLUtils.percentEncode(apiSecret) + '&' + URLUtils.percentEncode(tokenSecret));
     } 
     catch (Exception e)
     {

commit 806d548629193eecac15c32ba27c6d897287d11e
Author: klakegg <erlend@klakegg.net>
Date:   Wed Nov 24 17:55:53 2010 +0800

    Parameters scope and oauth_callback are needed in the request_token step only.

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index ccb1717..296d725 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -53,6 +53,8 @@ public class OAuth10aServiceImpl implements OAuthService
   public Token getRequestToken()
   {
     OAuthRequest request = new OAuthRequest(config.getRequestTokenVerb(), config.getRequestTokenEndpoint());
+    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
+    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
     addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
     addOAuthHeader(request);
     Response response = request.send();
@@ -66,8 +68,6 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());
     request.addOAuthParameter(OAuthConstants.SIGN_METHOD, signatureService.getSignatureMethod());
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
-    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
-    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
   }
 

commit cf843811272f086b85557dee4c5977e8ae20f1cb
Author: roger <roger@192.168.7.64>
Date:   Tue Nov 30 08:56:05 2010 +0100

    Added URLDecoding to verifier

diff --git a/src/main/java/org/scribe/model/Verifier.java b/src/main/java/org/scribe/model/Verifier.java
index 2a98fd6..f1dee62 100644
--- a/src/main/java/org/scribe/model/Verifier.java
+++ b/src/main/java/org/scribe/model/Verifier.java
@@ -1,5 +1,7 @@
 package org.scribe.model;
 
+import org.scribe.utils.*;
+
 /**
  * Represents an OAuth verifier code.
  * 
@@ -7,6 +9,7 @@ package org.scribe.model;
  */
 public class Verifier
 {
+
   private final String value;
 
   /**
@@ -16,7 +19,7 @@ public class Verifier
    */
   public Verifier(String value)
   {
-    this.value = value;
+    this.value = URLUtils.percentDecode(value);
   }
 
   public String getValue()
diff --git a/src/test/java/org/scribe/model/VerifierTest.java b/src/test/java/org/scribe/model/VerifierTest.java
new file mode 100644
index 0000000..509ace8
--- /dev/null
+++ b/src/test/java/org/scribe/model/VerifierTest.java
@@ -0,0 +1,21 @@
+package org.scribe.model;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+
+public class VerifierTest
+{
+  @Test
+  public void shouldParse()
+  {
+    Verifier verifier = new Verifier("p8k%2BGIjIL9PblXq%2BpH6LmT9l");
+    assertEquals(verifier.getValue(), "p8k+GIjIL9PblXq+pH6LmT9l");
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowErrorForNullString()
+  {
+    new Verifier(null);
+  }
+}

commit 896e738156bee6e63288caf4d31a55bcee3a1efe
Author: roger <roger@wuala.com>
Date:   Tue Nov 30 08:47:33 2010 +0100

    Signature test fixed. New reference signature as api & token secret must be urlencoded.

diff --git a/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java b/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
index 0beaeab..ec058a7 100644
--- a/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
+++ b/src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
@@ -3,7 +3,7 @@ package org.scribe.services;
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.scribe.exceptions.OAuthException;
+import org.scribe.exceptions.*;
 
 public class HMACSha1SignatureServiceTest
 {
@@ -29,7 +29,7 @@ public class HMACSha1SignatureServiceTest
     String apiSecret = "api secret";
     String tokenSecret = "token secret";
     String baseString = "base string";
-    String signature = "cyxvUDZY/5cQBcBiKulaNgnhN/w=";
+    String signature = "uGymw2KHOTWI699YEaoi5xyLT50=";
     assertEquals(signature, service.getSignature(baseString, apiSecret, tokenSecret));
   }
 

commit d0fa8689cb3951c3f435395428c51028126c4233
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Nov 30 15:04:34 2010 -0300

    Added changes to changelog and version to pom

diff --git a/changelog.txt b/changelog.txt
index d982d60..11cf828 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -14,6 +14,7 @@
  * REFACTOR: URLEncoding stuff. LinkedIn specific decoder is no longer needed
  * FEATURE: Added Google example
 
-[1.1.0]
+[1.0.9]
 
  * FEATURE: Token made Serializable
+ * FIX: Google Api encoding issues (thanks @roger and @klakegg)
diff --git a/pom.xml b/pom.xml
index 325071e..7c87bcb 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.8</version>
+  <version>1.0.9</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 0be82d68323616d2312db447c4c09ad381c2a0e8
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:03:10 2010 -0300

    OAuth 1.0a service refactor to remove many properties

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index b2a39e2..8af00b8 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -18,42 +18,42 @@ import org.scribe.services.*;
 public abstract class DefaultApi10a implements Api
 {
   
-  protected AccessTokenExtractor getAccessTokenExtractor()
+  public AccessTokenExtractor getAccessTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
-  protected BaseStringExtractor getBaseStringExtractor()
+  public BaseStringExtractor getBaseStringExtractor()
   {
     return new BaseStringExtractorImpl();
   }
 
-  protected HeaderExtractor getHeaderExtractor()
+  public HeaderExtractor getHeaderExtractor()
   {
     return new HeaderExtractorImpl();
   }
 
-  protected RequestTokenExtractor getRequestTokenExtractor()
+  public RequestTokenExtractor getRequestTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
-  protected SignatureService getSignatureService()
+  public SignatureService getSignatureService()
   {
     return new HMACSha1SignatureService(); 
   }
 
-  protected TimestampService getTimestampService()
+  public TimestampService getTimestampService()
   {
     return new TimestampServiceImpl();
   }
   
-  protected Verb getAccessTokenVerb()
+  public Verb getAccessTokenVerb()
   {
     return Verb.POST;
   }
   
-  protected Verb getRequestTokenVerb()
+  public Verb getRequestTokenVerb()
   {
     return Verb.POST;
   }
@@ -63,14 +63,14 @@ public abstract class DefaultApi10a implements Api
    * 
    * @return request token URL
    */
-  protected abstract String getRequestTokenEndpoint();
+  public abstract String getRequestTokenEndpoint();
   
   /**
    * Returns the URL that receives the access token requests.
    * 
    * @return access token URL
    */
-  protected abstract String getAccessTokenEndpoint();
+  public abstract String getAccessTokenEndpoint();
   
   /**
    * Returns the {@link OAuthService} for this Api
@@ -89,13 +89,7 @@ public abstract class DefaultApi10a implements Api
   
   private OAuthService createService(String apiKey, String apiSecret, String callback)
   {
-    return new OAuth10aServiceImpl( getSignatureService(), 
-                                    getTimestampService(), 
-                                    getBaseStringExtractor(), 
-                                    getHeaderExtractor(), 
-                                    getRequestTokenExtractor(), 
-                                    getAccessTokenExtractor(), 
-                                    createConfig(apiKey, apiSecret, callback));
+    return new OAuth10aServiceImpl(this, createConfig(apiKey, apiSecret, callback));
   }
   
   private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index 5d02eec..b6e23f9 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -5,7 +5,7 @@ import org.scribe.model.Verb;
 public class EvernoteApi extends DefaultApi10a
 {
   @Override
-  protected Verb getRequestTokenVerb()
+  public Verb getRequestTokenVerb()
   {
     return Verb.GET;
   }
@@ -17,7 +17,7 @@ public class EvernoteApi extends DefaultApi10a
 	}
 
 	@Override
-	protected Verb getAccessTokenVerb()
+	public Verb getAccessTokenVerb()
 	{
 	  return Verb.GET;
 	}
diff --git a/src/main/java/org/scribe/builder/api/FoursquareApi.java b/src/main/java/org/scribe/builder/api/FoursquareApi.java
index 1a30808..2d5b5a8 100644
--- a/src/main/java/org/scribe/builder/api/FoursquareApi.java
+++ b/src/main/java/org/scribe/builder/api/FoursquareApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class FoursquareApi extends DefaultApi10a
 {
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "http://foursquare.com/oauth/access_token";
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "http://foursquare.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index c48b068..470c4d0 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -5,13 +5,13 @@ import org.scribe.model.*;
 public class GoogleApi extends DefaultApi10a
 {
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "https://www.google.com/accounts/OAuthGetAccessToken"; 
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index 2a327ad..0791790 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class TwitterApi extends DefaultApi10a
 {
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "http://api.twitter.com/oauth/access_token";
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "http://api.twitter.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/VimeoApi.java b/src/main/java/org/scribe/builder/api/VimeoApi.java
index e5140b7..2fa1701 100644
--- a/src/main/java/org/scribe/builder/api/VimeoApi.java
+++ b/src/main/java/org/scribe/builder/api/VimeoApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class VimeoApi extends DefaultApi10a
 {
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "http://vimeo.com/oauth/access_token";
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "http://vimeo.com/oauth/request_token";
   }
diff --git a/src/main/java/org/scribe/builder/api/YahooApi.java b/src/main/java/org/scribe/builder/api/YahooApi.java
index ea6cba9..5767905 100644
--- a/src/main/java/org/scribe/builder/api/YahooApi.java
+++ b/src/main/java/org/scribe/builder/api/YahooApi.java
@@ -3,13 +3,13 @@ package org.scribe.builder.api;
 public class YahooApi extends DefaultApi10a
 {
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "https://api.login.yahoo.com/oauth/v2/get_token";
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "https://api.login.yahoo.com/oauth/v2/get_request_token";
   }
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 296d725..1034b19 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -1,8 +1,7 @@
 package org.scribe.oauth;
 
-import org.scribe.extractors.*;
+import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.services.*;
 
 /**
  * OAuth 1.0a implementation of {@link OAuthService}
@@ -15,34 +14,18 @@ public class OAuth10aServiceImpl implements OAuthService
   private static final String VERSION = "1.0";
 
   private OAuthConfig config;
-  private SignatureService signatureService;
-  private TimestampService timestampService;
-  private BaseStringExtractor baseStringExtractor;
-  private HeaderExtractor headerExtractor;
-  private RequestTokenExtractor rtExtractor;
-  private AccessTokenExtractor atExtractor;
+  private DefaultApi10a api;
   private String scope;
 
   /**
    * Default constructor
    * 
-   * @param signatureService OAuth 1.0a signature service
-   * @param timestampService OAuth 1.0a timestamp service
-   * @param baseStringExtractor OAuth 1.0a base string extractor
-   * @param headerExtractor OAuth 1.0a http header extractor
-   * @param rtExtractor OAuth 1.0a request token extractor
-   * @param atExtractor OAuth 1.0a access token extractor
+   * @param api OAuth1.0a api information
    * @param config OAuth 1.0a configuration param object
    */
-  public OAuth10aServiceImpl(SignatureService signatureService, TimestampService timestampService, BaseStringExtractor baseStringExtractor,
-      HeaderExtractor headerExtractor, RequestTokenExtractor rtExtractor, AccessTokenExtractor atExtractor, OAuthConfig config)
+  public OAuth10aServiceImpl(DefaultApi10a api, OAuthConfig config)
   {
-    this.signatureService = signatureService;
-    this.timestampService = timestampService;
-    this.baseStringExtractor = baseStringExtractor;
-    this.headerExtractor = headerExtractor;
-    this.rtExtractor = rtExtractor;
-    this.atExtractor = atExtractor;
+    this.api = api;
     this.config = config;
     this.scope = NO_SCOPE;
   }
@@ -52,22 +35,22 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getRequestToken()
   {
-    OAuthRequest request = new OAuthRequest(config.getRequestTokenVerb(), config.getRequestTokenEndpoint());
-    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
-    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
+    OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
     addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
     addOAuthHeader(request);
     Response response = request.send();
-    return rtExtractor.extract(response.getBody());
+    return api.getRequestTokenExtractor().extract(response.getBody());
   }
 
   private void addOAuthParams(OAuthRequest request, Token token)
   {
-    request.addOAuthParameter(OAuthConstants.TIMESTAMP, timestampService.getTimestampInSeconds());
-    request.addOAuthParameter(OAuthConstants.NONCE, timestampService.getNonce());
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
+    request.addOAuthParameter(OAuthConstants.NONCE, api.getTimestampService().getNonce());
     request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());
-    request.addOAuthParameter(OAuthConstants.SIGN_METHOD, signatureService.getSignatureMethod());
+    request.addOAuthParameter(OAuthConstants.SIGN_METHOD, api.getSignatureService().getSignatureMethod());
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
+    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
+    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
   }
 
@@ -82,7 +65,7 @@ public class OAuth10aServiceImpl implements OAuthService
     addOAuthParams(request, requestToken);
     addOAuthHeader(request);
     Response response = request.send();
-    return atExtractor.extract(response.getBody());
+    return api.getAccessTokenExtractor().extract(response.getBody());
   }
 
   /**
@@ -113,13 +96,13 @@ public class OAuth10aServiceImpl implements OAuthService
   
   private String getSignature(OAuthRequest request, Token token)
   {
-    String baseString = baseStringExtractor.extract(request);
-    return signatureService.getSignature(baseString, config.getApiSecret(), token.getSecret());
+    String baseString = api.getBaseStringExtractor().extract(request);
+    return api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
   }
 
   private void addOAuthHeader(OAuthRequest request)
   {
-    String oauthHeader = headerExtractor.extract(request);
+    String oauthHeader = api.getHeaderExtractor().extract(request);
     request.addHeader(OAuthConstants.HEADER, oauthHeader);
   }
 }

commit 8f0760664f270fae50a7a1cc3a217a4806d95adc
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:16:37 2010 -0300

    Removed endpoints and verbs from config (they are in the Api object anyways)

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 8af00b8..d25c0c3 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -95,10 +95,6 @@ public abstract class DefaultApi10a implements Api
   private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
   {
     OAuthConfig config = new OAuthConfig();
-    config.setRequestTokenVerb(getRequestTokenVerb());
-    config.setRequestTokenEndpoint(getRequestTokenEndpoint());
-    config.setAccessTokenVerb(getAccessTokenVerb());
-    config.setAccessTokenEndpoint(getAccessTokenEndpoint());
     config.setApiKey(apiKey);
     config.setApiSecret(apiSecret);
     config.setCallback(callback);
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 2521d57..ce9ff64 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -10,10 +10,6 @@ public class OAuthConfig
   private String apiKey;
   private String apiSecret;
   private String callback;
-  private String requestTokenEndpoint;
-  private String accessTokenEndpoint;
-  private Verb requestTokenVerb;
-  private Verb accessTokenVerb;
 
   public String getApiKey()
   {
@@ -44,45 +40,4 @@ public class OAuthConfig
   {
     this.callback = callback;
   }
-
-  public String getRequestTokenEndpoint()
-  {
-    return requestTokenEndpoint;
-  }
-
-  public void setRequestTokenEndpoint(String requestTokenEndpoint)
-  {
-    this.requestTokenEndpoint = requestTokenEndpoint;
-  }
-
-  public String getAccessTokenEndpoint()
-  {
-    return accessTokenEndpoint;
-  }
-
-  public void setAccessTokenEndpoint(String accessTokenEndpoint)
-  {
-    this.accessTokenEndpoint = accessTokenEndpoint;
-  }
-
-  public Verb getRequestTokenVerb()
-  {
-    return requestTokenVerb != null ? requestTokenVerb : Verb.GET;
-  }
-
-  public void setRequestTokenVerb(Verb requestTokenVerb)
-  {
-    this.requestTokenVerb = requestTokenVerb;
-  }
-
-  public Verb getAccessTokenVerb()
-  {
-    return accessTokenVerb != null ? accessTokenVerb : Verb.GET;
-  }
-
-  public void setAccessTokenVerb(Verb accessTokenVerb)
-  {
-    this.accessTokenVerb = accessTokenVerb;
-  }
-
 }
\ No newline at end of file
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 1034b19..beff90f 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -59,7 +59,7 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
-    OAuthRequest request = new OAuthRequest(config.getAccessTokenVerb(), config.getAccessTokenEndpoint());
+    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
     request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
     request.addOAuthParameter(OAuthConstants.VERIFIER, verifier.getValue());
     addOAuthParams(request, requestToken);
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
index 1bffac5..0c442f8 100644
--- a/src/test/java/org/scribe/model/OAuthConfigTest.java
+++ b/src/test/java/org/scribe/model/OAuthConfigTest.java
@@ -11,8 +11,6 @@ public class OAuthConfigTest
   public void shouldReturnDefaultValuesIfNotSet()
   {
     OAuthConfig config = new OAuthConfig();
-    assertEquals(Verb.GET, config.getAccessTokenVerb());
-    assertEquals(Verb.GET, config.getRequestTokenVerb());
     assertEquals(OAuthConstants.OUT_OF_BAND, config.getCallback());
   }
 
@@ -21,11 +19,11 @@ public class OAuthConfigTest
   {
     OAuthConfig config = new OAuthConfig();
     config.setCallback("http://callback");
-    config.setAccessTokenVerb(Verb.POST);
-    config.setRequestTokenVerb(Verb.POST);
+    config.setApiKey("key");
+    config.setApiSecret("secret");
     assertEquals("http://callback", config.getCallback());
-    assertEquals(Verb.POST, config.getAccessTokenVerb());
-    assertEquals(Verb.POST, config.getRequestTokenVerb());
+    assertEquals("key", config.getApiKey());
+    assertEquals("secret", config.getApiSecret());
   }
 
 }

commit 8eb2062e9521539a66220aa276b62c9030facf08
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:24:05 2010 -0300

    Used OAuthConfig when possible instead of bunch of Strings

diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 59368d4..59a6d12 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -2,7 +2,6 @@ package org.scribe.builder;
 
 import org.scribe.builder.api.*;
 import org.scribe.exceptions.*;
-
 import org.scribe.model.*;
 import org.scribe.oauth.*;
 import org.scribe.utils.*;
@@ -119,6 +118,6 @@ public class ServiceBuilder
     Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
     Preconditions.checkEmptyString(apiKey, "You must provide an api key");
     Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
-    return api.createService(apiKey, apiSecret, callback, scope);
+    return api.createService(new OAuthConfig(apiKey, apiSecret, callback), scope);
   }
 }
diff --git a/src/main/java/org/scribe/builder/api/Api.java b/src/main/java/org/scribe/builder/api/Api.java
index 0202098..b996210 100644
--- a/src/main/java/org/scribe/builder/api/Api.java
+++ b/src/main/java/org/scribe/builder/api/Api.java
@@ -1,5 +1,6 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.*;
 import org.scribe.oauth.*;
 
 /**
@@ -20,5 +21,5 @@ public interface Api
    * 
    * @return fully configured {@link OAuthService}
    */
-  OAuthService createService(String apiKey, String apiSecret, String callback, String scope);
+  OAuthService createService(OAuthConfig config, String scope);
 }
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index d25c0c3..c5b840f 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -80,25 +80,15 @@ public abstract class DefaultApi10a implements Api
    * @param callback OAuth callback (either URL or 'oob')
    * @param scope OAuth scope (optional) 
    */
-  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
+  public OAuthService createService(OAuthConfig config, String scope)
   {
-    OAuthService service = createService(apiKey, apiSecret, callback);
+    OAuthService service = createService(config);
     service.addScope(scope);
     return service;
   }
   
-  private OAuthService createService(String apiKey, String apiSecret, String callback)
+  private OAuthService createService(OAuthConfig config)
   {
-    return new OAuth10aServiceImpl(this, createConfig(apiKey, apiSecret, callback));
+    return new OAuth10aServiceImpl(this, config);
   }
-  
-  private OAuthConfig createConfig(String apiKey, String apiSecret, String callback)
-  {
-    OAuthConfig config = new OAuthConfig();
-    config.setApiKey(apiKey);
-    config.setApiSecret(apiSecret);
-    config.setCallback(callback);
-    return config;
-  }
-
 }
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index ce9ff64..60a5a35 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -10,6 +10,18 @@ public class OAuthConfig
   private String apiKey;
   private String apiSecret;
   private String callback;
+  
+  public OAuthConfig(String key, String secret)
+  {
+    this(key,secret,null);
+  }
+  
+  public OAuthConfig(String key, String secret, String callback)
+  {
+    this.apiKey = key;
+    this.apiSecret = secret;
+    this.callback = callback;
+  }
 
   public String getApiKey()
   {
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
index 0c442f8..4354fb9 100644
--- a/src/test/java/org/scribe/model/OAuthConfigTest.java
+++ b/src/test/java/org/scribe/model/OAuthConfigTest.java
@@ -10,17 +10,14 @@ public class OAuthConfigTest
   @Test
   public void shouldReturnDefaultValuesIfNotSet()
   {
-    OAuthConfig config = new OAuthConfig();
+    OAuthConfig config = new OAuthConfig("key", "secret");
     assertEquals(OAuthConstants.OUT_OF_BAND, config.getCallback());
   }
 
   @Test
   public void shouldOverrideDefaultsIfSet()
   {
-    OAuthConfig config = new OAuthConfig();
-    config.setCallback("http://callback");
-    config.setApiKey("key");
-    config.setApiSecret("secret");
+    OAuthConfig config = new OAuthConfig("key", "secret", "http://callback");
     assertEquals("http://callback", config.getCallback());
     assertEquals("key", config.getApiKey());
     assertEquals("secret", config.getApiSecret());

commit 41cbee06d7c7728abecaf2ee09ac2435a756c9ed
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:30:06 2010 -0300

    Minor name refactor

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index c5b840f..0f76dce 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -82,12 +82,12 @@ public abstract class DefaultApi10a implements Api
    */
   public OAuthService createService(OAuthConfig config, String scope)
   {
-    OAuthService service = createService(config);
+    OAuthService service = doCreateService(config);
     service.addScope(scope);
     return service;
   }
   
-  private OAuthService createService(OAuthConfig config)
+  private OAuthService doCreateService(OAuthConfig config)
   {
     return new OAuth10aServiceImpl(this, config);
   }

commit 577c18c7524f1731521cf6f38845d4ecf10c5ec6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:35:59 2010 -0300

    corrected javadocs to reflect changes

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 0f76dce..9ce7656 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -8,51 +8,96 @@ import org.scribe.services.*;
 /**
  * Default implementation of the OAuth protocol, version 1.0a
  * 
- * This class is meant to be extended by concrete implementations of the API.
+ * This class is meant to be extended by concrete implementations of the API,
+ * providing the endpoints and endpoint-http-verbs.
+ * 
  * If your Api adheres to the 1.0a protocol correctly, you just need to extend 
  * this class and define the getters for your endpoints.
  * 
+ * If your Api does something a bit different, you can override the different 
+ * extractors or services, in order to fine-tune the process. Please read the 
+ * javadocs of the interfaces to get an idea of what to do.
+ * 
  * @author Pablo Fernandez
  *
  */
 public abstract class DefaultApi10a implements Api
 {
-  
+  /**
+   * Returns the access token extractor.
+   * 
+   * @return access token extractor
+   */
   public AccessTokenExtractor getAccessTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
+  /**
+   * Returns the base string extractor.
+   * 
+   * @return base string extractor
+   */
   public BaseStringExtractor getBaseStringExtractor()
   {
     return new BaseStringExtractorImpl();
   }
 
+  /**
+   * Returns the header extractor.
+   * 
+   * @return header extractor
+   */
   public HeaderExtractor getHeaderExtractor()
   {
     return new HeaderExtractorImpl();
   }
 
+  /**
+   * Returns the request token extractor.
+   * 
+   * @return request token extractor
+   */
   public RequestTokenExtractor getRequestTokenExtractor()
   {
     return new TokenExtractorImpl();
   }
 
+  /**
+   * Returns the signature service.
+   * 
+   * @return signature service
+   */
   public SignatureService getSignatureService()
   {
     return new HMACSha1SignatureService(); 
   }
 
+  /**
+   * Returns the timestamp service.
+   * 
+   * @return timestamp service
+   */
   public TimestampService getTimestampService()
   {
     return new TimestampServiceImpl();
   }
   
+  /**
+   * Returns the verb for the access token endpoint (defaults to POST)
+   * 
+   * @return access token endpoint verb
+   */
   public Verb getAccessTokenVerb()
   {
     return Verb.POST;
   }
   
+  /**
+   * Returns the verb for the request token endpoint (defaults to POST)
+   * 
+   * @return request token endpoint verb
+   */
   public Verb getRequestTokenVerb()
   {
     return Verb.POST;

commit b78ca90df44e0484ad7d0b05034341f0602fee4e
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:01:32 2010 -0300

    Added plumbing code for 2.0

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
new file mode 100644
index 0000000..08fee70
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -0,0 +1,14 @@
+package org.scribe.builder.api;
+
+import org.scribe.oauth.OAuthService;
+
+public class DefaultApi20 implements Api
+{
+
+  @Override
+  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
+  {
+    return null;
+  }
+
+}
diff --git a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
new file mode 100644
index 0000000..cd1d097
--- /dev/null
+++ b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
@@ -0,0 +1,40 @@
+package org.scribe.oauth;
+
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Token;
+import org.scribe.model.Verifier;
+
+public class OAuth2ServiceImpl implements OAuthService
+{
+
+  @Override
+  public void addScope(String scope)
+  {
+    throw new UnsupportedOperationException("OAuth 2 does not use scopes");
+  }
+
+  @Override
+  public Token getAccessToken(Token requestToken, Verifier verifier)
+  {
+    return null;
+  }
+
+  @Override
+  public Token getRequestToken()
+  {
+    throw new UnsupportedOperationException("OAuth 2 does not use request tokens. Use 'getAccessToken' directly");
+  }
+
+  @Override
+  public String getVersion()
+  {
+    return "2.0";
+  }
+
+  @Override
+  public void signRequest(Token accessToken, OAuthRequest request)
+  {
+    
+  }
+
+}

commit c12da16a38e58794992612098544fd176984f8f6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 18:39:27 2010 -0300

    Made 2.0 impl fit the internal refactor

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
index 08fee70..d4352fe 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi20.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -1,12 +1,13 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.OAuthConfig;
 import org.scribe.oauth.OAuthService;
 
 public class DefaultApi20 implements Api
 {
 
   @Override
-  public OAuthService createService(String apiKey, String apiSecret, String callback, String scope)
+  public OAuthService createService(OAuthConfig config, String scope)
   {
     return null;
   }

commit 5ac849313dcb248502df14939c850d2101d2a60b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 22:54:09 2010 -0300

    Added authorization URL to the Apis

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 9ce7656..2899dee 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -118,6 +118,15 @@ public abstract class DefaultApi10a implements Api
   public abstract String getAccessTokenEndpoint();
   
   /**
+   * Returns the URL where you should redirect your users to authenticate
+   * your application.
+   * 
+   * @param requestToken the request token you need to authorize
+   * @return the URL where you should redirect your users
+   */
+  public abstract String getAuthorizationUrl(Token requestToken);
+  
+  /**
    * Returns the {@link OAuthService} for this Api
    * 
    * @param apiKey Key
diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index b6e23f9..a44b039 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -1,9 +1,12 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
 import org.scribe.model.Verb;
 
 public class EvernoteApi extends DefaultApi10a
 {
+  private static final String AUTHORIZATION_URL = "https://www.evernote.com/OAuth.action?oauth_token=%s";
+  
   @Override
   public Verb getRequestTokenVerb()
   {
@@ -27,4 +30,10 @@ public class EvernoteApi extends DefaultApi10a
 	{
 		return "https://www.evernote.com/oauth";
 	}
+	
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
+	}
 }
diff --git a/src/main/java/org/scribe/builder/api/FoursquareApi.java b/src/main/java/org/scribe/builder/api/FoursquareApi.java
index 2d5b5a8..060a76b 100644
--- a/src/main/java/org/scribe/builder/api/FoursquareApi.java
+++ b/src/main/java/org/scribe/builder/api/FoursquareApi.java
@@ -1,7 +1,11 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
+
 public class FoursquareApi extends DefaultApi10a
 {
+  private static final String AUTHORIZATION_URL = "http://foursquare.com/oauth/authorize?oauth_token=%s";
+  
   @Override
   public String getAccessTokenEndpoint()
   {
@@ -13,4 +17,10 @@ public class FoursquareApi extends DefaultApi10a
   {
     return "http://foursquare.com/oauth/request_token";
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
 }
diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 470c4d0..4547d03 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -4,6 +4,8 @@ import org.scribe.model.*;
 
 public class GoogleApi extends DefaultApi10a
 {
+  private static final String AUTHORIZATION_URL = "https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=%s";
+  
   @Override
   public String getAccessTokenEndpoint()
   {
@@ -27,4 +29,10 @@ public class GoogleApi extends DefaultApi10a
   {
     return Verb.GET;
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
 }
diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index 83f064e..6450225 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -2,6 +2,8 @@ package org.scribe.builder.api;
 
 public class LinkedInApi extends DefaultApi10a
 {
+  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=%s";
+
   @Override
   protected String getAccessTokenEndpoint()
   {
@@ -13,4 +15,11 @@ public class LinkedInApi extends DefaultApi10a
   {
     return "https://api.linkedin.com/uas/oauth/requestToken";
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+  
 }
diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index 0791790..af8f198 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -1,7 +1,11 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
+
 public class TwitterApi extends DefaultApi10a
 {
+  private static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize?oauth_token=%s";
+  
   @Override
   public String getAccessTokenEndpoint()
   {
@@ -13,4 +17,10 @@ public class TwitterApi extends DefaultApi10a
   {
     return "http://api.twitter.com/oauth/request_token";
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
 }
diff --git a/src/main/java/org/scribe/builder/api/VimeoApi.java b/src/main/java/org/scribe/builder/api/VimeoApi.java
index 2fa1701..231895d 100644
--- a/src/main/java/org/scribe/builder/api/VimeoApi.java
+++ b/src/main/java/org/scribe/builder/api/VimeoApi.java
@@ -1,7 +1,11 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
+
 public class VimeoApi extends DefaultApi10a
 {
+  private static final String AUTHORIZATION_URL = "http://vimeo.com/oauth/authorize?oauth_token=%s";
+  
   @Override
   public String getAccessTokenEndpoint()
   {
@@ -13,4 +17,10 @@ public class VimeoApi extends DefaultApi10a
   {
     return "http://vimeo.com/oauth/request_token";
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
 }
diff --git a/src/main/java/org/scribe/builder/api/YahooApi.java b/src/main/java/org/scribe/builder/api/YahooApi.java
index 5767905..e8a29a7 100644
--- a/src/main/java/org/scribe/builder/api/YahooApi.java
+++ b/src/main/java/org/scribe/builder/api/YahooApi.java
@@ -1,7 +1,11 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
+
 public class YahooApi extends DefaultApi10a
 {
+  private static final String AUTHORIZE_URL = "https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=%s";
+  
   @Override
   public String getAccessTokenEndpoint()
   {
@@ -13,4 +17,10 @@ public class YahooApi extends DefaultApi10a
   {
     return "https://api.login.yahoo.com/oauth/v2/get_request_token";
   }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
 }
diff --git a/src/main/java/org/scribe/builder/api/YammerApi.java b/src/main/java/org/scribe/builder/api/YammerApi.java
index d987798..85477a5 100644
--- a/src/main/java/org/scribe/builder/api/YammerApi.java
+++ b/src/main/java/org/scribe/builder/api/YammerApi.java
@@ -1,7 +1,10 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.Token;
+
 public class YammerApi extends DefaultApi10a
 {
+  private static final String AUTHORIZATION_URL = "'https://www.yammer.com/oauth/authorize?oauth_token=%s'";
 
 	@Override
 	public String getRequestTokenEndpoint()
@@ -14,5 +17,10 @@ public class YammerApi extends DefaultApi10a
   {
 		return "https://www.yammer.com/oauth/access_token";
 	}
-
+	
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
+	}
 }
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index beff90f..9ab565a 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -93,6 +93,14 @@ public class OAuth10aServiceImpl implements OAuthService
   {
     this.scope = scope;
   }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return api.getAuthorizationUrl(requestToken);
+  }
   
   private String getSignature(OAuthRequest request, Token token)
   {
diff --git a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
index cd1d097..0414a81 100644
--- a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
@@ -37,4 +37,10 @@ public class OAuth2ServiceImpl implements OAuthService
     
   }
 
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return null;
+  }
+
 }
diff --git a/src/main/java/org/scribe/oauth/OAuthService.java b/src/main/java/org/scribe/oauth/OAuthService.java
index 0b54f51..c3b6434 100644
--- a/src/main/java/org/scribe/oauth/OAuthService.java
+++ b/src/main/java/org/scribe/oauth/OAuthService.java
@@ -48,4 +48,13 @@ public interface OAuthService
    * @param scope OAuth Api scope (optional)
    */
   public void addScope(String scope);
+  
+  /**
+   * Returns the URL where you should redirect your users to authenticate
+   * your application.
+   * 
+   * @param requestToken the request token you need to authorize
+   * @return the URL where you should redirect your users
+   */
+  public String getAuthorizationUrl(Token requestToken);
 }
diff --git a/src/test/java/org/scribe/examples/FoursquareExample.java b/src/test/java/org/scribe/examples/FoursquareExample.java
index d74eb9c..b227488 100644
--- a/src/test/java/org/scribe/examples/FoursquareExample.java
+++ b/src/test/java/org/scribe/examples/FoursquareExample.java
@@ -9,7 +9,6 @@ import org.scribe.oauth.*;
 
 public class FoursquareExample
 {
-  private static final String AUTHORIZE_URL = "http://foursquare.com/oauth/authorize?oauth_token=";
   private static final String PROTECTED_RESOURCE_URL = "http://api.foursquare.com/v1/user";
   
   public static void main(String[] args)
@@ -31,7 +30,7 @@ public class FoursquareExample
     System.out.println();
 
     System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println(service.getAuthorizationUrl(requestToken));
     System.out.println("And paste the verifier here");
     System.out.print(">>");
     Verifier verifier = new Verifier(in.nextLine());
diff --git a/src/test/java/org/scribe/examples/LinkedInExample.java b/src/test/java/org/scribe/examples/LinkedInExample.java
index daeb77e..703cc82 100644
--- a/src/test/java/org/scribe/examples/LinkedInExample.java
+++ b/src/test/java/org/scribe/examples/LinkedInExample.java
@@ -9,18 +9,17 @@ import org.scribe.oauth.*;
 
 public class LinkedInExample
 {
-  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=";
   private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
   
   public static void main(String[] args)
   {
     OAuthService service = new ServiceBuilder()
-                                  .provider(LinkedInApi.class)
-                                  .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
-                                  .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
-                                  .build();
-    
+                                .provider(LinkedInApi.class)
+                                .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
+                                .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
+                                .build();
     Scanner in = new Scanner(System.in);
+    
     System.out.println("=== LinkedIn's OAuth Workflow ===");
     System.out.println();
 
@@ -31,7 +30,7 @@ public class LinkedInExample
     System.out.println();
 
     System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println(service.getAuthorizationUrl(requestToken));
     System.out.println("And paste the verifier here");
     System.out.print(">>");
     Verifier verifier = new Verifier(in.nextLine());
diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index d98f0e2..f47fa0e 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -9,7 +9,6 @@ import org.scribe.oauth.*;
 
 public class TwitterExample
 {
-  private static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize?oauth_token=";
   private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
   
   public static void main(String[] args)
@@ -31,7 +30,7 @@ public class TwitterExample
     System.out.println();
 
     System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println(service.getAuthorizationUrl(requestToken));
     System.out.println("And paste the verifier here");
     System.out.print(">>");
     Verifier verifier = new Verifier(in.nextLine());
diff --git a/src/test/java/org/scribe/examples/YahooExample.java b/src/test/java/org/scribe/examples/YahooExample.java
index 4be2109..2e3f336 100644
--- a/src/test/java/org/scribe/examples/YahooExample.java
+++ b/src/test/java/org/scribe/examples/YahooExample.java
@@ -9,20 +9,18 @@ import org.scribe.oauth.*;
 
 public class YahooExample
 {
-  private static final String NETWORK_NAME = "Yahoo";
-  private static final String AUTHORIZE_URL = "https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=";
   private static final String PROTECTED_RESOURCE_URL = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";
 
   public static void main(String[] args)
   {
     OAuthService service = new ServiceBuilder()
-                                  .provider(YahooApi.class)
-                                  .apiKey("dj0yJmk9TXZDWVpNVVdGaVFmJmQ9WVdrOWMweHZXbkZLTkhVbWNHbzlNVEl5TWprd05qUTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMw--")
-                                  .apiSecret("262be559f92a2be20c4c039419018f2b48cdfce9")
-                                  .build();
+                                .provider(YahooApi.class)
+                                .apiKey("dj0yJmk9TXZDWVpNVVdGaVFmJmQ9WVdrOWMweHZXbkZLTkhVbWNHbzlNVEl5TWprd05qUTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMw--")
+                                .apiSecret("262be559f92a2be20c4c039419018f2b48cdfce9")
+                                .build();
     Scanner in = new Scanner(System.in);
 
-    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println("=== Yahoo's OAuth Workflow ===");
     System.out.println();
 
     // Obtain the Request Token
@@ -32,7 +30,7 @@ public class YahooExample
     System.out.println();
 
     System.out.println("Now go and authorize Scribe here:");
-    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println(service.getAuthorizationUrl(requestToken));
     System.out.println("And paste the verifier here");
     System.out.print(">>");
     Verifier verifier = new Verifier(in.nextLine());

commit 82f03604c34b4a56519a67448dda7afe5e2422aa
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Nov 7 22:59:42 2010 -0300

    Added OAuth2 service props

diff --git a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
index 0414a81..be2183f 100644
--- a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
@@ -1,11 +1,18 @@
 package org.scribe.oauth;
 
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Token;
-import org.scribe.model.Verifier;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
 
 public class OAuth2ServiceImpl implements OAuthService
 {
+  private final Api api;
+  private final OAuthConfig config;
+  
+  public OAuth2ServiceImpl(Api api, OAuthConfig config)
+  {
+    this.api = api;
+    this.config = config;
+  }
 
   @Override
   public void addScope(String scope)

commit bdfd14309f10af5283eede28bc00f8c5f362441f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Nov 11 18:53:17 2010 -0300

    Added some more apis to the readme

diff --git a/README.textile b/README.textile
index c00e6c5..a6d3de5 100644
--- a/README.textile
+++ b/README.textile
@@ -32,6 +32,12 @@ h3. Supports all major OAuth APIs out-of-the-box
 
 * Foursquare
 
+* Evernote
+
+* Vimeo
+
+* Yammer
+
 * and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
 
 h3. Small and modular

commit c145ee88424fa85be31e525531208c60293fc130
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Nov 20 18:18:18 2010 -0300

    Added Evernote playground api

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index a44b039..48d45e9 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -36,4 +36,27 @@ public class EvernoteApi extends DefaultApi10a
 	{
 	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
 	}
+
+	public static class Sandbox extends EvernoteApi
+	{
+	  private static final String SANDBOX_URL = "https://sandbox.evernote.com/oauth";
+
+	  @Override
+	  public String getRequestTokenEndpoint()
+	  {
+	    return SANDBOX_URL;
+	  }
+
+	  @Override
+	  public String getAccessTokenEndpoint()
+	  {
+	    return SANDBOX_URL;
+	  }
+
+	  @Override
+	  public String getAuthorizationUrl(Token requestToken)
+	  {
+	    return String.format(SANDBOX_URL + "?oauth_token=%s", requestToken.getToken());
+	  }
+	}
 }

commit 0e5ae92d3e7ac6c8304d39d41f83942c15605aaf
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Jan 7 13:05:58 2011 -0300

    Added exceptions to both token methods on 2.0 service
    
    Rebased 1.0.9

diff --git a/src/main/java/org/scribe/builder/api/GoogleApi.java b/src/main/java/org/scribe/builder/api/GoogleApi.java
index 4547d03..9c86e5e 100644
--- a/src/main/java/org/scribe/builder/api/GoogleApi.java
+++ b/src/main/java/org/scribe/builder/api/GoogleApi.java
@@ -19,13 +19,13 @@ public class GoogleApi extends DefaultApi10a
   }
 
   @Override
-  protected Verb getAccessTokenVerb()
+  public Verb getAccessTokenVerb()
   {
     return Verb.GET;
   }
 
   @Override
-  protected Verb getRequestTokenVerb()
+  public Verb getRequestTokenVerb()
   {
     return Verb.GET;
   }
diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index 6450225..f459404 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -1,17 +1,19 @@
 package org.scribe.builder.api;
 
+import org.scribe.model.*;
+
 public class LinkedInApi extends DefaultApi10a
 {
   private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=%s";
 
   @Override
-  protected String getAccessTokenEndpoint()
+  public String getAccessTokenEndpoint()
   {
     return "https://api.linkedin.com/uas/oauth/accessToken";
   }
 
   @Override
-  protected String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "https://api.linkedin.com/uas/oauth/requestToken";
   }
diff --git a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
index be2183f..0c4e768 100644
--- a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
@@ -23,13 +23,13 @@ public class OAuth2ServiceImpl implements OAuthService
   @Override
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
-    return null;
+    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
   }
 
   @Override
   public Token getRequestToken()
   {
-    throw new UnsupportedOperationException("OAuth 2 does not use request tokens. Use 'getAccessToken' directly");
+    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
   }
 
   @Override

commit 6fc5146706ad49d2e1a5ed46e417c627df562892
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 13:56:19 2011 -0300

    Added Diego to list of developers

diff --git a/pom.xml b/pom.xml
index 7c87bcb..a7814d7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,6 +22,12 @@
       <email>fernandezpablo85@gmail.com</email>
       <timezone>-3</timezone>
     </developer>
+    <developer>
+      <id>diegossilveira</id>
+      <name>Diego Silveira</name>
+      <email>diegossilveira@gmail.com</email>
+      <timezone>-3</timezone>
+    </developer>
   </developers>
 
   <licenses>

commit 27bac50073942634794c06bb228347743bc039f2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 14:14:08 2011 -0300

    Added append parameters to URL method

diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index dc09c51..5051f15 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -7,8 +7,8 @@ import java.util.*;
 import org.scribe.exceptions.*;
 
 /**
- * Utils to deal with URL and url-encodings 
- * 
+ * Utils to deal with URL and url-encodings
+ *
  * @author Pablo Fernandez
  */
 public class URLUtils
@@ -17,6 +17,7 @@ public class URLUtils
   private static final String UTF_8 = "UTF-8";
   private static final char PAIR_SEPARATOR = '=';
   private static final char PARAM_SEPARATOR = '&';
+  private static final char QUERY_STRING_SEPARATOR = '?';
 
   private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
 
@@ -100,6 +101,25 @@ public class URLUtils
     }
   }
 
+  /**
+   * Append given parameters to the query string of the url
+   *
+   * @param url the url to append parameters to
+   * @param params any map
+   * @return new url with parameters on query string
+   */
+  public static String appendParametersToQueryString(String url, Map<String, String> params)
+  {
+    Preconditions.checkNotNull(url, "Cannot append to null URL");
+    String queryString = URLUtils.formURLEncodeMap(params);
+    if (queryString.isEmpty()) return url;
+
+    // Check if there are parameters in the url already and use '&' instead of '?'
+    url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;
+    url += queryString;
+    return url;
+  }
+
   private static final class EncodingRule
   {
     private final String ch;
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 90c8d11..8af12fe 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -82,4 +82,49 @@ public class URLUtilsTest
     URLUtils.percentDecode(toDecode);
   }
 
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionWhenAppendingNullMapToQuerystring()
+  {
+    String url = "http://www.example.com";
+    Map<String, String> nullMap = null;
+    URLUtils.appendParametersToQueryString(url, nullMap);
+  }
+
+  @Test
+  public void shouldAppendNothingToQuerystringIfGivenEmptyMap()
+  {
+    String url = "http://www.example.com";
+    Map<String, String> emptyMap = new HashMap<String, String>();
+    String newUrl = URLUtils.appendParametersToQueryString(url, emptyMap);
+    Assert.assertEquals(url, newUrl);
+  }
+
+  @Test
+  public void shouldAppendParametersToSimpleUrl()
+  {
+    String url = "http://www.example.com";
+    String expectedUrl = "http://www.example.com?param1=value1&param2=value%20with%20spaces";
+
+    Map<String, String> params = new HashMap<String, String>();
+    params.put("param1", "value1");
+    params.put("param2", "value with spaces");
+
+    url = URLUtils.appendParametersToQueryString(url, params);
+    Assert.assertEquals(url, expectedUrl);
+  }
+
+  @Test
+  public void shouldAppendParametersToUrlWithQuerystring()
+  {
+    String url = "http://www.example.com?already=present";
+    String expectedUrl = "http://www.example.com?already=present&param1=value1&param2=value%20with%20spaces";
+
+    Map<String, String> params = new HashMap<String, String>();
+    params.put("param1", "value1");
+    params.put("param2", "value with spaces");
+
+    url = URLUtils.appendParametersToQueryString(url, params);
+    Assert.assertEquals(url, expectedUrl);
+  }
+
 }

commit 088fc5e4431b4ad29c38d0a8ebf6314ef4d724e9
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 14:43:56 2011 -0300

    Renamed OAuth 2.0 service class

diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
new file mode 100644
index 0000000..e7a2714
--- /dev/null
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -0,0 +1,73 @@
+package org.scribe.oauth;
+
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+
+public class OAuth20ServiceImpl implements OAuthService
+{
+  private static final String VERSION = "2.0";
+  
+  private final DefaultApi20 api;
+  private final OAuthConfig config;
+  
+  /**
+   * Default constructor
+   * 
+   * @param api OAuth2.0 api information
+   * @param config OAuth 2.0 configuration param object
+   */
+  public OAuth20ServiceImpl(DefaultApi20 api, OAuthConfig config)
+  {
+    this.api = api;
+    this.config = config;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void addScope(String scope)
+  {
+    throw new UnsupportedOperationException("OAuth 2 does not use scopes");
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Token getAccessToken(Token requestToken, Verifier verifier)
+  {
+    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Token getRequestToken()
+  {
+    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getVersion()
+  {
+    return VERSION;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void signRequest(Token accessToken, OAuthRequest request)
+  {
+    request.addParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return api.getAuthorizationUrl(config);
+  }
+
+}
diff --git a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
deleted file mode 100644
index 0c4e768..0000000
--- a/src/main/java/org/scribe/oauth/OAuth2ServiceImpl.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package org.scribe.oauth;
-
-import org.scribe.builder.api.*;
-import org.scribe.model.*;
-
-public class OAuth2ServiceImpl implements OAuthService
-{
-  private final Api api;
-  private final OAuthConfig config;
-  
-  public OAuth2ServiceImpl(Api api, OAuthConfig config)
-  {
-    this.api = api;
-    this.config = config;
-  }
-
-  @Override
-  public void addScope(String scope)
-  {
-    throw new UnsupportedOperationException("OAuth 2 does not use scopes");
-  }
-
-  @Override
-  public Token getAccessToken(Token requestToken, Verifier verifier)
-  {
-    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
-  }
-
-  @Override
-  public Token getRequestToken()
-  {
-    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
-  }
-
-  @Override
-  public String getVersion()
-  {
-    return "2.0";
-  }
-
-  @Override
-  public void signRequest(Token accessToken, OAuthRequest request)
-  {
-    
-  }
-
-  @Override
-  public String getAuthorizationUrl(Token requestToken)
-  {
-    return null;
-  }
-
-}

commit f6c3cb9bdbc7c3b1ff2d7b643e7b91002420e0a2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 15:34:19 2011 -0300

    Lazy http connection creation

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index ddaee41..3392e4d 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -36,13 +36,6 @@ class Request
     this.url = url;
     this.bodyParams = new HashMap<String, String>();
     this.headers = new HashMap<String, String>();
-    try
-    {
-      connection = (HttpURLConnection) new URL(url).openConnection();
-    } catch (IOException ioe)
-    {
-      throw new OAuthException("Could not open connection to: " + url, ioe);
-    }
   }
 
   /**
@@ -56,6 +49,7 @@ class Request
   {
     try
     {
+      createConnection();
       return doSend();
     } catch (IOException ioe)
     {
@@ -63,6 +57,14 @@ class Request
     }
   }
 
+  private void createConnection() throws IOException
+  {
+    if (connection == null)
+    {
+      connection = (HttpURLConnection) new URL(url).openConnection();
+    }
+  }
+
   Response doSend() throws IOException
   {
     connection.setRequestMethod(this.verb.name());

commit 7e92db34139bfe473c5e89bd55d1cb7cb46abc2d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 15:42:34 2011 -0300

    Added functionallity for appending querystring params once the request is created

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 3392e4d..7557bb8 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -19,6 +19,7 @@ class Request
 
   private String url;
   private Verb verb;
+  private Map<String, String> querystringParams;
   private Map<String, String> bodyParams;
   private Map<String, String> headers;
   private String payload = null;
@@ -34,6 +35,7 @@ class Request
   {
     this.verb = verb;
     this.url = url;
+    this.querystringParams = new HashMap<String, String>();
     this.bodyParams = new HashMap<String, String>();
     this.headers = new HashMap<String, String>();
   }
@@ -112,6 +114,17 @@ class Request
   }
 
   /**
+   * Add a QueryString parameter
+   *
+   * @param key the parameter name
+   * @param value the parameter value
+   */
+  public void addQuerystringParam(String key, String value)
+  {
+    this.querystringParams.put(key, value);
+  }
+
+  /**
    * Add body payload.
    * 
    * This method is used when the HTTP body is not a form-url-encoded string,
@@ -145,8 +158,10 @@ class Request
           params.put(pair[0], pair[1]);
         }
       }
+      params.putAll(querystringParams);
       return params;
-    } catch (MalformedURLException mue)
+    }
+    catch (MalformedURLException mue)
     {
       throw new OAuthException("Malformed URL", mue);
     }
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 4034699..601e9bd 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -65,4 +65,13 @@ public class RequestTest
     assertTrue(connection.getHeaders().containsKey("Content-Length"));
   }
 
+  @Test
+  public void shouldAllowAddingQuerystringParametersAfterCreation()
+  {
+    Request request = new Request(Verb.GET, "http://example.com?one=val");
+    request.addQuerystringParam("two", "other val");
+    request.addQuerystringParam("more", "params");
+    assertEquals(3, request.getQueryStringParams().size());
+  }
+
 }
\ No newline at end of file

commit 9ea686a3f8d6e1cd94f5f0b3efc23b5167885839
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 15:51:34 2011 -0300

    Added OAuth 2.0 classes

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
index d4352fe..6e03567 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi20.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -1,15 +1,42 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.OAuthConfig;
-import org.scribe.oauth.OAuthService;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
 
-public class DefaultApi20 implements Api
+/**
+ * Default implementation of the OAuth protocol, version 2.0 (draft 11)
+ *
+ * This class is meant to be extended by concrete implementations of the API,
+ * providing the endpoints and endpoint-http-verbs.
+ *
+ * If your Api adheres to the 2.0 (draft 11) protocol correctly, you just need to extend
+ * this class and define the getters for your endpoints.
+ *
+ * If your Api does something a bit different, you can override the different
+ * extractors or services, in order to fine-tune the process. Please read the
+ * javadocs of the interfaces to get an idea of what to do.
+ *
+ * @author Diego Silveira
+ *
+ */
+public abstract class DefaultApi20 implements Api
 {
 
-  @Override
+  /**
+   * Returns the URL where you should redirect your users to authenticate
+   * your application.
+   *
+   * @param config OAuth 2.0 configuration param object
+   * @return the URL where you should redirect your users
+   */
+  public abstract String getAuthorizationUrl(OAuthConfig config);
+
+  /**
+   * {@inheritDoc}
+   */
   public OAuthService createService(OAuthConfig config, String scope)
   {
-    return null;
+    return new OAuth20ServiceImpl(this, config);
   }
 
 }
diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index bc0010b..01b98d3 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -38,4 +38,7 @@ public class OAuthConstants
   public static final String HEADER = "Authorization";
   public static final Token EMPTY_TOKEN = new Token("", "");
   public static final String SCOPE = "scope";
+
+  //OAuth 2.0
+  public static final String ACCESS_TOKEN = "access_token";
 }
diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index e7a2714..f957257 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -59,7 +59,7 @@ public class OAuth20ServiceImpl implements OAuthService
    */
   public void signRequest(Token accessToken, OAuthRequest request)
   {
-    request.addParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
+    request.addQuerystringParam(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
   }
 
   /**

commit 1f36fd0f32ca44e37d85cb226ee0da5a789f633b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 15:52:10 2011 -0300

    Added Facebook Api and example

diff --git a/changelog.txt b/changelog.txt
index 11cf828..2ddc512 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -18,3 +18,9 @@
 
  * FEATURE: Token made Serializable
  * FIX: Google Api encoding issues (thanks @roger and @klakegg)
+
+[1.1.0]
+
+  * FEATURE: OAuth 2.0 Support and Facebook support out of the box (thanks Diego Silveira)
+  * REFACTOR: Api creation and OAuthService refactors
+  * REFACTOR: Connections are created lazily (just before sending the request)
\ No newline at end of file
diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
new file mode 100644
index 0000000..896c71f
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -0,0 +1,16 @@
+package org.scribe.builder.api;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+
+public class FacebookApi extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://graph.facebook.com/oauth/authorize?response_type=token&client_id=%s&redirect_uri=%s";
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    if(OAuthConstants.OUT_OF_BAND.equals(config.getCallback()))
+    	throw new OAuthException("Facebook does not support oob authentication.");
+    return String.format(AUTHORIZE_URL, config.getApiKey(), config.getCallback());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/FacebookExample.java b/src/test/java/org/scribe/examples/FacebookExample.java
new file mode 100644
index 0000000..c83a0de
--- /dev/null
+++ b/src/test/java/org/scribe/examples/FacebookExample.java
@@ -0,0 +1,55 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class FacebookExample
+{
+  private static final String NETWORK_NAME = "Facebook";
+  private static final String PROTECTED_RESOURCE_URL = "https://graph.facebook.com/me";
+  private static final String NO_SECRET_NEEDED = "";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(FacebookApi.class)
+                                  .apiKey("anonymous")
+                                  .apiSecret("anonymous")
+                                  .callback("http://www.example.com/oauth_callback/")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the access token here");
+    System.out.print(">>");
+    Token accessToken = new Token(in.nextLine(), NO_SECRET_NEEDED);
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
\ No newline at end of file

commit 1f055d7eeb983fcc83c8934670a7406ae13c7381
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 16:10:00 2011 -0300

    Minor exception handling refactoring

diff --git a/src/main/java/org/scribe/utils/StreamUtils.java b/src/main/java/org/scribe/utils/StreamUtils.java
index fc5be8c..0799b9c 100644
--- a/src/main/java/org/scribe/utils/StreamUtils.java
+++ b/src/main/java/org/scribe/utils/StreamUtils.java
@@ -36,7 +36,7 @@ public class StreamUtils
       return out.toString();
     } catch (IOException ioe)
     {
-      throw new RuntimeException("Error while reading response body", ioe);
+      throw new IllegalStateException("Error while reading response body", ioe);
     }
   }
 }
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 5051f15..715be18 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -4,8 +4,6 @@ import java.io.*;
 import java.net.*;
 import java.util.*;
 
-import org.scribe.exceptions.*;
-
 /**
  * Utils to deal with URL and url-encodings
  *
@@ -78,7 +76,7 @@ public class URLUtils
     } 
     catch (UnsupportedEncodingException uee)
     {
-      throw new OAuthException(ERROR_MSG, uee);
+      throw new IllegalStateException(ERROR_MSG, uee);
     }
   }
 
@@ -97,7 +95,7 @@ public class URLUtils
     }
     catch (UnsupportedEncodingException uee)
     {
-      throw new OAuthException(ERROR_MSG, uee);
+      throw new IllegalStateException(ERROR_MSG, uee);
     }
   }
 

commit 8e23e81c574f00490df77795697a67633a565837
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 9 21:37:44 2011 -0300

    Explicited that you need a personal pair of keys to use Facebook's example

diff --git a/src/test/java/org/scribe/examples/FacebookExample.java b/src/test/java/org/scribe/examples/FacebookExample.java
index c83a0de..74e8ed0 100644
--- a/src/test/java/org/scribe/examples/FacebookExample.java
+++ b/src/test/java/org/scribe/examples/FacebookExample.java
@@ -16,10 +16,13 @@ public class FacebookExample
 
   public static void main(String[] args)
   {
+    // Replace these with your own api key and secret
+    String apiKey = "your_api_key";
+    String apiSecret = "your_api_secret";
     OAuthService service = new ServiceBuilder()
                                   .provider(FacebookApi.class)
-                                  .apiKey("anonymous")
-                                  .apiSecret("anonymous")
+                                  .apiKey(apiKey)
+                                  .apiSecret(apiSecret)
                                   .callback("http://www.example.com/oauth_callback/")
                                   .build();
     Scanner in = new Scanner(System.in);

commit 40bb52537441c4e51dc9c40a4486ba5bc1bb33c5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jan 10 15:04:26 2011 -0300

    Added url params before making the connection
    
    Renamed method to keep consistency

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 7557bb8..1d6b677 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -61,9 +61,10 @@ class Request
 
   private void createConnection() throws IOException
   {
+    String effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);
     if (connection == null)
     {
-      connection = (HttpURLConnection) new URL(url).openConnection();
+      connection = (HttpURLConnection) new URL(effectiveUrl).openConnection();
     }
   }
 
@@ -119,7 +120,7 @@ class Request
    * @param key the parameter name
    * @param value the parameter value
    */
-  public void addQuerystringParam(String key, String value)
+  public void addQuerystringParameter(String key, String value)
   {
     this.querystringParams.put(key, value);
   }
diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index f957257..a81dc88 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -59,7 +59,7 @@ public class OAuth20ServiceImpl implements OAuthService
    */
   public void signRequest(Token accessToken, OAuthRequest request)
   {
-    request.addQuerystringParam(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
+    request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
   }
 
   /**
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 601e9bd..750f004 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -69,8 +69,8 @@ public class RequestTest
   public void shouldAllowAddingQuerystringParametersAfterCreation()
   {
     Request request = new Request(Verb.GET, "http://example.com?one=val");
-    request.addQuerystringParam("two", "other val");
-    request.addQuerystringParam("more", "params");
+    request.addQuerystringParameter("two", "other val");
+    request.addQuerystringParameter("more", "params");
     assertEquals(3, request.getQueryStringParams().size());
   }
 

commit 080dd962a9d69a65d20af04c8463a0dc84c6fa31
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Wed Jan 12 18:05:50 2011 -0200

    Encoding the callback url

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index 896c71f..5585039 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -2,6 +2,7 @@ package org.scribe.builder.api;
 
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
+import org.scribe.utils.URLUtils;
 
 public class FacebookApi extends DefaultApi20
 {
@@ -11,6 +12,6 @@ public class FacebookApi extends DefaultApi20
   {
     if(OAuthConstants.OUT_OF_BAND.equals(config.getCallback()))
     	throw new OAuthException("Facebook does not support oob authentication.");
-    return String.format(AUTHORIZE_URL, config.getApiKey(), config.getCallback());
+    return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.percentEncode(config.getCallback()));
   }
 }

commit 690b9d4e21f679fc9e54655690d4269b8cef946f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Jan 12 21:46:27 2011 -0300

    (minor) removed specific import

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index 5585039..ad57e20 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -2,7 +2,7 @@ package org.scribe.builder.api;
 
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
-import org.scribe.utils.URLUtils;
+import org.scribe.utils.*;
 
 public class FacebookApi extends DefaultApi20
 {

commit 09ee10dbd153dcb12d9eef33a1151455f8266a6a
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jan 13 23:45:04 2011 -0300

    Added builder tests

diff --git a/src/test/java/org/scribe/builder/ServiceBuilderTest.java b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
new file mode 100644
index 0000000..bac2d34
--- /dev/null
+++ b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
@@ -0,0 +1,66 @@
+package org.scribe.builder;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class ServiceBuilderTest
+{
+  private ServiceBuilder builder;
+
+  @Before
+  public void setup()
+  {
+    builder = new ServiceBuilder();
+  }
+
+  @Test
+  public void shouldReturnOOBasDefaultCallback()
+  {
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").build();
+    assertEquals(ApiMock.config.getApiKey(), "key");
+    assertEquals(ApiMock.config.getApiSecret(), "secret");
+    assertEquals(ApiMock.config.getCallback(), OAuthConstants.OUT_OF_BAND);
+  }
+
+  @Test
+  public void shouldAcceptValidCallbackUrl()
+  {
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").callback("http://example.com").build();
+    assertEquals(ApiMock.config.getApiKey(), "key");
+    assertEquals(ApiMock.config.getApiSecret(), "secret");
+    assertEquals(ApiMock.config.getCallback(), "http://example.com");
+  }
+
+  @Test(expected=IllegalArgumentException.class)
+  public void shouldNotAcceptAnInvalidUrlAsCallback()
+  {
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").callback("example.com").build(); 
+  }
+
+  @Test
+  public void shouldAcceptAnScope()
+  {
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").scope("rss-api").build();
+    assertEquals(ApiMock.config.getApiKey(), "key");
+    assertEquals(ApiMock.config.getApiSecret(), "secret");
+    assertEquals(ApiMock.scope, "rss-api");
+  }
+
+  public static class ApiMock implements Api
+  {
+    public static OAuthConfig config;
+    public static String scope;
+    
+    @Override
+    public OAuthService createService(OAuthConfig config, String scope)
+    {
+      ApiMock.config = config;
+      ApiMock.scope = scope;
+      return null;
+    }
+  }
+}

commit 9c4f5bc33734da00a092d3694ce78cddf4dac9f6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jan 13 23:49:08 2011 -0300

    Refactored OOB checking in fbook api

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index ad57e20..c945520 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -1,17 +1,16 @@
 package org.scribe.builder.api;
 
-import org.scribe.exceptions.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
 
 public class FacebookApi extends DefaultApi20
 {
   private static final String AUTHORIZE_URL = "https://graph.facebook.com/oauth/authorize?response_type=token&client_id=%s&redirect_uri=%s";
+
   @Override
   public String getAuthorizationUrl(OAuthConfig config)
   {
-    if(OAuthConstants.OUT_OF_BAND.equals(config.getCallback()))
-    	throw new OAuthException("Facebook does not support oob authentication.");
+    Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Facebook does not support OOB");
     return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.percentEncode(config.getCallback()));
   }
 }

commit 380d858b13f21461ff278333a79d0a8dcecdb395
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 16 12:45:26 2011 -0300

    Changed version number for release

diff --git a/pom.xml b/pom.xml
index a7814d7..6c0ac24 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.0.9</version>
+  <version>1.1.0</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit da3a3f4a0dbf9ed93cafd64722809079c917af80
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Jan 19 13:41:41 2011 -0300

    Removed isEmpty for old VM compatibility

diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 715be18..30abc59 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -110,7 +110,7 @@ public class URLUtils
   {
     Preconditions.checkNotNull(url, "Cannot append to null URL");
     String queryString = URLUtils.formURLEncodeMap(params);
-    if (queryString.isEmpty()) return url;
+    if (queryString.length() == 0) return url;
 
     // Check if there are parameters in the url already and use '&' instead of '?'
     url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;

commit 0f39d37ddc49ef0b66b0c94e152a1e45f0cf1ab7
Author: dustin norlander <dustinn@gmail.com>
Date:   Tue Jan 25 15:18:30 2011 -0800

    add api() method to service builder

diff --git a/changelog.txt b/changelog.txt
index 2ddc512..7e83774 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -23,4 +23,9 @@
 
   * FEATURE: OAuth 2.0 Support and Facebook support out of the box (thanks Diego Silveira)
   * REFACTOR: Api creation and OAuthService refactors
-  * REFACTOR: Connections are created lazily (just before sending the request)
\ No newline at end of file
+  * REFACTOR: Connections are created lazily (just before sending the request)
+
+[1.1.1]
+
+  * FIX: Removed isEmpty() from OAuth2.0 code in order to support older JVMs
+  * FEATURE: Overloaded provider() method to support instances as well as classes (thanks dustismo)
\ No newline at end of file
diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 59a6d12..9236ddf 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -55,7 +55,22 @@ public class ServiceBuilder
     }
     return api;
   }
-  
+
+  /**
+   * Configures the {@link Api}
+   *
+   * Overloaded version. Let's you use an instance instead of a class.
+   *
+   * @param api instance of {@link Api}s
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder provider(Api api)
+  {
+	  Preconditions.checkNotNull(api, "Api cannot be null");
+	  this.api = api;
+	  return this;
+  }
+
   /**
    * Adds an OAuth callback url
    * 

commit 70358ad651a07116627e7dc37d9653fa9e04efac
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jan 31 16:15:18 2011 -0300

    Added specific tests for + symbol encoding

diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 8af12fe..8a8be2a 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -127,4 +127,21 @@ public class URLUtilsTest
     Assert.assertEquals(url, expectedUrl);
   }
 
+  @Test
+  public void shouldEncodePlusSymbol()
+  {
+    String plain = "7aEP+jNAwvjc0mjhqg0nuXPf";
+    String encoded = "7aEP%2BjNAwvjc0mjhqg0nuXPf";
+
+    Assert.assertEquals(encoded, URLUtils.percentEncode(plain));
+  }
+
+  @Test
+  public void shouldDecodePlusSymbol()
+  {
+    String encoded = "oauth_verifier=7aEP%2BjNAwvjc0mjhqg0nuXPf";
+    String expected = "oauth_verifier=7aEP+jNAwvjc0mjhqg0nuXPf";
+
+    Assert.assertEquals(expected, URLUtils.percentDecode(encoded));
+  }
 }

commit c7176c97e297ec9a419918c7202c8996b6714d6d
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 16:54:28 2011 -0200

    Added access_token related methods to OAuth 2.0 APIs

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
index 6e03567..cc09db3 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi20.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -1,7 +1,11 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.*;
-import org.scribe.oauth.*;
+import org.scribe.extractors.AccessTokenExtractor;
+import org.scribe.extractors.TokenExtractor20Impl;
+import org.scribe.model.OAuthConfig;
+import org.scribe.model.Verb;
+import org.scribe.oauth.OAuth20ServiceImpl;
+import org.scribe.oauth.OAuthService;
 
 /**
  * Default implementation of the OAuth protocol, version 2.0 (draft 11)
@@ -23,6 +27,33 @@ public abstract class DefaultApi20 implements Api
 {
 
   /**
+   * Returns the access token extractor.
+   * 
+   * @return access token extractor
+   */
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new TokenExtractor20Impl();
+  }
+	
+  /**
+   * Returns the verb for the access token endpoint (defaults to GET)
+   * 
+   * @return access token endpoint verb
+   */
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.GET;
+  }
+	
+  /**
+   * Returns the URL that receives the access token requests.
+   * 
+   * @return access token URL
+   */
+  public abstract String getAccessTokenEndpoint();
+	
+  /**
    * Returns the URL where you should redirect your users to authenticate
    * your application.
    *
diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index c945520..70784aa 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -5,9 +5,15 @@ import org.scribe.utils.*;
 
 public class FacebookApi extends DefaultApi20
 {
-  private static final String AUTHORIZE_URL = "https://graph.facebook.com/oauth/authorize?response_type=token&client_id=%s&redirect_uri=%s";
+  private static final String AUTHORIZE_URL = "https://www.facebook.com/dialog/oauth?client_id=%s&redirect_uri=%s";
 
   @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://graph.facebook.com/oauth/access_token";
+  }
+  
+  @Override
   public String getAuthorizationUrl(OAuthConfig config)
   {
     Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Facebook does not support OOB");

commit 08aebb5fb17778205ee69e5903c90c61d01da65f
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 16:56:10 2011 -0200

    Added specific constants for OAuth 2.0

diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index 01b98d3..c93c31c 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -41,4 +41,9 @@ public class OAuthConstants
 
   //OAuth 2.0
   public static final String ACCESS_TOKEN = "access_token";
+  public static final String CLIENT_ID = "client_id";
+  public static final String CLIENT_SECRET = "client_secret";
+  public static final String REDIRECT_URI = "redirect_uri";
+  public static final String CODE = "code";
+  
 }

commit 581e2b6d84a2bd8235b604211d87074fad4e9a91
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 17:03:28 2011 -0200

    Changed the getAccessToken() method implementation to conform to the OAuth 2.0 server-side flow

diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index a81dc88..86407de 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -1,7 +1,12 @@
 package org.scribe.oauth;
 
-import org.scribe.builder.api.*;
-import org.scribe.model.*;
+import org.scribe.builder.api.DefaultApi20;
+import org.scribe.model.OAuthConfig;
+import org.scribe.model.OAuthConstants;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verifier;
 
 public class OAuth20ServiceImpl implements OAuthService
 {
@@ -35,7 +40,13 @@ public class OAuth20ServiceImpl implements OAuthService
    */
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
-    throw new UnsupportedOperationException("Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there");
+    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
+    request.addQuerystringParameter(OAuthConstants.CLIENT_ID, config.getApiKey());
+    request.addQuerystringParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());
+    request.addQuerystringParameter(OAuthConstants.CODE, verifier.getValue());
+    request.addQuerystringParameter(OAuthConstants.REDIRECT_URI, config.getCallback());
+    Response response = request.send();
+    return api.getAccessTokenExtractor().extract(response.getBody());
   }
 
   /**

commit 7385d3702ede1629446b1ee9e62f4c2a7b42c32b
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 17:09:11 2011 -0200

    Added specific token extractor for OAuth 2.0

diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
new file mode 100644
index 0000000..8c956c5
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -0,0 +1,35 @@
+package org.scribe.extractors;
+
+import java.util.regex.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+/**
+ * Default implementation of {@AccessTokenExtractor}. Conforms to OAuth 2.0
+ *
+ */
+public class TokenExtractor20Impl implements AccessTokenExtractor
+{
+  private static final String TOKEN_REGEX = "access_token=(\\S*?)(&(\\S*))?";
+  private static final String EMPTY_SECRET = "";
+
+  /**
+   * {@inheritDoc} 
+   */
+  public Token extract(String response)
+  {
+    Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
+
+    Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
+    if (matcher.matches())
+    {
+      String token = URLUtils.percentDecode(matcher.group(1));
+      return new Token(token, EMPTY_SECRET);
+    } else
+    {
+      throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/extractors/TokenExtractor20Test.java b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
new file mode 100644
index 0000000..167b2d7
--- /dev/null
+++ b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
@@ -0,0 +1,59 @@
+package org.scribe.extractors;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.scribe.exceptions.OAuthException;
+import org.scribe.model.Token;
+
+public class TokenExtractor20Test
+{
+
+  private TokenExtractor20Impl extractor;
+
+  @Before
+  public void setup()
+  {
+    extractor = new TokenExtractor20Impl();
+  }
+
+  @Test
+  public void shouldExtractTokenFromOAuthStandardResponse()
+  {
+    String response = "access_token=166942940015970|2.2ltzWXYNDjCtg5ZDVVJJeg__.3600.1295816400-548517159|RsXNdKrpxg8L6QNLWcs2TVTmcaE";
+    Token extracted = extractor.extract(response);
+    assertEquals("166942940015970|2.2ltzWXYNDjCtg5ZDVVJJeg__.3600.1295816400-548517159|RsXNdKrpxg8L6QNLWcs2TVTmcaE", extracted.getToken());
+    assertEquals("", extracted.getSecret());
+  }
+
+  @Test
+  public void shouldExtractTokenFromResponseWithExpiresParam()
+  {
+    String response = "access_token=166942940015970|2.2ltzWXYNDjCtg5ZDVVJJeg__.3600.1295816400-548517159|RsXNdKrpxg8L6QNLWcs2TVTmcaE&expires=5108";
+    Token extracted = extractor.extract(response);
+    assertEquals("166942940015970|2.2ltzWXYNDjCtg5ZDVVJJeg__.3600.1295816400-548517159|RsXNdKrpxg8L6QNLWcs2TVTmcaE", extracted.getToken());
+    assertEquals("", extracted.getSecret());
+  }
+
+  @Test(expected = OAuthException.class)
+  public void shouldThrowExceptionIfTokenIsAbsent()
+  {
+    String response = "&expires=5108";
+    extractor.extract(response);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfResponseIsNull()
+  {
+    String response = null;
+    extractor.extract(response);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfResponseIsEmptyString()
+  {
+    String response = "";
+    extractor.extract(response);
+  }
+}

commit 02f3d4dac242042dea1afff227bea1452e36247b
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 17:13:03 2011 -0200

    Changed the Facebook example to conform to the OAuth 2.0 server-side flow

diff --git a/src/test/java/org/scribe/examples/FacebookExample.java b/src/test/java/org/scribe/examples/FacebookExample.java
index 74e8ed0..02f3396 100644
--- a/src/test/java/org/scribe/examples/FacebookExample.java
+++ b/src/test/java/org/scribe/examples/FacebookExample.java
@@ -11,19 +11,19 @@ public class FacebookExample
 {
   private static final String NETWORK_NAME = "Facebook";
   private static final String PROTECTED_RESOURCE_URL = "https://graph.facebook.com/me";
-  private static final String NO_SECRET_NEEDED = "";
   private static final Token EMPTY_TOKEN = null;
 
   public static void main(String[] args)
   {
     // Replace these with your own api key and secret
-    String apiKey = "your_api_key";
-    String apiSecret = "your_api_secret";
+    String apiKey = "151212568269315";//"your_api_key";
+    String apiSecret = "783080a95ff0e1e7266c8022b2e95fa2";//"your_api_secret";
     OAuthService service = new ServiceBuilder()
                                   .provider(FacebookApi.class)
                                   .apiKey(apiKey)
                                   .apiSecret(apiSecret)
-                                  .callback("http://www.example.com/oauth_callback/")
+                                  //.callback("http://www.example.com/oauth_callback/")
+                                  .callback("https://github.com/diegossilveira/")
                                   .build();
     Scanner in = new Scanner(System.in);
 
@@ -36,9 +36,16 @@ public class FacebookExample
     System.out.println("Got the Authorization URL!");
     System.out.println("Now go and authorize Scribe here:");
     System.out.println(authorizationUrl);
-    System.out.println("And paste the access token here");
+    System.out.println("And paste the authorization code here");
     System.out.print(">>");
-    Token accessToken = new Token(in.nextLine(), NO_SECRET_NEEDED);
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+    
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!

commit db37744fa39e982903ef6ab32d1553a6d695a543
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 21:54:46 2011 -0200

    Fixed package imports

diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
index cc09db3..7e3eb9b 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi20.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -1,11 +1,8 @@
 package org.scribe.builder.api;
 
-import org.scribe.extractors.AccessTokenExtractor;
-import org.scribe.extractors.TokenExtractor20Impl;
-import org.scribe.model.OAuthConfig;
-import org.scribe.model.Verb;
-import org.scribe.oauth.OAuth20ServiceImpl;
-import org.scribe.oauth.OAuthService;
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
 
 /**
  * Default implementation of the OAuth protocol, version 2.0 (draft 11)
diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index 86407de..94b0cbe 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -1,12 +1,7 @@
 package org.scribe.oauth;
 
-import org.scribe.builder.api.DefaultApi20;
-import org.scribe.model.OAuthConfig;
-import org.scribe.model.OAuthConstants;
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Response;
-import org.scribe.model.Token;
-import org.scribe.model.Verifier;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
 
 public class OAuth20ServiceImpl implements OAuthService
 {
diff --git a/src/test/java/org/scribe/extractors/TokenExtractor20Test.java b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
index 167b2d7..17f1a01 100644
--- a/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
+++ b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
@@ -1,11 +1,10 @@
 package org.scribe.extractors;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
 
-import org.junit.Before;
-import org.junit.Test;
-import org.scribe.exceptions.OAuthException;
-import org.scribe.model.Token;
+import org.junit.*;
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
 
 public class TokenExtractor20Test
 {

commit de8f0d621d7427b9079af0f6b791c8e000cf90a3
Author: diegossilveira <diegossilveira@gmail.com>
Date:   Thu Feb 10 17:13:03 2011 -0200

    Changed the Facebook example to conform to the OAuth 2.0 server-side flow

diff --git a/src/test/java/org/scribe/examples/FacebookExample.java b/src/test/java/org/scribe/examples/FacebookExample.java
index 02f3396..d5dc3cb 100644
--- a/src/test/java/org/scribe/examples/FacebookExample.java
+++ b/src/test/java/org/scribe/examples/FacebookExample.java
@@ -16,14 +16,13 @@ public class FacebookExample
   public static void main(String[] args)
   {
     // Replace these with your own api key and secret
-    String apiKey = "151212568269315";//"your_api_key";
-    String apiSecret = "783080a95ff0e1e7266c8022b2e95fa2";//"your_api_secret";
+    String apiKey = "your_app_id";
+    String apiSecret = "your_api_secret";
     OAuthService service = new ServiceBuilder()
                                   .provider(FacebookApi.class)
                                   .apiKey(apiKey)
                                   .apiSecret(apiSecret)
-                                  //.callback("http://www.example.com/oauth_callback/")
-                                  .callback("https://github.com/diegossilveira/")
+                                  .callback("http://www.example.com/oauth_callback/")
                                   .build();
     Scanner in = new Scanner(System.in);
 

commit e0e8df98d36bcf65d231bd10e05c202cd9b9118f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Feb 22 20:11:48 2011 -0300

    Added formURLEncode/Decode methods

diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 30abc59..ffd6600 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -31,7 +31,7 @@ public class URLUtils
   }
 
   /**
-   * Turns a map into a form-url-encoded string (key=value&key2=value2)
+   * Turns a map into a form-urlencoded string
    * 
    * @param map any map
    * @return form-url-encoded string
@@ -47,32 +47,43 @@ public class URLUtils
     StringBuffer encodedString = new StringBuffer(map.size() * 20);
     for (String key : map.keySet())
     {
-      if(encodedString.length() > 0) 
+      encodedString.append(PARAM_SEPARATOR).append(formURLEncode(key));
+      if(map.get(key) != null)
       {
-        encodedString.append(PARAM_SEPARATOR);
+        encodedString.append(PAIR_SEPARATOR).append(formURLEncode(map.get(key)));
       }
-      encodedString.append(percentEncode(key)).append(PAIR_SEPARATOR).append(percentEncode(map.get(key)));
     }
-    return encodedString.toString();
+    return encodedString.toString().substring(1);
   }
 
   /**
    * Percent encodes a string
    * 
-   * @param plain
+   * @param string plain string
    * @return percent encoded string
    */
   public static String percentEncode(String string)
   {
+    String encoded = formURLEncode(string);
+    for (EncodingRule rule : ENCODING_RULES)
+    {
+      encoded = rule.apply(encoded);
+    }
+    return encoded;
+  }
+
+  /**
+   * Translates a string into application/x-www-form-urlencoded format
+   *
+   * @param plain
+   * @return form-urlencoded string
+   */
+  public static String formURLEncode(String string)
+  {
     Preconditions.checkNotNull(string, "Cannot encode null string");
     try
     {
-      String encoded = URLEncoder.encode(string, UTF_8);
-      for(EncodingRule rule : ENCODING_RULES)
-      {
-        encoded = rule.apply(encoded);
-      }
-      return encoded;
+      return URLEncoder.encode(string, UTF_8);
     } 
     catch (UnsupportedEncodingException uee)
     {
@@ -81,12 +92,12 @@ public class URLUtils
   }
 
   /**
-   * Percent decodes a string
+   * Decodes a application/x-www-form-urlencoded string
    * 
-   * @param string percent encoded string
+   * @param string form-urlencoded string
    * @return plain string
    */
-  public static String percentDecode(String string)
+  public static String formURLDecode(String string)
   {
     Preconditions.checkNotNull(string, "Cannot decode null string");
     try
@@ -110,12 +121,27 @@ public class URLUtils
   {
     Preconditions.checkNotNull(url, "Cannot append to null URL");
     String queryString = URLUtils.formURLEncodeMap(params);
-    if (queryString.length() == 0) return url;
+    if (queryString.equals(EMPTY_STRING))
+    {
+      return url;
+    }
+    else
+    {
+      url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;
+      url += queryString;
+      return url;
+    }
+  }
 
-    // Check if there are parameters in the url already and use '&' instead of '?'
-    url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;
-    url += queryString;
-    return url;
+  public static String concatSortedPercentEncodedParams(Map<String, String> params)
+  {
+    StringBuilder result = new StringBuilder();
+    for (String key : params.keySet())
+    {
+      result.append(key).append(PAIR_SEPARATOR);
+      result.append(params.get(key)).append(PARAM_SEPARATOR);
+    }
+    return result.toString().substring(0, result.length() - 1);
   }
 
   private static final class EncodingRule
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 8a8be2a..522cdc4 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -16,7 +16,7 @@ public class URLUtilsTest
     params.put("key with spaces", "value with spaces");
     params.put("&symbols!", "#!");
 
-    String expected = "key=value&key%20with%20spaces=value%20with%20spaces&%26symbols%21=%23%21";
+    String expected = "key=value&key+with+spaces=value+with+spaces&%26symbols%21=%23%21";
     assertEquals(expected, URLUtils.formURLEncodeMap(params));
   }
 
@@ -29,6 +29,17 @@ public class URLUtilsTest
   }
 
   @Test
+  public void shouldFormURLEncodeMapWithMissingValues()
+  {
+    Map<String, String> params = new LinkedHashMap<String, String>();
+    params.put("key", "value");
+    params.put("key with spaces", null);
+
+    String expected = "key=value&key+with+spaces";
+    assertEquals(expected, URLUtils.formURLEncodeMap(params));
+  }
+
+  @Test
   public void shouldPercentEncodeString()
   {
     String toEncode = "this is a test &^";
@@ -37,24 +48,32 @@ public class URLUtilsTest
   }
 
   @Test
-  public void shouldPercentDecodeString()
+  public void shouldFormURLEncodeString()
+  {
+    String toEncode = "this is a test &^";
+    String expected = "this+is+a+test+%26%5E";
+    assertEquals(expected, URLUtils.formURLEncode(toEncode));
+  }
+
+  @Test
+  public void shouldFormURLDecodeString()
   {
     String toDecode = "this+is+a+test+%26%5E";
     String expected = "this is a test &^";
-    assertEquals(expected, URLUtils.percentDecode(toDecode));
+    assertEquals(expected, URLUtils.formURLDecode(toDecode));
   }
 
   @Test
-  public void shouldEncodeAllSpecialCharacters()
+  public void shouldPercentEncodeAllSpecialCharacters()
   {
     String plain = "!*'();:@&=+$,/?#[]";
     String encoded = "%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D";
     assertEquals(encoded, URLUtils.percentEncode(plain));
-    assertEquals(plain, URLUtils.percentDecode(encoded));
+    assertEquals(plain, URLUtils.formURLDecode(encoded));
   }
 
   @Test
-  public void shouldNotEncodeReservedCharacters()
+  public void shouldNotPercentEncodeReservedCharacters()
   {
     String plain = "abcde123456-._~";
     String encoded = plain;
@@ -79,7 +98,7 @@ public class URLUtilsTest
   public void shouldThrowExceptionIfStringToDecodeIsNull()
   {
     String toDecode = null;
-    URLUtils.percentDecode(toDecode);
+    URLUtils.formURLDecode(toDecode);
   }
 
   @Test(expected = IllegalArgumentException.class)
@@ -103,7 +122,7 @@ public class URLUtilsTest
   public void shouldAppendParametersToSimpleUrl()
   {
     String url = "http://www.example.com";
-    String expectedUrl = "http://www.example.com?param1=value1&param2=value%20with%20spaces";
+    String expectedUrl = "http://www.example.com?param1=value1&param2=value+with+spaces";
 
     Map<String, String> params = new HashMap<String, String>();
     params.put("param1", "value1");
@@ -117,7 +136,7 @@ public class URLUtilsTest
   public void shouldAppendParametersToUrlWithQuerystring()
   {
     String url = "http://www.example.com?already=present";
-    String expectedUrl = "http://www.example.com?already=present&param1=value1&param2=value%20with%20spaces";
+    String expectedUrl = "http://www.example.com?already=present&param1=value1&param2=value+with+spaces";
 
     Map<String, String> params = new HashMap<String, String>();
     params.put("param1", "value1");
@@ -128,7 +147,7 @@ public class URLUtilsTest
   }
 
   @Test
-  public void shouldEncodePlusSymbol()
+  public void shouldPercentEncodePlusSymbol()
   {
     String plain = "7aEP+jNAwvjc0mjhqg0nuXPf";
     String encoded = "7aEP%2BjNAwvjc0mjhqg0nuXPf";
@@ -137,11 +156,11 @@ public class URLUtilsTest
   }
 
   @Test
-  public void shouldDecodePlusSymbol()
+  public void shouldURLDecodePlusSymbol()
   {
     String encoded = "oauth_verifier=7aEP%2BjNAwvjc0mjhqg0nuXPf";
     String expected = "oauth_verifier=7aEP+jNAwvjc0mjhqg0nuXPf";
 
-    Assert.assertEquals(expected, URLUtils.percentDecode(encoded));
+    Assert.assertEquals(expected, URLUtils.formURLDecode(encoded));
   }
 }

commit d19c5d6e3516c0875dbac2ae79130e85ece2c1d6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Feb 22 20:12:09 2011 -0300

    Removed Verifier test (unused)

diff --git a/src/test/java/org/scribe/model/VerifierTest.java b/src/test/java/org/scribe/model/VerifierTest.java
deleted file mode 100644
index 509ace8..0000000
--- a/src/test/java/org/scribe/model/VerifierTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.scribe.model;
-
-import static org.junit.Assert.*;
-
-import org.junit.*;
-
-public class VerifierTest
-{
-  @Test
-  public void shouldParse()
-  {
-    Verifier verifier = new Verifier("p8k%2BGIjIL9PblXq%2BpH6LmT9l");
-    assertEquals(verifier.getValue(), "p8k+GIjIL9PblXq+pH6LmT9l");
-  }
-
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowErrorForNullString()
-  {
-    new Verifier(null);
-  }
-}

commit bb872e4466477eb2ee8b8c08c7fbc73c0f829c6a
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 23 11:22:17 2011 -0300

    Changed percentEncodings

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index c945520..bcda56e 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -11,6 +11,6 @@ public class FacebookApi extends DefaultApi20
   public String getAuthorizationUrl(OAuthConfig config)
   {
     Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Facebook does not support OOB");
-    return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.percentEncode(config.getCallback()));
+    return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
   }
 }
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index 2bc0aa0..e5dac17 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -27,10 +27,11 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.matches())
     {
-      String token = URLUtils.percentDecode(matcher.group(1));
-      String secret = URLUtils.percentDecode(matcher.group(2));
+      String token = URLUtils.formURLDecode(matcher.group(1));
+      String secret = URLUtils.formURLDecode(matcher.group(2));
       return new Token(token, secret);
-    } else
+    }
+    else
     {
       throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
     }

commit 906a979e635b5713842338e3f1cc6248d5cb09ef
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 23 14:37:47 2011 -0300

    Removed encoding in Verifier constructor

diff --git a/src/main/java/org/scribe/model/Verifier.java b/src/main/java/org/scribe/model/Verifier.java
index f1dee62..45f0e4e 100644
--- a/src/main/java/org/scribe/model/Verifier.java
+++ b/src/main/java/org/scribe/model/Verifier.java
@@ -19,7 +19,8 @@ public class Verifier
    */
   public Verifier(String value)
   {
-    this.value = URLUtils.percentDecode(value);
+    Preconditions.checkNotNull(value, "Must provide a valid string as verifier");
+    this.value = value;
   }
 
   public String getValue()

commit 22367de55341d6045fc058e60bd88c21426ed235
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 23 14:55:54 2011 -0300

    Changed getQuerystringParameters impl to form-urldecode the parameters

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 1d6b677..b1a59bc 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -144,22 +144,16 @@ class Request
    * Get a {@link Map} of the query string parameters.
    * 
    * @return a map containing the query string parameters
+   * @throws OAuthException if the URL is not valid
    */
   public Map<String, String> getQueryStringParams()
   {
     try
     {
       Map<String, String> params = new HashMap<String, String>();
-      String query = new URL(url).getQuery();
-      if (query != null)
-      {
-        for (String param : query.split("&"))
-        {
-          String pair[] = param.split("=");
-          params.put(pair[0], pair[1]);
-        }
-      }
-      params.putAll(querystringParams);
+      String queryString = new URL(url).getQuery();
+      params.putAll(URLUtils.queryStringToMap(queryString));
+      params.putAll(this.querystringParams);
       return params;
     }
     catch (MalformedURLException mue)
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index ffd6600..8c6f492 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -13,8 +13,8 @@ public class URLUtils
 {
   private static final String EMPTY_STRING = "";
   private static final String UTF_8 = "UTF-8";
-  private static final char PAIR_SEPARATOR = '=';
-  private static final char PARAM_SEPARATOR = '&';
+  private static final String PAIR_SEPARATOR = "=";
+  private static final String PARAM_SEPARATOR = "&";
   private static final char QUERY_STRING_SEPARATOR = '?';
 
   private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
@@ -133,6 +133,12 @@ public class URLUtils
     }
   }
 
+  /**
+   * Concats a key-value map into a querystring-like String
+   *
+   * @param params key-value map
+   * @return querystring-like String
+   */
   public static String concatSortedPercentEncodedParams(Map<String, String> params)
   {
     StringBuilder result = new StringBuilder();
@@ -144,6 +150,28 @@ public class URLUtils
     return result.toString().substring(0, result.length() - 1);
   }
 
+  /**
+   * Parses and form-urldecodes a querystring-like string into a map
+   *
+   * @param queryString querystring-like String
+   * @return a map with the form-urldecoded parameters
+   */
+  public static Map<String, String> queryStringToMap(String queryString)
+  {
+    Map<String, String> result = new HashMap<String, String>();
+    if (queryString != null && queryString.length() > 0)
+    {
+      for (String param : queryString.split(PARAM_SEPARATOR))
+      {
+        String pair[] = param.split(PAIR_SEPARATOR);
+        String key = formURLDecode(pair[0]);
+        String value = pair.length > 1 ? formURLDecode(pair[1]) : EMPTY_STRING;
+        result.put(key, value);
+      }
+    }
+    return result;
+  }
+
   private static final class EncodingRule
   {
     private final String ch;

commit 16b347592676c3f7f1134c4498376cae60e953e7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 24 15:26:29 2011 -0300

    Added uitilty method to MapUtils for appending and encoding parameters

diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index f18c62c..ebaf20a 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -32,11 +32,11 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
   private String getSortedAndEncodedParams(OAuthRequest request)
   {
     Map<String, String> params = new HashMap<String, String>();
-    params.putAll(request.getQueryStringParams());
-    params.putAll(request.getBodyParams());
-    params.putAll(request.getOauthParameters());
+    MapUtils.decodeAndAppendEntries(request.getQueryStringParams(), params);
+    MapUtils.decodeAndAppendEntries(request.getBodyParams(), params);
+    MapUtils.decodeAndAppendEntries(request.getOauthParameters(), params);
     params = MapUtils.sort(params);
-    return URLUtils.percentEncode(URLUtils.formURLEncodeMap(params));
+    return URLUtils.percentEncode(URLUtils.concatSortedPercentEncodedParams(params));
   }
 
   private void checkPreconditions(OAuthRequest request)
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index db08db3..a77e4b6 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -33,4 +33,19 @@ public class MapUtils
     Collections.sort(keys);
     return keys;
   }
+
+  /**
+   * Form-urlDecodes and appends all keys from the source {@link Map} to the
+   * target {@link Map}
+   *
+   * @param source Map from where the keys get copied and decoded
+   * @param target Map where the decoded keys are copied to
+   */
+  public static void decodeAndAppendEntries(Map<String, String> source, Map<String, String> target)
+  {
+    for (String key: source.keySet())
+    {
+      target.put(URLUtils.percentEncode(key), URLUtils.percentEncode(source.get(key)));
+    }
+  }
 }
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 8c6f492..eb82e46 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -139,6 +139,7 @@ public class URLUtils
    * @param params key-value map
    * @return querystring-like String
    */
+  // TODO Move to MapUtils
   public static String concatSortedPercentEncodedParams(Map<String, String> params)
   {
     StringBuilder result = new StringBuilder();
@@ -156,6 +157,7 @@ public class URLUtils
    * @param queryString querystring-like String
    * @return a map with the form-urldecoded parameters
    */
+  // TODO Move to MapUtils
   public static Map<String, String> queryStringToMap(String queryString)
   {
     Map<String, String> result = new HashMap<String, String>();

commit 73a53b363a04cc0835f7e83450d42695e5c17f2d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 24 15:26:45 2011 -0300

    Fixed RequestTests

diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 750f004..2a2e90e 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -16,8 +16,10 @@ public class RequestTest
   {
     connection = new ConnectionStub();
     postRequest = new Request(Verb.POST, "http://example.com");
+    postRequest.addBodyParameter("param", "value");
+    postRequest.addBodyParameter("param with spaces", "value with spaces");
     postRequest.setConnection(connection);
-    getRequest = new Request(Verb.GET, "http://example.com?qsparam=value&other=value+with+spaces");
+    getRequest = new Request(Verb.GET, "http://example.com?qsparam=value&other+param=value+with+spaces");
     getRequest.setConnection(connection);
   }
 
@@ -34,6 +36,7 @@ public class RequestTest
     assertEquals(2, getRequest.getQueryStringParams().size());
     assertEquals(0, postRequest.getQueryStringParams().size());
     assertTrue(getRequest.getQueryStringParams().containsKey("qsparam"));
+    assertTrue(getRequest.getQueryStringParams().get("qsparam").equals("value"));
   }
 
   @Test
@@ -47,12 +50,10 @@ public class RequestTest
   }
 
   @Test
-  public void shouldSetBodyParamsAndHeaders()
+  public void shouldSetBodyParamsAndAddContentLength()
   {
-    postRequest.addBodyParameter("param", "value");
-    postRequest.addBodyParameter("param two", "value with spaces");
+    assertEquals("param=value&param+with+spaces=value+with+spaces", postRequest.getBodyContents());
     postRequest.send();
-    assertEquals("param%20two=value%20with%20spaces&param=value", postRequest.getBodyContents());
     assertTrue(connection.getHeaders().containsKey("Content-Length"));
   }
 
@@ -74,4 +75,9 @@ public class RequestTest
     assertEquals(3, request.getQueryStringParams().size());
   }
 
+  @Test
+  public void shouldHandleQueryStringSpaceEncodingProperly()
+  {
+    assertTrue(getRequest.getQueryStringParams().get("other param").equals("value with spaces"));
+  }
 }
\ No newline at end of file

commit 0832613b60ff5cf6db6d141c6cee53520684b39c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 24 15:27:02 2011 -0300

    Changed artifact version in README

diff --git a/README.textile b/README.textile
index a6d3de5..cd8d672 100644
--- a/README.textile
+++ b/README.textile
@@ -61,7 +61,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.0.6</version>@
+  @<version>1.1.0</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/changelog.txt b/changelog.txt
index 7e83774..c5cab0d 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -28,4 +28,5 @@
 [1.1.1]
 
   * FIX: Removed isEmpty() from OAuth2.0 code in order to support older JVMs
-  * FEATURE: Overloaded provider() method to support instances as well as classes (thanks dustismo)
\ No newline at end of file
+  * FEATURE: Overloaded provider() method to support instances as well as classes (thanks dustismo)
+  * FIX: White-space parameter bug (thanks Krogoth)
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 6c0ac24..95da596 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.1.0</version>
+  <version>1.1.1</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 6923d3311f08925bc13de6630f1787ea56b12094
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 13 10:11:12 2011 -0300

    Added facebook and 2.0 info on readme

diff --git a/README.textile b/README.textile
index cd8d672..21a27a0 100644
--- a/README.textile
+++ b/README.textile
@@ -20,10 +20,12 @@ h3. Threadsafe
 
 Hit Scribe as hard and with many threads as you like.
 
-h3. Supports all major OAuth APIs out-of-the-box
+h3. Supports all major 1.0a and 2.0 OAuth APIs out-of-the-box
 
 * Google
 
+* Facebook
+
 * Yahoo
 
 * LinkedIn

commit d8ab4ba404ec0a6ee797bf7aa36d7f6e1d186be2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 13 10:25:52 2011 -0300

    oauth_callback param should only be sent on the request_token request

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 9ab565a..ff5db09 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -37,6 +37,7 @@ public class OAuth10aServiceImpl implements OAuthService
   {
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
     addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
+    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
     addOAuthHeader(request);
     Response response = request.send();
     return api.getRequestTokenExtractor().extract(response.getBody());
@@ -49,7 +50,6 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());
     request.addOAuthParameter(OAuthConstants.SIGN_METHOD, api.getSignatureService().getSignatureMethod());
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
-    request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
     if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
   }

commit c441b7d8a4d41fcde75b7f255f609e50126406cd
Merge: d8ab4ba de8f0d6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 13 10:36:08 2011 -0300

    Merged Diego's changes for OAuth2.0 server-side flow

commit 6bdae4999ed89b32bcc0469789ce3883120a0886
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 13 10:44:31 2011 -0300

    Fixed wrong method call

diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
index 8c956c5..e931992 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -25,9 +25,10 @@ public class TokenExtractor20Impl implements AccessTokenExtractor
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.matches())
     {
-      String token = URLUtils.percentDecode(matcher.group(1));
+      String token = URLUtils.formURLDecode(matcher.group(1));
       return new Token(token, EMPTY_SECRET);
-    } else
+    } 
+    else
     {
       throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
     }

commit 5c0d150547d702e88c4a0251f2bdca5ff0963423
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 13 10:49:31 2011 -0300

    Added mvn-bundle script

diff --git a/bundle b/bundle
new file mode 100755
index 0000000..bae5155
--- /dev/null
+++ b/bundle
@@ -0,0 +1,2 @@
+#!/bin/sh
+mvn source:jar javadoc:jar package gpg:sign repository:bundle-create -Dgpg.passphrase=$1
\ No newline at end of file

commit 4f23cfaf20bc622f4a8ccf679e54a0bde3d75330
Author: Stuart Grimshaw <sgrimshaw@plus.net>
Date:   Mon Mar 14 23:41:34 2011 +0000

    Moved callback header above call to addOAthParams so it gets properly
    signed.

diff --git a/changelog.txt b/changelog.txt
index 4bd9c24..e503311 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -30,4 +30,8 @@
   * FIX: Removed isEmpty() from OAuth2.0 code in order to support older JVMs
   * FEATURE: Overloaded provider() method to support instances as well as classes (thanks dustismo)
   * FIX: White-space parameter bug (thanks Krogoth)
-  * FEATURE: OAuth 2.0 now implements server-flow (thanks Diego Silveira)
\ No newline at end of file
+  * FEATURE: OAuth 2.0 now implements server-flow (thanks Diego Silveira)
+
+[1.1.2]
+
+  * FIX: Fixed ugly bug that made 1.1.1 practically unusable (thanks Stubbs)
diff --git a/pom.xml b/pom.xml
index 95da596..200f92d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.1.1</version>
+  <version>1.1.2</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index ff5db09..db182e2 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -36,8 +36,8 @@ public class OAuth10aServiceImpl implements OAuthService
   public Token getRequestToken()
   {
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
-    addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
     request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
+    addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
     addOAuthHeader(request);
     Response response = request.send();
     return api.getRequestTokenExtractor().extract(response.getBody());

commit 72901165f817fb4107663d7a3c43607afa88b3c1
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Mar 30 00:09:46 2011 -0300

    updated readme with new pom version

diff --git a/README.textile b/README.textile
index 21a27a0..654ccb0 100644
--- a/README.textile
+++ b/README.textile
@@ -63,7 +63,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.1.0</version>@
+  @<version>1.1.2</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes

commit 145c009fc3734958d18625286f31e43fc19e8734
Author: Stuart Grimshaw <sgrimshaw@plus.net>
Date:   Wed Mar 16 09:27:31 2011 +0000

    Fix for HttpUrlConnection on pre-Gingerbread Android devices

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index b1a59bc..948e5c1 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -64,6 +64,7 @@ class Request
     String effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);
     if (connection == null)
     {
+      System.setProperty("http.keepAlive", "false");
       connection = (HttpURLConnection) new URL(effectiveUrl).openConnection();
     }
   }

commit 75bcb0013da1ab467554ea13ae844984c9ad526b
Author: Stuart Grimshaw <sgrimshaw@plus.net>
Date:   Tue Mar 15 16:45:44 2011 +0000

    Added Lovefilm Api and example

diff --git a/src/main/java/org/scribe/builder/api/LoveFilmApi.java b/src/main/java/org/scribe/builder/api/LoveFilmApi.java
new file mode 100644
index 0000000..81a5bb8
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/LoveFilmApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class LoveFilmApi extends DefaultApi10a
+{
+  private static final String REQUEST_TOKEN_URL = "http://openapi.lovefilm.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_URL = "http://openapi.lovefilm.com/oauth/access_token";
+  private static final String AUTHORIZE_URL = "https://www.lovefilm.com/activate?oauth_token=%s";
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_URL;
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_URL;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/LoveFilmExample.java b/src/test/java/org/scribe/examples/LoveFilmExample.java
new file mode 100644
index 0000000..9e80016
--- /dev/null
+++ b/src/test/java/org/scribe/examples/LoveFilmExample.java
@@ -0,0 +1,64 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class LoveFilmExample
+{
+  private static final String NETWORK_NAME = "LoveFilm";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.lovefilm.com/users";
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "your_key";
+    String apiSecret = "your_secret";
+    OAuthService service = new ServiceBuilder().provider(LoveFilmApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Grab a request token.
+    System.out.println("Fetching request token.");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got it ... ");
+    System.out.println(requestToken.getToken());
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(requestToken);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}

commit 1eb0b1003c10c4e774f7064f1c25c66bd941e46d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 11 13:55:26 2011 -0300

    Added raw string to Token, for retrieving additional parameters

diff --git a/changelog.txt b/changelog.txt
index e503311..14e7b55 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -35,3 +35,7 @@
 [1.1.2]
 
   * FIX: Fixed ugly bug that made 1.1.1 practically unusable (thanks Stubbs)
+
+[1.1.3]
+
+  * FEATURE: Added rawResponse to Token, for extracting additional parameters (thanks Dirk McCormick)
diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
index e931992..5753f98 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -26,7 +26,7 @@ public class TokenExtractor20Impl implements AccessTokenExtractor
     if (matcher.matches())
     {
       String token = URLUtils.formURLDecode(matcher.group(1));
-      return new Token(token, EMPTY_SECRET);
+      return new Token(token, EMPTY_SECRET, response);
     } 
     else
     {
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index e5dac17..adc5711 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -29,7 +29,7 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
     {
       String token = URLUtils.formURLDecode(matcher.group(1));
       String secret = URLUtils.formURLDecode(matcher.group(2));
-      return new Token(token, secret);
+      return new Token(token, secret, response);
     }
     else
     {
diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
index c6975ed..286fec6 100644
--- a/src/main/java/org/scribe/model/Token.java
+++ b/src/main/java/org/scribe/model/Token.java
@@ -13,6 +13,7 @@ public class Token implements Serializable
 	
   private final String token;
   private final String secret;
+  private final String rawResponse;
 
   /**
    * Default constructor
@@ -22,8 +23,14 @@ public class Token implements Serializable
    */
   public Token(String token, String secret)
   {
+    this(token, secret, null);
+  }
+
+  public Token(String token, String secret, String rawResponse)
+  {
     this.token = token;
     this.secret = secret;
+    this.rawResponse = rawResponse;
   }
 
   public String getToken()
@@ -36,6 +43,15 @@ public class Token implements Serializable
     return secret;
   }
 
+  public String getRawResponse()
+  {
+    if (rawResponse == null)
+    {
+      throw new IllegalStateException("This token object was not constructed by scribe and does not have a rawResponse");
+    }
+    return rawResponse;
+  }
+
   @Override
   public String toString()
   {

commit cbfd88d749b0d9b4a994d9a4a5043be354c47f79
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 11 14:06:39 2011 -0300

    removed picture from readme since link is broken

diff --git a/README.textile b/README.textile
index 654ccb0..06dd7d2 100644
--- a/README.textile
+++ b/README.textile
@@ -1,5 +1,3 @@
-!http://img411.imageshack.us/img411/2851/scribelogo.png!
-
 h2. Welcome to the home of Scribe, the simple OAuth Java lib!
 
 h1. Why use Scribe?

commit db88d538076503691906bec2c1a1f56bd2eebf26
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Apr 13 19:02:45 2011 -0300

    made extractor independent of token/secret order

diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index adc5711..85b369a 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -15,7 +15,8 @@ import org.scribe.utils.*;
  */
 public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExtractor
 {
-  private static final String TOKEN_REGEX = "oauth_token=(\\S*)&oauth_token_secret=(\\S*?)(&(.*))?";
+  private static final Pattern TOKEN_REGEX = Pattern.compile("oauth_token=([^&]+)");
+  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]+)");
 
   /**
    * {@inheritDoc} 
@@ -23,17 +24,21 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
+    String token = extract(response, TOKEN_REGEX);
+    String secret = extract(response, SECRET_REGEX);
+    return new Token(token, secret, response);
+  }
 
-    Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
-    if (matcher.matches())
+  private String extract(String response, Pattern p)
+  {
+    Matcher matcher = p.matcher(response);
+    if (matcher.find() && matcher.groupCount() >= 1)
     {
-      String token = URLUtils.formURLDecode(matcher.group(1));
-      String secret = URLUtils.formURLDecode(matcher.group(2));
-      return new Token(token, secret, response);
+      return URLUtils.formURLDecode(matcher.group(1));
     }
     else
     {
-      throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+      throw new OAuthException("Response body is incorrect. Can't extract token and secret from this: '" + response + "'", null);
     }
   }
 }
diff --git a/src/test/java/org/scribe/extractors/TokenExtractorTest.java b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
index 68ab994..2c9928f 100644
--- a/src/test/java/org/scribe/extractors/TokenExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
@@ -27,6 +27,15 @@ public class TokenExtractorTest
   }
 
   @Test
+  public void shouldExtractTokenFromInvertedOAuthStandardResponse()
+  {
+    String response = "oauth_token_secret=hh5s93j4hdidpola&oauth_token=hdhd0244k9j7ao03";
+    Token extracted = extractor.extract(response);
+    assertEquals("hh5s93j4hdidpola", extracted.getSecret());
+    assertEquals("hdhd0244k9j7ao03", extracted.getToken());
+  }
+
+  @Test
   public void shouldExtractTokenFromResponseWithCallbackConfirmed()
   {
     String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03&callback_confirmed=true";

commit bfcf0655dab0b436d6be580e3e81c784d0984938
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Apr 13 19:03:00 2011 -0300

    added Dropbox Api

diff --git a/changelog.txt b/changelog.txt
index 14e7b55..47ed18c 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -39,3 +39,5 @@
 [1.1.3]
 
   * FEATURE: Added rawResponse to Token, for extracting additional parameters (thanks Dirk McCormick)
+  * FEATURE: Added Dropbox Api
+  * FIX: Token responses now work despite of the token/secret order
diff --git a/src/main/java/org/scribe/builder/api/DropBoxApi.java b/src/main/java/org/scribe/builder/api/DropBoxApi.java
new file mode 100644
index 0000000..73a5895
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/DropBoxApi.java
@@ -0,0 +1,25 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class DropBoxApi extends DefaultApi10a
+{
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.dropbox.com/0/oauth/access_token";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return "https://www.dropbox.com/0/oauth/authorize?oauth_token="+requestToken.getToken();
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.dropbox.com/0/oauth/request_token";
+  }
+
+}
\ No newline at end of file

commit 8afb142b7fbb510b75ff6cb7589c849ce04c6c53
Author: Tom Tasche <tomtasche@gmail.com>
Date:   Mon Apr 11 08:16:27 2011 +0200

    Add Foursquare2 API and example

diff --git a/changelog.txt b/changelog.txt
index 47ed18c..1ae4834 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -41,3 +41,4 @@
   * FEATURE: Added rawResponse to Token, for extracting additional parameters (thanks Dirk McCormick)
   * FEATURE: Added Dropbox Api
   * FIX: Token responses now work despite of the token/secret order
+  * FEATURE: Added Foursquare OAuth 2.0 Api (thanks Tom Tasche)
diff --git a/src/main/java/org/scribe/builder/api/Foursquare2Api.java b/src/main/java/org/scribe/builder/api/Foursquare2Api.java
new file mode 100644
index 0000000..5bb0fdc
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/Foursquare2Api.java
@@ -0,0 +1,29 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class Foursquare2Api extends DefaultApi20
+{
+  private static final String AUTHORIZATION_URL = "https://foursquare.com/oauth2/authenticate?client_id=%s&response_type=code&redirect_uri=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://foursquare.com/oauth2/access_token?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Foursquare2 does not support OOB");
+    return String.format(AUTHORIZATION_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+  }
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+}
diff --git a/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java b/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java
new file mode 100644
index 0000000..4ef5433
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java
@@ -0,0 +1,28 @@
+package org.scribe.extractors;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.scribe.exceptions.OAuthException;
+import org.scribe.extractors.TokenExtractor20Impl;
+import org.scribe.model.Token;
+import org.scribe.utils.Preconditions;
+import org.scribe.utils.URLUtils;
+
+public class FoursquareAccessTokenExtractor extends TokenExtractor20Impl {
+
+    private static final String TOKEN_REGEX = ".[\\s]+\"access_token\":\"(\\S*?)(&(\\S*))?\"[\\s]+.";
+    private static final String EMPTY_SECRET = "";
+
+    public Token extract(String response) {
+        Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
+
+        Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
+        if (matcher.matches()) {
+            String token = URLUtils.formURLDecode(matcher.group(1));
+            return new Token(token, EMPTY_SECRET);
+        } else {
+            throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+        }
+    }
+}
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
new file mode 100644
index 0000000..fbbe3d1
--- /dev/null
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -0,0 +1,28 @@
+package org.scribe.extractors;
+
+import java.util.regex.*;
+
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class JsonTokenExtractor implements AccessTokenExtractor
+{
+  private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\"(\\S*)\"");
+
+  @Override
+  public Token extract(String response)
+  {
+    Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");
+    Matcher matcher = accessTokenPattern.matcher(response);
+    if(matcher.find())
+    {
+      return new Token(matcher.group(1), "");
+    }
+    else
+    {
+      throw new OAuthException("Cannot extract an acces token. Response was: "+response);
+    }
+  }
+
+}
diff --git a/src/test/java/org/scribe/examples/Foursquare2Example.java b/src/test/java/org/scribe/examples/Foursquare2Example.java
new file mode 100644
index 0000000..35495a8
--- /dev/null
+++ b/src/test/java/org/scribe/examples/Foursquare2Example.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class Foursquare2Example
+{
+  private static final String PROTECTED_RESOURCE_URL = "https://api.foursquare.com/v2/users/self/friends?oauth_token=";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "FEGFXJUFANVVDHVSNUAMUKTTXCP1AJQD53E33XKJ44YP1S4I";
+    String apiSecret = "AYWKUL5SWPNC0CTQ202QXRUG2NLZYXMRA34ZSDW4AUYBG2RC";
+    OAuthService service = new ServiceBuilder()
+                                  .provider(Foursquare2Api.class)
+                                  .apiKey(apiKey)
+                                  .apiSecret(apiSecret)
+                                  .callback("http://localhost:9000/")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Foursquare2's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+    
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL + accessToken.getToken());
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
diff --git a/src/test/java/org/scribe/extractors/JsonTokenExtractorTest.java b/src/test/java/org/scribe/extractors/JsonTokenExtractorTest.java
new file mode 100644
index 0000000..412e131
--- /dev/null
+++ b/src/test/java/org/scribe/extractors/JsonTokenExtractorTest.java
@@ -0,0 +1,31 @@
+package org.scribe.extractors;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.scribe.model.*;
+
+public class JsonTokenExtractorTest
+{
+  private String response = "'{ \"access_token\":\"I0122HHJKLEM21F3WLPYHDKGKZULAUO4SGMV3ABKFTDT3T3X\"}'";
+  private JsonTokenExtractor extractor = new JsonTokenExtractor();
+
+  @Test
+  public void shouldParseResponse()
+  {
+    Token token = extractor.extract(response);
+    assertEquals(token.getToken(), "I0122HHJKLEM21F3WLPYHDKGKZULAUO4SGMV3ABKFTDT3T3X");
+  }
+
+  @Test(expected=IllegalArgumentException.class)
+  public void shouldThrowExceptionIfForNullParameters()
+  {
+    extractor.extract(null);
+  }
+
+  @Test(expected=IllegalArgumentException.class)
+  public void shouldThrowExceptionIfForEmptyStrings()
+  {
+    extractor.extract("");
+  }
+}

commit 5f40e0dca0684c9ab8f9bb5f0a5904156f529f99
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 21:51:36 2011 -0300

    removed unused extractor (JsonTokenExtractor handles this)

diff --git a/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java b/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java
deleted file mode 100644
index 4ef5433..0000000
--- a/src/main/java/org/scribe/extractors/FoursquareAccessTokenExtractor.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.scribe.extractors;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.scribe.exceptions.OAuthException;
-import org.scribe.extractors.TokenExtractor20Impl;
-import org.scribe.model.Token;
-import org.scribe.utils.Preconditions;
-import org.scribe.utils.URLUtils;
-
-public class FoursquareAccessTokenExtractor extends TokenExtractor20Impl {
-
-    private static final String TOKEN_REGEX = ".[\\s]+\"access_token\":\"(\\S*?)(&(\\S*))?\"[\\s]+.";
-    private static final String EMPTY_SECRET = "";
-
-    public Token extract(String response) {
-        Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
-
-        Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
-        if (matcher.matches()) {
-            String token = URLUtils.formURLDecode(matcher.group(1));
-            return new Token(token, EMPTY_SECRET);
-        } else {
-            throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
-        }
-    }
-}

commit 931236561a0c8f88cfb98ee4d208875a789d8253
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:03:58 2011 -0300

    rename method
    
    to support both querystring and header signatures

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index db182e2..c37b6e0 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -38,7 +38,7 @@ public class OAuth10aServiceImpl implements OAuthService
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
     request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
     addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
-    addOAuthHeader(request);
+    addSignature(request);
     Response response = request.send();
     return api.getRequestTokenExtractor().extract(response.getBody());
   }
@@ -63,7 +63,7 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
     request.addOAuthParameter(OAuthConstants.VERIFIER, verifier.getValue());
     addOAuthParams(request, requestToken);
-    addOAuthHeader(request);
+    addSignature(request);
     Response response = request.send();
     return api.getAccessTokenExtractor().extract(response.getBody());
   }
@@ -75,7 +75,7 @@ public class OAuth10aServiceImpl implements OAuthService
   {
     request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
     addOAuthParams(request, token);
-    addOAuthHeader(request);
+    addSignature(request);
   }
 
   /**
@@ -108,7 +108,7 @@ public class OAuth10aServiceImpl implements OAuthService
     return api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
   }
 
-  private void addOAuthHeader(OAuthRequest request)
+  private void addSignature(OAuthRequest request)
   {
     String oauthHeader = api.getHeaderExtractor().extract(request);
     request.addHeader(OAuthConstants.HEADER, oauthHeader);

commit 193dcd2e25efcca804632119f9585346e31dc1a9
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:17:23 2011 -0300

    added SignatureType and querystring signing functionallity

diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 60a5a35..88de920 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -10,6 +10,7 @@ public class OAuthConfig
   private String apiKey;
   private String apiSecret;
   private String callback;
+  private SignatureType signatureType;
   
   public OAuthConfig(String key, String secret)
   {
@@ -52,4 +53,14 @@ public class OAuthConfig
   {
     this.callback = callback;
   }
+
+  public SignatureType getSignatureType()
+  {
+    return signatureType != null ? signatureType : SignatureType.Header;
+  }
+
+  public void setSignatureType(SignatureType type)
+  {
+    this.signatureType = type;
+  }
 }
\ No newline at end of file
diff --git a/src/main/java/org/scribe/model/SignatureType.java b/src/main/java/org/scribe/model/SignatureType.java
new file mode 100644
index 0000000..3440a36
--- /dev/null
+++ b/src/main/java/org/scribe/model/SignatureType.java
@@ -0,0 +1,7 @@
+package org.scribe.model;
+
+public enum SignatureType
+{
+  Header,
+  QueryString
+}
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index c37b6e0..13f0ac6 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -1,5 +1,7 @@
 package org.scribe.oauth;
 
+import java.util.*;
+
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
 
@@ -110,7 +112,18 @@ public class OAuth10aServiceImpl implements OAuthService
 
   private void addSignature(OAuthRequest request)
   {
-    String oauthHeader = api.getHeaderExtractor().extract(request);
-    request.addHeader(OAuthConstants.HEADER, oauthHeader);
+    switch (config.getSignatureType())
+    {
+      case Header:
+        String oauthHeader = api.getHeaderExtractor().extract(request);
+        request.addHeader(OAuthConstants.HEADER, oauthHeader);
+        break;
+      case QueryString:
+        for (Map.Entry<String, String> entry : request.getOauthParameters().entrySet())
+        {
+          request.addQuerystringParameter(entry.getKey(), entry.getValue());
+        }
+        break;
+    }
   }
 }

commit 8abdde928a2f9b0e5b49c77ee1743924d0e2db68
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:23:41 2011 -0300

    added convenience methods for the builder api

diff --git a/changelog.txt b/changelog.txt
index 1ae4834..b046d59 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -42,3 +42,4 @@
   * FEATURE: Added Dropbox Api
   * FIX: Token responses now work despite of the token/secret order
   * FEATURE: Added Foursquare OAuth 2.0 Api (thanks Tom Tasche)
+  * FEATURE: Added support for OAuth1.0a signatures via querystring parameters
diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 9236ddf..f5e02d4 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -20,6 +20,7 @@ public class ServiceBuilder
   private String callback;
   private Api api;
   private String scope;
+  private SignatureType signatureType;
   
   /**
    * Default constructor
@@ -122,6 +123,19 @@ public class ServiceBuilder
     this.scope = scope;
     return this;
   }
+
+  /**
+   * Configures the signature type, choose between header, querystring, etc. Defaults to Header
+   *
+   * @param scope The OAuth scope
+   * @return the {@link ServiceBuilder} instance for method chaining
+   */
+  public ServiceBuilder signatureType(SignatureType type)
+  {
+    Preconditions.checkNotNull(type, "Signature type can't be null");
+    this.signatureType = type;
+    return this;
+  }
   
   /**
    * Returns the fully configured {@link OAuthService}
@@ -133,6 +147,6 @@ public class ServiceBuilder
     Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
     Preconditions.checkEmptyString(apiKey, "You must provide an api key");
     Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
-    return api.createService(new OAuthConfig(apiKey, apiSecret, callback), scope);
+    return api.createService(new OAuthConfig(apiKey, apiSecret, callback, signatureType), scope);
   }
 }
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 88de920..67104c9 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -16,12 +16,19 @@ public class OAuthConfig
   {
     this(key,secret,null);
   }
-  
+
+  //Kept for backwards compatibility
   public OAuthConfig(String key, String secret, String callback)
   {
+    this(key,secret,callback,null);
+  }
+
+  public OAuthConfig(String key, String secret, String callback, SignatureType type)
+  {
     this.apiKey = key;
     this.apiSecret = secret;
     this.callback = callback;
+    this.signatureType = type;
   }
 
   public String getApiKey()
diff --git a/src/test/java/org/scribe/builder/ServiceBuilderTest.java b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
index bac2d34..4f0b0fd 100644
--- a/src/test/java/org/scribe/builder/ServiceBuilderTest.java
+++ b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
@@ -18,12 +18,13 @@ public class ServiceBuilderTest
   }
 
   @Test
-  public void shouldReturnOOBasDefaultCallback()
+  public void shouldReturnConfigDefaultValues()
   {
     builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").build();
     assertEquals(ApiMock.config.getApiKey(), "key");
     assertEquals(ApiMock.config.getApiSecret(), "secret");
     assertEquals(ApiMock.config.getCallback(), OAuthConstants.OUT_OF_BAND);
+    assertEquals(ApiMock.config.getSignatureType(), SignatureType.Header);
   }
 
   @Test
@@ -35,6 +36,15 @@ public class ServiceBuilderTest
     assertEquals(ApiMock.config.getCallback(), "http://example.com");
   }
 
+  @Test
+  public void shouldAcceptASignatureType()
+  {
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").signatureType(SignatureType.QueryString).build();
+    assertEquals(ApiMock.config.getApiKey(), "key");
+    assertEquals(ApiMock.config.getApiSecret(), "secret");
+    assertEquals(ApiMock.config.getSignatureType(), SignatureType.QueryString);
+  }
+
   @Test(expected=IllegalArgumentException.class)
   public void shouldNotAcceptAnInvalidUrlAsCallback()
   {

commit 5719d7a18a32f36ca7f23ffd22f85fef9a988a25
Author: Matthew Laudato <mattlaudato@gmail.com>
Date:   Mon Mar 7 14:26:43 2011 -0500

    Support for ConstantContact REST API

diff --git a/changelog.txt b/changelog.txt
index b046d59..68a7e5d 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -43,3 +43,4 @@
   * FIX: Token responses now work despite of the token/secret order
   * FEATURE: Added Foursquare OAuth 2.0 Api (thanks Tom Tasche)
   * FEATURE: Added support for OAuth1.0a signatures via querystring parameters
+  * FEATURE: Added ConstantContact Api (thanks Matthew Laudato)
diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi.java b/src/main/java/org/scribe/builder/api/ConstantContactApi.java
new file mode 100644
index 0000000..9448720
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi.java
@@ -0,0 +1,29 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class ConstantContactApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://oauth.constantcontact.com/ws/oauth/confirm_access?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    // TODO Auto-generated method stub
+    return "https://oauth.constantcontact.com/ws/oauth/access_token";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    // TODO Auto-generated method stub
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    // TODO Auto-generated method stub
+    return "https://oauth.constantcontact.com/ws/oauth/request_token";
+  }
+}

commit c265e730a30abbadb80f96d7277283f0dc754a7b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:52:36 2011 -0300

    removed auto-generated comments

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi.java b/src/main/java/org/scribe/builder/api/ConstantContactApi.java
index 9448720..0588bc4 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi.java
@@ -9,21 +9,18 @@ public class ConstantContactApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    // TODO Auto-generated method stub
     return "https://oauth.constantcontact.com/ws/oauth/access_token";
   }
 
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    // TODO Auto-generated method stub
     return String.format(AUTHORIZE_URL, requestToken.getToken());
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    // TODO Auto-generated method stub
     return "https://oauth.constantcontact.com/ws/oauth/request_token";
   }
 }

commit 91cb9b840732d251552b99609b62672fa48f61de
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:56:59 2011 -0300

    changed readme to last version

diff --git a/README.textile b/README.textile
index 06dd7d2..8d8e165 100644
--- a/README.textile
+++ b/README.textile
@@ -61,7 +61,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.1.2</version>@
+  @<version>1.1.3</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes

commit 41b6da1a44f20f54235a7ce3c725bdcdd4091256
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Apr 19 22:59:30 2011 -0300

    bounced version on pom.xml

diff --git a/pom.xml b/pom.xml
index 200f92d..7faae4b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.1.2</version>
+  <version>1.1.3</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 109c93b4e4aa1d9e20b0344ad7286b8e7efd0e2c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 25 13:12:32 2011 -0300

    Moved scope inside OAuthConfig

diff --git a/changelog.txt b/changelog.txt
index 68a7e5d..bb0c4a2 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -44,3 +44,6 @@
   * FEATURE: Added Foursquare OAuth 2.0 Api (thanks Tom Tasche)
   * FEATURE: Added support for OAuth1.0a signatures via querystring parameters
   * FEATURE: Added ConstantContact Api (thanks Matthew Laudato)
+
+[1.2]
+  * REFACTOR: Moved scope inside OAuthConfig (breaks backwards compatibility)
diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index f5e02d4..10d0802 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -147,6 +147,6 @@ public class ServiceBuilder
     Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
     Preconditions.checkEmptyString(apiKey, "You must provide an api key");
     Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
-    return api.createService(new OAuthConfig(apiKey, apiSecret, callback, signatureType), scope);
+    return api.createService(new OAuthConfig(apiKey, apiSecret, callback, signatureType, scope));
   }
 }
diff --git a/src/main/java/org/scribe/builder/api/Api.java b/src/main/java/org/scribe/builder/api/Api.java
index b996210..6664296 100644
--- a/src/main/java/org/scribe/builder/api/Api.java
+++ b/src/main/java/org/scribe/builder/api/Api.java
@@ -21,5 +21,5 @@ public interface Api
    * 
    * @return fully configured {@link OAuthService}
    */
-  OAuthService createService(OAuthConfig config, String scope);
+  OAuthService createService(OAuthConfig config);
 }
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi10a.java b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
index 2899dee..7506986 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi10a.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi10a.java
@@ -134,14 +134,7 @@ public abstract class DefaultApi10a implements Api
    * @param callback OAuth callback (either URL or 'oob')
    * @param scope OAuth scope (optional) 
    */
-  public OAuthService createService(OAuthConfig config, String scope)
-  {
-    OAuthService service = doCreateService(config);
-    service.addScope(scope);
-    return service;
-  }
-  
-  private OAuthService doCreateService(OAuthConfig config)
+  public OAuthService createService(OAuthConfig config)
   {
     return new OAuth10aServiceImpl(this, config);
   }
diff --git a/src/main/java/org/scribe/builder/api/DefaultApi20.java b/src/main/java/org/scribe/builder/api/DefaultApi20.java
index 7e3eb9b..ffb6207 100644
--- a/src/main/java/org/scribe/builder/api/DefaultApi20.java
+++ b/src/main/java/org/scribe/builder/api/DefaultApi20.java
@@ -62,7 +62,7 @@ public abstract class DefaultApi20 implements Api
   /**
    * {@inheritDoc}
    */
-  public OAuthService createService(OAuthConfig config, String scope)
+  public OAuthService createService(OAuthConfig config)
   {
     return new OAuth20ServiceImpl(this, config);
   }
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 67104c9..314d2d9 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -7,28 +7,24 @@ package org.scribe.model;
  */
 public class OAuthConfig
 {
-  private String apiKey;
-  private String apiSecret;
-  private String callback;
-  private SignatureType signatureType;
+  private final String apiKey;
+  private final String apiSecret;
+  private final String callback;
+  private final SignatureType signatureType;
+  private final String scope;
   
   public OAuthConfig(String key, String secret)
   {
-    this(key,secret,null);
+    this(key, secret, null, null, null);
   }
 
-  //Kept for backwards compatibility
-  public OAuthConfig(String key, String secret, String callback)
-  {
-    this(key,secret,callback,null);
-  }
-
-  public OAuthConfig(String key, String secret, String callback, SignatureType type)
+  public OAuthConfig(String key, String secret, String callback, SignatureType type, String scope)
   {
     this.apiKey = key;
     this.apiSecret = secret;
-    this.callback = callback;
-    this.signatureType = type;
+    this.callback = callback != null ? callback : OAuthConstants.OUT_OF_BAND;
+    this.signatureType = (type != null) ? type : SignatureType.Header;
+    this.scope = scope;
   }
 
   public String getApiKey()
@@ -36,38 +32,28 @@ public class OAuthConfig
     return apiKey;
   }
 
-  public void setApiKey(String apiKey)
-  {
-    this.apiKey = apiKey;
-  }
-
   public String getApiSecret()
   {
     return apiSecret;
   }
 
-  public void setApiSecret(String apiSecret)
-  {
-    this.apiSecret = apiSecret;
-  }
-
   public String getCallback()
   {
-    return callback != null ? callback : OAuthConstants.OUT_OF_BAND;
+    return callback;
   }
 
-  public void setCallback(String callback)
+  public SignatureType getSignatureType()
   {
-    this.callback = callback;
+    return signatureType;
   }
 
-  public SignatureType getSignatureType()
+  public String getScope()
   {
-    return signatureType != null ? signatureType : SignatureType.Header;
+    return scope;
   }
 
-  public void setSignatureType(SignatureType type)
+  public boolean hasScope()
   {
-    this.signatureType = type;
+    return scope != null;
   }
 }
\ No newline at end of file
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 13f0ac6..91e7b71 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -12,12 +12,10 @@ import org.scribe.model.*;
  */
 public class OAuth10aServiceImpl implements OAuthService
 {
-  private static final String NO_SCOPE = null;
   private static final String VERSION = "1.0";
 
   private OAuthConfig config;
   private DefaultApi10a api;
-  private String scope;
 
   /**
    * Default constructor
@@ -29,7 +27,6 @@ public class OAuth10aServiceImpl implements OAuthService
   {
     this.api = api;
     this.config = config;
-    this.scope = NO_SCOPE;
   }
 
   /**
@@ -52,7 +49,7 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());
     request.addOAuthParameter(OAuthConstants.SIGN_METHOD, api.getSignatureService().getSignatureMethod());
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
-    if(scope != NO_SCOPE) request.addOAuthParameter(OAuthConstants.SCOPE, scope);
+    if(config.hasScope()) request.addOAuthParameter(OAuthConstants.SCOPE, config.getScope());
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
   }
 
@@ -91,14 +88,6 @@ public class OAuth10aServiceImpl implements OAuthService
   /**
    * {@inheritDoc}
    */
-  public void addScope(String scope)
-  {
-    this.scope = scope;
-  }
-
-  /**
-   * {@inheritDoc}
-   */
   public String getAuthorizationUrl(Token requestToken)
   {
     return api.getAuthorizationUrl(requestToken);
diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index 94b0cbe..67de7ad 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -25,14 +25,6 @@ public class OAuth20ServiceImpl implements OAuthService
   /**
    * {@inheritDoc}
    */
-  public void addScope(String scope)
-  {
-    throw new UnsupportedOperationException("OAuth 2 does not use scopes");
-  }
-
-  /**
-   * {@inheritDoc}
-   */
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
     OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
diff --git a/src/main/java/org/scribe/oauth/OAuthService.java b/src/main/java/org/scribe/oauth/OAuthService.java
index c3b6434..0c9c57e 100644
--- a/src/main/java/org/scribe/oauth/OAuthService.java
+++ b/src/main/java/org/scribe/oauth/OAuthService.java
@@ -41,13 +41,6 @@ public interface OAuthService
    * @return oauth version as string
    */
   public String getVersion();
-
-  /**
-   * Adds the 'scope' parameter. This is **not** a default OAuth parameter and the setting is optional.
-   * 
-   * @param scope OAuth Api scope (optional)
-   */
-  public void addScope(String scope);
   
   /**
    * Returns the URL where you should redirect your users to authenticate
diff --git a/src/test/java/org/scribe/builder/ServiceBuilderTest.java b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
index 4f0b0fd..fca633b 100644
--- a/src/test/java/org/scribe/builder/ServiceBuilderTest.java
+++ b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
@@ -57,19 +57,17 @@ public class ServiceBuilderTest
     builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").scope("rss-api").build();
     assertEquals(ApiMock.config.getApiKey(), "key");
     assertEquals(ApiMock.config.getApiSecret(), "secret");
-    assertEquals(ApiMock.scope, "rss-api");
+    assertEquals(ApiMock.config.getScope(), "rss-api");
   }
 
   public static class ApiMock implements Api
   {
     public static OAuthConfig config;
-    public static String scope;
     
     @Override
-    public OAuthService createService(OAuthConfig config, String scope)
+    public OAuthService createService(OAuthConfig config)
     {
       ApiMock.config = config;
-      ApiMock.scope = scope;
       return null;
     }
   }
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
index 4354fb9..973d401 100644
--- a/src/test/java/org/scribe/model/OAuthConfigTest.java
+++ b/src/test/java/org/scribe/model/OAuthConfigTest.java
@@ -12,12 +12,14 @@ public class OAuthConfigTest
   {
     OAuthConfig config = new OAuthConfig("key", "secret");
     assertEquals(OAuthConstants.OUT_OF_BAND, config.getCallback());
+    assertEquals(SignatureType.Header, config.getSignatureType());
+    assertFalse(config.hasScope());
   }
 
   @Test
   public void shouldOverrideDefaultsIfSet()
   {
-    OAuthConfig config = new OAuthConfig("key", "secret", "http://callback");
+    OAuthConfig config = new OAuthConfig("key", "secret", "http://callback", SignatureType.Header, "scope");
     assertEquals("http://callback", config.getCallback());
     assertEquals("key", config.getApiKey());
     assertEquals("secret", config.getApiSecret());

commit 2112d3d8a9ce5dd6d7e25e10756efc95607fa129
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 25 13:23:37 2011 -0300

    Added scopes to 2.0 apis

diff --git a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
index 67de7ad..6262c37 100644
--- a/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth20ServiceImpl.java
@@ -32,6 +32,7 @@ public class OAuth20ServiceImpl implements OAuthService
     request.addQuerystringParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());
     request.addQuerystringParameter(OAuthConstants.CODE, verifier.getValue());
     request.addQuerystringParameter(OAuthConstants.REDIRECT_URI, config.getCallback());
+    if(config.hasScope()) request.addQuerystringParameter(OAuthConstants.SCOPE, config.getScope());
     Response response = request.send();
     return api.getAccessTokenExtractor().extract(response.getBody());
   }

commit 592b1b5fdd5fafe79f4c086468ba563a86c0facb
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 25 13:23:47 2011 -0300

    Added scope to facebook api

diff --git a/changelog.txt b/changelog.txt
index bb0c4a2..09b0e37 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -47,3 +47,4 @@
 
 [1.2]
   * REFACTOR: Moved scope inside OAuthConfig (breaks backwards compatibility)
+  * FEATURE: Added scopes to Facebook 2.0 Api
diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index 7d4ae5b..60be476 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -1,22 +1,34 @@
 package org.scribe.builder.api;
 
 import org.scribe.model.*;
+
 import org.scribe.utils.*;
+import static org.scribe.utils.URLUtils.*;
 
 public class FacebookApi extends DefaultApi20
 {
   private static final String AUTHORIZE_URL = "https://www.facebook.com/dialog/oauth?client_id=%s&redirect_uri=%s";
+  private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
 
   @Override
   public String getAccessTokenEndpoint()
   {
     return "https://graph.facebook.com/oauth/access_token";
   }
-  
+
   @Override
   public String getAuthorizationUrl(OAuthConfig config)
   {
     Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Facebook does not support OOB");
-    return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+
+    // Append scope if present
+    if(config.hasScope())
+    {
+     return String.format(SCOPED_AUTHORIZE_URL, formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));
+    }
   }
 }

commit 0abe7f80d4de8dba25b23c848c8ed1a5683f3193
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 25 19:21:00 2011 -0300

    fixed bug in facebook url generation

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index 60be476..d85ff3b 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -24,7 +24,7 @@ public class FacebookApi extends DefaultApi20
     // Append scope if present
     if(config.hasScope())
     {
-     return String.format(SCOPED_AUTHORIZE_URL, formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
     }
     else
     {

commit 40ab98d50626c66e014f0d681b257a03837e3dc6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Apr 27 11:44:55 2011 -0300

    added Twitter SSL support

diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index af8f198..e1e1549 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -5,22 +5,39 @@ import org.scribe.model.Token;
 public class TwitterApi extends DefaultApi10a
 {
   private static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize?oauth_token=%s";
+  private static final String REQUEST_TOKEN_RESOURCE = "api.twitter.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "api.twitter.com/oauth/access_token";
   
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://api.twitter.com/oauth/access_token";
+    return "http://" + ACCESS_TOKEN_RESOURCE;
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://api.twitter.com/oauth/request_token";
+    return "http://" + REQUEST_TOKEN_RESOURCE;
   }
-  
+
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
     return String.format(AUTHORIZE_URL, requestToken.getToken());
   }
+
+  public static class SSL extends TwitterApi
+  {
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+      return "https://" + ACCESS_TOKEN_RESOURCE;
+    }
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+      return "https://" + REQUEST_TOKEN_RESOURCE;
+    }
+  }
 }

commit bd51ae9f255822fcc994efe49f2af416aecd8d9b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Apr 29 15:05:09 2011 -0300

    Added plaintext signature for Yammer Api and fixed fucked up indentation

diff --git a/src/main/java/org/scribe/builder/api/YammerApi.java b/src/main/java/org/scribe/builder/api/YammerApi.java
index 85477a5..68bcda5 100644
--- a/src/main/java/org/scribe/builder/api/YammerApi.java
+++ b/src/main/java/org/scribe/builder/api/YammerApi.java
@@ -1,26 +1,33 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
+import org.scribe.model.*;
+import org.scribe.services.*;
 
 public class YammerApi extends DefaultApi10a
 {
   private static final String AUTHORIZATION_URL = "'https://www.yammer.com/oauth/authorize?oauth_token=%s'";
 
-	@Override
-	public String getRequestTokenEndpoint()
+  @Override
+  public String getRequestTokenEndpoint()
   {
-		return "https://www.yammer.com/oauth/request_token";
-	}
+    return "https://www.yammer.com/oauth/request_token";
+  }
 
-	@Override
-	public String getAccessTokenEndpoint()
+  @Override
+  public String getAccessTokenEndpoint()
   {
-		return "https://www.yammer.com/oauth/access_token";
-	}
-	
-	@Override
-	public String getAuthorizationUrl(Token requestToken)
-	{
-	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
-	}
+    return "https://www.yammer.com/oauth/access_token";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  @Override
+  public SignatureService getSignatureService()
+  {
+    return new PlaintextSignatureService();
+  }
 }
diff --git a/src/main/java/org/scribe/services/PlaintextSignatureService.java b/src/main/java/org/scribe/services/PlaintextSignatureService.java
new file mode 100644
index 0000000..57fb70d
--- /dev/null
+++ b/src/main/java/org/scribe/services/PlaintextSignatureService.java
@@ -0,0 +1,43 @@
+package org.scribe.services;
+
+import org.scribe.exceptions.*;
+import org.scribe.utils.*;
+
+/**
+ * plaintext implementation of {@SignatureService}
+ *
+ * @author Pablo Fernandez
+ *
+ */
+public class PlaintextSignatureService implements SignatureService
+{
+  private static final String EMPTY_STRING = "";
+  private static final String CARRIAGE_RETURN = "\r\n";
+  private static final String UTF8 = "UTF-8";
+  private static final String METHOD = "plaintext";
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getSignature(String baseString, String apiSecret, String tokenSecret)
+  {
+    try
+    {
+      Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
+      return URLUtils.percentEncode(apiSecret) + '&' + URLUtils.percentEncode(tokenSecret);
+    }
+    catch (Exception e)
+    {
+      throw new OAuthSignatureException(baseString, e);
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getSignatureMethod()
+  {
+    return METHOD;
+  }
+}
+

commit 624fdfb7146c73277e9370d02a61cbc3b3a5409d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Apr 29 15:07:02 2011 -0300

    removed unused statics

diff --git a/src/main/java/org/scribe/services/PlaintextSignatureService.java b/src/main/java/org/scribe/services/PlaintextSignatureService.java
index 57fb70d..3146ca5 100644
--- a/src/main/java/org/scribe/services/PlaintextSignatureService.java
+++ b/src/main/java/org/scribe/services/PlaintextSignatureService.java
@@ -11,9 +11,6 @@ import org.scribe.utils.*;
  */
 public class PlaintextSignatureService implements SignatureService
 {
-  private static final String EMPTY_STRING = "";
-  private static final String CARRIAGE_RETURN = "\r\n";
-  private static final String UTF8 = "UTF-8";
   private static final String METHOD = "plaintext";
 
   /**

commit 97f45d75e76e45bd24ec810a90dffee793020a6a
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed May 4 11:53:19 2011 -0300

    bounced version numbers for release

diff --git a/README.textile b/README.textile
index 8d8e165..eec1451 100644
--- a/README.textile
+++ b/README.textile
@@ -61,7 +61,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.1.3</version>@
+  @<version>1.2.0</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/changelog.txt b/changelog.txt
index 09b0e37..93b10a0 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -48,3 +48,5 @@
 [1.2]
   * REFACTOR: Moved scope inside OAuthConfig (breaks backwards compatibility)
   * FEATURE: Added scopes to Facebook 2.0 Api
+  * FEATURE: Added Plaintext signature for Yammer
+  * FEATURE: Added Twitter SSL endpoints (use TwitterApi.SSL.class)
diff --git a/pom.xml b/pom.xml
index 7faae4b..e6bb9e8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.1.3</version>
+  <version>1.2.0</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit de1ac1f467cae449437d63d5c2a49e6736d56317
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat May 7 13:10:43 2011 -0300

    request charset handling

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 948e5c1..d49aa3e 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -2,6 +2,7 @@ package org.scribe.model;
 
 import java.io.*;
 import java.net.*;
+import java.nio.charset.*;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 
@@ -24,6 +25,7 @@ class Request
   private Map<String, String> headers;
   private String payload = null;
   private HttpURLConnection connection;
+  private String charset;
 
   /**
    * Creates a new Http Request
@@ -88,9 +90,11 @@ class Request
 
   void addBody(HttpURLConnection conn, String content) throws IOException
   {
-    conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.getBytes().length));
+    if (this.charset == null)
+      this.charset = Charset.defaultCharset().name();
+    conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.getBytes(charset).length));
     conn.setDoOutput(true);
-    conn.getOutputStream().write(content.getBytes());
+    conn.getOutputStream().write(content.getBytes(charset));
   }
 
   /**
@@ -246,7 +250,17 @@ class Request
   {
     this.connection.setReadTimeout((int) unit.toMillis(duration));
   }
-  
+
+  /**
+   * Set the charset of the body of the request
+   *
+   * @param charsetName name of the charset of the request
+   */
+  public void setCharset(String charsetName)
+  {
+    this.charset = charsetName;
+  }
+
   /*
    * We need this in order to stub the connection object for test cases
    */

commit 543b53475fc271389bfb16bace69af462e85ea41
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat May 7 13:18:52 2011 -0300

    changelog charset update

diff --git a/changelog.txt b/changelog.txt
index 93b10a0..33462ac 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -50,3 +50,6 @@
   * FEATURE: Added scopes to Facebook 2.0 Api
   * FEATURE: Added Plaintext signature for Yammer
   * FEATURE: Added Twitter SSL endpoints (use TwitterApi.SSL.class)
+
+[1.2.1]
+  * FEATURE: Added custom charset support to Request (thanks Eric Genet)

commit ca7950004bf17251129b5bfad07df46d412a15a9
Author: Boris <bgdotmail+gitorious@gmail.com>
Date:   Wed Apr 20 22:56:38 2011 +0700

    Implemented Vkontakte.ru support

diff --git a/changelog.txt b/changelog.txt
index 33462ac..faed428 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -53,3 +53,4 @@
 
 [1.2.1]
   * FEATURE: Added custom charset support to Request (thanks Eric Genet)
+  * FEATURE: Added support for Vkontakte (thanks dotbg)
diff --git a/src/main/java/org/scribe/builder/api/VkontakteApi.java b/src/main/java/org/scribe/builder/api/VkontakteApi.java
new file mode 100644
index 0000000..6bb4b6b
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/VkontakteApi.java
@@ -0,0 +1,41 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.utils.*;
+import org.scribe.model.*;
+
+/**
+ * @author Boris G. Tsirkin <mail@dotbg.name>
+ * @since 20.4.2011
+ */
+public class VkontakteApi extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String SCOPED_AUTHORIZE_URL = String.format("%s&scope=%%s", AUTHORIZE_URL);
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.vkontakte.ru/oauth/access_token";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Vkontakte does not support OOB");
+    if(config.hasScope())// Appending scope if present
+    {
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()),URLUtils.formURLEncode(config.getScope()));
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+    }
+  }
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+}
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index fbbe3d1..3bec660 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -8,7 +8,7 @@ import org.scribe.utils.*;
 
 public class JsonTokenExtractor implements AccessTokenExtractor
 {
-  private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\"(\\S*)\"");
+  private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\"(\\S*?)\"");
 
   @Override
   public Token extract(String response)
@@ -17,11 +17,11 @@ public class JsonTokenExtractor implements AccessTokenExtractor
     Matcher matcher = accessTokenPattern.matcher(response);
     if(matcher.find())
     {
-      return new Token(matcher.group(1), "");
+      return new Token(matcher.group(1), "", response);
     }
     else
     {
-      throw new OAuthException("Cannot extract an acces token. Response was: "+response);
+      throw new OAuthException("Cannot extract an acces token. Response was: " + response);
     }
   }
 
diff --git a/src/test/java/org/scribe/examples/VkontakteExample.java b/src/test/java/org/scribe/examples/VkontakteExample.java
new file mode 100644
index 0000000..f9e4134
--- /dev/null
+++ b/src/test/java/org/scribe/examples/VkontakteExample.java
@@ -0,0 +1,68 @@
+package org.scribe.examples;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+import java.util.*;
+
+/**
+ * @author Boris G. Tsirkin <mail@dotbg.name>
+ * @since 20.4.2011
+ */
+public class VkontakteExample
+{
+  private static final String NETWORK_NAME = "Vkontakte.ru";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.vkontakte.ru/method/friends.get";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    final String clientId = "your app id";
+    final String apiSecret = "your api secret";
+    OAuthService service = new ServiceBuilder()
+                                  .provider(VkontakteApi.class)
+                                  .apiKey(clientId)
+                                  .apiSecret(apiSecret)
+                                  .scope("friends,wall,offline") // replace with desired scope
+                                  .callback("http://your.site.com/callback")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+}

commit 7b6b9056d36a0987df04df86f88715b40386a1e2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat May 7 13:50:10 2011 -0300

    multipart request support

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index d49aa3e..50c0f89 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -26,6 +26,7 @@ class Request
   private String payload = null;
   private HttpURLConnection connection;
   private String charset;
+  private byte[] bytePayload = null;
 
   /**
    * Creates a new Http Request
@@ -77,7 +78,7 @@ class Request
     addHeaders(connection);
     if (verb.equals(Verb.PUT) || verb.equals(Verb.POST))
     {
-      addBody(connection, getBodyContents());
+      addBody(connection, getByteBodyContents());
     }
     return new Response(connection);
   }
@@ -88,13 +89,11 @@ class Request
       conn.setRequestProperty(key, headers.get(key));
   }
 
-  void addBody(HttpURLConnection conn, String content) throws IOException
+  void addBody(HttpURLConnection conn, byte[] content) throws IOException
   {
-    if (this.charset == null)
-      this.charset = Charset.defaultCharset().name();
-    conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.getBytes(charset).length));
+    conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.length));
     conn.setDoOutput(true);
-    conn.getOutputStream().write(content.getBytes(charset));
+    conn.getOutputStream().write(content);
   }
 
   /**
@@ -146,6 +145,16 @@ class Request
   }
 
   /**
+   * Overloaded version for byte arrays
+   *
+   * @param payload
+   */
+  public void addPayload(byte[] payload)
+  {
+    this.bytePayload = payload;
+  }
+
+  /**
    * Get a {@link Map} of the query string parameters.
    * 
    * @return a map containing the query string parameters
@@ -201,10 +210,32 @@ class Request
    * Returns the body of the request
    * 
    * @return form encoded string
+   * @throws OAuthException if the charset chosen is not supported
    */
   public String getBodyContents()
   {
-    return (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
+    try
+    {
+      return new String(getByteBodyContents(),getCharset());
+    }
+    catch(UnsupportedEncodingException uee)
+    {
+      throw new OAuthException("Unsupported Charset: "+charset, uee);
+    }
+  }
+
+  byte[] getByteBodyContents()
+  {
+    if (bytePayload != null) return bytePayload;
+    String body = (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
+    try
+    {
+      return body.getBytes(getCharset());
+    }
+    catch(UnsupportedEncodingException uee)
+    {
+      throw new OAuthException("Unsupported Charset: "+getCharset(), uee);
+    }
   }
 
   /**
@@ -228,6 +259,16 @@ class Request
   }
 
   /**
+   * Returns the connection charset. Defaults to {@link Charset} defaultCharset if not set
+   *
+   * @return charset
+   */
+  public String getCharset()
+  {
+    return charset == null ? Charset.defaultCharset().name() : charset;
+  }
+
+  /**
    * Sets the connect timeout for the underlying {@link HttpURLConnection}
    * 
    * @param duration duration of the timeout

commit f89279c682538742f1ef2fff2b1f566c30545f5f
Author: Arthur Wang <arthraim@gmail.com>
Date:   Thu Apr 7 13:34:05 2011 +0800

    Added Sina Weibo Api and example.

diff --git a/src/main/java/org/scribe/builder/api/SinaWeiboApi.java b/src/main/java/org/scribe/builder/api/SinaWeiboApi.java
new file mode 100644
index 0000000..14951d3
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SinaWeiboApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class SinaWeiboApi extends DefaultApi10a
+{
+	private static final String REQUEST_TOKEN_URL = "http://api.t.sina.com.cn/oauth/request_token";
+	private static final String ACCESS_TOKEN_URL = "http://api.t.sina.com.cn/oauth/access_token";
+	private static final String AUTHORIZE_URL = "http://api.t.sina.com.cn/oauth/authorize?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint()
+	{
+		return REQUEST_TOKEN_URL;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+	{
+		return ACCESS_TOKEN_URL;
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+}
diff --git a/src/test/java/org/scribe/examples/SinaWeiboExample.java b/src/test/java/org/scribe/examples/SinaWeiboExample.java
new file mode 100644
index 0000000..2dc4b7c
--- /dev/null
+++ b/src/test/java/org/scribe/examples/SinaWeiboExample.java
@@ -0,0 +1,68 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class SinaWeiboExample
+{
+	private static final String NETWORK_NAME = "SinaWeibo";
+	private static final String PROTECTED_RESOURCE_URL = "http://api.t.sina.com.cn/account/verify_credentials.json";
+
+	public static void main(String[] args)
+	{
+		// Replace these with your own api key and secret
+		String apiKey = "your key";
+		String apiSecret = "your secret";
+		OAuthService service = new ServiceBuilder()
+				                        .provider(SinaWeiboApi.class)
+				                        .apiKey(apiKey)
+				                        .apiSecret(apiSecret)
+				                        .build();
+		Scanner in = new Scanner(System.in);
+
+		System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+		System.out.println();
+
+		// Grab a request token.
+		System.out.println("Fetching request token.");
+		Token requestToken = service.getRequestToken();
+		System.out.println("Got it ... ");
+		System.out.println(requestToken.getToken());
+
+		// Obtain the Authorization URL
+		System.out.println("Fetching the Authorization URL...");
+		String authorizationUrl = service.getAuthorizationUrl(requestToken);
+		System.out.println("Got the Authorization URL!");
+		System.out.println("Now go and authorize Scribe here:");
+		System.out.println(authorizationUrl);
+		System.out.println("And paste the authorization code here");
+		System.out.print(">>");
+		Verifier verifier = new Verifier(in.nextLine());
+		System.out.println();
+
+		// Trade the Request Token and Verfier for the Access Token
+		System.out.println("Trading the Request Token for an Access Token...");
+		Token accessToken = service.getAccessToken(requestToken, verifier);
+		System.out.println("Got the Access Token!");
+		System.out.println("(if your curious it looks like this: "
+				+ accessToken + " )");
+		System.out.println();
+
+		// Now let's go and ask for a protected resource!
+		System.out.println("Now we're going to access a protected resource...");
+		OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+		service.signRequest(accessToken, request);
+		Response response = request.send();
+		System.out.println("Got it! Lets see what we found...");
+		System.out.println();
+		System.out.println(response.getCode());
+		System.out.println(response.getBody());
+
+		System.out.println();
+		System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+	}
+}

commit 7b587c3d1df5fd5637e2610c8a89f9ae85cc8e9f
Author: Arthur Wang <arthraim@gmail.com>
Date:   Thu Apr 7 14:00:33 2011 +0800

    Added Netease Weibo(t.163.com) api and example.

diff --git a/src/main/java/org/scribe/builder/api/NeteaseWeibooApi.java b/src/main/java/org/scribe/builder/api/NeteaseWeibooApi.java
new file mode 100644
index 0000000..fae38ac
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/NeteaseWeibooApi.java
@@ -0,0 +1,47 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class NeteaseWeibooApi extends DefaultApi10a
+{
+	private static final String REQUEST_TOKEN_URL = "http://api.t.163.com/oauth/request_token";
+	private static final String ACCESS_TOKEN_URL = "http://api.t.163.com/oauth/access_token";
+	private static final String AUTHORIZE_URL = "http://api.t.163.com/oauth/authorize?oauth_token=%s";
+	private static final String AUTHENTICATE_URL = "http://api.t.163.com/oauth/authenticate?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint() 
+	{
+		return REQUEST_TOKEN_URL;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+	{
+		return ACCESS_TOKEN_URL;
+	}
+
+	@Override
+	/**
+	 * this method will ignore your callback
+	 * if you're creating a desktop client please choose this url
+	 * else your can call getAuthenticateUrl
+	 * 
+	 * via http://open.t.163.com/wiki/index.php?title=%E8%AF%B7%E6%B1%82%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83Token(oauth/authorize)
+	 */
+	public String getAuthorizationUrl(Token requestToken)
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+
+	/**
+	 * this method is for web client with callback url
+	 * if you're creating a desktop client please call getAuthorizationUrl 
+	 * 
+	 * via http://open.t.163.com/wiki/index.php?title=%E8%AF%B7%E6%B1%82%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83Token(oauth/authenticate)
+	 */
+	public String getAuthenticateUrl(Token requestToken)
+	{
+		return String.format(AUTHENTICATE_URL, requestToken.getToken());
+	}
+}
diff --git a/src/test/java/org/scribe/examples/NeteaseWeiboExample.java b/src/test/java/org/scribe/examples/NeteaseWeiboExample.java
new file mode 100644
index 0000000..e65335e
--- /dev/null
+++ b/src/test/java/org/scribe/examples/NeteaseWeiboExample.java
@@ -0,0 +1,68 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class NeteaseWeiboExample
+{
+	private static final String NETWORK_NAME = "NetEase(163.com) Weibo";
+	private static final String PROTECTED_RESOURCE_URL = "http://api.t.163.com/account/verify_credentials.json";
+
+	public static void main(String[] args)
+	{
+		// Replace these with your own api key and secret
+		String apiKey = "your key";
+		String apiSecret = "your secret";
+		OAuthService service = new ServiceBuilder()
+				                        .provider(NeteaseWeibooApi.class)
+				                        .apiKey(apiKey)
+				                        .apiSecret(apiSecret)
+				                        .build();
+		Scanner in = new Scanner(System.in);
+
+		System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+		System.out.println();
+
+		// Grab a request token.
+		System.out.println("Fetching request token.");
+		Token requestToken = service.getRequestToken();
+		System.out.println("Got it ... ");
+		System.out.println(requestToken.getToken());
+
+		// Obtain the Authorization URL
+		System.out.println("Fetching the Authorization URL...");
+		String authorizationUrl = service.getAuthorizationUrl(requestToken);
+		System.out.println("Got the Authorization URL!");
+		System.out.println("Now go and authorize Scribe here:");
+		System.out.println(authorizationUrl);
+		System.out.println("And paste the authorization code here");
+		System.out.print(">>");
+		Verifier verifier = new Verifier(in.nextLine());
+		System.out.println();
+
+		// Trade the Request Token and Verfier for the Access Token
+		System.out.println("Trading the Request Token for an Access Token...");
+		Token accessToken = service.getAccessToken(requestToken, verifier);
+		System.out.println("Got the Access Token!");
+		System.out.println("(if your curious it looks like this: "
+				+ accessToken + " )");
+		System.out.println();
+
+		// Now let's go and ask for a protected resource!
+		System.out.println("Now we're going to access a protected resource...");
+		OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+		service.signRequest(accessToken, request);
+		Response response = request.send();
+		System.out.println("Got it! Lets see what we found...");
+		System.out.println();
+		System.out.println(response.getCode());
+		System.out.println(response.getBody());
+
+		System.out.println();
+		System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+	}
+}

commit 203cf83dc0a48db7b38179026e3849645318249d
Author: Arthur Wang <arthraim@gmail.com>
Date:   Thu Apr 7 17:17:07 2011 +0800

    Added Sohu Weibo api and example.

diff --git a/changelog.txt b/changelog.txt
index faed428..2fef4dc 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -54,3 +54,4 @@
 [1.2.1]
   * FEATURE: Added custom charset support to Request (thanks Eric Genet)
   * FEATURE: Added support for Vkontakte (thanks dotbg)
+  * FEATURE: Added Sohu Weibo, Netease Weibo & Sina Weibo Apis (thanks Arthur Wang)
diff --git a/src/main/java/org/scribe/builder/api/SohuWeiboApi.java b/src/main/java/org/scribe/builder/api/SohuWeiboApi.java
new file mode 100644
index 0000000..1f927b7
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SohuWeiboApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class SohuWeiboApi extends DefaultApi10a
+{
+	private static final String REQUEST_TOKEN_URL = "http://api.t.sohu.com/oauth/request_token";
+	private static final String ACCESS_TOKEN_URL = "http://api.t.sohu.com/oauth/access_token";
+	private static final String AUTHORIZE_URL = "http://api.t.sohu.com/oauth/authorize?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint()
+	{
+		return REQUEST_TOKEN_URL;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+	{
+		return ACCESS_TOKEN_URL;
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+}
diff --git a/src/test/java/org/scribe/examples/SohuWeiboExample.java b/src/test/java/org/scribe/examples/SohuWeiboExample.java
new file mode 100644
index 0000000..49dd9fb
--- /dev/null
+++ b/src/test/java/org/scribe/examples/SohuWeiboExample.java
@@ -0,0 +1,68 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class SohuWeiboExample
+{
+	private static final String NETWORK_NAME = "SohuWeibo";
+	private static final String PROTECTED_RESOURCE_URL = "http://api.t.sohu.com/account/verify_credentials.json";
+
+	public static void main(String[] args)
+	{
+		// Replace these with your own api key and secret
+		String apiKey = "your_key";
+		String apiSecret = "your_secret";
+		OAuthService service = new ServiceBuilder()
+				                        .provider(SohuWeiboApi.class)
+				                        .apiKey(apiKey)
+				                        .apiSecret(apiSecret)
+				                        .build();
+		Scanner in = new Scanner(System.in);
+
+		System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+		System.out.println();
+
+		// Grab a request token.
+		System.out.println("Fetching request token.");
+		Token requestToken = service.getRequestToken();
+		System.out.println("Got it ... ");
+		System.out.println(requestToken.getToken());
+
+		// Obtain the Authorization URL
+		System.out.println("Fetching the Authorization URL...");
+		String authorizationUrl = service.getAuthorizationUrl(requestToken);
+		System.out.println("Got the Authorization URL!");
+		System.out.println("Now go and authorize Scribe here:");
+		System.out.println(authorizationUrl);
+		System.out.println("And paste the authorization code here");
+		System.out.print(">>");
+		Verifier verifier = new Verifier(in.nextLine());
+		System.out.println();
+
+		// Trade the Request Token and Verfier for the Access Token
+		System.out.println("Trading the Request Token for an Access Token...");
+		Token accessToken = service.getAccessToken(requestToken, verifier);
+		System.out.println("Got the Access Token!");
+		System.out.println("(if your curious it looks like this: "
+				+ accessToken + " )");
+		System.out.println();
+
+		// Now let's go and ask for a protected resource!
+		System.out.println("Now we're going to access a protected resource...");
+		OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+		service.signRequest(accessToken, request);
+		Response response = request.send();
+		System.out.println("Got it! Lets see what we found...");
+		System.out.println();
+		System.out.println(response.getCode());
+		System.out.println(response.getBody());
+
+		System.out.println();
+		System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+	}
+}

commit 0c3fc722b147a2c056bd2265c75bf4602e2664de
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Jun 3 16:46:16 2011 -0300

    enable persistent http connections

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 50c0f89..b3a7c66 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -27,6 +27,7 @@ class Request
   private HttpURLConnection connection;
   private String charset;
   private byte[] bytePayload = null;
+  private boolean connectionKeepAlive = false;
 
   /**
    * Creates a new Http Request
@@ -67,7 +68,7 @@ class Request
     String effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);
     if (connection == null)
     {
-      System.setProperty("http.keepAlive", "false");
+      System.setProperty("http.keepAlive", connectionKeepAlive ? "true" : "false");
       connection = (HttpURLConnection) new URL(effectiveUrl).openConnection();
     }
   }
@@ -302,6 +303,17 @@ class Request
     this.charset = charsetName;
   }
 
+  /**
+   * Sets wether the underlying Http Connection is persistent or not.
+   *
+   * @see http://download.oracle.com/javase/1.5.0/docs/guide/net/http-keepalive.html
+   * @param connectionKeepAlive
+   */
+  public void setConnectionKeepAlive(boolean connectionKeepAlive)
+  {
+    this.connectionKeepAlive = connectionKeepAlive;
+  }
+
   /*
    * We need this in order to stub the connection object for test cases
    */

commit cc5a0a04719d451b6738ee812135dd720633bb63
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Jun 3 16:49:30 2011 -0300

    missing entry on changelog

diff --git a/changelog.txt b/changelog.txt
index 2fef4dc..29c5a00 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -55,3 +55,4 @@
   * FEATURE: Added custom charset support to Request (thanks Eric Genet)
   * FEATURE: Added support for Vkontakte (thanks dotbg)
   * FEATURE: Added Sohu Weibo, Netease Weibo & Sina Weibo Apis (thanks Arthur Wang)
+  * FEATURE: Added support for persistent Http Connections (thanks Craig Minton)

commit 1be46776e563f58046f9e690393696021cff531f
Author: ThePizzle <dont@giveout.com>
Date:   Wed Jun 8 17:15:53 2011 -0400

    Set timeout parameters in doSend() to avoid NPE

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index b3a7c66..66aaea2 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -28,6 +28,8 @@ class Request
   private String charset;
   private byte[] bytePayload = null;
   private boolean connectionKeepAlive = false;
+  private Long connectTimeout = null;
+  private Long readTimeout = null;
 
   /**
    * Creates a new Http Request
@@ -76,6 +78,12 @@ class Request
   Response doSend() throws IOException
   {
     connection.setRequestMethod(this.verb.name());
+    if (connectTimeout != null) {
+    	connection.setConnectTimeout(connectTimeout.intValue());
+    }
+    if (readTimeout != null) {
+    	connection.setReadTimeout(readTimeout.intValue());
+    }
     addHeaders(connection);
     if (verb.equals(Verb.PUT) || verb.equals(Verb.POST))
     {
@@ -278,7 +286,8 @@ class Request
    */
   public void setConnectTimeout(int duration, TimeUnit unit)
   {
-    this.connection.setConnectTimeout((int) unit.toMillis(duration));
+    this.connectTimeout = unit.toMillis(duration);
+    //this.connection.setConnectTimeout((int) unit.toMillis(duration));
   }
 
   /**
@@ -290,7 +299,8 @@ class Request
    */
   public void setReadTimeout(int duration, TimeUnit unit)
   {
-    this.connection.setReadTimeout((int) unit.toMillis(duration));
+    this.readTimeout = unit.toMillis(duration);
+    //this.connection.setReadTimeout((int) unit.toMillis(duration));
   }
 
   /**

commit 10c56bda271413a8dd8967afdda57257c53d9df9
Author: ThePizzle <dont@giveout.com>
Date:   Thu Jun 9 09:23:33 2011 -0400

    Fix indentation and remove commented code

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 66aaea2..a9c332a 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -78,11 +78,13 @@ class Request
   Response doSend() throws IOException
   {
     connection.setRequestMethod(this.verb.name());
-    if (connectTimeout != null) {
-    	connection.setConnectTimeout(connectTimeout.intValue());
+    if (connectTimeout != null) 
+    {
+      connection.setConnectTimeout(connectTimeout.intValue());
     }
-    if (readTimeout != null) {
-    	connection.setReadTimeout(readTimeout.intValue());
+    if (readTimeout != null)
+    {
+      connection.setReadTimeout(readTimeout.intValue());
     }
     addHeaders(connection);
     if (verb.equals(Verb.PUT) || verb.equals(Verb.POST))
@@ -287,7 +289,6 @@ class Request
   public void setConnectTimeout(int duration, TimeUnit unit)
   {
     this.connectTimeout = unit.toMillis(duration);
-    //this.connection.setConnectTimeout((int) unit.toMillis(duration));
   }
 
   /**
@@ -300,7 +301,6 @@ class Request
   public void setReadTimeout(int duration, TimeUnit unit)
   {
     this.readTimeout = unit.toMillis(duration);
-    //this.connection.setReadTimeout((int) unit.toMillis(duration));
   }
 
   /**

commit 5f47bebced67a63a01ed8d9d2dbf928994a7c8ac
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jun 27 12:18:58 2011 -0300

    bounced version number for release

diff --git a/README.textile b/README.textile
index eec1451..a03660b 100644
--- a/README.textile
+++ b/README.textile
@@ -61,7 +61,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.2.0</version>@
+  @<version>1.2.1</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/pom.xml b/pom.xml
index e6bb9e8..0b2a8f9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.2.0</version>
+  <version>1.2.1</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit c86d7174afc74664b7b2d79eae65777c282b6702
Merge: 5f47beb 10c56bd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Jun 29 19:19:31 2011 -0700

    Merge pull request #124 from thepizzle/master
    
    fixed NPE when setting connection timeouts.

commit 079ce6a2c2da0dd3e7ff1dff95e2402b9b1f5b0e
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Sun Jul 17 11:48:16 2011 +0800

    Add Plurk API

diff --git a/src/main/java/org/scribe/builder/api/PlurkApi.java b/src/main/java/org/scribe/builder/api/PlurkApi.java
new file mode 100644
index 0000000..a998b04
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/PlurkApi.java
@@ -0,0 +1,26 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class PlurkApi extends DefaultApi10a {
+
+    private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
+    private static final String AUTHORIZE_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
+    private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
+
+    @Override
+    public String getRequestTokenEndpoint() {
+        return REQUEST_TOKEN_URL;
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken) {
+        return String.format(AUTHORIZE_URL, requestToken.getToken());
+    }
+
+    @Override
+    public String getAccessTokenEndpoint() {
+        return ACCESS_TOKEN_URL;
+    }
+
+}

commit 79fa710e473f2320e781eadbfd5e636a88d4c93b
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Sun Jul 17 14:01:31 2011 +0800

    Fix code style

diff --git a/src/main/java/org/scribe/builder/api/PlurkApi.java b/src/main/java/org/scribe/builder/api/PlurkApi.java
index a998b04..132c8f0 100644
--- a/src/main/java/org/scribe/builder/api/PlurkApi.java
+++ b/src/main/java/org/scribe/builder/api/PlurkApi.java
@@ -2,25 +2,27 @@ package org.scribe.builder.api;
 
 import org.scribe.model.Token;
 
-public class PlurkApi extends DefaultApi10a {
+public class PlurkApi extends DefaultApi10a
+{
+  private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
+  private static final String AUTHORIZE_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
+  private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
 
-    private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
-    private static final String AUTHORIZE_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
-    private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_URL;
+  }
 
-    @Override
-    public String getRequestTokenEndpoint() {
-        return REQUEST_TOKEN_URL;
-    }
-
-    @Override
-    public String getAuthorizationUrl(Token requestToken) {
-        return String.format(AUTHORIZE_URL, requestToken.getToken());
-    }
-
-    @Override
-    public String getAccessTokenEndpoint() {
-        return ACCESS_TOKEN_URL;
-    }
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
 
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_URL;
+  }
 }

commit 1d59fbd014d05213bf1a511c3a21664e56196d60
Merge: c86d717 79fa710
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jul 18 05:56:13 2011 -0700

    Merge pull request #130 from dreamcwli/master
    
    Add Plurk API

commit 0390ae7eb7e0e318689878f86db52e037f9ee8d9
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Wed Jul 20 19:47:32 2011 +0800

    Fix naming convention

diff --git a/src/main/java/org/scribe/builder/api/PlurkApi.java b/src/main/java/org/scribe/builder/api/PlurkApi.java
index 132c8f0..8a02d75 100644
--- a/src/main/java/org/scribe/builder/api/PlurkApi.java
+++ b/src/main/java/org/scribe/builder/api/PlurkApi.java
@@ -5,7 +5,7 @@ import org.scribe.model.Token;
 public class PlurkApi extends DefaultApi10a
 {
   private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
-  private static final String AUTHORIZE_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
+  private static final String AUTHORIZATION_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
   private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
 
   @Override
@@ -17,7 +17,7 @@ public class PlurkApi extends DefaultApi10a
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return String.format(AUTHORIZE_URL, requestToken.getToken());
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
 
   @Override

commit a62fa36da05102ba0078728efbd33bc913baf0d7
Author: Tomas Lin <tomas@secretescapes.com>
Date:   Tue Aug 2 13:05:54 2011 +0100

    added windows live support and example

diff --git a/src/main/java/org/scribe/builder/api/LiveApi.java b/src/main/java/org/scribe/builder/api/LiveApi.java
new file mode 100644
index 0000000..4a91429
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/LiveApi.java
@@ -0,0 +1,37 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+
+import org.scribe.model.*;
+
+import org.scribe.utils.*;
+
+import static org.scribe.utils.URLUtils.*;
+
+public class LiveApi extends DefaultApi20 {
+
+	private static final String AUTHORIZE_URL = "https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+	private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
+
+	@Override
+	public String getAccessTokenEndpoint() {
+		return "https://oauth.live.com/token?grant_type=authorization_code";
+	}
+
+	@Override
+	public String getAuthorizationUrl(OAuthConfig config) {
+		Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Live does not support OOB");
+
+		// Append scope if present
+		if (config.hasScope()) {
+			return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope()));
+		} else {
+			return String.format(AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));
+		}
+	}
+
+	@Override
+	public AccessTokenExtractor getAccessTokenExtractor() {
+		return new JsonTokenExtractor();
+	}
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/examples/LiveExample.java b/src/test/java/org/scribe/examples/LiveExample.java
new file mode 100644
index 0000000..3ddbcaa
--- /dev/null
+++ b/src/test/java/org/scribe/examples/LiveExample.java
@@ -0,0 +1,64 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class LiveExample
+{
+  private static final String PROTECTED_RESOURCE_URL = "https://api.foursquare.com/v2/users/self/friends?oauth_token=";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "";
+    String apiSecret = "";
+    OAuthService service = new ServiceBuilder()
+                                  .provider(LiveApi.class)
+                                  .apiKey(apiKey)
+                                  .apiSecret(apiSecret)
+		                  .scope('wl.basic')
+                                  .callback("http://localhost:9000/")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Windows Live's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+    
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL + accessToken.getToken());
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}

commit 62b43855c26916645ae8fa01ee3b752c6b193ee9
Author: Tomas Lin <tomas@secretescapes.com>
Date:   Tue Aug 2 15:56:43 2011 +0100

    wrapped line format

diff --git a/src/main/java/org/scribe/builder/api/LiveApi.java b/src/main/java/org/scribe/builder/api/LiveApi.java
index 4a91429..789631f 100644
--- a/src/main/java/org/scribe/builder/api/LiveApi.java
+++ b/src/main/java/org/scribe/builder/api/LiveApi.java
@@ -8,30 +8,36 @@ import org.scribe.utils.*;
 
 import static org.scribe.utils.URLUtils.*;
 
-public class LiveApi extends DefaultApi20 {
+public class LiveApi extends DefaultApi20
+{
 
 	private static final String AUTHORIZE_URL = "https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
 	private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
 
 	@Override
-	public String getAccessTokenEndpoint() {
+	public String getAccessTokenEndpoint()
+	{
 		return "https://oauth.live.com/token?grant_type=authorization_code";
 	}
 
 	@Override
-	public String getAuthorizationUrl(OAuthConfig config) {
+	public String getAuthorizationUrl(OAuthConfig config)
+	{
 		Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Live does not support OOB");
 
 		// Append scope if present
-		if (config.hasScope()) {
+		if (config.hasScope())
+		{
 			return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope()));
-		} else {
+		} else
+		{
 			return String.format(AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));
 		}
 	}
 
 	@Override
-	public AccessTokenExtractor getAccessTokenExtractor() {
+	public AccessTokenExtractor getAccessTokenExtractor()
+	{
 		return new JsonTokenExtractor();
 	}
 }
\ No newline at end of file

commit 93602c41206b034001868d37ebe4430e463257b4
Merge: 1d59fbd 62b4385
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Aug 2 09:04:26 2011 -0700

    Merge pull request #135 from tomaslin/master
    
    Windows Live oAuth Support

commit 35ca23f442029eeb3151c33449f165a2eceb0df6
Author: Scott Scoble <punkdgeek@gmail.com>
Date:   Mon Aug 8 00:28:23 2011 -0700

    fixed "invalid character constant" message from eclipse

diff --git a/src/test/java/org/scribe/examples/LiveExample.java b/src/test/java/org/scribe/examples/LiveExample.java
index 3ddbcaa..ade5a6b 100644
--- a/src/test/java/org/scribe/examples/LiveExample.java
+++ b/src/test/java/org/scribe/examples/LiveExample.java
@@ -21,7 +21,7 @@ public class LiveExample
                                   .provider(LiveApi.class)
                                   .apiKey(apiKey)
                                   .apiSecret(apiSecret)
-		                  .scope('wl.basic')
+                                  .scope("wl.basic")
                                   .callback("http://localhost:9000/")
                                   .build();
     Scanner in = new Scanner(System.in);

commit d8e384f9c7dc3e7fb4fc84e24d2eb9528a80d7bd
Merge: 93602c4 35ca23f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Aug 8 12:44:45 2011 -0700

    Merge pull request #137 from wscoble/live-example-eclipse-fix
    
    fixed "invalid character constant" message from eclipse

commit bf9a4bac6887cc3c06b32423110292bc0e8b9deb
Author: Sripathi Krishnan <sripathi.krishnan@gmail.com>
Date:   Tue Aug 23 16:12:33 2011 +0530

    Issue # 145 : Changing source and target compatibility to 1.5
    
    This allows the library to be used in JDK 5 as well as JDK 6

diff --git a/pom.xml b/pom.xml
index 0b2a8f9..77c365b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -63,8 +63,8 @@
       <plugin>
         <artifactId>maven-compiler-plugin</artifactId>
         <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
+          <source>1.5</source>
+          <target>1.5</target>
         </configuration>
       </plugin>
       <plugin>

commit 2238c2da519f73ed7a212c3d5112026770400f06
Merge: d8e384f bf9a4ba
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Aug 23 06:03:55 2011 -0700

    Merge pull request #146 from sripathikrishnan/master
    
    Issue # 145 : Change source and target compatibility to 1.5

commit 9cdebd1ca6af5dafe3713f4e1c7f060b1de669b3
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Thu Aug 25 11:28:38 2011 +0800

    Add Mobile Plurk API

diff --git a/src/main/java/org/scribe/builder/api/MobilePlurkApi.java b/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
new file mode 100644
index 0000000..afac051
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class PlurkApi extends DefaultApi10a
+{
+  private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
+  private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";
+  private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_URL;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_URL;
+  }
+}

commit b917140078c7deaf5f3891e7952290933d6ee447
Merge: 9cdebd1 2238c2d
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Thu Aug 25 13:24:52 2011 +0800

    Merge remote-tracking branch 'upstream/master'

commit 27b1fc390b2cdec4d9c741ddab0762aa3d2b94d9
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Thu Aug 25 13:43:10 2011 +0800

    Fix MobilePlurkApi naming

diff --git a/src/main/java/org/scribe/builder/api/MobilePlurkApi.java b/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
index afac051..565dc3c 100644
--- a/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
+++ b/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
@@ -2,7 +2,7 @@ package org.scribe.builder.api;
 
 import org.scribe.model.Token;
 
-public class PlurkApi extends DefaultApi10a
+public class MobilePlurkApi extends DefaultApi10a
 {
   private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
   private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";

commit c6bff31353229961bc32cad607cbb3b8930a3de3
Author: Chia-Wei Li <dreamcwli@gmail.com>
Date:   Sat Aug 27 19:32:16 2011 +0800

    Move MobilePlurkApi into PlurkApi

diff --git a/src/main/java/org/scribe/builder/api/MobilePlurkApi.java b/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
deleted file mode 100644
index 565dc3c..0000000
--- a/src/main/java/org/scribe/builder/api/MobilePlurkApi.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.scribe.builder.api;
-
-import org.scribe.model.Token;
-
-public class MobilePlurkApi extends DefaultApi10a
-{
-  private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
-  private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";
-  private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
-
-  @Override
-  public String getRequestTokenEndpoint()
-  {
-    return REQUEST_TOKEN_URL;
-  }
-
-  @Override
-  public String getAuthorizationUrl(Token requestToken)
-  {
-    return String.format(AUTHORIZATION_URL, requestToken.getToken());
-  }
-
-  @Override
-  public String getAccessTokenEndpoint()
-  {
-    return ACCESS_TOKEN_URL;
-  }
-}
diff --git a/src/main/java/org/scribe/builder/api/PlurkApi.java b/src/main/java/org/scribe/builder/api/PlurkApi.java
index 8a02d75..323ad2c 100644
--- a/src/main/java/org/scribe/builder/api/PlurkApi.java
+++ b/src/main/java/org/scribe/builder/api/PlurkApi.java
@@ -25,4 +25,15 @@ public class PlurkApi extends DefaultApi10a
   {
     return ACCESS_TOKEN_URL;
   }
+
+  public class Mobile extends PlurkApi
+  {
+    private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(AUTHORIZATION_URL, requestToken.getToken());
+    }
+  }
 }

commit e719c73d92d52cca2e66e4433f3cc26272204771
Author: Sripathi Krishnan <sripathi.krishnan@gmail.com>
Date:   Mon Aug 29 16:52:42 2011 +0530

    Bumping release version to 1.2.2

diff --git a/changelog.txt b/changelog.txt
index 29c5a00..48281b9 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -56,3 +56,11 @@
   * FEATURE: Added support for Vkontakte (thanks dotbg)
   * FEATURE: Added Sohu Weibo, Netease Weibo & Sina Weibo Apis (thanks Arthur Wang)
   * FEATURE: Added support for persistent Http Connections (thanks Craig Minton)
+
+[1.2.2]
+  * FIX: Added support for JDK 1.5. Issue #146 (thanks Sripathi Krishnan)
+  * FIX: Invalid character constant error message. Issue #137 (thanks Scott Scoble)
+  * FEATURE: Added a Api class to handle windows live authentication. Issue #135 (thanks Tomas Lin)
+  * FEATURE: Added refresh token feature for Yahoo! API. Issue #134 (thanks Aaron Foltz)
+  * FEATURE: Added support for Plurk API. Issue #130 (thanks Chia-Wei Li)
+  * FIX: Request.setConnectTimeout() and setReadTimeout() throw NPE. Issue #123 (thanks thepizzle)
diff --git a/pom.xml b/pom.xml
index 77c365b..a68bf1b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.2.1</version>
+  <version>1.2.2</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 4f8315f7f73536bbc04b49a0dcad85837a01435c
Author: Sripathi Krishnan <sripathi.krishnan@gmail.com>
Date:   Mon Aug 29 16:59:20 2011 +0530

    Bumping release number in pom.xml snippet in README

diff --git a/README.textile b/README.textile
index a03660b..9113316 100644
--- a/README.textile
+++ b/README.textile
@@ -61,7 +61,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.2.1</version>@
+  @<version>1.2.2</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes

commit 207df8a3d449aa09546f9d331ca59d518b126c14
Merge: 2238c2d 4f8315f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Aug 29 06:43:04 2011 -0700

    Merge pull request #150 from sripathikrishnan/master
    
    Scribe Release - 1.2.2

commit 8a7336b7d4b3c0f11b04eb5bbdddb70a529f4aec
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jul 14 17:59:24 2011 -0300

    added intellij ignores

diff --git a/.gitignore b/.gitignore
index f2730f1..a9a50de 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,6 +5,11 @@
 .project
 .settings
 
+# IntelliJ Idea settings
+
+.idea
+scribe.iml
+
 # Binaries
 
 target
\ No newline at end of file

commit daf45d70784ca8380b99c26edc7d6a6676e8f3e4
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Aug 15 23:35:15 2011 -0300

    documented changes so far

diff --git a/README.textile b/README.textile
index 9113316..075c348 100644
--- a/README.textile
+++ b/README.textile
@@ -38,6 +38,8 @@ h3. Supports all major 1.0a and 2.0 OAuth APIs out-of-the-box
 
 * Yammer
 
+* Windows Live
+
 * and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
 
 h3. Small and modular

commit dcd13835ba12d5e1a86bf11a90989d73530132eb
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Aug 15 23:38:16 2011 -0300

    moved map functions to MapUtils

diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index ebaf20a..73442b9 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -36,7 +36,7 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
     MapUtils.decodeAndAppendEntries(request.getBodyParams(), params);
     MapUtils.decodeAndAppendEntries(request.getOauthParameters(), params);
     params = MapUtils.sort(params);
-    return URLUtils.percentEncode(URLUtils.concatSortedPercentEncodedParams(params));
+    return URLUtils.percentEncode(MapUtils.concatSortedPercentEncodedParams(params));
   }
 
   private void checkPreconditions(OAuthRequest request)
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index a9c332a..f40794d 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -177,7 +177,7 @@ class Request
     {
       Map<String, String> params = new HashMap<String, String>();
       String queryString = new URL(url).getQuery();
-      params.putAll(URLUtils.queryStringToMap(queryString));
+      params.putAll(MapUtils.queryStringToMap(queryString));
       params.putAll(this.querystringParams);
       return params;
     }
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index a77e4b6..a5076b3 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -9,6 +9,10 @@ import java.util.*;
  */
 public class MapUtils
 {
+  private static final String EMPTY_STRING = "";
+  private static final String PAIR_SEPARATOR = "=";
+  private static final String PARAM_SEPARATOR = "&";
+
   /**
    * Sorts a Map
    * 
@@ -48,4 +52,43 @@ public class MapUtils
       target.put(URLUtils.percentEncode(key), URLUtils.percentEncode(source.get(key)));
     }
   }
+
+  /**
+   * Concats a key-value map into a querystring-like String
+   *
+   * @param params key-value map
+   * @return querystring-like String
+   */
+  public static String concatSortedPercentEncodedParams(Map<String, String> params)
+  {
+    StringBuilder result = new StringBuilder();
+    for (String key : params.keySet())
+    {
+      result.append(key).append(PAIR_SEPARATOR);
+      result.append(params.get(key)).append(PARAM_SEPARATOR);
+    }
+    return result.toString().substring(0, result.length() - 1);
+  }
+
+  /**
+   * Parses and form-urldecodes a querystring-like string into a map
+   *
+   * @param queryString querystring-like String
+   * @return a map with the form-urldecoded parameters
+   */
+  public static Map<String, String> queryStringToMap(String queryString)
+  {
+    Map<String, String> result = new HashMap<String, String>();
+    if (queryString != null && queryString.length() > 0)
+    {
+      for (String param : queryString.split(PARAM_SEPARATOR))
+      {
+        String pair[] = param.split(PAIR_SEPARATOR);
+        String key = URLUtils.formURLDecode(pair[0]);
+        String value = pair.length > 1 ? URLUtils.formURLDecode(pair[1]) : EMPTY_STRING;
+        result.put(key, value);
+      }
+    }
+    return result;
+  }
 }
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index eb82e46..745e113 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -133,47 +133,6 @@ public class URLUtils
     }
   }
 
-  /**
-   * Concats a key-value map into a querystring-like String
-   *
-   * @param params key-value map
-   * @return querystring-like String
-   */
-  // TODO Move to MapUtils
-  public static String concatSortedPercentEncodedParams(Map<String, String> params)
-  {
-    StringBuilder result = new StringBuilder();
-    for (String key : params.keySet())
-    {
-      result.append(key).append(PAIR_SEPARATOR);
-      result.append(params.get(key)).append(PARAM_SEPARATOR);
-    }
-    return result.toString().substring(0, result.length() - 1);
-  }
-
-  /**
-   * Parses and form-urldecodes a querystring-like string into a map
-   *
-   * @param queryString querystring-like String
-   * @return a map with the form-urldecoded parameters
-   */
-  // TODO Move to MapUtils
-  public static Map<String, String> queryStringToMap(String queryString)
-  {
-    Map<String, String> result = new HashMap<String, String>();
-    if (queryString != null && queryString.length() > 0)
-    {
-      for (String param : queryString.split(PARAM_SEPARATOR))
-      {
-        String pair[] = param.split(PAIR_SEPARATOR);
-        String key = formURLDecode(pair[0]);
-        String value = pair.length > 1 ? formURLDecode(pair[1]) : EMPTY_STRING;
-        result.put(key, value);
-      }
-    }
-    return result;
-  }
-
   private static final class EncodingRule
   {
     private final String ch;

commit 7e7d3ff7e008570dd7d5bf1b38f3ba0ad174aa66
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 19 18:43:22 2011 -0300

    Twitter's /authenticate endpoint

diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index e1e1549..a83c28e 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -40,4 +40,27 @@ public class TwitterApi extends DefaultApi10a
       return "https://" + REQUEST_TOKEN_RESOURCE;
     }
   }
+
+  /**
+   * Twitter 'friendlier' authorization endpoint for OAuth.
+   *
+   * Uses SSL.
+   */
+  public static class Authenticate extends SSL
+  {
+    private static final String AUTHENTICATE_URL = "https://api.twitter.com/oauth/authenticate?oauth_token=%s";
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(AUTHENTICATE_URL, requestToken.getToken());
+    }
+  }
+
+  /**
+   * Just an alias to the default (SSL) authorization endpoint.
+   *
+   * Need to include this for symmetry with 'Authenticate' only.
+   */
+  public static class Authorize extends SSL{}
 }

commit 9f4569fbbce60f98717d3acb4bee0d6223ba0e12
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Sep 24 16:56:07 2011 -0300

    made token extraction regex easier and added a test case for multiple parameters

diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
index 5753f98..cf75b13 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -12,7 +12,7 @@ import org.scribe.utils.*;
  */
 public class TokenExtractor20Impl implements AccessTokenExtractor
 {
-  private static final String TOKEN_REGEX = "access_token=(\\S*?)(&(\\S*))?";
+  private static final String TOKEN_REGEX = "access_token=([^&]+)";
   private static final String EMPTY_SECRET = "";
 
   /**
@@ -23,7 +23,7 @@ public class TokenExtractor20Impl implements AccessTokenExtractor
     Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
 
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
-    if (matcher.matches())
+    if (matcher.find())
     {
       String token = URLUtils.formURLDecode(matcher.group(1));
       return new Token(token, EMPTY_SECRET, response);
diff --git a/src/test/java/org/scribe/extractors/TokenExtractor20Test.java b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
index 17f1a01..0fde22f 100644
--- a/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
+++ b/src/test/java/org/scribe/extractors/TokenExtractor20Test.java
@@ -35,6 +35,15 @@ public class TokenExtractor20Test
     assertEquals("", extracted.getSecret());
   }
 
+  @Test
+  public void shouldExtractTokenFromResponseWithManyParameters()
+  {
+    String response = "access_token=foo1234&other_stuff=yeah_we_have_this_too&number=42";
+    Token extracted = extractor.extract(response);
+    assertEquals("foo1234", extracted.getToken());
+    assertEquals("", extracted.getSecret());
+  }
+
   @Test(expected = OAuthException.class)
   public void shouldThrowExceptionIfTokenIsAbsent()
   {

commit 24babbae029ed353b4e4f287fc2ab2c140024325
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 16:37:49 2011 -0300

    better error messages when scribe can't establish a network connection

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index f40794d..4a68b91 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -59,9 +59,14 @@ class Request
     {
       createConnection();
       return doSend();
-    } catch (IOException ioe)
+    }
+    catch (UnknownHostException uhe)
+    {
+      throw new OAuthException("Could not reach the desired host. Check your network connection.", uhe);
+    }
+    catch (IOException ioe)
     {
-      throw new OAuthException("Problems while creating connection", ioe);
+      throw new OAuthException("Problems while creating connection.", ioe);
     }
   }
 
diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
index 6164e14..1ac91d4 100644
--- a/src/main/java/org/scribe/model/Response.java
+++ b/src/main/java/org/scribe/model/Response.java
@@ -28,10 +28,11 @@ public class Response
       code = connection.getResponseCode();
       headers = parseHeaders(connection);
       stream = wasSuccessful() ? connection.getInputStream() : connection.getErrorStream();
-    } catch (UnknownHostException e)
+    }
+    catch (UnknownHostException e)
     {
       code = 404;
-      body = EMPTY;
+      body = Response.EMPTY;
     }
   }
 

commit ae3a1b11c9a1a20dfce0cc45efe54e6b4eac5dc1
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 19:14:57 2011 -0300

    added default content type

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 4a68b91..4e78bcc 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -17,6 +17,8 @@ import org.scribe.utils.*;
 class Request
 {
   private static final String CONTENT_LENGTH = "Content-Length";
+  private static final String CONTENT_TYPE = "Content-Type";
+  public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
 
   private String url;
   private Verb verb;
@@ -108,6 +110,12 @@ class Request
   void addBody(HttpURLConnection conn, byte[] content) throws IOException
   {
     conn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.length));
+
+    // Set default content type if none is set.
+    if (conn.getRequestProperty(CONTENT_TYPE) == null)
+    {
+      conn.setRequestProperty(CONTENT_TYPE, DEFAULT_CONTENT_TYPE);
+    }
     conn.setDoOutput(true);
     conn.getOutputStream().write(content);
   }
diff --git a/src/test/java/org/scribe/model/ConnectionStub.java b/src/test/java/org/scribe/model/ConnectionStub.java
index 934f633..7e93313 100644
--- a/src/test/java/org/scribe/model/ConnectionStub.java
+++ b/src/test/java/org/scribe/model/ConnectionStub.java
@@ -22,6 +22,12 @@ public class ConnectionStub extends HttpURLConnection
     headers.put(key, value);
   }
 
+  @Override
+  public String getRequestProperty(String s)
+  {
+    return headers.get(s);
+  }
+
   public Map<String, String> getHeaders()
   {
     return headers;
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 2a2e90e..5bf46db 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -6,7 +6,6 @@ import org.junit.*;
 
 public class RequestTest
 {
-
   private Request getRequest;
   private Request postRequest;
   private ConnectionStub connection;
@@ -80,4 +79,42 @@ public class RequestTest
   {
     assertTrue(getRequest.getQueryStringParams().get("other param").equals("value with spaces"));
   }
+
+  @Test
+  public void shouldAutomaticallyAddContentTypeForPostRequestsWithBytePayload()
+  {
+    postRequest.addPayload("PAYLOAD".getBytes());
+    postRequest.send();
+    assertEquals(Request.DEFAULT_CONTENT_TYPE, connection.getHeaders().get("Content-Type"));
+  }
+
+  @Test
+  public void shouldAutomaticallyAddContentTypeForPostRequestsWithStringPayload()
+  {
+    postRequest.addPayload("PAYLOAD");
+    postRequest.send();
+    assertEquals(Request.DEFAULT_CONTENT_TYPE, connection.getHeaders().get("Content-Type"));
+  }
+
+  @Test
+  public void shouldAutomaticallyAddContentTypeForPostRequestsWithBodyParameters()
+  {
+    postRequest.send();
+    assertEquals(Request.DEFAULT_CONTENT_TYPE, connection.getHeaders().get("Content-Type"));
+  }
+
+  @Test
+  public void shouldBeAbleToOverrideItsContentType()
+  {
+    postRequest.addHeader("Content-Type", "my-content-type");
+    postRequest.send();
+    assertEquals("my-content-type", connection.getHeaders().get("Content-Type"));
+  }
+
+  @Test
+  public void shouldNotAddContentTypeForGetRequests()
+  {
+    getRequest.send();
+    assertFalse(connection.getHeaders().containsKey("Content-Type"));
+  }
 }
\ No newline at end of file

commit 40c8a27bb022e24e3a226c47db007c7e3a7fcb6c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 19:26:34 2011 -0300

    SimpleGeo Api (just for 2 Legged OAuth)

diff --git a/src/main/java/org/scribe/builder/api/SimpleGeoApi.java b/src/main/java/org/scribe/builder/api/SimpleGeoApi.java
new file mode 100644
index 0000000..3e19df7
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SimpleGeoApi.java
@@ -0,0 +1,29 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class SimpleGeoApi extends DefaultApi10a
+{
+  private static final String ENDPOINT = "these are not used since SimpleGeo uses 2 legged OAuth";
+
+	@Override
+	public String getRequestTokenEndpoint()
+	{
+		return ENDPOINT;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+	{
+		return ENDPOINT;
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+		return ENDPOINT;
+	}
+}

commit ce139bb28b88c68413550e8d5e3f9fe7106d6a04
Merge: 40c8a27 c6bff31
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 16:11:49 2011 -0700

    Merge pull request #147 from dreamcwli/master
    
    Mobile Plurk Api

commit dbf00c9227b0d9988381c84d543c58be672ac6d7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 19:28:42 2011 -0300

    added features to changelog

diff --git a/changelog.txt b/changelog.txt
index 48281b9..5479932 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -64,3 +64,7 @@
   * FEATURE: Added refresh token feature for Yahoo! API. Issue #134 (thanks Aaron Foltz)
   * FEATURE: Added support for Plurk API. Issue #130 (thanks Chia-Wei Li)
   * FIX: Request.setConnectTimeout() and setReadTimeout() throw NPE. Issue #123 (thanks thepizzle)
+
+[1.2.3]
+  * FEATURE: Added default Content-Type header
+  * FEATURE: SoundCloud Api

commit 852368e0a7cde9c88bca18c69d9ebe08f1f663d5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 20:00:15 2011 -0300

    Sapo Api support

diff --git a/changelog.txt b/changelog.txt
index 5479932..bca2181 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -68,3 +68,4 @@
 [1.2.3]
   * FEATURE: Added default Content-Type header
   * FEATURE: SoundCloud Api
+  * FEATURE: Sapo Api
diff --git a/src/main/java/org/scribe/builder/api/SapoApi.java b/src/main/java/org/scribe/builder/api/SapoApi.java
new file mode 100644
index 0000000..9771daf
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SapoApi.java
@@ -0,0 +1,40 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class SapoApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://id.sapo.pt/oauth/authorize?oauth_token=%s";
+  private static final String ACCESS_URL = "https://id.sapo.pt/oauth/access_token";
+  private static final String REQUEST_URL = "https://id.sapo.pt/oauth/request_token";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_URL;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_URL;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+
+  @Override
+  public Verb getRequestTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.GET;
+  }
+}
\ No newline at end of file

commit 7510111d28b64bb90a6dab5c57bfcb99e04eed24
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 20:10:22 2011 -0300

    changed method name for javabean convention

diff --git a/changelog.txt b/changelog.txt
index bca2181..6c0bf3e 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -69,3 +69,4 @@
   * FEATURE: Added default Content-Type header
   * FEATURE: SoundCloud Api
   * FEATURE: Sapo Api
+  * FEATURE: Plurk Mobile Api
diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
index 1ac91d4..f8aa83a 100644
--- a/src/main/java/org/scribe/model/Response.java
+++ b/src/main/java/org/scribe/model/Response.java
@@ -27,7 +27,7 @@ public class Response
       connection.connect();
       code = connection.getResponseCode();
       headers = parseHeaders(connection);
-      stream = wasSuccessful() ? connection.getInputStream() : connection.getErrorStream();
+      stream = isSuccessful() ? connection.getInputStream() : connection.getErrorStream();
     }
     catch (UnknownHostException e)
     {
@@ -52,7 +52,7 @@ public class Response
     return headers;
   }
 
-  private boolean wasSuccessful()
+  public boolean isSuccessful()
   {
     return getCode() >= 200 && getCode() < 400;
   }
@@ -101,10 +101,9 @@ public class Response
   /**
    * Obtains a single HTTP Header value, or null if undefined
    * 
-   * @param header
-   *          name
+   * @param name the header name.
    * 
-   * @return header value or null
+   * @return header value or null.
    */
   public String getHeader(String name)
   {

commit 78fd342d92d525929e4dfde3abd9bda13fcca36c
Author: liuce <liuce81@gmail.com>
Date:   Sun Jul 10 10:53:25 2011 +0800

    Added Kaixin and QWeibo Apis

diff --git a/changelog.txt b/changelog.txt
index 6c0bf3e..f80df4b 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -70,3 +70,4 @@
   * FEATURE: SoundCloud Api
   * FEATURE: Sapo Api
   * FEATURE: Plurk Mobile Api
+  * FEATURE: Kaixin and QWeibo Apis
diff --git a/src/main/java/org/scribe/builder/api/KaixinApi.java b/src/main/java/org/scribe/builder/api/KaixinApi.java
new file mode 100644
index 0000000..5b0e0d5
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/KaixinApi.java
@@ -0,0 +1,40 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class KaixinApi extends DefaultApi10a 
+{
+	private static final String REQUEST_TOKEN_URL = "http://api.kaixin001.com/oauth/request_token";
+	private static final String ACCESS_TOKEN_URL = "http://api.kaixin001.com/oauth/access_token";
+	private static final String AUTHORIZE_URL = "http://api.kaixin001.com/oauth/authorize?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint() 
+	{
+		return REQUEST_TOKEN_URL;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint() 
+	{
+		return ACCESS_TOKEN_URL;
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken) 
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+
+	@Override
+	public Verb getRequestTokenVerb() 
+	{
+		return Verb.GET;
+	}
+
+	@Override
+	public Verb getAccessTokenVerb() 
+	{
+		return Verb.GET;
+	}
+}
diff --git a/src/main/java/org/scribe/builder/api/QWeiboApi.java b/src/main/java/org/scribe/builder/api/QWeiboApi.java
new file mode 100644
index 0000000..e16f288
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/QWeiboApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class QWeiboApi extends DefaultApi10a 
+{
+	private static final String REQUEST_TOKEN_URL = "https://open.t.qq.com/cgi-bin/request_token";
+	private static final String ACCESS_TOKEN_URL = "https://open.t.qq.com/cgi-bin/access_token";
+	private static final String AUTHORIZE_URL = "https://open.t.qq.com/cgi-bin/authorize?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint() 
+	{
+		return REQUEST_TOKEN_URL;
+	}
+
+	@Override
+	public String getAccessTokenEndpoint() 
+	{
+		return ACCESS_TOKEN_URL;
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken) 
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+}
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 3bec660..7c1ee04 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -8,7 +8,7 @@ import org.scribe.utils.*;
 
 public class JsonTokenExtractor implements AccessTokenExtractor
 {
-  private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\"(\\S*?)\"");
+  private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
   @Override
   public Token extract(String response)

commit 9070edd20ac298804569f153654a8459f78fb2c5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 23:22:19 2011 -0300

    bounced version numbers for release

diff --git a/README.textile b/README.textile
index 075c348..99dbf47 100644
--- a/README.textile
+++ b/README.textile
@@ -63,7 +63,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.2.2</version>@
+  @<version>1.2.3</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/pom.xml b/pom.xml
index a68bf1b..02a30c7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.2.2</version>
+  <version>1.2.3</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 7fba153218f46cdbffb9d2fc8ca79596e5be4366
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 23:30:50 2011 -0300

    fixed mistake in changelog, soundcloud is going to be in release 2.0

diff --git a/changelog.txt b/changelog.txt
index f80df4b..2a7513d 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -67,7 +67,6 @@
 
 [1.2.3]
   * FEATURE: Added default Content-Type header
-  * FEATURE: SoundCloud Api
   * FEATURE: Sapo Api
   * FEATURE: Plurk Mobile Api
   * FEATURE: Kaixin and QWeibo Apis

commit 611c6464f27f562e9dba48a793abd2713762ea07
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Sep 25 23:32:20 2011 -0300

    added SimpleGeo Api to changelog

diff --git a/changelog.txt b/changelog.txt
index 2a7513d..8723f60 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -70,3 +70,4 @@
   * FEATURE: Sapo Api
   * FEATURE: Plurk Mobile Api
   * FEATURE: Kaixin and QWeibo Apis
+  * FEATURE: SimpleGeo Api

commit 05988a63cd03275468eb4dba39bbe18cb14d8d40
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Nov 7 15:36:13 2011 -0300

    Twitter examples about percent encoding
    
    see: https://dev.twitter.com/docs/auth/percent-encoding-parameters

diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 522cdc4..7927d51 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -163,4 +163,17 @@ public class URLUtilsTest
 
     Assert.assertEquals(expected, URLUtils.formURLDecode(encoded));
   }
+
+  @Test
+  public void shouldPercentEncodeCorrectlyTwitterCodingExamples()
+  {
+    // These tests are part of the Twitter dev examples here -> https://dev.twitter.com/docs/auth/percent-encoding-parameters
+    String sources[] = {"Ladies + Gentlemen", "An encoded string!", "Dogs, Cats & Mice"};
+    String encoded[] = {"Ladies%20%2B%20Gentlemen", "An%20encoded%20string%21", "Dogs%2C%20Cats%20%26%20Mice"};
+
+    for(int i = 0; i < sources.length; i++)
+    {
+      Assert.assertEquals(encoded[i], URLUtils.percentEncode(sources[i]));
+    }
+  }
 }

commit 56561acdac3923ed8b445752c1c231965250fad6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Nov 30 18:00:08 2011 -0300

    added reference to stackoverflow tag

diff --git a/README.textile b/README.textile
index 99dbf47..841635b 100644
--- a/README.textile
+++ b/README.textile
@@ -72,6 +72,10 @@ Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe-java/
 
 h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe-java/faq before creating an issue :)
 
+h1. Questions?
+
+Feel free to drop me an email, but there's already a "StackOvferflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
+
 h1. About me
 
 "LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85

commit ce531cdc38b280abcc9b93930a228cbbc034d952
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 14 13:31:01 2011 -0300

    first step towards ParameterList refactoring

diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index 73442b9..dcf77e6 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -31,12 +31,12 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
 
   private String getSortedAndEncodedParams(OAuthRequest request)
   {
-    Map<String, String> params = new HashMap<String, String>();
-    MapUtils.decodeAndAppendEntries(request.getQueryStringParams(), params);
-    MapUtils.decodeAndAppendEntries(request.getBodyParams(), params);
-    MapUtils.decodeAndAppendEntries(request.getOauthParameters(), params);
-    params = MapUtils.sort(params);
-    return URLUtils.percentEncode(MapUtils.concatSortedPercentEncodedParams(params));
+    ParameterList params = new ParameterList();
+    params.addAll(request.getQueryStringParams());
+    params.addAll(request.getBodyParams());
+    params.addAll(new ParameterList(request.getOauthParameters()));
+    params.sort();
+    return params.asOauthBaseString();
   }
 
   private void checkPreconditions(OAuthRequest request)
diff --git a/src/main/java/org/scribe/model/Parameter.java b/src/main/java/org/scribe/model/Parameter.java
new file mode 100644
index 0000000..9fe610b
--- /dev/null
+++ b/src/main/java/org/scribe/model/Parameter.java
@@ -0,0 +1,50 @@
+package org.scribe.model;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import org.scribe.exceptions.OAuthException;
+import org.scribe.utils.OAuthEncoder;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class Parameter implements Comparable<Parameter>
+{
+  private static final String UTF = "UTF8";
+
+  private final String key;
+  private final String value;
+
+  public Parameter(String key, String value)
+  {
+    this.key = key;
+    this.value = value;
+  }
+
+  public String asUrlEncodedPair()
+  {
+    return OAuthEncoder.encode(key).concat("=").concat(OAuthEncoder.encode(value));
+  }
+  
+  public boolean equals(Object other)
+  {
+    if(other == null) return false;
+    if(other == this) return true;
+    if(!(other instanceof Parameter)) return false;
+    
+    Parameter otherParam = (Parameter) other;
+    return otherParam.key.equals(key) && otherParam.value.equals(value);
+  }
+
+  public int hashCode()
+  {
+    return key.hashCode() + value.hashCode();
+  }
+
+  public int compareTo(Parameter parameter)
+  {
+    int keyDiff = key.compareTo(parameter.key);
+
+    return keyDiff != 0 ? keyDiff : value.compareTo(parameter.value);
+  }
+}
diff --git a/src/main/java/org/scribe/model/ParameterList.java b/src/main/java/org/scribe/model/ParameterList.java
new file mode 100644
index 0000000..3c71991
--- /dev/null
+++ b/src/main/java/org/scribe/model/ParameterList.java
@@ -0,0 +1,117 @@
+package org.scribe.model;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import org.scribe.utils.Preconditions;
+import org.scribe.utils.URLUtils;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class ParameterList
+{
+  private static final char QUERY_STRING_SEPARATOR = '?';
+  private static final String PARAM_SEPARATOR = "&";
+  private static final String PAIR_SEPARATOR = "=";
+  private static final String EMPTY_STRING = "";
+
+  private final List<Parameter> params;
+
+  public ParameterList()
+  {
+    params = new ArrayList<Parameter>();
+  }
+  
+  public ParameterList(Map<String, String> map)
+  {
+    this();
+    for(Map.Entry<String, String> entry : map.entrySet())
+    {
+      params.add(new Parameter(entry.getKey(), entry.getValue()));
+    }
+  }
+  
+  public void add(String key, String value)
+  {
+    params.add(new Parameter(key, value));
+  }
+
+  public String appendTo(String url)
+  {
+    Preconditions.checkNotNull(url, "Cannot append to null URL");
+    String queryString = asFormUrlEncodedString();
+    if (queryString.equals(EMPTY_STRING))
+    {
+      return url;
+    }
+    else
+    {
+      url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;
+      url += queryString;
+      return url;
+    }
+  }
+
+  public String asOauthBaseString()
+  {
+    try
+    {
+      return URLEncoder.encode(asFormUrlEncodedString(), "UTF8");
+    }
+    catch (UnsupportedEncodingException uee)
+    {
+     throw new RuntimeException();
+    }
+  }
+
+  public String asFormUrlEncodedString()
+  {
+    if (params.size() == 0) return EMPTY_STRING;
+
+    StringBuilder builder = new StringBuilder();
+    for(Parameter p : params)
+    {
+      builder.append('&').append(p.asUrlEncodedPair());
+    }
+    return builder.toString().substring(1);
+  }
+
+  public void addAll(ParameterList other)
+  {
+    params.addAll(other.params);
+  }
+
+  public void addQuerystring(String queryString)
+  {
+    if (queryString != null && queryString.length() > 0)
+    {
+      for (String param : queryString.split(PARAM_SEPARATOR))
+      {
+        String pair[] = param.split(PAIR_SEPARATOR);
+        String key = URLUtils.formURLDecode(pair[0]);
+        String value = pair.length > 1 ? URLUtils.formURLDecode(pair[1]) : EMPTY_STRING;
+        params.add(new Parameter(key, value));
+      }
+    }
+  }
+
+  public boolean contains(Parameter param)
+  {
+    return params.contains(param);
+  }
+
+  public int size()
+  {
+    return params.size();
+  }
+
+  public void sort()
+  {
+    Collections.sort(params);
+  }
+}
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 4e78bcc..223b1d2 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -7,7 +7,6 @@ import java.util.*;
 import java.util.concurrent.TimeUnit;
 
 import org.scribe.exceptions.*;
-import org.scribe.utils.*;
 
 /**
  * Represents an HTTP Request object
@@ -22,8 +21,8 @@ class Request
 
   private String url;
   private Verb verb;
-  private Map<String, String> querystringParams;
-  private Map<String, String> bodyParams;
+  private ParameterList querystringParams;
+  private ParameterList bodyParams;
   private Map<String, String> headers;
   private String payload = null;
   private HttpURLConnection connection;
@@ -43,8 +42,8 @@ class Request
   {
     this.verb = verb;
     this.url = url;
-    this.querystringParams = new HashMap<String, String>();
-    this.bodyParams = new HashMap<String, String>();
+    this.querystringParams = new ParameterList();
+    this.bodyParams = new ParameterList();
     this.headers = new HashMap<String, String>();
   }
 
@@ -74,7 +73,7 @@ class Request
 
   private void createConnection() throws IOException
   {
-    String effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);
+    String effectiveUrl = querystringParams.appendTo(url);
     if (connection == null)
     {
       System.setProperty("http.keepAlive", connectionKeepAlive ? "true" : "false");
@@ -139,7 +138,7 @@ class Request
    */
   public void addBodyParameter(String key, String value)
   {
-    this.bodyParams.put(key, value);
+    this.bodyParams.add(key, value);
   }
 
   /**
@@ -150,7 +149,7 @@ class Request
    */
   public void addQuerystringParameter(String key, String value)
   {
-    this.querystringParams.put(key, value);
+    this.querystringParams.add(key, value);
   }
 
   /**
@@ -179,20 +178,20 @@ class Request
   }
 
   /**
-   * Get a {@link Map} of the query string parameters.
+   * Get a {@link ParameterList} with the query string parameters.
    * 
-   * @return a map containing the query string parameters
-   * @throws OAuthException if the URL is not valid
+   * @return a {@link ParameterList} containing the query string parameters.
+   * @throws OAuthException if the request URL is not valid.
    */
-  public Map<String, String> getQueryStringParams()
+  public ParameterList getQueryStringParams()
   {
     try
     {
-      Map<String, String> params = new HashMap<String, String>();
+      ParameterList result = new ParameterList();
       String queryString = new URL(url).getQuery();
-      params.putAll(MapUtils.queryStringToMap(queryString));
-      params.putAll(this.querystringParams);
-      return params;
+      result.addQuerystring(queryString);
+      result.addAll(querystringParams);
+      return result;
     }
     catch (MalformedURLException mue)
     {
@@ -201,11 +200,11 @@ class Request
   }
 
   /**
-   * Obtains a {@link Map} of the body parameters.
+   * Obtains a {@link ParameterList} of the body parameters.
    * 
-   * @return a map containing the body parameters.
+   * @return a {@link ParameterList}containing the body parameters.
    */
-  public Map<String, String> getBodyParams()
+  public ParameterList getBodyParams()
   {
     return bodyParams;
   }
@@ -251,7 +250,7 @@ class Request
   byte[] getByteBodyContents()
   {
     if (bytePayload != null) return bytePayload;
-    String body = (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);
+    String body = (payload != null) ? payload : bodyParams.asFormUrlEncodedString();
     try
     {
       return body.getBytes(getCharset());
@@ -327,7 +326,7 @@ class Request
   }
 
   /**
-   * Sets wether the underlying Http Connection is persistent or not.
+   * Sets whether the underlying Http Connection is persistent or not.
    *
    * @see http://download.oracle.com/javase/1.5.0/docs/guide/net/http-keepalive.html
    * @param connectionKeepAlive
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index a5076b3..18f507e 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -69,26 +69,4 @@ public class MapUtils
     }
     return result.toString().substring(0, result.length() - 1);
   }
-
-  /**
-   * Parses and form-urldecodes a querystring-like string into a map
-   *
-   * @param queryString querystring-like String
-   * @return a map with the form-urldecoded parameters
-   */
-  public static Map<String, String> queryStringToMap(String queryString)
-  {
-    Map<String, String> result = new HashMap<String, String>();
-    if (queryString != null && queryString.length() > 0)
-    {
-      for (String param : queryString.split(PARAM_SEPARATOR))
-      {
-        String pair[] = param.split(PAIR_SEPARATOR);
-        String key = URLUtils.formURLDecode(pair[0]);
-        String value = pair.length > 1 ? URLUtils.formURLDecode(pair[1]) : EMPTY_STRING;
-        result.put(key, value);
-      }
-    }
-    return result;
-  }
 }
diff --git a/src/main/java/org/scribe/utils/OAuthEncoder.java b/src/main/java/org/scribe/utils/OAuthEncoder.java
new file mode 100644
index 0000000..0d9ec9f
--- /dev/null
+++ b/src/main/java/org/scribe/utils/OAuthEncoder.java
@@ -0,0 +1,57 @@
+package org.scribe.utils;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+import org.scribe.exceptions.OAuthException;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class OAuthEncoder
+{
+  private static String CHARSET = "UTF-8";
+  private static final Map<String, String> ENCODING_RULES;
+
+  static
+  {
+    Map<String, String> rules = new HashMap<String, String>();
+    rules.put("*", "%2A");
+    rules.put("+", "%20");
+    rules.put("%7E", "~");
+    ENCODING_RULES = Collections.unmodifiableMap(rules);
+  }
+
+  public static String encode(String plain)
+  {
+    Preconditions.checkNotNull(plain, "Cannot encode null object");
+    String encoded = "";
+    try
+    {
+      encoded = URLEncoder.encode(plain, CHARSET);
+    }
+    catch (UnsupportedEncodingException uee)
+    {
+      throw new OAuthException("Charset not found while encoding string: " + CHARSET, uee);
+    }
+    for(Map.Entry<String, String> rule : ENCODING_RULES.entrySet())
+    {
+      encoded = applyRule(encoded, rule.getKey(), rule.getValue());
+    }
+    return encoded;
+  }
+
+  private static String applyRule(String encoded, String toReplace, String replacement)
+  {
+    return encoded.replaceAll(Pattern.quote(toReplace), replacement);
+  }
+
+  public static String decode(String encoded)
+  {
+    Preconditions.checkNotNull(encoded, "Cannot decode null object");
+    return encoded;
+  }
+}
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
index 745e113..7c655ad 100644
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ b/src/main/java/org/scribe/utils/URLUtils.java
@@ -110,29 +110,6 @@ public class URLUtils
     }
   }
 
-  /**
-   * Append given parameters to the query string of the url
-   *
-   * @param url the url to append parameters to
-   * @param params any map
-   * @return new url with parameters on query string
-   */
-  public static String appendParametersToQueryString(String url, Map<String, String> params)
-  {
-    Preconditions.checkNotNull(url, "Cannot append to null URL");
-    String queryString = URLUtils.formURLEncodeMap(params);
-    if (queryString.equals(EMPTY_STRING))
-    {
-      return url;
-    }
-    else
-    {
-      url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;
-      url += queryString;
-      return url;
-    }
-  }
-
   private static final class EncodingRule
   {
     private final String ch;
diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index f47fa0e..28d9bea 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -9,7 +9,7 @@ import org.scribe.oauth.*;
 
 public class TwitterExample
 {
-  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1/account/verify_credentials.xml";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.twitter.com/1/statuses/update.json";
   
   public static void main(String[] args)
   {
@@ -45,7 +45,8 @@ public class TwitterExample
 
     // Now let's go and ask for a protected resource!
     System.out.println("Now we're going to access a protected resource...");
-    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    OAuthRequest request = new OAuthRequest(Verb.POST, PROTECTED_RESOURCE_URL);
+    request.addBodyParameter("status", "this is sparta! *");
     service.signRequest(accessToken, request);
     Response response = request.send();
     System.out.println("Got it! Lets see what we found...");
diff --git a/src/test/java/org/scribe/model/ParameterListTest.java b/src/test/java/org/scribe/model/ParameterListTest.java
new file mode 100644
index 0000000..46f4007
--- /dev/null
+++ b/src/test/java/org/scribe/model/ParameterListTest.java
@@ -0,0 +1,62 @@
+package org.scribe.model;
+
+import java.util.HashMap;
+import java.util.Map;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.scribe.utils.URLUtils;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class ParameterListTest
+{
+  private ParameterList params;
+
+  @Before
+  public void setup()
+  {
+    this.params = new ParameterList();
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionWhenAppendingNullMapToQuerystring()
+  {
+    String url = null;
+    params.appendTo(url);
+  }
+
+  @Test
+  public void shouldAppendNothingToQuerystringIfGivenEmptyMap()
+  {
+    String url = "http://www.example.com";
+    Assert.assertEquals(url, params.appendTo(url));
+  }
+
+  @Test
+  public void shouldAppendParametersToSimpleUrl()
+  {
+    String url = "http://www.example.com";
+    String expectedUrl = "http://www.example.com?param1=value1&param2=value%20with%20spaces";
+
+    params.add("param1", "value1");
+    params.add("param2", "value with spaces");
+
+    url = params.appendTo(url);
+    Assert.assertEquals(url, expectedUrl);
+  }
+
+  @Test
+  public void shouldAppendParametersToUrlWithQuerystring()
+  {
+    String url = "http://www.example.com?already=present";
+    String expectedUrl = "http://www.example.com?already=present&param1=value1&param2=value%20with%20spaces";
+
+    params.add("param1", "value1");
+    params.add("param2", "value with spaces");
+
+    url = params.appendTo(url);
+    Assert.assertEquals(url, expectedUrl);
+  }
+}
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index 5bf46db..f2ddc93 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -34,8 +34,7 @@ public class RequestTest
   {
     assertEquals(2, getRequest.getQueryStringParams().size());
     assertEquals(0, postRequest.getQueryStringParams().size());
-    assertTrue(getRequest.getQueryStringParams().containsKey("qsparam"));
-    assertTrue(getRequest.getQueryStringParams().get("qsparam").equals("value"));
+    assertTrue(getRequest.getQueryStringParams().contains(new Parameter("qsparam", "value")));
   }
 
   @Test
@@ -51,7 +50,7 @@ public class RequestTest
   @Test
   public void shouldSetBodyParamsAndAddContentLength()
   {
-    assertEquals("param=value&param+with+spaces=value+with+spaces", postRequest.getBodyContents());
+    assertEquals("param=value&param%20with%20spaces=value%20with%20spaces", postRequest.getBodyContents());
     postRequest.send();
     assertTrue(connection.getHeaders().containsKey("Content-Length"));
   }
@@ -77,7 +76,7 @@ public class RequestTest
   @Test
   public void shouldHandleQueryStringSpaceEncodingProperly()
   {
-    assertTrue(getRequest.getQueryStringParams().get("other param").equals("value with spaces"));
+    assertTrue(getRequest.getQueryStringParams().contains(new Parameter("other param","value with spaces")));
   }
 
   @Test
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
index 7927d51..f218077 100644
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ b/src/test/java/org/scribe/utils/URLUtilsTest.java
@@ -101,51 +101,6 @@ public class URLUtilsTest
     URLUtils.formURLDecode(toDecode);
   }
 
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowExceptionWhenAppendingNullMapToQuerystring()
-  {
-    String url = "http://www.example.com";
-    Map<String, String> nullMap = null;
-    URLUtils.appendParametersToQueryString(url, nullMap);
-  }
-
-  @Test
-  public void shouldAppendNothingToQuerystringIfGivenEmptyMap()
-  {
-    String url = "http://www.example.com";
-    Map<String, String> emptyMap = new HashMap<String, String>();
-    String newUrl = URLUtils.appendParametersToQueryString(url, emptyMap);
-    Assert.assertEquals(url, newUrl);
-  }
-
-  @Test
-  public void shouldAppendParametersToSimpleUrl()
-  {
-    String url = "http://www.example.com";
-    String expectedUrl = "http://www.example.com?param1=value1&param2=value+with+spaces";
-
-    Map<String, String> params = new HashMap<String, String>();
-    params.put("param1", "value1");
-    params.put("param2", "value with spaces");
-
-    url = URLUtils.appendParametersToQueryString(url, params);
-    Assert.assertEquals(url, expectedUrl);
-  }
-
-  @Test
-  public void shouldAppendParametersToUrlWithQuerystring()
-  {
-    String url = "http://www.example.com?already=present";
-    String expectedUrl = "http://www.example.com?already=present&param1=value1&param2=value+with+spaces";
-
-    Map<String, String> params = new HashMap<String, String>();
-    params.put("param1", "value1");
-    params.put("param2", "value with spaces");
-
-    url = URLUtils.appendParametersToQueryString(url, params);
-    Assert.assertEquals(url, expectedUrl);
-  }
-
   @Test
   public void shouldPercentEncodePlusSymbol()
   {

commit b380b3af3db142991df87e7b36d84d3f9041b07c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 14 15:46:07 2011 -0300

    removed MapUtils

diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index dcf77e6..4dd2864 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -35,8 +35,7 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
     params.addAll(request.getQueryStringParams());
     params.addAll(request.getBodyParams());
     params.addAll(new ParameterList(request.getOauthParameters()));
-    params.sort();
-    return params.asOauthBaseString();
+    return params.sort().asOauthBaseString();
   }
 
   private void checkPreconditions(OAuthRequest request)
diff --git a/src/main/java/org/scribe/model/ParameterList.java b/src/main/java/org/scribe/model/ParameterList.java
index 3c71991..100f92e 100644
--- a/src/main/java/org/scribe/model/ParameterList.java
+++ b/src/main/java/org/scribe/model/ParameterList.java
@@ -26,7 +26,12 @@ public class ParameterList
   {
     params = new ArrayList<Parameter>();
   }
-  
+
+  ParameterList(List<Parameter> params)
+  {
+    this.params = new ArrayList<Parameter>(params);
+  }
+
   public ParameterList(Map<String, String> map)
   {
     this();
@@ -110,8 +115,10 @@ public class ParameterList
     return params.size();
   }
 
-  public void sort()
+  public ParameterList sort()
   {
-    Collections.sort(params);
+    ParameterList sorted = new ParameterList(params);
+    Collections.sort(sorted.params);
+    return sorted;
   }
 }
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
deleted file mode 100644
index 18f507e..0000000
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package org.scribe.utils;
-
-import java.util.*;
-
-/**
- * Utils for {@link Map} manipulation
- * 
- * @author Pablo Fernandez
- */
-public class MapUtils
-{
-  private static final String EMPTY_STRING = "";
-  private static final String PAIR_SEPARATOR = "=";
-  private static final String PARAM_SEPARATOR = "&";
-
-  /**
-   * Sorts a Map
-   * 
-   * @param map unsorted map
-   * @return sorted map
-   */
-  public static final Map<String, String> sort(Map<String, String> map)
-  {
-    Preconditions.checkNotNull(map, "Cannot sort a null object.");
-
-    Map<String, String> sorted = new LinkedHashMap<String, String>();
-    for (String key : getSortedKeys(map))
-    {
-      sorted.put(key, map.get(key));
-    }
-    return sorted;
-  }
-
-  private static List<String> getSortedKeys(Map<String, String> map)
-  {
-    List<String> keys = new ArrayList<String>(map.keySet());
-    Collections.sort(keys);
-    return keys;
-  }
-
-  /**
-   * Form-urlDecodes and appends all keys from the source {@link Map} to the
-   * target {@link Map}
-   *
-   * @param source Map from where the keys get copied and decoded
-   * @param target Map where the decoded keys are copied to
-   */
-  public static void decodeAndAppendEntries(Map<String, String> source, Map<String, String> target)
-  {
-    for (String key: source.keySet())
-    {
-      target.put(URLUtils.percentEncode(key), URLUtils.percentEncode(source.get(key)));
-    }
-  }
-
-  /**
-   * Concats a key-value map into a querystring-like String
-   *
-   * @param params key-value map
-   * @return querystring-like String
-   */
-  public static String concatSortedPercentEncodedParams(Map<String, String> params)
-  {
-    StringBuilder result = new StringBuilder();
-    for (String key : params.keySet())
-    {
-      result.append(key).append(PAIR_SEPARATOR);
-      result.append(params.get(key)).append(PARAM_SEPARATOR);
-    }
-    return result.toString().substring(0, result.length() - 1);
-  }
-}
diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
index 8fe872f..edc101d 100644
--- a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -41,7 +41,7 @@ public class BaseStringExtractorTest
     OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com");
     extractor.extract(request);
   }
-  
+
   @Test
   public void shouldProperlyEncodeSpaces()
   {
diff --git a/src/test/java/org/scribe/model/ParameterListTest.java b/src/test/java/org/scribe/model/ParameterListTest.java
index 46f4007..bc818d0 100644
--- a/src/test/java/org/scribe/model/ParameterListTest.java
+++ b/src/test/java/org/scribe/model/ParameterListTest.java
@@ -1,12 +1,17 @@
 package org.scribe.model;
 
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.scribe.utils.URLUtils;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+
 /**
  * @author: Pablo Fernandez
  */
@@ -59,4 +64,33 @@ public class ParameterListTest
     url = params.appendTo(url);
     Assert.assertEquals(url, expectedUrl);
   }
+
+  @Test
+  public void shouldProperlySortParameters()
+  {
+    params.add("param1", "v1");
+    params.add("param6", "v2");
+    params.add("a_param", "v3");
+    params.add("param2", "v4");
+    Assert.assertEquals("a_param=v3&param1=v1&param2=v4&param6=v2", params.sort().asFormUrlEncodedString());
+  }
+
+  @Test
+  public void shouldProperlySortParametersWithTheSameName()
+  {
+    params.add("param1", "v1");
+    params.add("param6", "v2");
+    params.add("a_param", "v3");
+    params.add("param2", "v4");
+    Assert.assertEquals("a_param=v3&param1=v1&param2=v4&param6=v2", params.sort().asFormUrlEncodedString());
+  }
+
+  @Test
+  public void shouldNotModifyTheOriginalParameterList()
+  {
+    params.add("param1", "v1");
+    params.add("param6", "v2");
+
+    assertNotSame(params, params.sort());
+  }
 }
diff --git a/src/test/java/org/scribe/utils/MapUtilsTest.java b/src/test/java/org/scribe/utils/MapUtilsTest.java
deleted file mode 100644
index da7f5ca..0000000
--- a/src/test/java/org/scribe/utils/MapUtilsTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package org.scribe.utils;
-
-import static org.junit.Assert.*;
-
-import java.util.*;
-
-import org.junit.*;
-
-public class MapUtilsTest
-{
-
-  private Map<String, String> unsorted;
-
-  @Before
-  public void setup()
-  {
-    unsorted = new LinkedHashMap<String, String>();
-    unsorted.put("d", "fourth");
-    unsorted.put("a", "first");
-    unsorted.put("c", "third");
-    unsorted.put("b", "second");
-  }
-
-  @Test
-  public void shouldSortMap()
-  {
-    Map<String, String> sorted = MapUtils.sort(unsorted);
-    List<String> values = new ArrayList<String>(sorted.values());
-    assertEquals("first", values.get(0));
-    assertEquals("second", values.get(1));
-    assertEquals("third", values.get(2));
-    assertEquals("fourth", values.get(3));
-  }
-
-  @Test
-  public void shouldNotModifyTheOriginalMap()
-  {
-    Map<String, String> sorted = MapUtils.sort(unsorted);
-    assertNotSame(sorted, unsorted);
-
-    List<String> values = new ArrayList<String>(unsorted.values());
-    assertEquals("fourth", values.get(0));
-    assertEquals("first", values.get(1));
-    assertEquals("third", values.get(2));
-    assertEquals("second", values.get(3));
-  }
-
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowExceptionForNullMap()
-  {
-    MapUtils.sort(null);
-  }
-}

commit 83b62f607993074867c0cffec6cdc0253f921628
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 14 16:17:14 2011 -0300

    removed URLUtils

diff --git a/src/main/java/org/scribe/builder/api/FacebookApi.java b/src/main/java/org/scribe/builder/api/FacebookApi.java
index d85ff3b..996a651 100644
--- a/src/main/java/org/scribe/builder/api/FacebookApi.java
+++ b/src/main/java/org/scribe/builder/api/FacebookApi.java
@@ -3,7 +3,6 @@ package org.scribe.builder.api;
 import org.scribe.model.*;
 
 import org.scribe.utils.*;
-import static org.scribe.utils.URLUtils.*;
 
 public class FacebookApi extends DefaultApi20
 {
@@ -24,11 +23,11 @@ public class FacebookApi extends DefaultApi20
     // Append scope if present
     if(config.hasScope())
     {
-     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
     }
     else
     {
-      return String.format(AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
     }
   }
 }
diff --git a/src/main/java/org/scribe/builder/api/Foursquare2Api.java b/src/main/java/org/scribe/builder/api/Foursquare2Api.java
index 5bb0fdc..d11def9 100644
--- a/src/main/java/org/scribe/builder/api/Foursquare2Api.java
+++ b/src/main/java/org/scribe/builder/api/Foursquare2Api.java
@@ -18,7 +18,7 @@ public class Foursquare2Api extends DefaultApi20
   public String getAuthorizationUrl(OAuthConfig config)
   {
     Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Foursquare2 does not support OOB");
-    return String.format(AUTHORIZATION_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+    return String.format(AUTHORIZATION_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
   }
 
   @Override
diff --git a/src/main/java/org/scribe/builder/api/LiveApi.java b/src/main/java/org/scribe/builder/api/LiveApi.java
index 789631f..18140f6 100644
--- a/src/main/java/org/scribe/builder/api/LiveApi.java
+++ b/src/main/java/org/scribe/builder/api/LiveApi.java
@@ -1,13 +1,9 @@
 package org.scribe.builder.api;
 
 import org.scribe.extractors.*;
-
 import org.scribe.model.*;
-
 import org.scribe.utils.*;
 
-import static org.scribe.utils.URLUtils.*;
-
 public class LiveApi extends DefaultApi20
 {
 
@@ -28,10 +24,11 @@ public class LiveApi extends DefaultApi20
 		// Append scope if present
 		if (config.hasScope())
 		{
-			return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope()));
-		} else
+			return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
+		}
+    else
 		{
-			return String.format(AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));
+			return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
 		}
 	}
 
diff --git a/src/main/java/org/scribe/builder/api/VkontakteApi.java b/src/main/java/org/scribe/builder/api/VkontakteApi.java
index 6bb4b6b..83050e3 100644
--- a/src/main/java/org/scribe/builder/api/VkontakteApi.java
+++ b/src/main/java/org/scribe/builder/api/VkontakteApi.java
@@ -25,11 +25,11 @@ public class VkontakteApi extends DefaultApi20
     Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Vkontakte does not support OOB");
     if(config.hasScope())// Appending scope if present
     {
-     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()),URLUtils.formURLEncode(config.getScope()));
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
     }
     else
     {
-      return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
     }
   }
 
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index 4dd2864..ca21a0d 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -1,7 +1,5 @@
 package org.scribe.extractors;
 
-import java.util.*;
-
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
@@ -23,8 +21,8 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
   public String extract(OAuthRequest request)
   {
     checkPreconditions(request);
-    String verb = URLUtils.percentEncode(request.getVerb().name());
-    String url = URLUtils.percentEncode(request.getSanitizedUrl());
+    String verb = OAuthEncoder.encode(request.getVerb().name());
+    String url = OAuthEncoder.encode(request.getSanitizedUrl());
     String params = getSortedAndEncodedParams(request);
     return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
   }
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index 6cc1981..73c4ada 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -32,7 +32,7 @@ public class HeaderExtractorImpl implements HeaderExtractor
       { 
         header.append(PARAM_SEPARATOR);
       }
-      header.append(String.format("%s=\"%s\"", key, URLUtils.percentEncode(parameters.get(key))));
+      header.append(String.format("%s=\"%s\"", key, OAuthEncoder.encode(parameters.get(key))));
     }
     return header.toString();
   }
diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
index cf75b13..1eb22ad 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -25,7 +25,7 @@ public class TokenExtractor20Impl implements AccessTokenExtractor
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.find())
     {
-      String token = URLUtils.formURLDecode(matcher.group(1));
+      String token = OAuthEncoder.decode(matcher.group(1));
       return new Token(token, EMPTY_SECRET, response);
     } 
     else
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index 85b369a..c48fe35 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -34,7 +34,7 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
     Matcher matcher = p.matcher(response);
     if (matcher.find() && matcher.groupCount() >= 1)
     {
-      return URLUtils.formURLDecode(matcher.group(1));
+      return OAuthEncoder.decode(matcher.group(1));
     }
     else
     {
diff --git a/src/main/java/org/scribe/model/ParameterList.java b/src/main/java/org/scribe/model/ParameterList.java
index 100f92e..8bca32f 100644
--- a/src/main/java/org/scribe/model/ParameterList.java
+++ b/src/main/java/org/scribe/model/ParameterList.java
@@ -1,14 +1,13 @@
 package org.scribe.model;
 
 import java.io.UnsupportedEncodingException;
-import java.net.URL;
 import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import org.scribe.utils.OAuthEncoder;
 import org.scribe.utils.Preconditions;
-import org.scribe.utils.URLUtils;
 
 /**
  * @author: Pablo Fernandez
@@ -98,8 +97,8 @@ public class ParameterList
       for (String param : queryString.split(PARAM_SEPARATOR))
       {
         String pair[] = param.split(PAIR_SEPARATOR);
-        String key = URLUtils.formURLDecode(pair[0]);
-        String value = pair.length > 1 ? URLUtils.formURLDecode(pair[1]) : EMPTY_STRING;
+        String key = OAuthEncoder.decode(pair[0]);
+        String value = pair.length > 1 ? OAuthEncoder.decode(pair[1]) : EMPTY_STRING;
         params.add(new Parameter(key, value));
       }
     }
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 68a0d11..cadda68 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -30,7 +30,7 @@ public class HMACSha1SignatureService implements SignatureService
     {
       Preconditions.checkEmptyString(baseString, "Base string cant be null or empty string");
       Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
-      return doSign(baseString, URLUtils.percentEncode(apiSecret) + '&' + URLUtils.percentEncode(tokenSecret));
+      return doSign(baseString, OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret));
     } 
     catch (Exception e)
     {
diff --git a/src/main/java/org/scribe/services/PlaintextSignatureService.java b/src/main/java/org/scribe/services/PlaintextSignatureService.java
index 3146ca5..b71ca97 100644
--- a/src/main/java/org/scribe/services/PlaintextSignatureService.java
+++ b/src/main/java/org/scribe/services/PlaintextSignatureService.java
@@ -21,7 +21,7 @@ public class PlaintextSignatureService implements SignatureService
     try
     {
       Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
-      return URLUtils.percentEncode(apiSecret) + '&' + URLUtils.percentEncode(tokenSecret);
+      return OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret);
     }
     catch (Exception e)
     {
diff --git a/src/main/java/org/scribe/utils/OAuthEncoder.java b/src/main/java/org/scribe/utils/OAuthEncoder.java
index 0d9ec9f..10beabd 100644
--- a/src/main/java/org/scribe/utils/OAuthEncoder.java
+++ b/src/main/java/org/scribe/utils/OAuthEncoder.java
@@ -1,12 +1,10 @@
 package org.scribe.utils;
 
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.regex.Pattern;
-import org.scribe.exceptions.OAuthException;
+import java.io.*;
+import java.net.*;
+import java.util.*;
+import java.util.regex.*;
+import org.scribe.exceptions.*;
 
 /**
  * @author: Pablo Fernandez
@@ -52,6 +50,13 @@ public class OAuthEncoder
   public static String decode(String encoded)
   {
     Preconditions.checkNotNull(encoded, "Cannot decode null object");
-    return encoded;
+    try
+    {
+      return URLDecoder.decode(encoded, CHARSET);
+    }
+    catch(UnsupportedEncodingException uee)
+    {
+      throw new OAuthException("Charset not found while decoding string: " + CHARSET, uee);
+    }
   }
 }
diff --git a/src/main/java/org/scribe/utils/URLUtils.java b/src/main/java/org/scribe/utils/URLUtils.java
deleted file mode 100644
index 7c655ad..0000000
--- a/src/main/java/org/scribe/utils/URLUtils.java
+++ /dev/null
@@ -1,128 +0,0 @@
-package org.scribe.utils;
-
-import java.io.*;
-import java.net.*;
-import java.util.*;
-
-/**
- * Utils to deal with URL and url-encodings
- *
- * @author Pablo Fernandez
- */
-public class URLUtils
-{
-  private static final String EMPTY_STRING = "";
-  private static final String UTF_8 = "UTF-8";
-  private static final String PAIR_SEPARATOR = "=";
-  private static final String PARAM_SEPARATOR = "&";
-  private static final char QUERY_STRING_SEPARATOR = '?';
-
-  private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", UTF_8);
-
-  private static final Set<EncodingRule> ENCODING_RULES;
-
-  static
-  {
-    Set<EncodingRule> rules = new HashSet<EncodingRule>();
-    rules.add(new EncodingRule("*","%2A"));
-    rules.add(new EncodingRule("+","%20"));
-    rules.add(new EncodingRule("%7E", "~"));
-    ENCODING_RULES = Collections.unmodifiableSet(rules);
-  }
-
-  /**
-   * Turns a map into a form-urlencoded string
-   * 
-   * @param map any map
-   * @return form-url-encoded string
-   */
-  public static String formURLEncodeMap(Map<String, String> map)
-  {
-    Preconditions.checkNotNull(map, "Cannot url-encode a null object");
-    return (map.size() <= 0) ? EMPTY_STRING : doFormUrlEncode(map);
-  }
-
-  private static String doFormUrlEncode(Map<String, String> map)
-  {
-    StringBuffer encodedString = new StringBuffer(map.size() * 20);
-    for (String key : map.keySet())
-    {
-      encodedString.append(PARAM_SEPARATOR).append(formURLEncode(key));
-      if(map.get(key) != null)
-      {
-        encodedString.append(PAIR_SEPARATOR).append(formURLEncode(map.get(key)));
-      }
-    }
-    return encodedString.toString().substring(1);
-  }
-
-  /**
-   * Percent encodes a string
-   * 
-   * @param string plain string
-   * @return percent encoded string
-   */
-  public static String percentEncode(String string)
-  {
-    String encoded = formURLEncode(string);
-    for (EncodingRule rule : ENCODING_RULES)
-    {
-      encoded = rule.apply(encoded);
-    }
-    return encoded;
-  }
-
-  /**
-   * Translates a string into application/x-www-form-urlencoded format
-   *
-   * @param plain
-   * @return form-urlencoded string
-   */
-  public static String formURLEncode(String string)
-  {
-    Preconditions.checkNotNull(string, "Cannot encode null string");
-    try
-    {
-      return URLEncoder.encode(string, UTF_8);
-    } 
-    catch (UnsupportedEncodingException uee)
-    {
-      throw new IllegalStateException(ERROR_MSG, uee);
-    }
-  }
-
-  /**
-   * Decodes a application/x-www-form-urlencoded string
-   * 
-   * @param string form-urlencoded string
-   * @return plain string
-   */
-  public static String formURLDecode(String string)
-  {
-    Preconditions.checkNotNull(string, "Cannot decode null string");
-    try
-    {
-      return URLDecoder.decode(string, UTF_8);
-    }
-    catch (UnsupportedEncodingException uee)
-    {
-      throw new IllegalStateException(ERROR_MSG, uee);
-    }
-  }
-
-  private static final class EncodingRule
-  {
-    private final String ch;
-    private final String toCh;
-
-    EncodingRule(String ch, String toCh)
-    {
-      this.ch = ch;
-      this.toCh = toCh;
-    }
-
-    String apply(String string) {
-      return string.replace(ch, toCh);
-    }
-  }
-}
diff --git a/src/test/java/org/scribe/model/ParameterListTest.java b/src/test/java/org/scribe/model/ParameterListTest.java
index bc818d0..657e8e2 100644
--- a/src/test/java/org/scribe/model/ParameterListTest.java
+++ b/src/test/java/org/scribe/model/ParameterListTest.java
@@ -1,13 +1,8 @@
 package org.scribe.model;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.scribe.utils.URLUtils;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
@@ -81,8 +76,8 @@ public class ParameterListTest
     params.add("param1", "v1");
     params.add("param6", "v2");
     params.add("a_param", "v3");
-    params.add("param2", "v4");
-    Assert.assertEquals("a_param=v3&param1=v1&param2=v4&param6=v2", params.sort().asFormUrlEncodedString());
+    params.add("param1", "v4");
+    Assert.assertEquals("a_param=v3&param1=v1&param1=v4&param6=v2", params.sort().asFormUrlEncodedString());
   }
 
   @Test
diff --git a/src/test/java/org/scribe/utils/OAuthEncoderTest.java b/src/test/java/org/scribe/utils/OAuthEncoderTest.java
new file mode 100644
index 0000000..cf986a2
--- /dev/null
+++ b/src/test/java/org/scribe/utils/OAuthEncoderTest.java
@@ -0,0 +1,70 @@
+package org.scribe.utils;
+
+import org.junit.*;
+import static org.junit.Assert.*;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class OAuthEncoderTest
+{
+  @Test
+  public void shouldPercentEncodeString()
+  {
+    String plain = "this is a test &^";
+    String encoded = "this%20is%20a%20test%20%26%5E";
+    assertEquals(encoded, OAuthEncoder.encode(plain));
+  }
+
+  @Test
+  public void shouldFormURLDecodeString()
+  {
+    String encoded = "this+is+a+test+%26%5E";
+    String plain = "this is a test &^";
+    assertEquals(plain, OAuthEncoder.decode(encoded));
+  }
+
+  @Test
+  public void shouldPercentEncodeAllSpecialCharacters()
+  {
+    String plain = "!*'();:@&=+$,/?#[]";
+    String encoded = "%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D";
+    assertEquals(encoded, OAuthEncoder.encode(plain));
+    assertEquals(plain, OAuthEncoder.decode(encoded));
+  }
+
+  @Test
+  public void shouldNotPercentEncodeReservedCharacters()
+  {
+    String plain = "abcde123456-._~";
+    String encoded = plain;
+    assertEquals(encoded, OAuthEncoder.encode(plain));
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfStringToEncodeIsNull()
+  {
+    String toEncode = null;
+    OAuthEncoder.encode(toEncode);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldThrowExceptionIfStringToDecodeIsNull()
+  {
+    String toDecode = null;
+    OAuthEncoder.decode(toDecode);
+  }
+
+  @Test
+  public void shouldPercentEncodeCorrectlyTwitterCodingExamples()
+  {
+    // These tests are part of the Twitter dev examples here -> https://dev.twitter.com/docs/auth/percent-encoding-parameters
+    String sources[] = {"Ladies + Gentlemen", "An encoded string!", "Dogs, Cats & Mice"};
+    String encoded[] = {"Ladies%20%2B%20Gentlemen", "An%20encoded%20string%21", "Dogs%2C%20Cats%20%26%20Mice"};
+
+    for(int i = 0; i < sources.length; i++)
+    {
+      Assert.assertEquals(encoded[i], OAuthEncoder.encode(sources[i]));
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/utils/URLUtilsTest.java b/src/test/java/org/scribe/utils/URLUtilsTest.java
deleted file mode 100644
index f218077..0000000
--- a/src/test/java/org/scribe/utils/URLUtilsTest.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package org.scribe.utils;
-
-import static org.junit.Assert.*;
-
-import java.util.*;
-
-import org.junit.*;
-
-public class URLUtilsTest
-{
-  @Test
-  public void shouldPercentEncodeMap()
-  {
-    Map<String, String> params = new LinkedHashMap<String, String>();
-    params.put("key", "value");
-    params.put("key with spaces", "value with spaces");
-    params.put("&symbols!", "#!");
-
-    String expected = "key=value&key+with+spaces=value+with+spaces&%26symbols%21=%23%21";
-    assertEquals(expected, URLUtils.formURLEncodeMap(params));
-  }
-
-  @Test
-  public void shouldReturnEmptyStringForEmptyMap()
-  {
-    Map<String, String> params = new LinkedHashMap<String, String>();
-    String expected = "";
-    assertEquals(expected, URLUtils.formURLEncodeMap(params));
-  }
-
-  @Test
-  public void shouldFormURLEncodeMapWithMissingValues()
-  {
-    Map<String, String> params = new LinkedHashMap<String, String>();
-    params.put("key", "value");
-    params.put("key with spaces", null);
-
-    String expected = "key=value&key+with+spaces";
-    assertEquals(expected, URLUtils.formURLEncodeMap(params));
-  }
-
-  @Test
-  public void shouldPercentEncodeString()
-  {
-    String toEncode = "this is a test &^";
-    String expected = "this%20is%20a%20test%20%26%5E";
-    assertEquals(expected, URLUtils.percentEncode(toEncode));
-  }
-
-  @Test
-  public void shouldFormURLEncodeString()
-  {
-    String toEncode = "this is a test &^";
-    String expected = "this+is+a+test+%26%5E";
-    assertEquals(expected, URLUtils.formURLEncode(toEncode));
-  }
-
-  @Test
-  public void shouldFormURLDecodeString()
-  {
-    String toDecode = "this+is+a+test+%26%5E";
-    String expected = "this is a test &^";
-    assertEquals(expected, URLUtils.formURLDecode(toDecode));
-  }
-
-  @Test
-  public void shouldPercentEncodeAllSpecialCharacters()
-  {
-    String plain = "!*'();:@&=+$,/?#[]";
-    String encoded = "%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D";
-    assertEquals(encoded, URLUtils.percentEncode(plain));
-    assertEquals(plain, URLUtils.formURLDecode(encoded));
-  }
-
-  @Test
-  public void shouldNotPercentEncodeReservedCharacters()
-  {
-    String plain = "abcde123456-._~";
-    String encoded = plain;
-    assertEquals(encoded, URLUtils.percentEncode(plain));
-  }
-
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowExceptionIfMapIsNull()
-  {
-    Map<String, String> nullMap = null;
-    URLUtils.formURLEncodeMap(nullMap);
-  }
-
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowExceptionIfStringToEncodeIsNull()
-  {
-    String toEncode = null;
-    URLUtils.percentEncode(toEncode);
-  }
-
-  @Test(expected = IllegalArgumentException.class)
-  public void shouldThrowExceptionIfStringToDecodeIsNull()
-  {
-    String toDecode = null;
-    URLUtils.formURLDecode(toDecode);
-  }
-
-  @Test
-  public void shouldPercentEncodePlusSymbol()
-  {
-    String plain = "7aEP+jNAwvjc0mjhqg0nuXPf";
-    String encoded = "7aEP%2BjNAwvjc0mjhqg0nuXPf";
-
-    Assert.assertEquals(encoded, URLUtils.percentEncode(plain));
-  }
-
-  @Test
-  public void shouldURLDecodePlusSymbol()
-  {
-    String encoded = "oauth_verifier=7aEP%2BjNAwvjc0mjhqg0nuXPf";
-    String expected = "oauth_verifier=7aEP+jNAwvjc0mjhqg0nuXPf";
-
-    Assert.assertEquals(expected, URLUtils.formURLDecode(encoded));
-  }
-
-  @Test
-  public void shouldPercentEncodeCorrectlyTwitterCodingExamples()
-  {
-    // These tests are part of the Twitter dev examples here -> https://dev.twitter.com/docs/auth/percent-encoding-parameters
-    String sources[] = {"Ladies + Gentlemen", "An encoded string!", "Dogs, Cats & Mice"};
-    String encoded[] = {"Ladies%20%2B%20Gentlemen", "An%20encoded%20string%21", "Dogs%2C%20Cats%20%26%20Mice"};
-
-    for(int i = 0; i < sources.length; i++)
-    {
-      Assert.assertEquals(encoded[i], URLUtils.percentEncode(sources[i]));
-    }
-  }
-}

commit 3f366589eae65052a8f911d55cfc5a822813541b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 14 17:22:19 2011 -0300

    bounced version numbers

diff --git a/README.textile b/README.textile
index 841635b..5bad822 100644
--- a/README.textile
+++ b/README.textile
@@ -63,7 +63,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.2.3</version>@
+  @<version>1.3.0</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/pom.xml b/pom.xml
index 02a30c7..a3b0196 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.2.3</version>
+  <version>1.3.0</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 61c0b4cc9f503f2774a7cf7ac31c4cd04edb2d2b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 14 17:50:02 2011 -0300

    getCompleteUrl method for getting the whole url (host+resource+querystring)

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 223b1d2..6465c95 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -73,14 +73,24 @@ class Request
 
   private void createConnection() throws IOException
   {
-    String effectiveUrl = querystringParams.appendTo(url);
+    String completeUrl = getCompleteUrl();
     if (connection == null)
     {
       System.setProperty("http.keepAlive", connectionKeepAlive ? "true" : "false");
-      connection = (HttpURLConnection) new URL(effectiveUrl).openConnection();
+      connection = (HttpURLConnection) new URL(completeUrl).openConnection();
     }
   }
 
+  /**
+   * Returns the complete url (host + resource + encoded querystring parameters).
+   *
+   * @return the complete url.
+   */
+  public String getCompleteUrl()
+  {
+    return querystringParams.appendTo(url);
+  }
+
   Response doSend() throws IOException
   {
     connection.setRequestMethod(this.verb.name());
diff --git a/src/test/java/org/scribe/model/RequestTest.java b/src/test/java/org/scribe/model/RequestTest.java
index f2ddc93..c473e77 100644
--- a/src/test/java/org/scribe/model/RequestTest.java
+++ b/src/test/java/org/scribe/model/RequestTest.java
@@ -73,6 +73,15 @@ public class RequestTest
     assertEquals(3, request.getQueryStringParams().size());
   }
 
+   @Test
+  public void shouldReturnTheCompleteUrl()
+  {
+    Request request = new Request(Verb.GET, "http://example.com?one=val");
+    request.addQuerystringParameter("two", "other val");
+    request.addQuerystringParameter("more", "params");
+    assertEquals("http://example.com?one=val&two=other%20val&more=params", request.getCompleteUrl());
+  }
+
   @Test
   public void shouldHandleQueryStringSpaceEncodingProperly()
   {

commit 0a63f935d231eb50ba9db52c0735fbcb96e7589c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Dec 16 16:13:57 2011 -0300

    added 'debug' method to service builder

diff --git a/README.textile b/README.textile
index 5bad822..f88eaca 100644
--- a/README.textile
+++ b/README.textile
@@ -76,6 +76,8 @@ h1. Questions?
 
 Feel free to drop me an email, but there's already a "StackOvferflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
 
+Note that it really helps to run scribe on **debug** mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
+
 h1. About me
 
 "LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85
diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index 10d0802..b6d3c2c 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -1,5 +1,6 @@
 package org.scribe.builder;
 
+import java.io.*;
 import org.scribe.builder.api.*;
 import org.scribe.exceptions.*;
 import org.scribe.model.*;
@@ -21,6 +22,7 @@ public class ServiceBuilder
   private Api api;
   private String scope;
   private SignatureType signatureType;
+  private OutputStream debugStream;
   
   /**
    * Default constructor
@@ -28,6 +30,8 @@ public class ServiceBuilder
   public ServiceBuilder()
   {
     this.callback = OAuthConstants.OUT_OF_BAND;
+    this.signatureType = SignatureType.Header;
+    this.debugStream = null;
   }
   
   /**
@@ -136,6 +140,19 @@ public class ServiceBuilder
     this.signatureType = type;
     return this;
   }
+
+  public ServiceBuilder debugStream(OutputStream stream)
+  {
+    Preconditions.checkNotNull(stream, "debug stream can't be null");
+    this.debugStream = stream;
+    return this;
+  }
+
+  public ServiceBuilder debug()
+  {
+    this.debugStream(System.out);
+    return this;
+  }
   
   /**
    * Returns the fully configured {@link OAuthService}
@@ -147,6 +164,6 @@ public class ServiceBuilder
     Preconditions.checkNotNull(api, "You must specify a valid api through the provider() method");
     Preconditions.checkEmptyString(apiKey, "You must provide an api key");
     Preconditions.checkEmptyString(apiSecret, "You must provide an api secret");
-    return api.createService(new OAuthConfig(apiKey, apiSecret, callback, signatureType, scope));
+    return api.createService(new OAuthConfig(apiKey, apiSecret, callback, signatureType, scope, debugStream));
   }
 }
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 314d2d9..a6f0522 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -1,5 +1,7 @@
 package org.scribe.model;
 
+import java.io.*;
+
 /**
  * Parameter object that groups OAuth config values
  * 
@@ -12,19 +14,21 @@ public class OAuthConfig
   private final String callback;
   private final SignatureType signatureType;
   private final String scope;
+  private final OutputStream debugStream;
   
   public OAuthConfig(String key, String secret)
   {
-    this(key, secret, null, null, null);
+    this(key, secret, null, null, null, null);
   }
 
-  public OAuthConfig(String key, String secret, String callback, SignatureType type, String scope)
+  public OAuthConfig(String key, String secret, String callback, SignatureType type, String scope, OutputStream stream)
   {
     this.apiKey = key;
     this.apiSecret = secret;
-    this.callback = callback != null ? callback : OAuthConstants.OUT_OF_BAND;
-    this.signatureType = (type != null) ? type : SignatureType.Header;
+    this.callback = callback;
+    this.signatureType = type;
     this.scope = scope;
+    this.debugStream = stream;
   }
 
   public String getApiKey()
@@ -56,4 +60,20 @@ public class OAuthConfig
   {
     return scope != null;
   }
-}
\ No newline at end of file
+
+  public void log(String message)
+  {
+    if (debugStream != null)
+    {
+      message = message + "\n";
+      try
+      {
+        debugStream.write(message.getBytes("UTF8"));
+      }
+      catch (Exception e)
+      {
+        // do nothing.
+      }
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 91e7b71..b847b2d 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -4,6 +4,7 @@ import java.util.*;
 
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
+import org.scribe.utils.*;
 
 /**
  * OAuth 1.0a implementation of {@link OAuthService}
@@ -34,12 +35,21 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getRequestToken()
   {
+    config.log("obtaining request token from " + api.getRequestTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
+
+    config.log("setting oauth_callback to " + config.getCallback());
     request.addOAuthParameter(OAuthConstants.CALLBACK, config.getCallback());
     addOAuthParams(request, OAuthConstants.EMPTY_TOKEN);
-    addSignature(request);
+    appendSignature(request);
+
+    config.log("sending request...");
     Response response = request.send();
-    return api.getRequestTokenExtractor().extract(response.getBody());
+    String body = response.getBody();
+
+    config.log("response status code: " + response.getCode());
+    config.log("response body: " + body);
+    return api.getRequestTokenExtractor().extract(body);
   }
 
   private void addOAuthParams(OAuthRequest request, Token token)
@@ -51,6 +61,8 @@ public class OAuth10aServiceImpl implements OAuthService
     request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
     if(config.hasScope()) request.addOAuthParameter(OAuthConstants.SCOPE, config.getScope());
     request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, token));
+
+    config.log("appended additional OAuth parameters: " + MapUtils.toString(request.getOauthParameters()));
   }
 
   /**
@@ -58,11 +70,14 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getAccessToken(Token requestToken, Verifier verifier)
   {
+    config.log("obtaining access token from " + api.getAccessTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
     request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
     request.addOAuthParameter(OAuthConstants.VERIFIER, verifier.getValue());
+
+    config.log("setting token to: " + requestToken + " and verifier to: " + verifier);
     addOAuthParams(request, requestToken);
-    addSignature(request);
+    appendSignature(request);
     Response response = request.send();
     return api.getAccessTokenExtractor().extract(response.getBody());
   }
@@ -72,9 +87,12 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public void signRequest(Token token, OAuthRequest request)
   {
+    config.log("signing request: " + request.getCompleteUrl());
     request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
+
+    config.log("setting token to: " + token);
     addOAuthParams(request, token);
-    addSignature(request);
+    appendSignature(request);
   }
 
   /**
@@ -95,19 +113,28 @@ public class OAuth10aServiceImpl implements OAuthService
   
   private String getSignature(OAuthRequest request, Token token)
   {
+    config.log("generating signature...");
     String baseString = api.getBaseStringExtractor().extract(request);
-    return api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
+    String signature = api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
+
+    config.log("base string is: " + baseString);
+    config.log("signature is: " + signature);
+    return signature;
   }
 
-  private void addSignature(OAuthRequest request)
+  private void appendSignature(OAuthRequest request)
   {
     switch (config.getSignatureType())
     {
       case Header:
+        config.log("using Http Header signature");
+
         String oauthHeader = api.getHeaderExtractor().extract(request);
         request.addHeader(OAuthConstants.HEADER, oauthHeader);
         break;
       case QueryString:
+        config.log("using Querystring signature");
+
         for (Map.Entry<String, String> entry : request.getOauthParameters().entrySet())
         {
           request.addQuerystringParameter(entry.getKey(), entry.getValue());
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
new file mode 100644
index 0000000..9e461b8
--- /dev/null
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -0,0 +1,22 @@
+package org.scribe.utils;
+
+import java.util.Map;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class MapUtils
+{
+  public static <K,V> String toString(Map<K,V> map)
+  {
+    if (map == null) return "";
+    if (map.isEmpty()) return "{}";
+
+    StringBuilder result = new StringBuilder();
+    for(Map.Entry<K,V> entry : map.entrySet())
+    {
+      result.append(String.format(", %s -> %s ", entry.getKey().toString(), entry.getValue().toString()));
+    }
+    return "{" + result.substring(1) + "}";
+  }
+}
diff --git a/src/test/java/org/scribe/builder/ServiceBuilderTest.java b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
index fca633b..75a6061 100644
--- a/src/test/java/org/scribe/builder/ServiceBuilderTest.java
+++ b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
@@ -63,8 +63,7 @@ public class ServiceBuilderTest
   public static class ApiMock implements Api
   {
     public static OAuthConfig config;
-    
-    @Override
+
     public OAuthService createService(OAuthConfig config)
     {
       ApiMock.config = config;
diff --git a/src/test/java/org/scribe/model/OAuthConfigTest.java b/src/test/java/org/scribe/model/OAuthConfigTest.java
deleted file mode 100644
index 973d401..0000000
--- a/src/test/java/org/scribe/model/OAuthConfigTest.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.scribe.model;
-
-import static org.junit.Assert.*;
-
-import org.junit.*;
-
-public class OAuthConfigTest
-{
-
-  @Test
-  public void shouldReturnDefaultValuesIfNotSet()
-  {
-    OAuthConfig config = new OAuthConfig("key", "secret");
-    assertEquals(OAuthConstants.OUT_OF_BAND, config.getCallback());
-    assertEquals(SignatureType.Header, config.getSignatureType());
-    assertFalse(config.hasScope());
-  }
-
-  @Test
-  public void shouldOverrideDefaultsIfSet()
-  {
-    OAuthConfig config = new OAuthConfig("key", "secret", "http://callback", SignatureType.Header, "scope");
-    assertEquals("http://callback", config.getCallback());
-    assertEquals("key", config.getApiKey());
-    assertEquals("secret", config.getApiSecret());
-  }
-
-}
diff --git a/src/test/java/org/scribe/utils/MapUtilsTest.java b/src/test/java/org/scribe/utils/MapUtilsTest.java
new file mode 100644
index 0000000..f44a0f5
--- /dev/null
+++ b/src/test/java/org/scribe/utils/MapUtilsTest.java
@@ -0,0 +1,35 @@
+package org.scribe.utils;
+
+import java.util.*;
+import org.junit.*;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class MapUtilsTest
+{
+
+  @Test
+  public void shouldPrettyPrintMap()
+  {
+    Map<Integer, String> map = new HashMap<Integer, String>();
+    map.put(1, "one");
+    map.put(2, "two");
+    map.put(3, "three");
+    map.put(4, "four");
+    Assert.assertEquals("{ 1 -> one , 2 -> two , 3 -> three , 4 -> four }", MapUtils.toString(map));
+  }
+
+  @Test
+  public void shouldHandleEmptyMap()
+  {
+    Map<Integer, String> map = new HashMap<Integer, String>();
+    Assert.assertEquals("{}", MapUtils.toString(map));
+  }
+
+  @Test
+  public void shouldHandleNullInputs()
+  {
+    Assert.assertEquals("", MapUtils.toString(null));
+  }
+}

commit b5f75628bb9164dad5090aa419ec6df733e28146
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Dec 16 22:25:49 2011 -0300

    updated changelog

diff --git a/changelog.txt b/changelog.txt
index 8723f60..7895748 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -71,3 +71,7 @@
   * FEATURE: Plurk Mobile Api
   * FEATURE: Kaixin and QWeibo Apis
   * FEATURE: SimpleGeo Api
+
+[1.3.0]
+  * FEATURE: Multiple parameters with the same name supported.
+  * FEAUTRE: 'debug' mode that logs useful information about the signature making

commit aa5e27b263b24efb5a4ee50b9d1cf22ee4f2ebee
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Dec 17 00:53:18 2011 -0300

    linked to debug mode wiki

diff --git a/README.textile b/README.textile
index f88eaca..7f4f664 100644
--- a/README.textile
+++ b/README.textile
@@ -76,7 +76,7 @@ h1. Questions?
 
 Feel free to drop me an email, but there's already a "StackOvferflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
 
-Note that it really helps to run scribe on **debug** mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
+Note that it really helps to run scribe on "debug mode":https://github.com/fernandezpablo85/scribe-java/wiki/debug-mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
 
 h1. About me
 

commit 6cfdf973f8918e5e8d8874d57358dc6237efc2f0
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Dec 28 11:45:45 2011 -0300

    relaxed restrictions on OAuth callbacks

diff --git a/src/main/java/org/scribe/builder/ServiceBuilder.java b/src/main/java/org/scribe/builder/ServiceBuilder.java
index b6d3c2c..27f3c8f 100644
--- a/src/main/java/org/scribe/builder/ServiceBuilder.java
+++ b/src/main/java/org/scribe/builder/ServiceBuilder.java
@@ -84,7 +84,7 @@ public class ServiceBuilder
    */
   public ServiceBuilder callback(String callback)
   {
-    Preconditions.checkValidOAuthCallback(callback, "Callback must be a valid URL or 'oob'");
+    Preconditions.checkNotNull(callback, "Callback can't be null");
     this.callback = callback;
     return this;
   }
diff --git a/src/test/java/org/scribe/builder/ServiceBuilderTest.java b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
index 75a6061..8112d79 100644
--- a/src/test/java/org/scribe/builder/ServiceBuilderTest.java
+++ b/src/test/java/org/scribe/builder/ServiceBuilderTest.java
@@ -46,9 +46,9 @@ public class ServiceBuilderTest
   }
 
   @Test(expected=IllegalArgumentException.class)
-  public void shouldNotAcceptAnInvalidUrlAsCallback()
+  public void shouldNotAcceptNullAsCallback()
   {
-    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").callback("example.com").build(); 
+    builder.provider(ApiMock.class).apiKey("key").apiSecret("secret").callback(null).build(); 
   }
 
   @Test

commit f77391eca491bc10edbb1bdd841c1a9dbf6f6c7b
Author: softprops <d.tangren@gmail.com>
Date:   Mon Sep 26 11:38:16 2011 -0400

    Add meetup.com oauth adapter

diff --git a/changelog.txt b/changelog.txt
index 7895748..73281ed 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -75,3 +75,6 @@
 [1.3.0]
   * FEATURE: Multiple parameters with the same name supported.
   * FEAUTRE: 'debug' mode that logs useful information about the signature making
+
+[1.3.1]
+  * FEATURE: Meetup.com Api
diff --git a/src/main/java/org/scribe/builder/api/MeetupApi.java b/src/main/java/org/scribe/builder/api/MeetupApi.java
new file mode 100644
index 0000000..8f63e39
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/MeetupApi.java
@@ -0,0 +1,30 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+/**
+ * OAuth access to the Meetup.com API.
+ * For more information visit http://www.meetup.com/api
+ */
+public class MeetupApi extends DefaultApi10a
+{
+	private static final String AUTHORIZE_URL = "http://www.meetup.com/authenticate?oauth_token=%s";
+
+	@Override
+	public String getRequestTokenEndpoint()
+	{
+		return "http://api.meetup.com/oauth/request/";
+	}
+
+	@Override
+	public String getAccessTokenEndpoint()
+	{
+		return "http://api.meetup.com/oauth/access/";
+	}
+
+	@Override
+	public String getAuthorizationUrl(Token requestToken)
+	{
+		return String.format(AUTHORIZE_URL, requestToken.getToken());
+	}
+}
diff --git a/src/test/java/org/scribe/examples/MeetupExample.java b/src/test/java/org/scribe/examples/MeetupExample.java
new file mode 100644
index 0000000..2185b5c
--- /dev/null
+++ b/src/test/java/org/scribe/examples/MeetupExample.java
@@ -0,0 +1,62 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.MeetupApi;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+public class MeetupExample
+{
+	  private static final String PROTECTED_RESOURCE_URL = "http://api.meetup.com/2/member/self";
+
+	  public static void main(String[] args)
+	  {
+	    OAuthService service = new ServiceBuilder()
+	                                .provider(MeetupApi.class)
+	                                .apiKey("j1khkp0dus323ftve0sdcv6ffe")
+	                                .apiSecret("6s6gt6q59gvfjtsvgcmht62gq4")
+	                                .build();
+	    Scanner in = new Scanner(System.in);
+
+	    System.out.println("=== Meetup's OAuth Workflow ===");
+	    System.out.println();
+
+	    // Obtain the Request Token
+	    System.out.println("Fetching the Request Token...");
+	    Token requestToken = service.getRequestToken();
+	    System.out.println("Got the Request Token!");
+	    System.out.println();
+
+	    System.out.println("Now go and authorize Scribe here:");
+	    System.out.println(service.getAuthorizationUrl(requestToken));
+	    System.out.println("And paste the verifier here");
+	    System.out.print(">>");
+	    Verifier verifier = new Verifier(in.nextLine());
+	    System.out.println();
+
+	    // Trade the Request Token and Verfier for the Access Token
+	    System.out.println("Trading the Request Token for an Access Token...");
+	    Token accessToken = service.getAccessToken(requestToken, verifier);
+	    System.out.println("Got the Access Token!");
+	    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+	    System.out.println();
+
+	    // Now let's go and ask for a protected resource!
+	    System.out.println("Now we're going to access a protected resource...");
+	    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+	    service.signRequest(accessToken, request);
+	    Response response = request.send();
+	    System.out.println("Got it! Lets see what we found...");
+	    System.out.println();
+	    System.out.println(response.getBody());
+
+	    System.out.println();
+	    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+	  }
+}

commit 762e1004f83f71c9579f9bfa4d036649b27475be
Author: Jay Prall <jay@j4y.net>
Date:   Sat Dec 31 11:35:43 2011 -0500

    include NetProspex support

diff --git a/changelog.txt b/changelog.txt
index 73281ed..5752d1d 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -78,3 +78,4 @@
 
 [1.3.1]
   * FEATURE: Meetup.com Api
+  * FEATURE: NetProspex Api
diff --git a/src/main/java/org/scribe/builder/api/NetProspexApi.java b/src/main/java/org/scribe/builder/api/NetProspexApi.java
new file mode 100644
index 0000000..8257de7
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/NetProspexApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class NetProspexApi extends DefaultApi10a
+{
+  private static final String REQUEST_TOKEN_URL = "https://api.netprospex.com/1.0/oauth/request-token";
+  private static final String ACCESS_TOKEN_URL = "https://api.netprospex.com/1.0/oauth/access-token";
+  private static final String AUTHORIZE_URL = "https://api.netprospex.com/1.0/oauth/authorize?oauth_token=%s";
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_URL;
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_URL;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+}

commit bfbba77e4cdbfa4eeaf499b12790420e7392932d
Author: boncey <github@djgreaves.org>
Date:   Sat Jan 14 10:00:33 2012 +0000

    Added Flickr endpoint (not yet tested)

diff --git a/src/main/java/org/scribe/builder/api/FlickrApi.java b/src/main/java/org/scribe/builder/api/FlickrApi.java
new file mode 100644
index 0000000..9a6de40
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/FlickrApi.java
@@ -0,0 +1,59 @@
+package org.scribe.builder.api;
+
+import org.scribe.builder.api.DefaultApi10a;
+import org.scribe.model.Token;
+import org.scribe.utils.OAuthEncoder;
+
+/**
+ * OAuth API for Flickr.
+ * @author Darren Greaves
+ * @see <a href="http://www.flickr.com/services/api/">Flickr API</a>
+ */
+public class FlickrApi extends DefaultApi10a
+{
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+
+        return "http://www.flickr.com/services/oauth/access_token";
+    }
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+
+        return "http://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
+    }
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+
+        return "http://www.flickr.com/services/oauth/request_token";
+    }
+
+
+    /**
+     * Get request token endpoint with a callback URL.
+     * 
+     * @param callbackUrl
+     * @return
+     */
+    public String getRequestTokenEndpoint(String callbackUrl)
+    {
+
+        return String.format("%s?oauth_callback=%s", getRequestTokenEndpoint(), OAuthEncoder.encode(callbackUrl));
+    }
+}

commit 41777bc0d0879562b0f312af2a749f792e72ea8b
Author: boncey <github@djgreaves.org>
Date:   Thu Jan 26 23:23:42 2012 +0000

    Removed unused callback method

diff --git a/src/main/java/org/scribe/builder/api/FlickrApi.java b/src/main/java/org/scribe/builder/api/FlickrApi.java
index 9a6de40..3a1efd3 100644
--- a/src/main/java/org/scribe/builder/api/FlickrApi.java
+++ b/src/main/java/org/scribe/builder/api/FlickrApi.java
@@ -1,11 +1,11 @@
 package org.scribe.builder.api;
 
-import org.scribe.builder.api.DefaultApi10a;
+
 import org.scribe.model.Token;
-import org.scribe.utils.OAuthEncoder;
 
 /**
  * OAuth API for Flickr.
+ * 
  * @author Darren Greaves
  * @see <a href="http://www.flickr.com/services/api/">Flickr API</a>
  */
@@ -44,16 +44,4 @@ public class FlickrApi extends DefaultApi10a
         return "http://www.flickr.com/services/oauth/request_token";
     }
 
-
-    /**
-     * Get request token endpoint with a callback URL.
-     * 
-     * @param callbackUrl
-     * @return
-     */
-    public String getRequestTokenEndpoint(String callbackUrl)
-    {
-
-        return String.format("%s?oauth_callback=%s", getRequestTokenEndpoint(), OAuthEncoder.encode(callbackUrl));
-    }
 }

commit 740a32f1ef94d723cd4db337e9790ebf88345bc0
Author: Matthew Laudato <mattlaudato@gmail.com>
Date:   Sat Jan 28 10:13:47 2012 -0500

    OAuth 2 support

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
new file mode 100644
index 0000000..0e7f663
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -0,0 +1,22 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.OAuthConfig;
+import org.scribe.utils.URLUtils;
+
+public class ConstantContactApi2 extends DefaultApi20 {
+	
+	private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
+	
+	@Override
+	public String getAccessTokenEndpoint() {
+
+		return "https://oauth2.constantcontact.com/oauth2/oauth/token";
+	}
+
+	@Override
+	public String getAuthorizationUrl(OAuthConfig config) {
+
+		return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+	}
+
+}

commit 74da34f512193f49370141a28b3f146728e16277
Author: Matthew Laudato <mattlaudato@gmail.com>
Date:   Sat Jan 28 10:40:02 2012 -0500

    Support for OAuth 2

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index 0e7f663..d818b93 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -1,7 +1,7 @@
 package org.scribe.builder.api;
 
 import org.scribe.model.OAuthConfig;
-import org.scribe.utils.URLUtils;
+import org.scribe.utils.OAuthEncoder;
 
 public class ConstantContactApi2 extends DefaultApi20 {
 	
@@ -16,7 +16,7 @@ public class ConstantContactApi2 extends DefaultApi20 {
 	@Override
 	public String getAuthorizationUrl(OAuthConfig config) {
 
-		return String.format(AUTHORIZE_URL, config.getApiKey(), URLUtils.formURLEncode(config.getCallback()));
+		return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
 	}
 
 }

commit e000757d24094075a3a07c5f933026194578ba85
Author: boncey <github@djgreaves.org>
Date:   Sat Jan 28 17:08:36 2012 +0000

    Added FlickrExample
    
    Example for Flickr OAuth

diff --git a/src/test/java/org/scribe/examples/FlickrExample.java b/src/test/java/org/scribe/examples/FlickrExample.java
new file mode 100644
index 0000000..6b282ea
--- /dev/null
+++ b/src/test/java/org/scribe/examples/FlickrExample.java
@@ -0,0 +1,66 @@
+package org.scribe.examples;
+
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.FlickrApi;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+import java.util.Scanner;
+
+public class FlickrExample
+{
+    private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
+
+
+    public static void main(String[] args)
+    {
+
+        // Replace these with your own api key and secret
+        String apiKey = "your_app_id";
+        String apiSecret = "your_api_secret";
+        OAuthService service = new ServiceBuilder().provider(FlickrApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
+        Scanner in = new Scanner(System.in);
+
+        System.out.println("=== Flickr's OAuth Workflow ===");
+        System.out.println();
+
+        // Obtain the Request Token
+        System.out.println("Fetching the Request Token...");
+        Token requestToken = service.getRequestToken();
+        System.out.println("Got the Request Token!");
+        System.out.println();
+
+        System.out.println("Now go and authorize Scribe here:");
+        String authorizationUrl = service.getAuthorizationUrl(requestToken);
+        System.out.println(authorizationUrl + "&perms=read");
+        System.out.println("And paste the verifier here");
+        System.out.print(">>");
+        Verifier verifier = new Verifier(in.nextLine());
+        System.out.println();
+
+        // Trade the Request Token and Verfier for the Access Token
+        System.out.println("Trading the Request Token for an Access Token...");
+        Token accessToken = service.getAccessToken(requestToken, verifier);
+        System.out.println("Got the Access Token!");
+        System.out.println("(if your curious it looks like this: " + accessToken + " )");
+        System.out.println();
+
+        // Now let's go and ask for a protected resource!
+        System.out.println("Now we're going to access a protected resource...");
+        OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+        request.addQuerystringParameter("method", "flickr.test.login");
+        service.signRequest(accessToken, request);
+        Response response = request.send();
+        System.out.println("Got it! Lets see what we found...");
+        System.out.println();
+        System.out.println(response.getBody());
+
+        System.out.println();
+        System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    }
+}

commit b13181af35dc32d330c3917ff75bf5ceebe0944b
Author: boncey <github@djgreaves.org>
Date:   Sun Jan 29 17:09:40 2012 +0000

    Removed blank line

diff --git a/src/test/java/org/scribe/examples/FlickrExample.java b/src/test/java/org/scribe/examples/FlickrExample.java
index 6b282ea..cf58147 100644
--- a/src/test/java/org/scribe/examples/FlickrExample.java
+++ b/src/test/java/org/scribe/examples/FlickrExample.java
@@ -16,7 +16,6 @@ public class FlickrExample
 {
     private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
 
-
     public static void main(String[] args)
     {
 

commit 0254d551d6b4c452315fcf4dc5d95df645320cd6
Author: mason55 <mason@mason55.com>
Date:   Tue Feb 7 22:14:28 2012 -0500

    Added Tumblr and Miso support

diff --git a/src/main/java/org/scribe/builder/api/MisoApi.java b/src/main/java/org/scribe/builder/api/MisoApi.java
new file mode 100644
index 0000000..40a7bfe
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/MisoApi.java
@@ -0,0 +1,29 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class MisoApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "http://gomiso.com/oauth/authorize?oauth_token=%s";
+  private static final String REQUEST_TOKEN_RESOURCE = "gomiso.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "gomiso.com/oauth/access_token";
+  
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://" + ACCESS_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://" + REQUEST_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+
+}
diff --git a/src/main/java/org/scribe/builder/api/TumblrApi.java b/src/main/java/org/scribe/builder/api/TumblrApi.java
new file mode 100644
index 0000000..f6db55d
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/TumblrApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class TumblrApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://www.tumblr.com/oauth/authorize?oauth_token=%s";
+  private static final String REQUEST_TOKEN_RESOURCE = "www.tumblr.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "www.tumblr.com/oauth/access_token";
+  
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://" + ACCESS_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://" + REQUEST_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+}

commit 56235d9b151f43cccfedbf1f5b10fa4b87affec5
Author: mason55 <mason@mason55.com>
Date:   Wed Feb 8 08:44:17 2012 -0500

    Updated Tumblr and Miso classes for clearer handling of endpoints

diff --git a/src/main/java/org/scribe/builder/api/MisoApi.java b/src/main/java/org/scribe/builder/api/MisoApi.java
index 40a7bfe..66f8b2d 100644
--- a/src/main/java/org/scribe/builder/api/MisoApi.java
+++ b/src/main/java/org/scribe/builder/api/MisoApi.java
@@ -5,19 +5,19 @@ import org.scribe.model.Token;
 public class MisoApi extends DefaultApi10a
 {
   private static final String AUTHORIZE_URL = "http://gomiso.com/oauth/authorize?oauth_token=%s";
-  private static final String REQUEST_TOKEN_RESOURCE = "gomiso.com/oauth/request_token";
-  private static final String ACCESS_TOKEN_RESOURCE = "gomiso.com/oauth/access_token";
+  private static final String REQUEST_TOKEN_RESOURCE = "http://gomiso.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "http://gomiso.com/oauth/access_token";
   
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://" + ACCESS_TOKEN_RESOURCE;
+    return ACCESS_TOKEN_RESOURCE;
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://" + REQUEST_TOKEN_RESOURCE;
+    return REQUEST_TOKEN_RESOURCE;
   }
 
   @Override
diff --git a/src/main/java/org/scribe/builder/api/TumblrApi.java b/src/main/java/org/scribe/builder/api/TumblrApi.java
index f6db55d..a03de4f 100644
--- a/src/main/java/org/scribe/builder/api/TumblrApi.java
+++ b/src/main/java/org/scribe/builder/api/TumblrApi.java
@@ -5,19 +5,19 @@ import org.scribe.model.Token;
 public class TumblrApi extends DefaultApi10a
 {
   private static final String AUTHORIZE_URL = "https://www.tumblr.com/oauth/authorize?oauth_token=%s";
-  private static final String REQUEST_TOKEN_RESOURCE = "www.tumblr.com/oauth/request_token";
-  private static final String ACCESS_TOKEN_RESOURCE = "www.tumblr.com/oauth/access_token";
+  private static final String REQUEST_TOKEN_RESOURCE = "http://www.tumblr.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "http://www.tumblr.com/oauth/access_token";
   
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://" + ACCESS_TOKEN_RESOURCE;
+    return ACCESS_TOKEN_RESOURCE;
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://" + REQUEST_TOKEN_RESOURCE;
+    return REQUEST_TOKEN_RESOURCE;
   }
 
   @Override

commit bef18c570e880e638d15003b5f78b49187e05f29
Author: mason55 <mason@mason55.com>
Date:   Wed Feb 8 08:52:01 2012 -0500

    Added GetGlue api

diff --git a/src/main/java/org/scribe/builder/api/GetGlueApi.java b/src/main/java/org/scribe/builder/api/GetGlueApi.java
new file mode 100644
index 0000000..3a7560f
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/GetGlueApi.java
@@ -0,0 +1,29 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class GetGlueApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "http://getglue.com/oauth/authorize?oauth_token=%s";
+  private static final String REQUEST_TOKEN_RESOURCE = "https://api.getglue.com/oauth/request_token";
+  private static final String ACCESS_TOKEN_RESOURCE = "https://api.getglue.com/oauth/access_token";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+
+}
diff --git a/src/main/java/org/scribe/builder/api/MisoApi.java b/src/main/java/org/scribe/builder/api/MisoApi.java
index 66f8b2d..a6d88d3 100644
--- a/src/main/java/org/scribe/builder/api/MisoApi.java
+++ b/src/main/java/org/scribe/builder/api/MisoApi.java
@@ -7,7 +7,7 @@ public class MisoApi extends DefaultApi10a
   private static final String AUTHORIZE_URL = "http://gomiso.com/oauth/authorize?oauth_token=%s";
   private static final String REQUEST_TOKEN_RESOURCE = "http://gomiso.com/oauth/request_token";
   private static final String ACCESS_TOKEN_RESOURCE = "http://gomiso.com/oauth/access_token";
-  
+
   @Override
   public String getAccessTokenEndpoint()
   {
diff --git a/src/main/java/org/scribe/builder/api/TumblrApi.java b/src/main/java/org/scribe/builder/api/TumblrApi.java
index a03de4f..ee680ee 100644
--- a/src/main/java/org/scribe/builder/api/TumblrApi.java
+++ b/src/main/java/org/scribe/builder/api/TumblrApi.java
@@ -7,7 +7,7 @@ public class TumblrApi extends DefaultApi10a
   private static final String AUTHORIZE_URL = "https://www.tumblr.com/oauth/authorize?oauth_token=%s";
   private static final String REQUEST_TOKEN_RESOURCE = "http://www.tumblr.com/oauth/request_token";
   private static final String ACCESS_TOKEN_RESOURCE = "http://www.tumblr.com/oauth/access_token";
-  
+
   @Override
   public String getAccessTokenEndpoint()
   {

commit 79d26389e75d81baaae5dece8d9a2d32286d39d6
Author: Kyle J. Harms <harmsk@seas.wustl.edu>
Date:   Tue Feb 21 14:14:46 2012 -0600

    Query string parameters are being encoded into x-www-form-urlencoded format, however OAuth spec requires rfc3986.

diff --git a/src/main/java/org/scribe/model/ParameterList.java b/src/main/java/org/scribe/model/ParameterList.java
index 8bca32f..b365cba 100644
--- a/src/main/java/org/scribe/model/ParameterList.java
+++ b/src/main/java/org/scribe/model/ParameterList.java
@@ -1,7 +1,5 @@
 package org.scribe.model;
 
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -63,14 +61,7 @@ public class ParameterList
 
   public String asOauthBaseString()
   {
-    try
-    {
-      return URLEncoder.encode(asFormUrlEncodedString(), "UTF8");
-    }
-    catch (UnsupportedEncodingException uee)
-    {
-     throw new RuntimeException();
-    }
+    return OAuthEncoder.encode(asFormUrlEncodedString());
   }
 
   public String asFormUrlEncodedString()

commit 4dd7aa0bc2b6f8cf3cf1a5e4c01ad03f26a9e97a
Author: boncey <github@djgreaves.org>
Date:   Tue Feb 21 20:27:33 2012 +0000

    Reformatted code to scribe's standards

diff --git a/src/main/java/org/scribe/builder/api/FlickrApi.java b/src/main/java/org/scribe/builder/api/FlickrApi.java
index 3a1efd3..81dc986 100644
--- a/src/main/java/org/scribe/builder/api/FlickrApi.java
+++ b/src/main/java/org/scribe/builder/api/FlickrApi.java
@@ -1,7 +1,6 @@
 package org.scribe.builder.api;
 
-
-import org.scribe.model.Token;
+import org.scribe.model.*;
 
 /**
  * OAuth API for Flickr.
@@ -12,36 +11,31 @@ import org.scribe.model.Token;
 public class FlickrApi extends DefaultApi10a
 {
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-
-        return "http://www.flickr.com/services/oauth/access_token";
-    }
-
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public String getAuthorizationUrl(Token requestToken)
-    {
-
-        return "http://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
-    }
-
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-
-        return "http://www.flickr.com/services/oauth/request_token";
-    }
-
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://www.flickr.com/services/oauth/access_token";
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return "http://www.flickr.com/services/oauth/authorize?oauth_token="
+        + requestToken.getToken();
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://www.flickr.com/services/oauth/request_token";
+  }
 }
diff --git a/src/test/java/org/scribe/examples/FlickrExample.java b/src/test/java/org/scribe/examples/FlickrExample.java
index cf58147..946c85c 100644
--- a/src/test/java/org/scribe/examples/FlickrExample.java
+++ b/src/test/java/org/scribe/examples/FlickrExample.java
@@ -1,65 +1,62 @@
 package org.scribe.examples;
 
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
 
-import org.scribe.builder.ServiceBuilder;
-import org.scribe.builder.api.FlickrApi;
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Response;
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
-import org.scribe.model.Verifier;
-import org.scribe.oauth.OAuthService;
-
-import java.util.Scanner;
+import java.util.*;
 
 public class FlickrExample
 {
-    private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
-
-    public static void main(String[] args)
-    {
-
-        // Replace these with your own api key and secret
-        String apiKey = "your_app_id";
-        String apiSecret = "your_api_secret";
-        OAuthService service = new ServiceBuilder().provider(FlickrApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
-        Scanner in = new Scanner(System.in);
-
-        System.out.println("=== Flickr's OAuth Workflow ===");
-        System.out.println();
-
-        // Obtain the Request Token
-        System.out.println("Fetching the Request Token...");
-        Token requestToken = service.getRequestToken();
-        System.out.println("Got the Request Token!");
-        System.out.println();
-
-        System.out.println("Now go and authorize Scribe here:");
-        String authorizationUrl = service.getAuthorizationUrl(requestToken);
-        System.out.println(authorizationUrl + "&perms=read");
-        System.out.println("And paste the verifier here");
-        System.out.print(">>");
-        Verifier verifier = new Verifier(in.nextLine());
-        System.out.println();
-
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
-        Token accessToken = service.getAccessToken(requestToken, verifier);
-        System.out.println("Got the Access Token!");
-        System.out.println("(if your curious it looks like this: " + accessToken + " )");
-        System.out.println();
-
-        // Now let's go and ask for a protected resource!
-        System.out.println("Now we're going to access a protected resource...");
-        OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
-        request.addQuerystringParameter("method", "flickr.test.login");
-        service.signRequest(accessToken, request);
-        Response response = request.send();
-        System.out.println("Got it! Lets see what we found...");
-        System.out.println();
-        System.out.println(response.getBody());
-
-        System.out.println();
-        System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
-    }
+  private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "your_app_id";
+    String apiSecret = "your_api_secret";
+    OAuthService service = new ServiceBuilder().provider(FlickrApi.class)
+        .apiKey(apiKey).apiSecret(apiSecret).build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Flickr's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    String authorizationUrl = service.getAuthorizationUrl(requestToken);
+    System.out.println(authorizationUrl + "&perms=read");
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken
+        + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    request.addQuerystringParameter("method", "flickr.test.login");
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out
+        .println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
 }

commit 1e05fc08287fefe0e8b7ed632b6e1a40bb8c88b6
Author: boncey <github@djgreaves.org>
Date:   Tue Feb 21 20:31:33 2012 +0000

    Eclipse formatter and importorder config

diff --git a/src/main/config/scribe-eclipse-formatter.xml b/src/main/config/scribe-eclipse-formatter.xml
new file mode 100644
index 0000000..8d3ecbc
--- /dev/null
+++ b/src/main/config/scribe-eclipse-formatter.xml
@@ -0,0 +1,290 @@
+<?xml version="1.0" encoding="UTF-8"?><profiles version="12">
+<profile kind="CodeFormatterProfile" name="scribe" version="12">
+<setting id="org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.disabling_tag" value="@formatter:off"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_field" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.use_on_off_tags" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_ellipsis" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_multiple_fields" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_binary_operator" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_array_initializer" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_after_package" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.continuation_indentation" value="2"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_binary_operator" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_package" value="0"/>
+<setting id="org.eclipse.jdt.core.compiler.source" value="1.7"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_line_comments" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.join_wrapped_lines" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_member_type" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.align_type_members_on_columns" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_unary_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.indent_parameter_description" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.lineSplit" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration" value="0"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indentation.size" value="2"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.enabling_tag" value="@formatter:on"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_assignment" value="0"/>
+<setting id="org.eclipse.jdt.core.compiler.problem.assertIdentifier" value="error"/>
+<setting id="org.eclipse.jdt.core.formatter.tabulation.char" value="space"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_statements_compare_to_body" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_method" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_method_declaration" value="0"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_switch" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.compiler.problem.enumIdentifier" value="error"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_ellipsis" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_block" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_method_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.compact_else_if" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_enum_constant" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.indent_root_tags" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.tabulation.size" value="2"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration" value="32"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_empty_lines" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_block_in_case" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter" value="insert"/>
+<setting id="org.eclipse.jdt.core.compiler.compliance" value="1.7"/>
+<setting id="org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer" value="2"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_unary_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_binary_expression" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode" value="enabled"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_label" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_javadoc_comments" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_between_import_groups" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body" value="0"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.wrap_before_binary_operator" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_statements_compare_to_block" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.join_lines_in_comments" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_compact_if" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_imports" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_html" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_source_code" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration" value="16"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.compiler.codegen.targetPlatform" value="1.7"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_resources_in_try" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation" value="0"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_header" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.format_block_comments" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.alignment_for_enum_constants" value="48"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.brace_position_for_type_declaration" value="next_line"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.blank_lines_after_imports" value="1"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for" value="insert"/>
+<setting id="org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments" value="do not insert"/>
+<setting id="org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column" value="false"/>
+<setting id="org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line" value="false"/>
+</profile>
+</profiles>
diff --git a/src/main/config/scribe-eclipse.importorder b/src/main/config/scribe-eclipse.importorder
new file mode 100644
index 0000000..1fcaf0f
--- /dev/null
+++ b/src/main/config/scribe-eclipse.importorder
@@ -0,0 +1,7 @@
+#Organize Import Order
+#Tue Feb 21 20:29:55 GMT 2012
+4=java
+3=javax
+2=org
+1=org.boncey
+0=com

commit 9e848993f68b92cf0a40240a44885d57cdde9f18
Author: boncey <github@djgreaves.org>
Date:   Tue Feb 21 23:13:05 2012 +0000

    Removed line length and reformatted

diff --git a/src/main/config/scribe-eclipse-formatter.xml b/src/main/config/scribe-eclipse-formatter.xml
index 8d3ecbc..8ea5bc9 100644
--- a/src/main/config/scribe-eclipse-formatter.xml
+++ b/src/main/config/scribe-eclipse-formatter.xml
@@ -53,7 +53,7 @@
 <setting id="org.eclipse.jdt.core.formatter.comment.format_line_comments" value="true"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments" value="insert"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.join_wrapped_lines" value="true"/>
+<setting id="org.eclipse.jdt.core.formatter.join_wrapped_lines" value="false"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block" value="insert"/>
 <setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call" value="16"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments" value="do not insert"/>
@@ -73,7 +73,7 @@
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters" value="do not insert"/>
 <setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment" value="false"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.lineSplit" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.lineSplit" value="9999"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if" value="insert"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference" value="do not insert"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression" value="do not insert"/>
@@ -204,7 +204,7 @@
 <setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value="insert"/>
 <setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value="16"/>
 <setting id="org.eclipse.jdt.core.formatter.comment.format_javadoc_comments" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="80"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="9999"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package" value="insert"/>
 <setting id="org.eclipse.jdt.core.formatter.blank_lines_between_import_groups" value="1"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments" value="do not insert"/>
diff --git a/src/main/java/org/scribe/builder/api/FlickrApi.java b/src/main/java/org/scribe/builder/api/FlickrApi.java
index 81dc986..a630436 100644
--- a/src/main/java/org/scribe/builder/api/FlickrApi.java
+++ b/src/main/java/org/scribe/builder/api/FlickrApi.java
@@ -26,8 +26,7 @@ public class FlickrApi extends DefaultApi10a
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return "http://www.flickr.com/services/oauth/authorize?oauth_token="
-        + requestToken.getToken();
+    return "http://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
   }
 
   /**
diff --git a/src/test/java/org/scribe/examples/FlickrExample.java b/src/test/java/org/scribe/examples/FlickrExample.java
index 946c85c..ac38ad3 100644
--- a/src/test/java/org/scribe/examples/FlickrExample.java
+++ b/src/test/java/org/scribe/examples/FlickrExample.java
@@ -16,8 +16,7 @@ public class FlickrExample
     // Replace these with your own api key and secret
     String apiKey = "your_app_id";
     String apiSecret = "your_api_secret";
-    OAuthService service = new ServiceBuilder().provider(FlickrApi.class)
-        .apiKey(apiKey).apiSecret(apiSecret).build();
+    OAuthService service = new ServiceBuilder().provider(FlickrApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
     Scanner in = new Scanner(System.in);
 
     System.out.println("=== Flickr's OAuth Workflow ===");
@@ -41,8 +40,7 @@ public class FlickrExample
     System.out.println("Trading the Request Token for an Access Token...");
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken
-        + " )");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!
@@ -56,7 +54,6 @@ public class FlickrExample
     System.out.println(response.getBody());
 
     System.out.println();
-    System.out
-        .println("Thats it man! Go and build something awesome with Scribe! :)");
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
   }
 }

commit b8378a35f2828abefa80c31fd4453423ddd90999
Merge: bef18c5 9e84899
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Feb 21 15:42:52 2012 -0800

    Merge pull request #220 from boncey/master
    
    OAuth for Flickr plus eclipse formatting rules

commit 74f53a4d07da6bae13934ef666cabc9e0bb932fe
Merge: b8378a3 79d2638
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 22 09:45:56 2012 -0800

    Merge pull request #226 from harmsk/1.3.1
    
    Query string params are not rfc3986

commit 42ef871a61bfd713120285a3a0ed7810b93ddc82
Author: dwursteisen <david.wursteisen+git@gmail.com>
Date:   Sat Feb 25 00:22:18 2012 +0100

    Added ImgUr support

diff --git a/src/main/java/org/scribe/builder/api/ImgUrApi.java b/src/main/java/org/scribe/builder/api/ImgUrApi.java
new file mode 100644
index 0000000..def2f40
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/ImgUrApi.java
@@ -0,0 +1,31 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+/**
+ * OAuth API for ImgUr
+ *
+ * @author David Wursteisen
+ * @see <a href="http://api.imgur.com/#authapi">ImgUr API</a>
+ */
+public class ImgUrApi extends DefaultApi10a {
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+        return "https://api.imgur.com/oauth/request_token";
+    }
+
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+        return "https://api.imgur.com/oauth/access_token";
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+        return String.format("https://api.imgur.com/oauth/authorize?oauth_token=%s", requestToken.getToken());
+    }
+}
+
diff --git a/src/test/java/org/scribe/examples/ImgUrExample.java b/src/test/java/org/scribe/examples/ImgUrExample.java
new file mode 100644
index 0000000..b938ac2
--- /dev/null
+++ b/src/test/java/org/scribe/examples/ImgUrExample.java
@@ -0,0 +1,62 @@
+package org.scribe.examples;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.ImgUrApi;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+import java.util.Scanner;
+
+public class ImgUrExample
+{
+  private static final String PROTECTED_RESOURCE_URL = "http://api.imgur.com/2/account.json";
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret (you'll need an read/write api key)
+    String apiKey = "your_app_id";
+    String apiSecret = "your_api_secret";
+    OAuthService service = new ServiceBuilder().provider(ImgUrApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== ImgUr's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    String authorizationUrl = service.getAuthorizationUrl(requestToken);
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+}

commit 4536f7118841aaf4373f25f505acc212eb8eee00
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 4 19:13:08 2012 -0300

    link to forks wikipage

diff --git a/README.textile b/README.textile
index 7f4f664..976f7bb 100644
--- a/README.textile
+++ b/README.textile
@@ -78,6 +78,12 @@ Feel free to drop me an email, but there's already a "StackOvferflow":http://sta
 
 Note that it really helps to run scribe on "debug mode":https://github.com/fernandezpablo85/scribe-java/wiki/debug-mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
 
+h1. Forks
+
+Looking for a scribe variation? check the "Fork List":https://github.com/fernandezpablo85/scribe-java/wiki/Forks
+
+If you have a useful fork that should be listed there please contact me (see About me).
+
 h1. About me
 
 "LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85

commit b702f097a21eafb495b3aa2868a02594a9ca4b56
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Mar 4 20:55:42 2012 -0300

    throw an exception when host is not found

diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
index f8aa83a..9835a05 100644
--- a/src/main/java/org/scribe/model/Response.java
+++ b/src/main/java/org/scribe/model/Response.java
@@ -4,6 +4,7 @@ import java.io.*;
 import java.net.*;
 import java.util.*;
 
+import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
 /**
@@ -31,8 +32,7 @@ public class Response
     }
     catch (UnknownHostException e)
     {
-      code = 404;
-      body = Response.EMPTY;
+      throw new OAuthException("The IP address of a host could not be determined.", e);
     }
   }
 

commit d1df7a7fb04e71579b4f5907c8daf90e2f933c59
Author: Ale <ale@ale-air.local>
Date:   Mon Mar 5 02:23:24 2012 -0800

    spell your name right yo

diff --git a/LICENSE.txt b/LICENSE.txt
index 24261ac..53b46da 100644
--- a/LICENSE.txt
+++ b/LICENSE.txt
@@ -1,6 +1,6 @@
 The MIT License
 
-Copyright (c) 2010 Pablo Fenandez
+Copyright (c) 2010 Pablo Fernandez
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal

commit ceae6f85cc46360b72cd26394e2997c2947cbbb5
Merge: b702f09 d1df7a7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Mar 5 04:33:30 2012 -0800

    Merge pull request #233 from acrosa/master
    
    spell your name right yo

commit 69fff5b2c4a6e66cb02c611ee99f0ebe11d951d2
Author: George Cao <matrix3456@163.com>
Date:   Sat Feb 25 21:13:10 2012 +0800

    Added Kaixin2, Renren and SinaWeibo2 Apis and examples.

diff --git a/changelog.txt b/changelog.txt
index 5752d1d..40250f0 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -79,3 +79,4 @@
 [1.3.1]
   * FEATURE: Meetup.com Api
   * FEATURE: NetProspex Api
+  * FEATURE: Kaixin2, SinaWeibo2 and Renren Apis
diff --git a/src/main/java/org/scribe/builder/api/KaixinApi20.java b/src/main/java/org/scribe/builder/api/KaixinApi20.java
new file mode 100644
index 0000000..9e27bcb
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/KaixinApi20.java
@@ -0,0 +1,41 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+/**
+ * Kaixin(http://www.kaixin001.com/) open platform api based on OAuth 2.0.
+ */
+public class KaixinApi20 extends DefaultApi20
+{
+
+  private static final String AUTHORIZE_URL = "http://api.kaixin001.com/oauth2/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.kaixin001.com/oauth2/access_token?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    // Append scope if present
+    if (config.hasScope())
+    {
+      return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/RenrenApi.java b/src/main/java/org/scribe/builder/api/RenrenApi.java
new file mode 100644
index 0000000..b31337b
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/RenrenApi.java
@@ -0,0 +1,40 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+/**
+ * Renren(http://www.renren.com/) OAuth 2.0 based api.
+ */
+public class RenrenApi extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://graph.renren.com/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://graph.renren.com/oauth/token?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    // Append scope if present
+    if (config.hasScope())
+    {
+      return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/builder/api/SinaWeiboApi20.java b/src/main/java/org/scribe/builder/api/SinaWeiboApi20.java
new file mode 100644
index 0000000..e0744c4
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SinaWeiboApi20.java
@@ -0,0 +1,46 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+/**
+ * SinaWeibo OAuth 2.0 api.
+ */
+public class SinaWeiboApi20 extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://api.weibo.com/oauth2/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
+
+  @Override
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.POST;
+  }
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.weibo.com/oauth2/access_token?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    // Append scope if present
+    if (config.hasScope())
+    {
+      return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/examples/Kaixin20Example.java b/src/test/java/org/scribe/examples/Kaixin20Example.java
new file mode 100644
index 0000000..b3e9d66
--- /dev/null
+++ b/src/test/java/org/scribe/examples/Kaixin20Example.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+import java.util.*;
+
+public class Kaixin20Example
+{
+  private static final String NETWORK_NAME = "Kaixin";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.kaixin001.com/users/me.json";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "your api key";
+    String apiSecret = "your api secret";
+    OAuthService service = new ServiceBuilder()
+        .provider(KaixinApi20.class)
+        .apiKey(apiKey)
+        .apiSecret(apiSecret)
+        .callback("http://your.domain.com/handle")
+        .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verifier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
diff --git a/src/test/java/org/scribe/examples/RenrenExample.java b/src/test/java/org/scribe/examples/RenrenExample.java
new file mode 100644
index 0000000..ae13375
--- /dev/null
+++ b/src/test/java/org/scribe/examples/RenrenExample.java
@@ -0,0 +1,108 @@
+package org.scribe.examples;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+import java.nio.charset.*;
+import java.security.*;
+import java.util.*;
+
+public class RenrenExample
+{
+  private static final String NETWORK_NAME = "Renren";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.renren.com/restserver.do";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "your api key";
+    String apiSecret = "your api secret";
+    OAuthService service = new ServiceBuilder()
+        .provider(RenrenApi.class)
+        .apiKey(apiKey)
+        .apiSecret(apiSecret)
+        .scope("status_update publish_feed")
+        .callback("http://your.doman.com/oauth/renren")
+        .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.POST, PROTECTED_RESOURCE_URL);
+    Map<String, String> parameters = new HashMap<String, String>();
+    parameters.put("method", "users.getInfo");
+    parameters.put("format", "json");
+    parameters.put("v", "1.0");
+
+    List<String> sigString = new ArrayList<String>(parameters.size() + 1);
+    for (Map.Entry<String, String> entry : parameters.entrySet())
+    {
+      request.addQuerystringParameter(entry.getKey(), entry.getValue());
+      sigString.add(String.format("%s=%s", entry.getKey(), entry.getValue()));
+    }
+    sigString.add(String.format("%s=%s", OAuthConstants.ACCESS_TOKEN, accessToken.getToken()));
+    Collections.sort(sigString);
+    StringBuilder b = new StringBuilder();
+    for (String param : sigString)
+    {
+      b.append(param);
+    }
+    b.append(apiSecret);
+    System.out.println("Sig string: " + b.toString());
+    request.addQuerystringParameter("sig", md5(b.toString()));
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+
+  public static String md5(String orgString)
+  {
+    try
+    {
+      java.security.MessageDigest md = MessageDigest.getInstance("MD5");
+      byte[] array = md.digest(orgString.getBytes(Charset.forName("UTF-8")));
+      StringBuffer sb = new StringBuffer();
+      for (int i = 0; i < array.length; ++i)
+      {
+        sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1, 3));
+      }
+      return sb.toString();
+    }
+    catch (NoSuchAlgorithmException e)
+    {
+      e.printStackTrace();
+    }
+    return null;
+  }
+
+}
diff --git a/src/test/java/org/scribe/examples/SinaWeibo2Example.java b/src/test/java/org/scribe/examples/SinaWeibo2Example.java
new file mode 100644
index 0000000..683efe5
--- /dev/null
+++ b/src/test/java/org/scribe/examples/SinaWeibo2Example.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+import java.util.*;
+
+public class SinaWeibo2Example
+{
+  private static final String NETWORK_NAME = "SinaWeibo";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.weibo.com/2/account/get_uid.json";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "342348223";
+    String apiSecret = "cfdf672e166a4bc954c0e33f03cf0d1b";
+    OAuthService service = new ServiceBuilder()
+        .provider(SinaWeiboApi20.class)
+        .apiKey(apiKey)
+        .apiSecret(apiSecret)
+        .callback("http://www.dajie.com/oauth/sina")
+        .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verifier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}

commit 0967770d431fba2c2ad22901275f2b9095d213ca
Author: dwursteisen <david.wursteisen+git@gmail.com>
Date:   Thu Mar 8 21:41:01 2012 +0100

    Code reformat : 2 spaces indentation, brace oppening on the next line, ...

diff --git a/src/main/java/org/scribe/builder/api/ImgUrApi.java b/src/main/java/org/scribe/builder/api/ImgUrApi.java
index def2f40..06dd691 100644
--- a/src/main/java/org/scribe/builder/api/ImgUrApi.java
+++ b/src/main/java/org/scribe/builder/api/ImgUrApi.java
@@ -1,6 +1,6 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
+import org.scribe.model.*;
 
 /**
  * OAuth API for ImgUr
@@ -8,24 +8,25 @@ import org.scribe.model.Token;
  * @author David Wursteisen
  * @see <a href="http://api.imgur.com/#authapi">ImgUr API</a>
  */
-public class ImgUrApi extends DefaultApi10a {
+public class ImgUrApi extends DefaultApi10a
+{
 
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-        return "https://api.imgur.com/oauth/request_token";
-    }
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.imgur.com/oauth/request_token";
+  }
 
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-        return "https://api.imgur.com/oauth/access_token";
-    }
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.imgur.com/oauth/access_token";
+  }
 
-    @Override
-    public String getAuthorizationUrl(Token requestToken)
-    {
-        return String.format("https://api.imgur.com/oauth/authorize?oauth_token=%s", requestToken.getToken());
-    }
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format("https://api.imgur.com/oauth/authorize?oauth_token=%s", requestToken.getToken());
+  }
 }
 
diff --git a/src/test/java/org/scribe/examples/ImgUrExample.java b/src/test/java/org/scribe/examples/ImgUrExample.java
index b938ac2..93fe91c 100644
--- a/src/test/java/org/scribe/examples/ImgUrExample.java
+++ b/src/test/java/org/scribe/examples/ImgUrExample.java
@@ -1,15 +1,11 @@
 package org.scribe.examples;
 
-import org.scribe.builder.ServiceBuilder;
-import org.scribe.builder.api.ImgUrApi;
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Response;
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
-import org.scribe.model.Verifier;
-import org.scribe.oauth.OAuthService;
-
-import java.util.Scanner;
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+import java.util.*;
 
 public class ImgUrExample
 {

commit 7b45840df3e26a4a83c03b855e70ca5c97f6d03c
Merge: 69fff5b 0967770
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Mar 9 12:36:34 2012 -0800

    Merge pull request #227 from dwursteisen/master
    
    Added ImgUr Api support

commit d746a013eadab4aced3b756344576eb2c9b671bd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Mar 9 17:38:14 2012 -0300

    Update changelog.txt

diff --git a/changelog.txt b/changelog.txt
index 40250f0..d908f3a 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -80,3 +80,4 @@
   * FEATURE: Meetup.com Api
   * FEATURE: NetProspex Api
   * FEATURE: Kaixin2, SinaWeibo2 and Renren Apis
+  * FEATURE: ImgUr Api

commit 84dd4660e24b4bec7c70998fccee75c542a8184c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Mar 13 21:47:58 2012 -0300

    travis config file

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..dff5f3a
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1 @@
+language: java

commit 60872fe55f6f2a5fc26f19133fd82907794bbfbe
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Mar 13 22:57:48 2012 -0300

    kickstart travis

diff --git a/.travis.yml b/.travis.yml
index dff5f3a..370384c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1 +1,2 @@
+# kickstart travis
 language: java

commit f4c36ab27abe3dde4649bfd935aab04b25078d9b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Mar 21 14:28:53 2012 -0300

    handle execptions while writting to the debug stream. Thanks @waabox

diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index a6f0522..374c958 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -72,7 +72,7 @@ public class OAuthConfig
       }
       catch (Exception e)
       {
-        // do nothing.
+        throw new RuntimeException("there were problems while writting to the debug stream", e);
       }
     }
   }

commit 9c631674d210eda50d373826eb0920f2496b6ca9
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Thu Mar 29 14:28:44 2012 -0500

    Added support for 500px.com. Also removed the '@Override' annotation from JsonTokenExtractor.java

diff --git a/src/main/java/org/scribe/builder/api/Px500Api.java b/src/main/java/org/scribe/builder/api/Px500Api.java
new file mode 100644
index 0000000..7427aad
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/Px500Api.java
@@ -0,0 +1,26 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class Px500Api extends DefaultApi10a
+{
+  private static final String AUTHORIZATION_URL = "https://api.500px.com/v1/oauth/authorize?oauth_token=%s";
+  
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.500px.com/v1/oauth/access_token";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.500px.com/v1/oauth/request_token";
+  }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/Px500Example.java b/src/test/java/org/scribe/examples/Px500Example.java
new file mode 100644
index 0000000..d1b24ec
--- /dev/null
+++ b/src/test/java/org/scribe/examples/Px500Example.java
@@ -0,0 +1,64 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.Px500Api;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+public class Px500Example
+{
+  private static final String PROTECTED_RESOURCE_URL = "https://api.500px.com/v1/";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(Px500Api.class)
+                                .apiKey("your-api-key")
+                                .apiSecret("your-api-secret")
+                                .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== 500Px's OAuth Workflow ===");
+    System.out.println();
+    
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    
+  }
+
+}
\ No newline at end of file

commit 4aa62564872d9c7a1c494eba507fbbc6f99469d1
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Fri Mar 30 09:34:29 2012 -0500

    Removed the @Override annotation as it resulted in a compilation error.

diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 7c1ee04..5bec423 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -10,7 +10,6 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

commit 92ffe2cc039dcf164ddcb04e8cdf801e3d857546
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Fri Mar 30 09:38:41 2012 -0500

    Removed new line at the end of the file

diff --git a/src/main/java/org/scribe/builder/api/Px500Api.java b/src/main/java/org/scribe/builder/api/Px500Api.java
index 7427aad..b033f61 100644
--- a/src/main/java/org/scribe/builder/api/Px500Api.java
+++ b/src/main/java/org/scribe/builder/api/Px500Api.java
@@ -23,4 +23,4 @@ public class Px500Api extends DefaultApi10a
   {
     return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
-}
+}
\ No newline at end of file

commit dbc1bd9c858f4c6f7efce1fa2f04a5d9a87b5e36
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Fri Mar 30 09:39:42 2012 -0500

    Used * imports

diff --git a/src/test/java/org/scribe/examples/Px500Example.java b/src/test/java/org/scribe/examples/Px500Example.java
index d1b24ec..b810b8a 100644
--- a/src/test/java/org/scribe/examples/Px500Example.java
+++ b/src/test/java/org/scribe/examples/Px500Example.java
@@ -4,11 +4,7 @@ import java.util.Scanner;
 
 import org.scribe.builder.ServiceBuilder;
 import org.scribe.builder.api.Px500Api;
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Response;
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
-import org.scribe.model.Verifier;
+import org.scribe.model.*;
 import org.scribe.oauth.OAuthService;
 
 public class Px500Example

commit 98801d7b8697dc6fc507adb710544e78cf13ca81
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Fri Mar 30 11:20:42 2012 -0500

    Used * imports

diff --git a/src/main/java/org/scribe/builder/api/Px500Api.java b/src/main/java/org/scribe/builder/api/Px500Api.java
index b033f61..f7f3b0e 100644
--- a/src/main/java/org/scribe/builder/api/Px500Api.java
+++ b/src/main/java/org/scribe/builder/api/Px500Api.java
@@ -1,6 +1,6 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
+import org.scribe.model.*;
 
 public class Px500Api extends DefaultApi10a
 {
diff --git a/src/test/java/org/scribe/examples/Px500Example.java b/src/test/java/org/scribe/examples/Px500Example.java
index b810b8a..cdbe449 100644
--- a/src/test/java/org/scribe/examples/Px500Example.java
+++ b/src/test/java/org/scribe/examples/Px500Example.java
@@ -2,10 +2,10 @@ package org.scribe.examples;
 
 import java.util.Scanner;
 
-import org.scribe.builder.ServiceBuilder;
-import org.scribe.builder.api.Px500Api;
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.oauth.OAuthService;
+import org.scribe.oauth.*;
 
 public class Px500Example
 {

commit 4bb6e49b61ee27bc8c9fde2c62823cbd4fc3249b
Author: Dhruv Chandna <dhruvchandna@gmail.com>
Date:   Fri Mar 30 13:00:03 2012 -0500

    Revert "Removed the @Override annotation as it resulted in a compilation error."
    
    This reverts commit 4aa62564872d9c7a1c494eba507fbbc6f99469d1.

diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 5bec423..7c1ee04 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -10,6 +10,7 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
+  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

commit 9fbc9b2d723884af6ab71646853b107c3d3ca7e3
Merge: f4c36ab 4bb6e49
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Mar 30 15:58:22 2012 -0700

    Merge pull request #241 from dhruvchandna/master
    
    Added support for 500px Api

commit b83113a0256d0eaf0341f0534a77ccfb17ea6ebc
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Mar 30 20:36:30 2012 -0300

    override travis default install script

diff --git a/.travis.yml b/.travis.yml
index 370384c..c966b9e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,2 +1,5 @@
-# kickstart travis
+# kickstart travis.
 language: java
+
+# need to override travis 'install' since it will try gpg sign and fail.
+install: mvn clean package -DskipTests=true

commit 675216792546e7a636ee6186be82fbccab474873
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Mar 30 20:42:02 2012 -0300

    travis status badge

diff --git a/README.textile b/README.textile
index 976f7bb..ea94ec4 100644
--- a/README.textile
+++ b/README.textile
@@ -1,5 +1,7 @@
 h2. Welcome to the home of Scribe, the simple OAuth Java lib!
 
+!https://secure.travis-ci.org/fernandezpablo85/scribe-java.png?branch=master(travis-ci-status)!
+
 h1. Why use Scribe?
 
 h3. Dead Simple 

commit f9af11564507c68c2c00517f5ffd1c03d0e42c0d
Author: Matthew Michihara <matthew.michihara@mylookout.com>
Date:   Wed Apr 4 19:38:38 2012 -0700

    Fix StackOverflow typo

diff --git a/README.textile b/README.textile
index ea94ec4..9cecfb4 100644
--- a/README.textile
+++ b/README.textile
@@ -76,7 +76,7 @@ h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe-java/fa
 
 h1. Questions?
 
-Feel free to drop me an email, but there's already a "StackOvferflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
+Feel free to drop me an email, but there's already a "StackOverflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
 
 Note that it really helps to run scribe on "debug mode":https://github.com/fernandezpablo85/scribe-java/wiki/debug-mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
 

commit 3132a9dfe7f9db00edbf9b19f132b64a6b25cc9c
Author: ponyloky <ponyloky@gmail.com>
Date:   Thu Apr 5 00:44:54 2012 -0300

    Adding support for the Freelancer.com API

diff --git a/src/main/java/org/scribe/builder/api/FreelancerAPI.java b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
new file mode 100644
index 0000000..b428ebf
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
@@ -0,0 +1,39 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+
+public class FreelancerAPI extends DefaultApi10a
+{
+  private static final String AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://api.sandbox.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://api.sandbox.freelancer.com/RequestRequestToken/requestRequestToken.xml";
+  }
+
+  @Override
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  public Verb getRequestTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/FreelancerExample.java b/src/test/java/org/scribe/examples/FreelancerExample.java
new file mode 100644
index 0000000..11a8973
--- /dev/null
+++ b/src/test/java/org/scribe/examples/FreelancerExample.java
@@ -0,0 +1,74 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.FreelancerAPI;
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.SignatureType;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+public class FreelancerExample
+{
+
+  private static final String NETWORK_NAME = "Freelancer";
+  private static final String AUTHORIZE_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php?oauth_token=";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.sandbox.freelancer.com/Job/getJobList.json";
+  private static final String SCOPE = "http://api.sandbox.freelancer.com";
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                  .provider(FreelancerAPI.class)
+                                  .signatureType(SignatureType.QueryString)
+                                  .apiKey("7f5a168a0bfdbd15b4a9ea2a969661c731cdea56")
+                                  .apiSecret("7bb8961b94873802f1c5344f671a518e087f5785").scope(SCOPE)
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println("(if your curious it looks like this: " + requestToken
+        + " )");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(AUTHORIZE_URL + requestToken.getToken());
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken
+        + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    request.addHeader("GData-Version", "3.0");
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out
+        .println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+}

commit b50aeba5cb164f8d94cb8d46b53576f582898ec1
Author: ponyloky <ponyloky@gmail.com>
Date:   Thu Apr 5 00:51:20 2012 -0300

    Fixing indentation

diff --git a/src/test/java/org/scribe/examples/FreelancerExample.java b/src/test/java/org/scribe/examples/FreelancerExample.java
index 11a8973..fb7dbef 100644
--- a/src/test/java/org/scribe/examples/FreelancerExample.java
+++ b/src/test/java/org/scribe/examples/FreelancerExample.java
@@ -37,8 +37,7 @@ public class FreelancerExample
     System.out.println("Fetching the Request Token...");
     Token requestToken = service.getRequestToken();
     System.out.println("Got the Request Token!");
-    System.out.println("(if your curious it looks like this: " + requestToken
-        + " )");
+    System.out.println("(if your curious it looks like this: " + requestToken + " )");
     System.out.println();
 
     System.out.println("Now go and authorize Scribe here:");
@@ -52,8 +51,7 @@ public class FreelancerExample
     System.out.println("Trading the Request Token for an Access Token...");
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken
-        + " )");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!
@@ -68,7 +66,6 @@ public class FreelancerExample
     System.out.println(response.getBody());
 
     System.out.println();
-    System.out
-        .println("Thats it man! Go and build something awesome with Scribe! :)");
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
   }
 }

commit 6ae769e35e8319747a702a4962df31650303a98e
Merge: 6752167 f9af115
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Apr 5 07:01:55 2012 -0700

    Merge pull request #244 from matthewmichihara/master
    
    Small typo fix

commit 89d8db5b6dba57c1ccb61c21e7253dd8dc68b56c
Author: Matthew Laudato <mattlaudato@gmail.com>
Date:   Thu Apr 5 15:32:12 2012 -0400

    Fixed code style issues.

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index d818b93..5709804 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -3,20 +3,20 @@ package org.scribe.builder.api;
 import org.scribe.model.OAuthConfig;
 import org.scribe.utils.OAuthEncoder;
 
-public class ConstantContactApi2 extends DefaultApi20 {
+public class ConstantContactApi2 extends DefaultApi20 
+{
 	
 	private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
 	
 	@Override
-	public String getAccessTokenEndpoint() {
-
+	public String getAccessTokenEndpoint() 
+	{
 		return "https://oauth2.constantcontact.com/oauth2/oauth/token";
 	}
 
 	@Override
-	public String getAuthorizationUrl(OAuthConfig config) {
-
+	public String getAuthorizationUrl(OAuthConfig config) 
+	{
 		return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
 	}
-
 }

commit 2538b965453623533c251ad3e15bc0d209bf128f
Author: ponyloky <ponyloky@gmail.com>
Date:   Fri Apr 6 15:44:15 2012 -0300

    Fixing import formatting

diff --git a/src/main/java/org/scribe/builder/api/FreelancerAPI.java b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
index b428ebf..d5fedc0 100644
--- a/src/main/java/org/scribe/builder/api/FreelancerAPI.java
+++ b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
@@ -1,7 +1,6 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
+import org.scribe.model.*;
 
 public class FreelancerAPI extends DefaultApi10a
 {
diff --git a/src/test/java/org/scribe/examples/FreelancerExample.java b/src/test/java/org/scribe/examples/FreelancerExample.java
index fb7dbef..9cf1e93 100644
--- a/src/test/java/org/scribe/examples/FreelancerExample.java
+++ b/src/test/java/org/scribe/examples/FreelancerExample.java
@@ -1,16 +1,10 @@
 package org.scribe.examples;
 
-import java.util.Scanner;
-
-import org.scribe.builder.ServiceBuilder;
-import org.scribe.builder.api.FreelancerAPI;
-import org.scribe.model.OAuthRequest;
-import org.scribe.model.Response;
-import org.scribe.model.SignatureType;
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
-import org.scribe.model.Verifier;
-import org.scribe.oauth.OAuthService;
+import java.util.*;
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
 
 public class FreelancerExample
 {

commit 90081a572c5a34b04ead69ab101e5ff6eddab287
Author: ponyloky <ponyloky@gmail.com>
Date:   Wed Apr 11 19:52:13 2012 -0300

    Tested and completed

diff --git a/src/test/java/org/scribe/examples/FreelancerExample.java b/src/test/java/org/scribe/examples/FreelancerExample.java
index 9cf1e93..d1d5407 100644
--- a/src/test/java/org/scribe/examples/FreelancerExample.java
+++ b/src/test/java/org/scribe/examples/FreelancerExample.java
@@ -17,10 +17,11 @@ public class FreelancerExample
   public static void main(String[] args)
   {
     OAuthService service = new ServiceBuilder()
-                                  .provider(FreelancerAPI.class)
+                                  .provider(FreelancerApi.Sandbox.class)
                                   .signatureType(SignatureType.QueryString)
                                   .apiKey("7f5a168a0bfdbd15b4a9ea2a969661c731cdea56")
-                                  .apiSecret("7bb8961b94873802f1c5344f671a518e087f5785").scope(SCOPE)
+                                  .apiSecret("7bb8961b94873802f1c5344f671a518e087f5785")
+                                  .scope(SCOPE)
                                   .build();
     Scanner in = new Scanner(System.in);
 

commit 129337d4d4e1ef4831417e4e68a5ac112d4e8f50
Author: ponyloky <ponyloky@gmail.com>
Date:   Thu Apr 12 00:44:43 2012 -0300

    Adding missing commit

diff --git a/src/main/java/org/scribe/builder/api/FreelancerAPI.java b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
index d5fedc0..482e66f 100644
--- a/src/main/java/org/scribe/builder/api/FreelancerAPI.java
+++ b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
@@ -2,20 +2,20 @@ package org.scribe.builder.api;
 
 import org.scribe.model.*;
 
-public class FreelancerAPI extends DefaultApi10a
+public class FreelancerApi extends DefaultApi10a
 {
-  private static final String AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php?oauth_token=%s";
+  private static final String AUTHORIZATION_URL = "http://www.freelancer.com/users/api-token/auth.php?oauth_token=%s";
 
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://api.sandbox.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
+    return "http://api.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://api.sandbox.freelancer.com/RequestRequestToken/requestRequestToken.xml";
+    return "http://api.freelancer.com/RequestRequestToken/requestRequestToken.xml";
   }
 
   @Override
@@ -35,4 +35,27 @@ public class FreelancerAPI extends DefaultApi10a
   {
     return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
+
+  public static class Sandbox extends FreelancerApi
+  {
+    private static final String SANDBOX_AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php";
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+      return "http://api.sandbox.freelancer.com/RequestRequestToken/requestRequestToken.xml";
+    }
+
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+      return "http://api.sandbox.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(SANDBOX_AUTHORIZATION_URL + "?oauth_token=%s", requestToken.getToken());
+    }
+  }
 }
diff --git a/target/classes/META-INF/maven/org.scribe/scribe/pom.properties b/target/classes/META-INF/maven/org.scribe/scribe/pom.properties
new file mode 100644
index 0000000..7651577
--- /dev/null
+++ b/target/classes/META-INF/maven/org.scribe/scribe/pom.properties
@@ -0,0 +1,7 @@
+#Generated by Maven Integration for Eclipse
+#Wed Apr 11 19:48:12 GMT-03:00 2012
+version=1.3.0
+groupId=org.scribe
+m2e.projectName=scribe
+m2e.projectLocation=/Volumes/workspace/workspace/ponyloky/scribe-java
+artifactId=scribe
diff --git a/target/classes/META-INF/maven/org.scribe/scribe/pom.xml b/target/classes/META-INF/maven/org.scribe/scribe/pom.xml
new file mode 100644
index 0000000..a3b0196
--- /dev/null
+++ b/target/classes/META-INF/maven/org.scribe/scribe/pom.xml
@@ -0,0 +1,85 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.scribe</groupId>
+  <artifactId>scribe</artifactId>
+  <packaging>jar</packaging>
+  <version>1.3.0</version>
+  <name>Scribe OAuth Library</name>
+  <description>The best OAuth library out there</description>
+  <url>http://github.com/fernandezpablo85/scribe-java</url>
+
+  <parent>
+    <groupId>org.sonatype.oss</groupId>
+    <artifactId>oss-parent</artifactId>
+    <version>5</version>
+  </parent>
+
+  <developers>
+    <developer>
+      <id>fernandezpablo85</id>
+      <name>Pablo Fernandez</name>
+      <email>fernandezpablo85@gmail.com</email>
+      <timezone>-3</timezone>
+    </developer>
+    <developer>
+      <id>diegossilveira</id>
+      <name>Diego Silveira</name>
+      <email>diegossilveira@gmail.com</email>
+      <timezone>-3</timezone>
+    </developer>
+  </developers>
+
+  <licenses>
+    <license>
+      <name>MIT</name>
+      <url>http://github.com/fernandezpablo85/scribe-java/blob/master/LICENSE.txt</url>
+    </license>
+  </licenses>
+
+  <scm>
+    <connection>scm:http://github.com/fernandezpablo85/scribe-java.git</connection>
+    <developerConnection>scm:http://github.com/fernandezpablo85/scribe-java.git</developerConnection>
+    <url>http://github.com/fernandezpablo85/scribe-java.git</url>
+  </scm>
+
+  <dependencies>
+    <dependency>
+      <groupId>commons-codec</groupId>
+      <artifactId>commons-codec</artifactId>
+      <version>1.4</version>
+    </dependency>
+    
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.8.1</version>
+      <scope>test</scope>
+    </dependency>
+    
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-gpg-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>sign-artifacts</id>
+            <phase>verify</phase>
+            <goals>
+              <goal>sign</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+</project>  
diff --git a/target/classes/org/scribe/builder/ServiceBuilder.class b/target/classes/org/scribe/builder/ServiceBuilder.class
new file mode 100644
index 0000000..f6bb961
Binary files /dev/null and b/target/classes/org/scribe/builder/ServiceBuilder.class differ
diff --git a/target/classes/org/scribe/builder/api/Api.class b/target/classes/org/scribe/builder/api/Api.class
new file mode 100644
index 0000000..a92156c
Binary files /dev/null and b/target/classes/org/scribe/builder/api/Api.class differ
diff --git a/target/classes/org/scribe/builder/api/ConstantContactApi.class b/target/classes/org/scribe/builder/api/ConstantContactApi.class
new file mode 100644
index 0000000..83ef22e
Binary files /dev/null and b/target/classes/org/scribe/builder/api/ConstantContactApi.class differ
diff --git a/target/classes/org/scribe/builder/api/DefaultApi10a.class b/target/classes/org/scribe/builder/api/DefaultApi10a.class
new file mode 100644
index 0000000..dd0fccc
Binary files /dev/null and b/target/classes/org/scribe/builder/api/DefaultApi10a.class differ
diff --git a/target/classes/org/scribe/builder/api/DefaultApi20.class b/target/classes/org/scribe/builder/api/DefaultApi20.class
new file mode 100644
index 0000000..556388c
Binary files /dev/null and b/target/classes/org/scribe/builder/api/DefaultApi20.class differ
diff --git a/target/classes/org/scribe/builder/api/DropBoxApi.class b/target/classes/org/scribe/builder/api/DropBoxApi.class
new file mode 100644
index 0000000..0c43451
Binary files /dev/null and b/target/classes/org/scribe/builder/api/DropBoxApi.class differ
diff --git a/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class b/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class
new file mode 100644
index 0000000..d3509e6
Binary files /dev/null and b/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class differ
diff --git a/target/classes/org/scribe/builder/api/EvernoteApi.class b/target/classes/org/scribe/builder/api/EvernoteApi.class
new file mode 100644
index 0000000..fc01519
Binary files /dev/null and b/target/classes/org/scribe/builder/api/EvernoteApi.class differ
diff --git a/target/classes/org/scribe/builder/api/FacebookApi.class b/target/classes/org/scribe/builder/api/FacebookApi.class
new file mode 100644
index 0000000..2adb1ca
Binary files /dev/null and b/target/classes/org/scribe/builder/api/FacebookApi.class differ
diff --git a/target/classes/org/scribe/builder/api/FlickrApi.class b/target/classes/org/scribe/builder/api/FlickrApi.class
new file mode 100644
index 0000000..8ab7764
Binary files /dev/null and b/target/classes/org/scribe/builder/api/FlickrApi.class differ
diff --git a/target/classes/org/scribe/builder/api/Foursquare2Api.class b/target/classes/org/scribe/builder/api/Foursquare2Api.class
new file mode 100644
index 0000000..4f76335
Binary files /dev/null and b/target/classes/org/scribe/builder/api/Foursquare2Api.class differ
diff --git a/target/classes/org/scribe/builder/api/FoursquareApi.class b/target/classes/org/scribe/builder/api/FoursquareApi.class
new file mode 100644
index 0000000..d84f0c4
Binary files /dev/null and b/target/classes/org/scribe/builder/api/FoursquareApi.class differ
diff --git a/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class b/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class
new file mode 100644
index 0000000..fcd2ebe
Binary files /dev/null and b/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class differ
diff --git a/target/classes/org/scribe/builder/api/FreelancerApi.class b/target/classes/org/scribe/builder/api/FreelancerApi.class
new file mode 100644
index 0000000..655b90d
Binary files /dev/null and b/target/classes/org/scribe/builder/api/FreelancerApi.class differ
diff --git a/target/classes/org/scribe/builder/api/GetGlueApi.class b/target/classes/org/scribe/builder/api/GetGlueApi.class
new file mode 100644
index 0000000..cf7ebf4
Binary files /dev/null and b/target/classes/org/scribe/builder/api/GetGlueApi.class differ
diff --git a/target/classes/org/scribe/builder/api/GoogleApi.class b/target/classes/org/scribe/builder/api/GoogleApi.class
new file mode 100644
index 0000000..4710312
Binary files /dev/null and b/target/classes/org/scribe/builder/api/GoogleApi.class differ
diff --git a/target/classes/org/scribe/builder/api/ImgUrApi.class b/target/classes/org/scribe/builder/api/ImgUrApi.class
new file mode 100644
index 0000000..560e2d4
Binary files /dev/null and b/target/classes/org/scribe/builder/api/ImgUrApi.class differ
diff --git a/target/classes/org/scribe/builder/api/KaixinApi.class b/target/classes/org/scribe/builder/api/KaixinApi.class
new file mode 100644
index 0000000..0f565e4
Binary files /dev/null and b/target/classes/org/scribe/builder/api/KaixinApi.class differ
diff --git a/target/classes/org/scribe/builder/api/KaixinApi20.class b/target/classes/org/scribe/builder/api/KaixinApi20.class
new file mode 100644
index 0000000..440a0aa
Binary files /dev/null and b/target/classes/org/scribe/builder/api/KaixinApi20.class differ
diff --git a/target/classes/org/scribe/builder/api/LinkedInApi.class b/target/classes/org/scribe/builder/api/LinkedInApi.class
new file mode 100644
index 0000000..2ed0c35
Binary files /dev/null and b/target/classes/org/scribe/builder/api/LinkedInApi.class differ
diff --git a/target/classes/org/scribe/builder/api/LiveApi.class b/target/classes/org/scribe/builder/api/LiveApi.class
new file mode 100644
index 0000000..3b88654
Binary files /dev/null and b/target/classes/org/scribe/builder/api/LiveApi.class differ
diff --git a/target/classes/org/scribe/builder/api/LoveFilmApi.class b/target/classes/org/scribe/builder/api/LoveFilmApi.class
new file mode 100644
index 0000000..0e610aa
Binary files /dev/null and b/target/classes/org/scribe/builder/api/LoveFilmApi.class differ
diff --git a/target/classes/org/scribe/builder/api/MeetupApi.class b/target/classes/org/scribe/builder/api/MeetupApi.class
new file mode 100644
index 0000000..916c4b0
Binary files /dev/null and b/target/classes/org/scribe/builder/api/MeetupApi.class differ
diff --git a/target/classes/org/scribe/builder/api/MisoApi.class b/target/classes/org/scribe/builder/api/MisoApi.class
new file mode 100644
index 0000000..27fa49b
Binary files /dev/null and b/target/classes/org/scribe/builder/api/MisoApi.class differ
diff --git a/target/classes/org/scribe/builder/api/NetProspexApi.class b/target/classes/org/scribe/builder/api/NetProspexApi.class
new file mode 100644
index 0000000..d927818
Binary files /dev/null and b/target/classes/org/scribe/builder/api/NetProspexApi.class differ
diff --git a/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class b/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class
new file mode 100644
index 0000000..0b9f912
Binary files /dev/null and b/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class differ
diff --git a/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class b/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class
new file mode 100644
index 0000000..60b57a6
Binary files /dev/null and b/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class differ
diff --git a/target/classes/org/scribe/builder/api/PlurkApi.class b/target/classes/org/scribe/builder/api/PlurkApi.class
new file mode 100644
index 0000000..3074e46
Binary files /dev/null and b/target/classes/org/scribe/builder/api/PlurkApi.class differ
diff --git a/target/classes/org/scribe/builder/api/Px500Api.class b/target/classes/org/scribe/builder/api/Px500Api.class
new file mode 100644
index 0000000..91b02dd
Binary files /dev/null and b/target/classes/org/scribe/builder/api/Px500Api.class differ
diff --git a/target/classes/org/scribe/builder/api/QWeiboApi.class b/target/classes/org/scribe/builder/api/QWeiboApi.class
new file mode 100644
index 0000000..e90a668
Binary files /dev/null and b/target/classes/org/scribe/builder/api/QWeiboApi.class differ
diff --git a/target/classes/org/scribe/builder/api/RenrenApi.class b/target/classes/org/scribe/builder/api/RenrenApi.class
new file mode 100644
index 0000000..03971dd
Binary files /dev/null and b/target/classes/org/scribe/builder/api/RenrenApi.class differ
diff --git a/target/classes/org/scribe/builder/api/SapoApi.class b/target/classes/org/scribe/builder/api/SapoApi.class
new file mode 100644
index 0000000..14db87a
Binary files /dev/null and b/target/classes/org/scribe/builder/api/SapoApi.class differ
diff --git a/target/classes/org/scribe/builder/api/SimpleGeoApi.class b/target/classes/org/scribe/builder/api/SimpleGeoApi.class
new file mode 100644
index 0000000..3762ee6
Binary files /dev/null and b/target/classes/org/scribe/builder/api/SimpleGeoApi.class differ
diff --git a/target/classes/org/scribe/builder/api/SinaWeiboApi.class b/target/classes/org/scribe/builder/api/SinaWeiboApi.class
new file mode 100644
index 0000000..7665058
Binary files /dev/null and b/target/classes/org/scribe/builder/api/SinaWeiboApi.class differ
diff --git a/target/classes/org/scribe/builder/api/SinaWeiboApi20.class b/target/classes/org/scribe/builder/api/SinaWeiboApi20.class
new file mode 100644
index 0000000..712a787
Binary files /dev/null and b/target/classes/org/scribe/builder/api/SinaWeiboApi20.class differ
diff --git a/target/classes/org/scribe/builder/api/SohuWeiboApi.class b/target/classes/org/scribe/builder/api/SohuWeiboApi.class
new file mode 100644
index 0000000..f4d76ee
Binary files /dev/null and b/target/classes/org/scribe/builder/api/SohuWeiboApi.class differ
diff --git a/target/classes/org/scribe/builder/api/TumblrApi.class b/target/classes/org/scribe/builder/api/TumblrApi.class
new file mode 100644
index 0000000..5fda63f
Binary files /dev/null and b/target/classes/org/scribe/builder/api/TumblrApi.class differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class b/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class
new file mode 100644
index 0000000..92dd384
Binary files /dev/null and b/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class b/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class
new file mode 100644
index 0000000..ade3762
Binary files /dev/null and b/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$SSL.class b/target/classes/org/scribe/builder/api/TwitterApi$SSL.class
new file mode 100644
index 0000000..5b1106d
Binary files /dev/null and b/target/classes/org/scribe/builder/api/TwitterApi$SSL.class differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi.class b/target/classes/org/scribe/builder/api/TwitterApi.class
new file mode 100644
index 0000000..a91847a
Binary files /dev/null and b/target/classes/org/scribe/builder/api/TwitterApi.class differ
diff --git a/target/classes/org/scribe/builder/api/VimeoApi.class b/target/classes/org/scribe/builder/api/VimeoApi.class
new file mode 100644
index 0000000..c88036c
Binary files /dev/null and b/target/classes/org/scribe/builder/api/VimeoApi.class differ
diff --git a/target/classes/org/scribe/builder/api/VkontakteApi.class b/target/classes/org/scribe/builder/api/VkontakteApi.class
new file mode 100644
index 0000000..a9f7dbf
Binary files /dev/null and b/target/classes/org/scribe/builder/api/VkontakteApi.class differ
diff --git a/target/classes/org/scribe/builder/api/YahooApi.class b/target/classes/org/scribe/builder/api/YahooApi.class
new file mode 100644
index 0000000..baebbe7
Binary files /dev/null and b/target/classes/org/scribe/builder/api/YahooApi.class differ
diff --git a/target/classes/org/scribe/builder/api/YammerApi.class b/target/classes/org/scribe/builder/api/YammerApi.class
new file mode 100644
index 0000000..8f51c5e
Binary files /dev/null and b/target/classes/org/scribe/builder/api/YammerApi.class differ
diff --git a/target/classes/org/scribe/exceptions/OAuthException.class b/target/classes/org/scribe/exceptions/OAuthException.class
new file mode 100644
index 0000000..b13c078
Binary files /dev/null and b/target/classes/org/scribe/exceptions/OAuthException.class differ
diff --git a/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class b/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class
new file mode 100644
index 0000000..1ff1951
Binary files /dev/null and b/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class differ
diff --git a/target/classes/org/scribe/exceptions/OAuthSignatureException.class b/target/classes/org/scribe/exceptions/OAuthSignatureException.class
new file mode 100644
index 0000000..59801bb
Binary files /dev/null and b/target/classes/org/scribe/exceptions/OAuthSignatureException.class differ
diff --git a/target/classes/org/scribe/extractors/AccessTokenExtractor.class b/target/classes/org/scribe/extractors/AccessTokenExtractor.class
new file mode 100644
index 0000000..6de199f
Binary files /dev/null and b/target/classes/org/scribe/extractors/AccessTokenExtractor.class differ
diff --git a/target/classes/org/scribe/extractors/BaseStringExtractor.class b/target/classes/org/scribe/extractors/BaseStringExtractor.class
new file mode 100644
index 0000000..d3faffb
Binary files /dev/null and b/target/classes/org/scribe/extractors/BaseStringExtractor.class differ
diff --git a/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class b/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class
new file mode 100644
index 0000000..dee0916
Binary files /dev/null and b/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class differ
diff --git a/target/classes/org/scribe/extractors/HeaderExtractor.class b/target/classes/org/scribe/extractors/HeaderExtractor.class
new file mode 100644
index 0000000..4189c28
Binary files /dev/null and b/target/classes/org/scribe/extractors/HeaderExtractor.class differ
diff --git a/target/classes/org/scribe/extractors/HeaderExtractorImpl.class b/target/classes/org/scribe/extractors/HeaderExtractorImpl.class
new file mode 100644
index 0000000..776b200
Binary files /dev/null and b/target/classes/org/scribe/extractors/HeaderExtractorImpl.class differ
diff --git a/target/classes/org/scribe/extractors/JsonTokenExtractor.class b/target/classes/org/scribe/extractors/JsonTokenExtractor.class
new file mode 100644
index 0000000..60d49b5
Binary files /dev/null and b/target/classes/org/scribe/extractors/JsonTokenExtractor.class differ
diff --git a/target/classes/org/scribe/extractors/RequestTokenExtractor.class b/target/classes/org/scribe/extractors/RequestTokenExtractor.class
new file mode 100644
index 0000000..d0e15c8
Binary files /dev/null and b/target/classes/org/scribe/extractors/RequestTokenExtractor.class differ
diff --git a/target/classes/org/scribe/extractors/TokenExtractor20Impl.class b/target/classes/org/scribe/extractors/TokenExtractor20Impl.class
new file mode 100644
index 0000000..59970a5
Binary files /dev/null and b/target/classes/org/scribe/extractors/TokenExtractor20Impl.class differ
diff --git a/target/classes/org/scribe/extractors/TokenExtractorImpl.class b/target/classes/org/scribe/extractors/TokenExtractorImpl.class
new file mode 100644
index 0000000..b08fff4
Binary files /dev/null and b/target/classes/org/scribe/extractors/TokenExtractorImpl.class differ
diff --git a/target/classes/org/scribe/model/OAuthConfig.class b/target/classes/org/scribe/model/OAuthConfig.class
new file mode 100644
index 0000000..1031fa5
Binary files /dev/null and b/target/classes/org/scribe/model/OAuthConfig.class differ
diff --git a/target/classes/org/scribe/model/OAuthConstants.class b/target/classes/org/scribe/model/OAuthConstants.class
new file mode 100644
index 0000000..92ef875
Binary files /dev/null and b/target/classes/org/scribe/model/OAuthConstants.class differ
diff --git a/target/classes/org/scribe/model/OAuthRequest.class b/target/classes/org/scribe/model/OAuthRequest.class
new file mode 100644
index 0000000..9009e69
Binary files /dev/null and b/target/classes/org/scribe/model/OAuthRequest.class differ
diff --git a/target/classes/org/scribe/model/Parameter.class b/target/classes/org/scribe/model/Parameter.class
new file mode 100644
index 0000000..3bab553
Binary files /dev/null and b/target/classes/org/scribe/model/Parameter.class differ
diff --git a/target/classes/org/scribe/model/ParameterList.class b/target/classes/org/scribe/model/ParameterList.class
new file mode 100644
index 0000000..caa6736
Binary files /dev/null and b/target/classes/org/scribe/model/ParameterList.class differ
diff --git a/target/classes/org/scribe/model/Request.class b/target/classes/org/scribe/model/Request.class
new file mode 100644
index 0000000..b52bc5c
Binary files /dev/null and b/target/classes/org/scribe/model/Request.class differ
diff --git a/target/classes/org/scribe/model/Response.class b/target/classes/org/scribe/model/Response.class
new file mode 100644
index 0000000..f8ff5b8
Binary files /dev/null and b/target/classes/org/scribe/model/Response.class differ
diff --git a/target/classes/org/scribe/model/SignatureType.class b/target/classes/org/scribe/model/SignatureType.class
new file mode 100644
index 0000000..ac0c214
Binary files /dev/null and b/target/classes/org/scribe/model/SignatureType.class differ
diff --git a/target/classes/org/scribe/model/Token.class b/target/classes/org/scribe/model/Token.class
new file mode 100644
index 0000000..4f37bd4
Binary files /dev/null and b/target/classes/org/scribe/model/Token.class differ
diff --git a/target/classes/org/scribe/model/Verb.class b/target/classes/org/scribe/model/Verb.class
new file mode 100644
index 0000000..61fb785
Binary files /dev/null and b/target/classes/org/scribe/model/Verb.class differ
diff --git a/target/classes/org/scribe/model/Verifier.class b/target/classes/org/scribe/model/Verifier.class
new file mode 100644
index 0000000..c17f7c6
Binary files /dev/null and b/target/classes/org/scribe/model/Verifier.class differ
diff --git a/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class b/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class
new file mode 100644
index 0000000..e8741f5
Binary files /dev/null and b/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class differ
diff --git a/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class b/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class
new file mode 100644
index 0000000..678ae50
Binary files /dev/null and b/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class differ
diff --git a/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class b/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class
new file mode 100644
index 0000000..80a4ba4
Binary files /dev/null and b/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class differ
diff --git a/target/classes/org/scribe/oauth/OAuthService.class b/target/classes/org/scribe/oauth/OAuthService.class
new file mode 100644
index 0000000..e1095f5
Binary files /dev/null and b/target/classes/org/scribe/oauth/OAuthService.class differ
diff --git a/target/classes/org/scribe/services/HMACSha1SignatureService.class b/target/classes/org/scribe/services/HMACSha1SignatureService.class
new file mode 100644
index 0000000..82c06fb
Binary files /dev/null and b/target/classes/org/scribe/services/HMACSha1SignatureService.class differ
diff --git a/target/classes/org/scribe/services/PlaintextSignatureService.class b/target/classes/org/scribe/services/PlaintextSignatureService.class
new file mode 100644
index 0000000..811b01d
Binary files /dev/null and b/target/classes/org/scribe/services/PlaintextSignatureService.class differ
diff --git a/target/classes/org/scribe/services/SignatureService.class b/target/classes/org/scribe/services/SignatureService.class
new file mode 100644
index 0000000..c5093ea
Binary files /dev/null and b/target/classes/org/scribe/services/SignatureService.class differ
diff --git a/target/classes/org/scribe/services/TimestampService.class b/target/classes/org/scribe/services/TimestampService.class
new file mode 100644
index 0000000..9bcf2db
Binary files /dev/null and b/target/classes/org/scribe/services/TimestampService.class differ
diff --git a/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class b/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class
new file mode 100644
index 0000000..4c7a1cd
Binary files /dev/null and b/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class differ
diff --git a/target/classes/org/scribe/services/TimestampServiceImpl.class b/target/classes/org/scribe/services/TimestampServiceImpl.class
new file mode 100644
index 0000000..2792c9f
Binary files /dev/null and b/target/classes/org/scribe/services/TimestampServiceImpl.class differ
diff --git a/target/classes/org/scribe/utils/MapUtils.class b/target/classes/org/scribe/utils/MapUtils.class
new file mode 100644
index 0000000..b87c688
Binary files /dev/null and b/target/classes/org/scribe/utils/MapUtils.class differ
diff --git a/target/classes/org/scribe/utils/OAuthEncoder.class b/target/classes/org/scribe/utils/OAuthEncoder.class
new file mode 100644
index 0000000..296118d
Binary files /dev/null and b/target/classes/org/scribe/utils/OAuthEncoder.class differ
diff --git a/target/classes/org/scribe/utils/Preconditions.class b/target/classes/org/scribe/utils/Preconditions.class
new file mode 100644
index 0000000..56273d1
Binary files /dev/null and b/target/classes/org/scribe/utils/Preconditions.class differ
diff --git a/target/classes/org/scribe/utils/StreamUtils.class b/target/classes/org/scribe/utils/StreamUtils.class
new file mode 100644
index 0000000..76199d7
Binary files /dev/null and b/target/classes/org/scribe/utils/StreamUtils.class differ
diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
new file mode 100644
index 0000000..77aa17e
--- /dev/null
+++ b/target/maven-archiver/pom.properties
@@ -0,0 +1,5 @@
+#Generated by Maven
+#Thu Apr 05 00:39:10 GMT-03:00 2012
+version=1.3.0
+groupId=org.scribe
+artifactId=scribe
diff --git a/target/scribe-1.3.0.jar b/target/scribe-1.3.0.jar
new file mode 100644
index 0000000..2f5b8e2
Binary files /dev/null and b/target/scribe-1.3.0.jar differ
diff --git a/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml b/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml
new file mode 100644
index 0000000..21d794f
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.062" errors="0" skipped="0" tests="5" name="org.scribe.builder.ServiceBuilderTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.005" classname="org.scribe.builder.ServiceBuilderTest" name="shouldReturnConfigDefaultValues"/>
+  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptValidCallbackUrl"/>
+  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptASignatureType"/>
+  <testcase time="0.001" classname="org.scribe.builder.ServiceBuilderTest" name="shouldNotAcceptNullAsCallback"/>
+  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptAnScope"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml
new file mode 100644
index 0000000..771b520
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.024" errors="0" skipped="0" tests="4" name="org.scribe.extractors.BaseStringExtractorTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.01" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldExtractBaseStringFromOAuthRequest"/>
+  <testcase time="0" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldThrowExceptionIfRquestIsNull"/>
+  <testcase time="0" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldThrowExceptionIfRquestHasNoOAuthParameters"/>
+  <testcase time="0.002" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldProperlyEncodeSpaces"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml
new file mode 100644
index 0000000..9339bfa
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.005" errors="0" skipped="0" tests="3" name="org.scribe.extractors.HeaderExtractorTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExtractStandardHeader"/>
+  <testcase time="0" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExceptionIfRequestIsNull"/>
+  <testcase time="0" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExceptionIfRequestHasNoOAuthParams"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml
new file mode 100644
index 0000000..2459152
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.006" errors="0" skipped="0" tests="3" name="org.scribe.extractors.JsonTokenExtractorTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldParseResponse"/>
+  <testcase time="0.001" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldThrowExceptionIfForNullParameters"/>
+  <testcase time="0" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldThrowExceptionIfForEmptyStrings"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml
new file mode 100644
index 0000000..9ee8d37
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.009" errors="0" skipped="0" tests="6" name="org.scribe.extractors.TokenExtractor20Test">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromOAuthStandardResponse"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromResponseWithExpiresParam"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromResponseWithManyParameters"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfTokenIsAbsent"/>
+  <testcase time="0.002" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfResponseIsNull"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfResponseIsEmptyString"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml
new file mode 100644
index 0000000..47be599
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="7" name="org.scribe.extractors.TokenExtractorTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromOAuthStandardResponse"/>
+  <testcase time="0.001" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfTokenIsAbsent"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfResponseIsNull"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfResponseIsEmptyString"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromInvertedOAuthStandardResponse"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromResponseWithCallbackConfirmed"/>
+  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfSecretIsAbsent"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml b/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml
new file mode 100644
index 0000000..ee91196
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.002" errors="0" skipped="0" tests="2" name="org.scribe.model.OAuthRequestTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.model.OAuthRequestTest" name="shouldAddOAuthParamters"/>
+  <testcase time="0" classname="org.scribe.model.OAuthRequestTest" name="shouldThrowExceptionIfParameterIsNotOAuth"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml b/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml
new file mode 100644
index 0000000..dbeb194
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.023" errors="0" skipped="0" tests="7" name="org.scribe.model.ParameterListTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldThrowExceptionWhenAppendingNullMapToQuerystring"/>
+  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldAppendNothingToQuerystringIfGivenEmptyMap"/>
+  <testcase time="0.002" classname="org.scribe.model.ParameterListTest" name="shouldAppendParametersToSimpleUrl"/>
+  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldAppendParametersToUrlWithQuerystring"/>
+  <testcase time="0.001" classname="org.scribe.model.ParameterListTest" name="shouldProperlySortParameters"/>
+  <testcase time="0.008" classname="org.scribe.model.ParameterListTest" name="shouldProperlySortParametersWithTheSameName"/>
+  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldNotModifyTheOriginalParameterList"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml b/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml
new file mode 100644
index 0000000..3e9f3e2
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.014" errors="0" skipped="0" tests="13" name="org.scribe.model.RequestTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.002" classname="org.scribe.model.RequestTest" name="shouldSetRequestVerb"/>
+  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldGetQueryStringParameters"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAddRequestHeaders"/>
+  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldSetBodyParamsAndAddContentLength"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldSetPayloadAndHeaders"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAllowAddingQuerystringParametersAfterCreation"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldReturnTheCompleteUrl"/>
+  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldHandleQueryStringSpaceEncodingProperly"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithBytePayload"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithStringPayload"/>
+  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithBodyParameters"/>
+  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldBeAbleToOverrideItsContentType"/>
+  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldNotAddContentTypeForGetRequests"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml b/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml
new file mode 100644
index 0000000..611fa6a
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="4" name="org.scribe.model.ResponseTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.model.ResponseTest" name="shouldPopulateResponseHeaders"/>
+  <testcase time="0.001" classname="org.scribe.model.ResponseTest" name="shouldParseBodyContents"/>
+  <testcase time="0" classname="org.scribe.model.ResponseTest" name="shouldParseBodyContentsOnlyOnce"/>
+  <testcase time="0" classname="org.scribe.model.ResponseTest" name="shouldHandleAConnectionWithErrors"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml b/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml
new file mode 100644
index 0000000..52b0946
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.208" errors="0" skipped="0" tests="6" name="org.scribe.services.HMACSha1SignatureServiceTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldReturnSignatureMethodString"/>
+  <testcase time="0.196" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldReturnSignature"/>
+  <testcase time="0" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfBaseStringIsNull"/>
+  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfBaseStringIsEmpty"/>
+  <testcase time="0" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfApiSecretIsNull"/>
+  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfApiSecretIsEmpty"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml b/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml
new file mode 100644
index 0000000..ffa7831
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.004" errors="0" skipped="0" tests="2" name="org.scribe.services.TimestampServiceTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.services.TimestampServiceTest" name="shouldReturnTimestampInSeconds"/>
+  <testcase time="0" classname="org.scribe.services.TimestampServiceTest" name="shouldReturnNonce"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml
new file mode 100644
index 0000000..ea1ad29
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="3" name="org.scribe.utils.MapUtilsTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.003" classname="org.scribe.utils.MapUtilsTest" name="shouldPrettyPrintMap"/>
+  <testcase time="0" classname="org.scribe.utils.MapUtilsTest" name="shouldHandleEmptyMap"/>
+  <testcase time="0" classname="org.scribe.utils.MapUtilsTest" name="shouldHandleNullInputs"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml b/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml
new file mode 100644
index 0000000..7784554
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.014" errors="0" skipped="0" tests="7" name="org.scribe.utils.OAuthEncoderTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeString"/>
+  <testcase time="0.001" classname="org.scribe.utils.OAuthEncoderTest" name="shouldFormURLDecodeString"/>
+  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeAllSpecialCharacters"/>
+  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldNotPercentEncodeReservedCharacters"/>
+  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldThrowExceptionIfStringToEncodeIsNull"/>
+  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldThrowExceptionIfStringToDecodeIsNull"/>
+  <testcase time="0.008" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeCorrectlyTwitterCodingExamples"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml
new file mode 100644
index 0000000..bb8610d
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.007" errors="0" skipped="0" tests="7" name="org.scribe.utils.PreconditionsTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullObjects"/>
+  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullStrings"/>
+  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForEmptyStrings"/>
+  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForSpacesOnlyStrings"/>
+  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForInvalidUrls"/>
+  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullUrls"/>
+  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldNotAllowStrangeProtocolNames"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml
new file mode 100644
index 0000000..8e4d23f
--- /dev/null
+++ b/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.002" errors="0" skipped="0" tests="2" name="org.scribe.utils.StreamUtilsTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
+    <property name="java.vm.version" value="20.4-b02-402"/>
+    <property name="awt.nativeDoubleBuffering" value="true"/>
+    <property name="gopherProxySet" value="false"/>
+    <property name="mrj.build" value="11D50"/>
+    <property name="java.vm.vendor" value="Apple Inc."/>
+    <property name="java.vendor.url" value="http://www.apple.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
+    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
+    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
+    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
+    <property name="os.arch" value="x86_64"/>
+    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
+    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Mac OS X"/>
+    <property name="sun.jnu.encoding" value="MacRoman"/>
+    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
+    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="10.7.3"/>
+    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="user.home" value="/Users/joniloky"/>
+    <property name="user.timezone" value=""/>
+    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="file.encoding" value="MacRoman"/>
+    <property name="user.name" value="joniloky"/>
+    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
+    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_29"/>
+    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
+    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
+    <property name="java.vendor" value="Apple Inc."/>
+    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="mrj.version" value="1070.1.6.0_29-402"/>
+    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.001" classname="org.scribe.utils.StreamUtilsTest" name="shouldCorrectlyDecodeAStream"/>
+  <testcase time="0" classname="org.scribe.utils.StreamUtilsTest" name="shouldFailForNullParameter"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt b/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt
new file mode 100644
index 0000000..d8e5659
--- /dev/null
+++ b/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.builder.ServiceBuilderTest
+-------------------------------------------------------------------------------
+Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 sec
diff --git a/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt
new file mode 100644
index 0000000..db65713
--- /dev/null
+++ b/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.extractors.BaseStringExtractorTest
+-------------------------------------------------------------------------------
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
diff --git a/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt
new file mode 100644
index 0000000..efa2709
--- /dev/null
+++ b/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.extractors.HeaderExtractorTest
+-------------------------------------------------------------------------------
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
diff --git a/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt
new file mode 100644
index 0000000..59dc906
--- /dev/null
+++ b/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.extractors.JsonTokenExtractorTest
+-------------------------------------------------------------------------------
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
diff --git a/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt b/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt
new file mode 100644
index 0000000..d753714
--- /dev/null
+++ b/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.extractors.TokenExtractor20Test
+-------------------------------------------------------------------------------
+Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec
diff --git a/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt
new file mode 100644
index 0000000..45aadfd
--- /dev/null
+++ b/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.extractors.TokenExtractorTest
+-------------------------------------------------------------------------------
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
diff --git a/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt b/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt
new file mode 100644
index 0000000..5e0e199
--- /dev/null
+++ b/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.model.OAuthRequestTest
+-------------------------------------------------------------------------------
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
diff --git a/target/surefire-reports/org.scribe.model.ParameterListTest.txt b/target/surefire-reports/org.scribe.model.ParameterListTest.txt
new file mode 100644
index 0000000..333b4b7
--- /dev/null
+++ b/target/surefire-reports/org.scribe.model.ParameterListTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.model.ParameterListTest
+-------------------------------------------------------------------------------
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec
diff --git a/target/surefire-reports/org.scribe.model.RequestTest.txt b/target/surefire-reports/org.scribe.model.RequestTest.txt
new file mode 100644
index 0000000..e7c967a
--- /dev/null
+++ b/target/surefire-reports/org.scribe.model.RequestTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.model.RequestTest
+-------------------------------------------------------------------------------
+Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
diff --git a/target/surefire-reports/org.scribe.model.ResponseTest.txt b/target/surefire-reports/org.scribe.model.ResponseTest.txt
new file mode 100644
index 0000000..0dfae74
--- /dev/null
+++ b/target/surefire-reports/org.scribe.model.ResponseTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.model.ResponseTest
+-------------------------------------------------------------------------------
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
diff --git a/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt b/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt
new file mode 100644
index 0000000..7adad19
--- /dev/null
+++ b/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.services.HMACSha1SignatureServiceTest
+-------------------------------------------------------------------------------
+Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.207 sec
diff --git a/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt b/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt
new file mode 100644
index 0000000..8026b54
--- /dev/null
+++ b/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.services.TimestampServiceTest
+-------------------------------------------------------------------------------
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
diff --git a/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt b/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt
new file mode 100644
index 0000000..b3b36bf
--- /dev/null
+++ b/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.utils.MapUtilsTest
+-------------------------------------------------------------------------------
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
diff --git a/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt b/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt
new file mode 100644
index 0000000..6289f23
--- /dev/null
+++ b/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.utils.OAuthEncoderTest
+-------------------------------------------------------------------------------
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
diff --git a/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt b/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt
new file mode 100644
index 0000000..8521277
--- /dev/null
+++ b/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.utils.PreconditionsTest
+-------------------------------------------------------------------------------
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
diff --git a/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt b/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt
new file mode 100644
index 0000000..68b8ac0
--- /dev/null
+++ b/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: org.scribe.utils.StreamUtilsTest
+-------------------------------------------------------------------------------
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
diff --git a/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class b/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class
new file mode 100644
index 0000000..e849815
Binary files /dev/null and b/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class differ
diff --git a/target/test-classes/org/scribe/builder/ServiceBuilderTest.class b/target/test-classes/org/scribe/builder/ServiceBuilderTest.class
new file mode 100644
index 0000000..c6c126e
Binary files /dev/null and b/target/test-classes/org/scribe/builder/ServiceBuilderTest.class differ
diff --git a/target/test-classes/org/scribe/examples/FacebookExample.class b/target/test-classes/org/scribe/examples/FacebookExample.class
new file mode 100644
index 0000000..76b69f8
Binary files /dev/null and b/target/test-classes/org/scribe/examples/FacebookExample.class differ
diff --git a/target/test-classes/org/scribe/examples/FlickrExample.class b/target/test-classes/org/scribe/examples/FlickrExample.class
new file mode 100644
index 0000000..974946e
Binary files /dev/null and b/target/test-classes/org/scribe/examples/FlickrExample.class differ
diff --git a/target/test-classes/org/scribe/examples/Foursquare2Example.class b/target/test-classes/org/scribe/examples/Foursquare2Example.class
new file mode 100644
index 0000000..5eed3af
Binary files /dev/null and b/target/test-classes/org/scribe/examples/Foursquare2Example.class differ
diff --git a/target/test-classes/org/scribe/examples/FoursquareExample.class b/target/test-classes/org/scribe/examples/FoursquareExample.class
new file mode 100644
index 0000000..e6ffaef
Binary files /dev/null and b/target/test-classes/org/scribe/examples/FoursquareExample.class differ
diff --git a/target/test-classes/org/scribe/examples/FreelancerExample.class b/target/test-classes/org/scribe/examples/FreelancerExample.class
new file mode 100644
index 0000000..dc6f3b3
Binary files /dev/null and b/target/test-classes/org/scribe/examples/FreelancerExample.class differ
diff --git a/target/test-classes/org/scribe/examples/GoogleExample.class b/target/test-classes/org/scribe/examples/GoogleExample.class
new file mode 100644
index 0000000..36bdf8d
Binary files /dev/null and b/target/test-classes/org/scribe/examples/GoogleExample.class differ
diff --git a/target/test-classes/org/scribe/examples/ImgUrExample.class b/target/test-classes/org/scribe/examples/ImgUrExample.class
new file mode 100644
index 0000000..46b36ad
Binary files /dev/null and b/target/test-classes/org/scribe/examples/ImgUrExample.class differ
diff --git a/target/test-classes/org/scribe/examples/Kaixin20Example.class b/target/test-classes/org/scribe/examples/Kaixin20Example.class
new file mode 100644
index 0000000..2b04d29
Binary files /dev/null and b/target/test-classes/org/scribe/examples/Kaixin20Example.class differ
diff --git a/target/test-classes/org/scribe/examples/LinkedInExample.class b/target/test-classes/org/scribe/examples/LinkedInExample.class
new file mode 100644
index 0000000..eae2a12
Binary files /dev/null and b/target/test-classes/org/scribe/examples/LinkedInExample.class differ
diff --git a/target/test-classes/org/scribe/examples/LiveExample.class b/target/test-classes/org/scribe/examples/LiveExample.class
new file mode 100644
index 0000000..eadd9ca
Binary files /dev/null and b/target/test-classes/org/scribe/examples/LiveExample.class differ
diff --git a/target/test-classes/org/scribe/examples/LoveFilmExample.class b/target/test-classes/org/scribe/examples/LoveFilmExample.class
new file mode 100644
index 0000000..826a8f1
Binary files /dev/null and b/target/test-classes/org/scribe/examples/LoveFilmExample.class differ
diff --git a/target/test-classes/org/scribe/examples/MeetupExample.class b/target/test-classes/org/scribe/examples/MeetupExample.class
new file mode 100644
index 0000000..e005d60
Binary files /dev/null and b/target/test-classes/org/scribe/examples/MeetupExample.class differ
diff --git a/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class b/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class
new file mode 100644
index 0000000..546c11e
Binary files /dev/null and b/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class differ
diff --git a/target/test-classes/org/scribe/examples/Px500Example.class b/target/test-classes/org/scribe/examples/Px500Example.class
new file mode 100644
index 0000000..300edaa
Binary files /dev/null and b/target/test-classes/org/scribe/examples/Px500Example.class differ
diff --git a/target/test-classes/org/scribe/examples/RenrenExample.class b/target/test-classes/org/scribe/examples/RenrenExample.class
new file mode 100644
index 0000000..089c6b7
Binary files /dev/null and b/target/test-classes/org/scribe/examples/RenrenExample.class differ
diff --git a/target/test-classes/org/scribe/examples/SinaWeibo2Example.class b/target/test-classes/org/scribe/examples/SinaWeibo2Example.class
new file mode 100644
index 0000000..a82393d
Binary files /dev/null and b/target/test-classes/org/scribe/examples/SinaWeibo2Example.class differ
diff --git a/target/test-classes/org/scribe/examples/SinaWeiboExample.class b/target/test-classes/org/scribe/examples/SinaWeiboExample.class
new file mode 100644
index 0000000..44740e1
Binary files /dev/null and b/target/test-classes/org/scribe/examples/SinaWeiboExample.class differ
diff --git a/target/test-classes/org/scribe/examples/SohuWeiboExample.class b/target/test-classes/org/scribe/examples/SohuWeiboExample.class
new file mode 100644
index 0000000..939f27a
Binary files /dev/null and b/target/test-classes/org/scribe/examples/SohuWeiboExample.class differ
diff --git a/target/test-classes/org/scribe/examples/TwitterExample.class b/target/test-classes/org/scribe/examples/TwitterExample.class
new file mode 100644
index 0000000..47b0c51
Binary files /dev/null and b/target/test-classes/org/scribe/examples/TwitterExample.class differ
diff --git a/target/test-classes/org/scribe/examples/VkontakteExample.class b/target/test-classes/org/scribe/examples/VkontakteExample.class
new file mode 100644
index 0000000..bb9219a
Binary files /dev/null and b/target/test-classes/org/scribe/examples/VkontakteExample.class differ
diff --git a/target/test-classes/org/scribe/examples/YahooExample.class b/target/test-classes/org/scribe/examples/YahooExample.class
new file mode 100644
index 0000000..8688595
Binary files /dev/null and b/target/test-classes/org/scribe/examples/YahooExample.class differ
diff --git a/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class b/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class
new file mode 100644
index 0000000..4a410d4
Binary files /dev/null and b/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class differ
diff --git a/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class b/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class
new file mode 100644
index 0000000..9532b41
Binary files /dev/null and b/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class differ
diff --git a/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class b/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class
new file mode 100644
index 0000000..ae476d2
Binary files /dev/null and b/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class differ
diff --git a/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class b/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class
new file mode 100644
index 0000000..e91347f
Binary files /dev/null and b/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class differ
diff --git a/target/test-classes/org/scribe/extractors/TokenExtractorTest.class b/target/test-classes/org/scribe/extractors/TokenExtractorTest.class
new file mode 100644
index 0000000..d79b1b8
Binary files /dev/null and b/target/test-classes/org/scribe/extractors/TokenExtractorTest.class differ
diff --git a/target/test-classes/org/scribe/model/ConnectionStub.class b/target/test-classes/org/scribe/model/ConnectionStub.class
new file mode 100644
index 0000000..edd8ed6
Binary files /dev/null and b/target/test-classes/org/scribe/model/ConnectionStub.class differ
diff --git a/target/test-classes/org/scribe/model/OAuthRequestTest.class b/target/test-classes/org/scribe/model/OAuthRequestTest.class
new file mode 100644
index 0000000..230e4d7
Binary files /dev/null and b/target/test-classes/org/scribe/model/OAuthRequestTest.class differ
diff --git a/target/test-classes/org/scribe/model/ParameterListTest.class b/target/test-classes/org/scribe/model/ParameterListTest.class
new file mode 100644
index 0000000..46be609
Binary files /dev/null and b/target/test-classes/org/scribe/model/ParameterListTest.class differ
diff --git a/target/test-classes/org/scribe/model/RequestTest.class b/target/test-classes/org/scribe/model/RequestTest.class
new file mode 100644
index 0000000..5305773
Binary files /dev/null and b/target/test-classes/org/scribe/model/RequestTest.class differ
diff --git a/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class b/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class
new file mode 100644
index 0000000..0b29ee0
Binary files /dev/null and b/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class differ
diff --git a/target/test-classes/org/scribe/model/ResponseTest.class b/target/test-classes/org/scribe/model/ResponseTest.class
new file mode 100644
index 0000000..355450f
Binary files /dev/null and b/target/test-classes/org/scribe/model/ResponseTest.class differ
diff --git a/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class b/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class
new file mode 100644
index 0000000..9302cad
Binary files /dev/null and b/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest$1.class b/target/test-classes/org/scribe/services/TimestampServiceTest$1.class
new file mode 100644
index 0000000..75ce21d
Binary files /dev/null and b/target/test-classes/org/scribe/services/TimestampServiceTest$1.class differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class b/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class
new file mode 100644
index 0000000..ec73c44
Binary files /dev/null and b/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest.class b/target/test-classes/org/scribe/services/TimestampServiceTest.class
new file mode 100644
index 0000000..1d60ba7
Binary files /dev/null and b/target/test-classes/org/scribe/services/TimestampServiceTest.class differ
diff --git a/target/test-classes/org/scribe/test/helpers/ObjectMother.class b/target/test-classes/org/scribe/test/helpers/ObjectMother.class
new file mode 100644
index 0000000..aba8619
Binary files /dev/null and b/target/test-classes/org/scribe/test/helpers/ObjectMother.class differ
diff --git a/target/test-classes/org/scribe/utils/MapUtilsTest.class b/target/test-classes/org/scribe/utils/MapUtilsTest.class
new file mode 100644
index 0000000..e90e56e
Binary files /dev/null and b/target/test-classes/org/scribe/utils/MapUtilsTest.class differ
diff --git a/target/test-classes/org/scribe/utils/OAuthEncoderTest.class b/target/test-classes/org/scribe/utils/OAuthEncoderTest.class
new file mode 100644
index 0000000..b6126c4
Binary files /dev/null and b/target/test-classes/org/scribe/utils/OAuthEncoderTest.class differ
diff --git a/target/test-classes/org/scribe/utils/PreconditionsTest.class b/target/test-classes/org/scribe/utils/PreconditionsTest.class
new file mode 100644
index 0000000..4ac39fa
Binary files /dev/null and b/target/test-classes/org/scribe/utils/PreconditionsTest.class differ
diff --git a/target/test-classes/org/scribe/utils/StreamUtilsTest.class b/target/test-classes/org/scribe/utils/StreamUtilsTest.class
new file mode 100644
index 0000000..793b2a0
Binary files /dev/null and b/target/test-classes/org/scribe/utils/StreamUtilsTest.class differ

commit d35ef44b024a2913aa49fbbcc96d29b9692d939e
Author: ponyloky <ponyloky@gmail.com>
Date:   Thu Apr 12 00:46:59 2012 -0300

    This should add missing commit

diff --git a/target/classes/META-INF/maven/org.scribe/scribe/pom.properties b/target/classes/META-INF/maven/org.scribe/scribe/pom.properties
deleted file mode 100644
index 7651577..0000000
--- a/target/classes/META-INF/maven/org.scribe/scribe/pom.properties
+++ /dev/null
@@ -1,7 +0,0 @@
-#Generated by Maven Integration for Eclipse
-#Wed Apr 11 19:48:12 GMT-03:00 2012
-version=1.3.0
-groupId=org.scribe
-m2e.projectName=scribe
-m2e.projectLocation=/Volumes/workspace/workspace/ponyloky/scribe-java
-artifactId=scribe
diff --git a/target/classes/META-INF/maven/org.scribe/scribe/pom.xml b/target/classes/META-INF/maven/org.scribe/scribe/pom.xml
deleted file mode 100644
index a3b0196..0000000
--- a/target/classes/META-INF/maven/org.scribe/scribe/pom.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>org.scribe</groupId>
-  <artifactId>scribe</artifactId>
-  <packaging>jar</packaging>
-  <version>1.3.0</version>
-  <name>Scribe OAuth Library</name>
-  <description>The best OAuth library out there</description>
-  <url>http://github.com/fernandezpablo85/scribe-java</url>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>5</version>
-  </parent>
-
-  <developers>
-    <developer>
-      <id>fernandezpablo85</id>
-      <name>Pablo Fernandez</name>
-      <email>fernandezpablo85@gmail.com</email>
-      <timezone>-3</timezone>
-    </developer>
-    <developer>
-      <id>diegossilveira</id>
-      <name>Diego Silveira</name>
-      <email>diegossilveira@gmail.com</email>
-      <timezone>-3</timezone>
-    </developer>
-  </developers>
-
-  <licenses>
-    <license>
-      <name>MIT</name>
-      <url>http://github.com/fernandezpablo85/scribe-java/blob/master/LICENSE.txt</url>
-    </license>
-  </licenses>
-
-  <scm>
-    <connection>scm:http://github.com/fernandezpablo85/scribe-java.git</connection>
-    <developerConnection>scm:http://github.com/fernandezpablo85/scribe-java.git</developerConnection>
-    <url>http://github.com/fernandezpablo85/scribe-java.git</url>
-  </scm>
-
-  <dependencies>
-    <dependency>
-      <groupId>commons-codec</groupId>
-      <artifactId>commons-codec</artifactId>
-      <version>1.4</version>
-    </dependency>
-    
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.8.1</version>
-      <scope>test</scope>
-    </dependency>
-    
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.5</source>
-          <target>1.5</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-gpg-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>sign-artifacts</id>
-            <phase>verify</phase>
-            <goals>
-              <goal>sign</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-</project>  
diff --git a/target/classes/org/scribe/builder/ServiceBuilder.class b/target/classes/org/scribe/builder/ServiceBuilder.class
deleted file mode 100644
index f6bb961..0000000
Binary files a/target/classes/org/scribe/builder/ServiceBuilder.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/Api.class b/target/classes/org/scribe/builder/api/Api.class
deleted file mode 100644
index a92156c..0000000
Binary files a/target/classes/org/scribe/builder/api/Api.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/ConstantContactApi.class b/target/classes/org/scribe/builder/api/ConstantContactApi.class
deleted file mode 100644
index 83ef22e..0000000
Binary files a/target/classes/org/scribe/builder/api/ConstantContactApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/DefaultApi10a.class b/target/classes/org/scribe/builder/api/DefaultApi10a.class
deleted file mode 100644
index dd0fccc..0000000
Binary files a/target/classes/org/scribe/builder/api/DefaultApi10a.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/DefaultApi20.class b/target/classes/org/scribe/builder/api/DefaultApi20.class
deleted file mode 100644
index 556388c..0000000
Binary files a/target/classes/org/scribe/builder/api/DefaultApi20.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/DropBoxApi.class b/target/classes/org/scribe/builder/api/DropBoxApi.class
deleted file mode 100644
index 0c43451..0000000
Binary files a/target/classes/org/scribe/builder/api/DropBoxApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class b/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class
deleted file mode 100644
index d3509e6..0000000
Binary files a/target/classes/org/scribe/builder/api/EvernoteApi$Sandbox.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/EvernoteApi.class b/target/classes/org/scribe/builder/api/EvernoteApi.class
deleted file mode 100644
index fc01519..0000000
Binary files a/target/classes/org/scribe/builder/api/EvernoteApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/FacebookApi.class b/target/classes/org/scribe/builder/api/FacebookApi.class
deleted file mode 100644
index 2adb1ca..0000000
Binary files a/target/classes/org/scribe/builder/api/FacebookApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/FlickrApi.class b/target/classes/org/scribe/builder/api/FlickrApi.class
deleted file mode 100644
index 8ab7764..0000000
Binary files a/target/classes/org/scribe/builder/api/FlickrApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/Foursquare2Api.class b/target/classes/org/scribe/builder/api/Foursquare2Api.class
deleted file mode 100644
index 4f76335..0000000
Binary files a/target/classes/org/scribe/builder/api/Foursquare2Api.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/FoursquareApi.class b/target/classes/org/scribe/builder/api/FoursquareApi.class
deleted file mode 100644
index d84f0c4..0000000
Binary files a/target/classes/org/scribe/builder/api/FoursquareApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class b/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class
deleted file mode 100644
index fcd2ebe..0000000
Binary files a/target/classes/org/scribe/builder/api/FreelancerApi$Sandbox.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/FreelancerApi.class b/target/classes/org/scribe/builder/api/FreelancerApi.class
deleted file mode 100644
index 655b90d..0000000
Binary files a/target/classes/org/scribe/builder/api/FreelancerApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/GetGlueApi.class b/target/classes/org/scribe/builder/api/GetGlueApi.class
deleted file mode 100644
index cf7ebf4..0000000
Binary files a/target/classes/org/scribe/builder/api/GetGlueApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/GoogleApi.class b/target/classes/org/scribe/builder/api/GoogleApi.class
deleted file mode 100644
index 4710312..0000000
Binary files a/target/classes/org/scribe/builder/api/GoogleApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/ImgUrApi.class b/target/classes/org/scribe/builder/api/ImgUrApi.class
deleted file mode 100644
index 560e2d4..0000000
Binary files a/target/classes/org/scribe/builder/api/ImgUrApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/KaixinApi.class b/target/classes/org/scribe/builder/api/KaixinApi.class
deleted file mode 100644
index 0f565e4..0000000
Binary files a/target/classes/org/scribe/builder/api/KaixinApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/KaixinApi20.class b/target/classes/org/scribe/builder/api/KaixinApi20.class
deleted file mode 100644
index 440a0aa..0000000
Binary files a/target/classes/org/scribe/builder/api/KaixinApi20.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/LinkedInApi.class b/target/classes/org/scribe/builder/api/LinkedInApi.class
deleted file mode 100644
index 2ed0c35..0000000
Binary files a/target/classes/org/scribe/builder/api/LinkedInApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/LiveApi.class b/target/classes/org/scribe/builder/api/LiveApi.class
deleted file mode 100644
index 3b88654..0000000
Binary files a/target/classes/org/scribe/builder/api/LiveApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/LoveFilmApi.class b/target/classes/org/scribe/builder/api/LoveFilmApi.class
deleted file mode 100644
index 0e610aa..0000000
Binary files a/target/classes/org/scribe/builder/api/LoveFilmApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/MeetupApi.class b/target/classes/org/scribe/builder/api/MeetupApi.class
deleted file mode 100644
index 916c4b0..0000000
Binary files a/target/classes/org/scribe/builder/api/MeetupApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/MisoApi.class b/target/classes/org/scribe/builder/api/MisoApi.class
deleted file mode 100644
index 27fa49b..0000000
Binary files a/target/classes/org/scribe/builder/api/MisoApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/NetProspexApi.class b/target/classes/org/scribe/builder/api/NetProspexApi.class
deleted file mode 100644
index d927818..0000000
Binary files a/target/classes/org/scribe/builder/api/NetProspexApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class b/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class
deleted file mode 100644
index 0b9f912..0000000
Binary files a/target/classes/org/scribe/builder/api/NeteaseWeibooApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class b/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class
deleted file mode 100644
index 60b57a6..0000000
Binary files a/target/classes/org/scribe/builder/api/PlurkApi$Mobile.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/PlurkApi.class b/target/classes/org/scribe/builder/api/PlurkApi.class
deleted file mode 100644
index 3074e46..0000000
Binary files a/target/classes/org/scribe/builder/api/PlurkApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/Px500Api.class b/target/classes/org/scribe/builder/api/Px500Api.class
deleted file mode 100644
index 91b02dd..0000000
Binary files a/target/classes/org/scribe/builder/api/Px500Api.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/QWeiboApi.class b/target/classes/org/scribe/builder/api/QWeiboApi.class
deleted file mode 100644
index e90a668..0000000
Binary files a/target/classes/org/scribe/builder/api/QWeiboApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/RenrenApi.class b/target/classes/org/scribe/builder/api/RenrenApi.class
deleted file mode 100644
index 03971dd..0000000
Binary files a/target/classes/org/scribe/builder/api/RenrenApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/SapoApi.class b/target/classes/org/scribe/builder/api/SapoApi.class
deleted file mode 100644
index 14db87a..0000000
Binary files a/target/classes/org/scribe/builder/api/SapoApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/SimpleGeoApi.class b/target/classes/org/scribe/builder/api/SimpleGeoApi.class
deleted file mode 100644
index 3762ee6..0000000
Binary files a/target/classes/org/scribe/builder/api/SimpleGeoApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/SinaWeiboApi.class b/target/classes/org/scribe/builder/api/SinaWeiboApi.class
deleted file mode 100644
index 7665058..0000000
Binary files a/target/classes/org/scribe/builder/api/SinaWeiboApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/SinaWeiboApi20.class b/target/classes/org/scribe/builder/api/SinaWeiboApi20.class
deleted file mode 100644
index 712a787..0000000
Binary files a/target/classes/org/scribe/builder/api/SinaWeiboApi20.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/SohuWeiboApi.class b/target/classes/org/scribe/builder/api/SohuWeiboApi.class
deleted file mode 100644
index f4d76ee..0000000
Binary files a/target/classes/org/scribe/builder/api/SohuWeiboApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/TumblrApi.class b/target/classes/org/scribe/builder/api/TumblrApi.class
deleted file mode 100644
index 5fda63f..0000000
Binary files a/target/classes/org/scribe/builder/api/TumblrApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class b/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class
deleted file mode 100644
index 92dd384..0000000
Binary files a/target/classes/org/scribe/builder/api/TwitterApi$Authenticate.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class b/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class
deleted file mode 100644
index ade3762..0000000
Binary files a/target/classes/org/scribe/builder/api/TwitterApi$Authorize.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi$SSL.class b/target/classes/org/scribe/builder/api/TwitterApi$SSL.class
deleted file mode 100644
index 5b1106d..0000000
Binary files a/target/classes/org/scribe/builder/api/TwitterApi$SSL.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/TwitterApi.class b/target/classes/org/scribe/builder/api/TwitterApi.class
deleted file mode 100644
index a91847a..0000000
Binary files a/target/classes/org/scribe/builder/api/TwitterApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/VimeoApi.class b/target/classes/org/scribe/builder/api/VimeoApi.class
deleted file mode 100644
index c88036c..0000000
Binary files a/target/classes/org/scribe/builder/api/VimeoApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/VkontakteApi.class b/target/classes/org/scribe/builder/api/VkontakteApi.class
deleted file mode 100644
index a9f7dbf..0000000
Binary files a/target/classes/org/scribe/builder/api/VkontakteApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/YahooApi.class b/target/classes/org/scribe/builder/api/YahooApi.class
deleted file mode 100644
index baebbe7..0000000
Binary files a/target/classes/org/scribe/builder/api/YahooApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/builder/api/YammerApi.class b/target/classes/org/scribe/builder/api/YammerApi.class
deleted file mode 100644
index 8f51c5e..0000000
Binary files a/target/classes/org/scribe/builder/api/YammerApi.class and /dev/null differ
diff --git a/target/classes/org/scribe/exceptions/OAuthException.class b/target/classes/org/scribe/exceptions/OAuthException.class
deleted file mode 100644
index b13c078..0000000
Binary files a/target/classes/org/scribe/exceptions/OAuthException.class and /dev/null differ
diff --git a/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class b/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class
deleted file mode 100644
index 1ff1951..0000000
Binary files a/target/classes/org/scribe/exceptions/OAuthParametersMissingException.class and /dev/null differ
diff --git a/target/classes/org/scribe/exceptions/OAuthSignatureException.class b/target/classes/org/scribe/exceptions/OAuthSignatureException.class
deleted file mode 100644
index 59801bb..0000000
Binary files a/target/classes/org/scribe/exceptions/OAuthSignatureException.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/AccessTokenExtractor.class b/target/classes/org/scribe/extractors/AccessTokenExtractor.class
deleted file mode 100644
index 6de199f..0000000
Binary files a/target/classes/org/scribe/extractors/AccessTokenExtractor.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/BaseStringExtractor.class b/target/classes/org/scribe/extractors/BaseStringExtractor.class
deleted file mode 100644
index d3faffb..0000000
Binary files a/target/classes/org/scribe/extractors/BaseStringExtractor.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class b/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class
deleted file mode 100644
index dee0916..0000000
Binary files a/target/classes/org/scribe/extractors/BaseStringExtractorImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/HeaderExtractor.class b/target/classes/org/scribe/extractors/HeaderExtractor.class
deleted file mode 100644
index 4189c28..0000000
Binary files a/target/classes/org/scribe/extractors/HeaderExtractor.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/HeaderExtractorImpl.class b/target/classes/org/scribe/extractors/HeaderExtractorImpl.class
deleted file mode 100644
index 776b200..0000000
Binary files a/target/classes/org/scribe/extractors/HeaderExtractorImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/JsonTokenExtractor.class b/target/classes/org/scribe/extractors/JsonTokenExtractor.class
deleted file mode 100644
index 60d49b5..0000000
Binary files a/target/classes/org/scribe/extractors/JsonTokenExtractor.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/RequestTokenExtractor.class b/target/classes/org/scribe/extractors/RequestTokenExtractor.class
deleted file mode 100644
index d0e15c8..0000000
Binary files a/target/classes/org/scribe/extractors/RequestTokenExtractor.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/TokenExtractor20Impl.class b/target/classes/org/scribe/extractors/TokenExtractor20Impl.class
deleted file mode 100644
index 59970a5..0000000
Binary files a/target/classes/org/scribe/extractors/TokenExtractor20Impl.class and /dev/null differ
diff --git a/target/classes/org/scribe/extractors/TokenExtractorImpl.class b/target/classes/org/scribe/extractors/TokenExtractorImpl.class
deleted file mode 100644
index b08fff4..0000000
Binary files a/target/classes/org/scribe/extractors/TokenExtractorImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/OAuthConfig.class b/target/classes/org/scribe/model/OAuthConfig.class
deleted file mode 100644
index 1031fa5..0000000
Binary files a/target/classes/org/scribe/model/OAuthConfig.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/OAuthConstants.class b/target/classes/org/scribe/model/OAuthConstants.class
deleted file mode 100644
index 92ef875..0000000
Binary files a/target/classes/org/scribe/model/OAuthConstants.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/OAuthRequest.class b/target/classes/org/scribe/model/OAuthRequest.class
deleted file mode 100644
index 9009e69..0000000
Binary files a/target/classes/org/scribe/model/OAuthRequest.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Parameter.class b/target/classes/org/scribe/model/Parameter.class
deleted file mode 100644
index 3bab553..0000000
Binary files a/target/classes/org/scribe/model/Parameter.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/ParameterList.class b/target/classes/org/scribe/model/ParameterList.class
deleted file mode 100644
index caa6736..0000000
Binary files a/target/classes/org/scribe/model/ParameterList.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Request.class b/target/classes/org/scribe/model/Request.class
deleted file mode 100644
index b52bc5c..0000000
Binary files a/target/classes/org/scribe/model/Request.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Response.class b/target/classes/org/scribe/model/Response.class
deleted file mode 100644
index f8ff5b8..0000000
Binary files a/target/classes/org/scribe/model/Response.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/SignatureType.class b/target/classes/org/scribe/model/SignatureType.class
deleted file mode 100644
index ac0c214..0000000
Binary files a/target/classes/org/scribe/model/SignatureType.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Token.class b/target/classes/org/scribe/model/Token.class
deleted file mode 100644
index 4f37bd4..0000000
Binary files a/target/classes/org/scribe/model/Token.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Verb.class b/target/classes/org/scribe/model/Verb.class
deleted file mode 100644
index 61fb785..0000000
Binary files a/target/classes/org/scribe/model/Verb.class and /dev/null differ
diff --git a/target/classes/org/scribe/model/Verifier.class b/target/classes/org/scribe/model/Verifier.class
deleted file mode 100644
index c17f7c6..0000000
Binary files a/target/classes/org/scribe/model/Verifier.class and /dev/null differ
diff --git a/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class b/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class
deleted file mode 100644
index e8741f5..0000000
Binary files a/target/classes/org/scribe/oauth/OAuth10aServiceImpl$1.class and /dev/null differ
diff --git a/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class b/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class
deleted file mode 100644
index 678ae50..0000000
Binary files a/target/classes/org/scribe/oauth/OAuth10aServiceImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class b/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class
deleted file mode 100644
index 80a4ba4..0000000
Binary files a/target/classes/org/scribe/oauth/OAuth20ServiceImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/oauth/OAuthService.class b/target/classes/org/scribe/oauth/OAuthService.class
deleted file mode 100644
index e1095f5..0000000
Binary files a/target/classes/org/scribe/oauth/OAuthService.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/HMACSha1SignatureService.class b/target/classes/org/scribe/services/HMACSha1SignatureService.class
deleted file mode 100644
index 82c06fb..0000000
Binary files a/target/classes/org/scribe/services/HMACSha1SignatureService.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/PlaintextSignatureService.class b/target/classes/org/scribe/services/PlaintextSignatureService.class
deleted file mode 100644
index 811b01d..0000000
Binary files a/target/classes/org/scribe/services/PlaintextSignatureService.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/SignatureService.class b/target/classes/org/scribe/services/SignatureService.class
deleted file mode 100644
index c5093ea..0000000
Binary files a/target/classes/org/scribe/services/SignatureService.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/TimestampService.class b/target/classes/org/scribe/services/TimestampService.class
deleted file mode 100644
index 9bcf2db..0000000
Binary files a/target/classes/org/scribe/services/TimestampService.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class b/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class
deleted file mode 100644
index 4c7a1cd..0000000
Binary files a/target/classes/org/scribe/services/TimestampServiceImpl$Timer.class and /dev/null differ
diff --git a/target/classes/org/scribe/services/TimestampServiceImpl.class b/target/classes/org/scribe/services/TimestampServiceImpl.class
deleted file mode 100644
index 2792c9f..0000000
Binary files a/target/classes/org/scribe/services/TimestampServiceImpl.class and /dev/null differ
diff --git a/target/classes/org/scribe/utils/MapUtils.class b/target/classes/org/scribe/utils/MapUtils.class
deleted file mode 100644
index b87c688..0000000
Binary files a/target/classes/org/scribe/utils/MapUtils.class and /dev/null differ
diff --git a/target/classes/org/scribe/utils/OAuthEncoder.class b/target/classes/org/scribe/utils/OAuthEncoder.class
deleted file mode 100644
index 296118d..0000000
Binary files a/target/classes/org/scribe/utils/OAuthEncoder.class and /dev/null differ
diff --git a/target/classes/org/scribe/utils/Preconditions.class b/target/classes/org/scribe/utils/Preconditions.class
deleted file mode 100644
index 56273d1..0000000
Binary files a/target/classes/org/scribe/utils/Preconditions.class and /dev/null differ
diff --git a/target/classes/org/scribe/utils/StreamUtils.class b/target/classes/org/scribe/utils/StreamUtils.class
deleted file mode 100644
index 76199d7..0000000
Binary files a/target/classes/org/scribe/utils/StreamUtils.class and /dev/null differ
diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
deleted file mode 100644
index 77aa17e..0000000
--- a/target/maven-archiver/pom.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-#Generated by Maven
-#Thu Apr 05 00:39:10 GMT-03:00 2012
-version=1.3.0
-groupId=org.scribe
-artifactId=scribe
diff --git a/target/scribe-1.3.0.jar b/target/scribe-1.3.0.jar
deleted file mode 100644
index 2f5b8e2..0000000
Binary files a/target/scribe-1.3.0.jar and /dev/null differ
diff --git a/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml b/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml
deleted file mode 100644
index 21d794f..0000000
--- a/target/surefire-reports/TEST-org.scribe.builder.ServiceBuilderTest.xml
+++ /dev/null
@@ -1,73 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.062" errors="0" skipped="0" tests="5" name="org.scribe.builder.ServiceBuilderTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.005" classname="org.scribe.builder.ServiceBuilderTest" name="shouldReturnConfigDefaultValues"/>
-  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptValidCallbackUrl"/>
-  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptASignatureType"/>
-  <testcase time="0.001" classname="org.scribe.builder.ServiceBuilderTest" name="shouldNotAcceptNullAsCallback"/>
-  <testcase time="0" classname="org.scribe.builder.ServiceBuilderTest" name="shouldAcceptAnScope"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml
deleted file mode 100644
index 771b520..0000000
--- a/target/surefire-reports/TEST-org.scribe.extractors.BaseStringExtractorTest.xml
+++ /dev/null
@@ -1,72 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.024" errors="0" skipped="0" tests="4" name="org.scribe.extractors.BaseStringExtractorTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.01" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldExtractBaseStringFromOAuthRequest"/>
-  <testcase time="0" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldThrowExceptionIfRquestIsNull"/>
-  <testcase time="0" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldThrowExceptionIfRquestHasNoOAuthParameters"/>
-  <testcase time="0.002" classname="org.scribe.extractors.BaseStringExtractorTest" name="shouldProperlyEncodeSpaces"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml
deleted file mode 100644
index 9339bfa..0000000
--- a/target/surefire-reports/TEST-org.scribe.extractors.HeaderExtractorTest.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.005" errors="0" skipped="0" tests="3" name="org.scribe.extractors.HeaderExtractorTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExtractStandardHeader"/>
-  <testcase time="0" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExceptionIfRequestIsNull"/>
-  <testcase time="0" classname="org.scribe.extractors.HeaderExtractorTest" name="shouldExceptionIfRequestHasNoOAuthParams"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml
deleted file mode 100644
index 2459152..0000000
--- a/target/surefire-reports/TEST-org.scribe.extractors.JsonTokenExtractorTest.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.006" errors="0" skipped="0" tests="3" name="org.scribe.extractors.JsonTokenExtractorTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldParseResponse"/>
-  <testcase time="0.001" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldThrowExceptionIfForNullParameters"/>
-  <testcase time="0" classname="org.scribe.extractors.JsonTokenExtractorTest" name="shouldThrowExceptionIfForEmptyStrings"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml
deleted file mode 100644
index 9ee8d37..0000000
--- a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractor20Test.xml
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.009" errors="0" skipped="0" tests="6" name="org.scribe.extractors.TokenExtractor20Test">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromOAuthStandardResponse"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromResponseWithExpiresParam"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldExtractTokenFromResponseWithManyParameters"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfTokenIsAbsent"/>
-  <testcase time="0.002" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfResponseIsNull"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractor20Test" name="shouldThrowExceptionIfResponseIsEmptyString"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml b/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml
deleted file mode 100644
index 47be599..0000000
--- a/target/surefire-reports/TEST-org.scribe.extractors.TokenExtractorTest.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="7" name="org.scribe.extractors.TokenExtractorTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromOAuthStandardResponse"/>
-  <testcase time="0.001" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfTokenIsAbsent"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfResponseIsNull"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfResponseIsEmptyString"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromInvertedOAuthStandardResponse"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldExtractTokenFromResponseWithCallbackConfirmed"/>
-  <testcase time="0" classname="org.scribe.extractors.TokenExtractorTest" name="shouldThrowExceptionIfSecretIsAbsent"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml b/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml
deleted file mode 100644
index ee91196..0000000
--- a/target/surefire-reports/TEST-org.scribe.model.OAuthRequestTest.xml
+++ /dev/null
@@ -1,70 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.002" errors="0" skipped="0" tests="2" name="org.scribe.model.OAuthRequestTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.model.OAuthRequestTest" name="shouldAddOAuthParamters"/>
-  <testcase time="0" classname="org.scribe.model.OAuthRequestTest" name="shouldThrowExceptionIfParameterIsNotOAuth"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml b/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml
deleted file mode 100644
index dbeb194..0000000
--- a/target/surefire-reports/TEST-org.scribe.model.ParameterListTest.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.023" errors="0" skipped="0" tests="7" name="org.scribe.model.ParameterListTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldThrowExceptionWhenAppendingNullMapToQuerystring"/>
-  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldAppendNothingToQuerystringIfGivenEmptyMap"/>
-  <testcase time="0.002" classname="org.scribe.model.ParameterListTest" name="shouldAppendParametersToSimpleUrl"/>
-  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldAppendParametersToUrlWithQuerystring"/>
-  <testcase time="0.001" classname="org.scribe.model.ParameterListTest" name="shouldProperlySortParameters"/>
-  <testcase time="0.008" classname="org.scribe.model.ParameterListTest" name="shouldProperlySortParametersWithTheSameName"/>
-  <testcase time="0" classname="org.scribe.model.ParameterListTest" name="shouldNotModifyTheOriginalParameterList"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml b/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml
deleted file mode 100644
index 3e9f3e2..0000000
--- a/target/surefire-reports/TEST-org.scribe.model.RequestTest.xml
+++ /dev/null
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.014" errors="0" skipped="0" tests="13" name="org.scribe.model.RequestTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.002" classname="org.scribe.model.RequestTest" name="shouldSetRequestVerb"/>
-  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldGetQueryStringParameters"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAddRequestHeaders"/>
-  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldSetBodyParamsAndAddContentLength"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldSetPayloadAndHeaders"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAllowAddingQuerystringParametersAfterCreation"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldReturnTheCompleteUrl"/>
-  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldHandleQueryStringSpaceEncodingProperly"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithBytePayload"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithStringPayload"/>
-  <testcase time="0" classname="org.scribe.model.RequestTest" name="shouldAutomaticallyAddContentTypeForPostRequestsWithBodyParameters"/>
-  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldBeAbleToOverrideItsContentType"/>
-  <testcase time="0.001" classname="org.scribe.model.RequestTest" name="shouldNotAddContentTypeForGetRequests"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml b/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml
deleted file mode 100644
index 611fa6a..0000000
--- a/target/surefire-reports/TEST-org.scribe.model.ResponseTest.xml
+++ /dev/null
@@ -1,72 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="4" name="org.scribe.model.ResponseTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.model.ResponseTest" name="shouldPopulateResponseHeaders"/>
-  <testcase time="0.001" classname="org.scribe.model.ResponseTest" name="shouldParseBodyContents"/>
-  <testcase time="0" classname="org.scribe.model.ResponseTest" name="shouldParseBodyContentsOnlyOnce"/>
-  <testcase time="0" classname="org.scribe.model.ResponseTest" name="shouldHandleAConnectionWithErrors"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml b/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml
deleted file mode 100644
index 52b0946..0000000
--- a/target/surefire-reports/TEST-org.scribe.services.HMACSha1SignatureServiceTest.xml
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.208" errors="0" skipped="0" tests="6" name="org.scribe.services.HMACSha1SignatureServiceTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldReturnSignatureMethodString"/>
-  <testcase time="0.196" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldReturnSignature"/>
-  <testcase time="0" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfBaseStringIsNull"/>
-  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfBaseStringIsEmpty"/>
-  <testcase time="0" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfApiSecretIsNull"/>
-  <testcase time="0.001" classname="org.scribe.services.HMACSha1SignatureServiceTest" name="shouldThrowExceptionIfApiSecretIsEmpty"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml b/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml
deleted file mode 100644
index ffa7831..0000000
--- a/target/surefire-reports/TEST-org.scribe.services.TimestampServiceTest.xml
+++ /dev/null
@@ -1,70 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.004" errors="0" skipped="0" tests="2" name="org.scribe.services.TimestampServiceTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.services.TimestampServiceTest" name="shouldReturnTimestampInSeconds"/>
-  <testcase time="0" classname="org.scribe.services.TimestampServiceTest" name="shouldReturnNonce"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml
deleted file mode 100644
index ea1ad29..0000000
--- a/target/surefire-reports/TEST-org.scribe.utils.MapUtilsTest.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.008" errors="0" skipped="0" tests="3" name="org.scribe.utils.MapUtilsTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.003" classname="org.scribe.utils.MapUtilsTest" name="shouldPrettyPrintMap"/>
-  <testcase time="0" classname="org.scribe.utils.MapUtilsTest" name="shouldHandleEmptyMap"/>
-  <testcase time="0" classname="org.scribe.utils.MapUtilsTest" name="shouldHandleNullInputs"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml b/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml
deleted file mode 100644
index 7784554..0000000
--- a/target/surefire-reports/TEST-org.scribe.utils.OAuthEncoderTest.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.014" errors="0" skipped="0" tests="7" name="org.scribe.utils.OAuthEncoderTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeString"/>
-  <testcase time="0.001" classname="org.scribe.utils.OAuthEncoderTest" name="shouldFormURLDecodeString"/>
-  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeAllSpecialCharacters"/>
-  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldNotPercentEncodeReservedCharacters"/>
-  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldThrowExceptionIfStringToEncodeIsNull"/>
-  <testcase time="0" classname="org.scribe.utils.OAuthEncoderTest" name="shouldThrowExceptionIfStringToDecodeIsNull"/>
-  <testcase time="0.008" classname="org.scribe.utils.OAuthEncoderTest" name="shouldPercentEncodeCorrectlyTwitterCodingExamples"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml
deleted file mode 100644
index bb8610d..0000000
--- a/target/surefire-reports/TEST-org.scribe.utils.PreconditionsTest.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.007" errors="0" skipped="0" tests="7" name="org.scribe.utils.PreconditionsTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullObjects"/>
-  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullStrings"/>
-  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForEmptyStrings"/>
-  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForSpacesOnlyStrings"/>
-  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForInvalidUrls"/>
-  <testcase time="0" classname="org.scribe.utils.PreconditionsTest" name="shouldThrowExceptionForNullUrls"/>
-  <testcase time="0.001" classname="org.scribe.utils.PreconditionsTest" name="shouldNotAllowStrangeProtocolNames"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml b/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml
deleted file mode 100644
index 8e4d23f..0000000
--- a/target/surefire-reports/TEST-org.scribe.utils.StreamUtilsTest.xml
+++ /dev/null
@@ -1,70 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<testsuite failures="0" time="0.002" errors="0" skipped="0" tests="2" name="org.scribe.utils.StreamUtilsTest">
-  <properties>
-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
-    <property name="sun.boot.library.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries"/>
-    <property name="java.vm.version" value="20.4-b02-402"/>
-    <property name="awt.nativeDoubleBuffering" value="true"/>
-    <property name="gopherProxySet" value="false"/>
-    <property name="mrj.build" value="11D50"/>
-    <property name="java.vm.vendor" value="Apple Inc."/>
-    <property name="java.vendor.url" value="http://www.apple.com/"/>
-    <property name="path.separator" value=":"/>
-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
-    <property name="file.encoding.pkg" value="sun.io"/>
-    <property name="user.country" value="US"/>
-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
-    <property name="sun.os.patch.level" value="unknown"/>
-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
-    <property name="user.dir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.runtime.version" value="1.6.0_29-b11-402-11D50"/>
-    <property name="java.awt.graphicsenv" value="apple.awt.CGraphicsEnvironment"/>
-    <property name="basedir" value="/Volumes/workspace/workspace/ponyloky/scribe-java"/>
-    <property name="java.endorsed.dirs" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/endorsed"/>
-    <property name="os.arch" value="x86_64"/>
-    <property name="surefire.real.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar"/>
-    <property name="java.io.tmpdir" value="/var/folders/1r/735zn_y92l702ld5mjydbnbh0000gn/T/"/>
-    <property name="line.separator" value="
-"/>
-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="os.name" value="Mac OS X"/>
-    <property name="sun.jnu.encoding" value="MacRoman"/>
-    <property name="java.library.path" value=".:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/>
-    <property name="surefire.test.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.specification.name" value="Java Platform API Specification"/>
-    <property name="java.class.version" value="50.0"/>
-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
-    <property name="os.version" value="10.7.3"/>
-    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="user.home" value="/Users/joniloky"/>
-    <property name="user.timezone" value=""/>
-    <property name="java.awt.printerjob" value="apple.awt.CPrinterJob"/>
-    <property name="java.specification.version" value="1.6"/>
-    <property name="file.encoding" value="MacRoman"/>
-    <property name="user.name" value="joniloky"/>
-    <property name="java.class.path" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/test-classes:/Volumes/workspace/workspace/ponyloky/scribe-java/target/classes:/Users/joniloky/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/joniloky/.m2/repository/junit/junit/4.8.1/junit-4.8.1.jar:"/>
-    <property name="java.vm.specification.version" value="1.0"/>
-    <property name="sun.arch.data.model" value="64"/>
-    <property name="java.home" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"/>
-    <property name="sun.java.command" value="/Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefirebooter6522169484738630626.jar /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire5687869621131067256tmp /Volumes/workspace/workspace/ponyloky/scribe-java/target/surefire/surefire1615572157821845299tmp"/>
-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
-    <property name="user.language" value="en"/>
-    <property name="awt.toolkit" value="apple.awt.CToolkit"/>
-    <property name="java.vm.info" value="mixed mode"/>
-    <property name="java.version" value="1.6.0_29"/>
-    <property name="java.ext.dirs" value="/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ext"/>
-    <property name="sun.boot.class.path" value="/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar"/>
-    <property name="java.vendor" value="Apple Inc."/>
-    <property name="localRepository" value="/Users/joniloky/.m2/repository"/>
-    <property name="file.separator" value="/"/>
-    <property name="java.vendor.url.bug" value="http://bugreport.apple.com/"/>
-    <property name="sun.cpu.endian" value="little"/>
-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
-    <property name="mrj.version" value="1070.1.6.0_29-402"/>
-    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
-    <property name="sun.cpu.isalist" value=""/>
-  </properties>
-  <testcase time="0.001" classname="org.scribe.utils.StreamUtilsTest" name="shouldCorrectlyDecodeAStream"/>
-  <testcase time="0" classname="org.scribe.utils.StreamUtilsTest" name="shouldFailForNullParameter"/>
-</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt b/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt
deleted file mode 100644
index d8e5659..0000000
--- a/target/surefire-reports/org.scribe.builder.ServiceBuilderTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.builder.ServiceBuilderTest
--------------------------------------------------------------------------------
-Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 sec
diff --git a/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt
deleted file mode 100644
index db65713..0000000
--- a/target/surefire-reports/org.scribe.extractors.BaseStringExtractorTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.extractors.BaseStringExtractorTest
--------------------------------------------------------------------------------
-Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
diff --git a/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt
deleted file mode 100644
index efa2709..0000000
--- a/target/surefire-reports/org.scribe.extractors.HeaderExtractorTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.extractors.HeaderExtractorTest
--------------------------------------------------------------------------------
-Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
diff --git a/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt
deleted file mode 100644
index 59dc906..0000000
--- a/target/surefire-reports/org.scribe.extractors.JsonTokenExtractorTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.extractors.JsonTokenExtractorTest
--------------------------------------------------------------------------------
-Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
diff --git a/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt b/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt
deleted file mode 100644
index d753714..0000000
--- a/target/surefire-reports/org.scribe.extractors.TokenExtractor20Test.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.extractors.TokenExtractor20Test
--------------------------------------------------------------------------------
-Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec
diff --git a/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt b/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt
deleted file mode 100644
index 45aadfd..0000000
--- a/target/surefire-reports/org.scribe.extractors.TokenExtractorTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.extractors.TokenExtractorTest
--------------------------------------------------------------------------------
-Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
diff --git a/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt b/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt
deleted file mode 100644
index 5e0e199..0000000
--- a/target/surefire-reports/org.scribe.model.OAuthRequestTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.model.OAuthRequestTest
--------------------------------------------------------------------------------
-Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
diff --git a/target/surefire-reports/org.scribe.model.ParameterListTest.txt b/target/surefire-reports/org.scribe.model.ParameterListTest.txt
deleted file mode 100644
index 333b4b7..0000000
--- a/target/surefire-reports/org.scribe.model.ParameterListTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.model.ParameterListTest
--------------------------------------------------------------------------------
-Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec
diff --git a/target/surefire-reports/org.scribe.model.RequestTest.txt b/target/surefire-reports/org.scribe.model.RequestTest.txt
deleted file mode 100644
index e7c967a..0000000
--- a/target/surefire-reports/org.scribe.model.RequestTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.model.RequestTest
--------------------------------------------------------------------------------
-Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
diff --git a/target/surefire-reports/org.scribe.model.ResponseTest.txt b/target/surefire-reports/org.scribe.model.ResponseTest.txt
deleted file mode 100644
index 0dfae74..0000000
--- a/target/surefire-reports/org.scribe.model.ResponseTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.model.ResponseTest
--------------------------------------------------------------------------------
-Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
diff --git a/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt b/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt
deleted file mode 100644
index 7adad19..0000000
--- a/target/surefire-reports/org.scribe.services.HMACSha1SignatureServiceTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.services.HMACSha1SignatureServiceTest
--------------------------------------------------------------------------------
-Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.207 sec
diff --git a/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt b/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt
deleted file mode 100644
index 8026b54..0000000
--- a/target/surefire-reports/org.scribe.services.TimestampServiceTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.services.TimestampServiceTest
--------------------------------------------------------------------------------
-Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
diff --git a/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt b/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt
deleted file mode 100644
index b3b36bf..0000000
--- a/target/surefire-reports/org.scribe.utils.MapUtilsTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.utils.MapUtilsTest
--------------------------------------------------------------------------------
-Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
diff --git a/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt b/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt
deleted file mode 100644
index 6289f23..0000000
--- a/target/surefire-reports/org.scribe.utils.OAuthEncoderTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.utils.OAuthEncoderTest
--------------------------------------------------------------------------------
-Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
diff --git a/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt b/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt
deleted file mode 100644
index 8521277..0000000
--- a/target/surefire-reports/org.scribe.utils.PreconditionsTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.utils.PreconditionsTest
--------------------------------------------------------------------------------
-Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
diff --git a/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt b/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt
deleted file mode 100644
index 68b8ac0..0000000
--- a/target/surefire-reports/org.scribe.utils.StreamUtilsTest.txt
+++ /dev/null
@@ -1,4 +0,0 @@
--------------------------------------------------------------------------------
-Test set: org.scribe.utils.StreamUtilsTest
--------------------------------------------------------------------------------
-Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
diff --git a/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class b/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class
deleted file mode 100644
index e849815..0000000
Binary files a/target/test-classes/org/scribe/builder/ServiceBuilderTest$ApiMock.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/builder/ServiceBuilderTest.class b/target/test-classes/org/scribe/builder/ServiceBuilderTest.class
deleted file mode 100644
index c6c126e..0000000
Binary files a/target/test-classes/org/scribe/builder/ServiceBuilderTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/FacebookExample.class b/target/test-classes/org/scribe/examples/FacebookExample.class
deleted file mode 100644
index 76b69f8..0000000
Binary files a/target/test-classes/org/scribe/examples/FacebookExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/FlickrExample.class b/target/test-classes/org/scribe/examples/FlickrExample.class
deleted file mode 100644
index 974946e..0000000
Binary files a/target/test-classes/org/scribe/examples/FlickrExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/Foursquare2Example.class b/target/test-classes/org/scribe/examples/Foursquare2Example.class
deleted file mode 100644
index 5eed3af..0000000
Binary files a/target/test-classes/org/scribe/examples/Foursquare2Example.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/FoursquareExample.class b/target/test-classes/org/scribe/examples/FoursquareExample.class
deleted file mode 100644
index e6ffaef..0000000
Binary files a/target/test-classes/org/scribe/examples/FoursquareExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/FreelancerExample.class b/target/test-classes/org/scribe/examples/FreelancerExample.class
deleted file mode 100644
index dc6f3b3..0000000
Binary files a/target/test-classes/org/scribe/examples/FreelancerExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/GoogleExample.class b/target/test-classes/org/scribe/examples/GoogleExample.class
deleted file mode 100644
index 36bdf8d..0000000
Binary files a/target/test-classes/org/scribe/examples/GoogleExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/ImgUrExample.class b/target/test-classes/org/scribe/examples/ImgUrExample.class
deleted file mode 100644
index 46b36ad..0000000
Binary files a/target/test-classes/org/scribe/examples/ImgUrExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/Kaixin20Example.class b/target/test-classes/org/scribe/examples/Kaixin20Example.class
deleted file mode 100644
index 2b04d29..0000000
Binary files a/target/test-classes/org/scribe/examples/Kaixin20Example.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/LinkedInExample.class b/target/test-classes/org/scribe/examples/LinkedInExample.class
deleted file mode 100644
index eae2a12..0000000
Binary files a/target/test-classes/org/scribe/examples/LinkedInExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/LiveExample.class b/target/test-classes/org/scribe/examples/LiveExample.class
deleted file mode 100644
index eadd9ca..0000000
Binary files a/target/test-classes/org/scribe/examples/LiveExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/LoveFilmExample.class b/target/test-classes/org/scribe/examples/LoveFilmExample.class
deleted file mode 100644
index 826a8f1..0000000
Binary files a/target/test-classes/org/scribe/examples/LoveFilmExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/MeetupExample.class b/target/test-classes/org/scribe/examples/MeetupExample.class
deleted file mode 100644
index e005d60..0000000
Binary files a/target/test-classes/org/scribe/examples/MeetupExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class b/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class
deleted file mode 100644
index 546c11e..0000000
Binary files a/target/test-classes/org/scribe/examples/NeteaseWeiboExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/Px500Example.class b/target/test-classes/org/scribe/examples/Px500Example.class
deleted file mode 100644
index 300edaa..0000000
Binary files a/target/test-classes/org/scribe/examples/Px500Example.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/RenrenExample.class b/target/test-classes/org/scribe/examples/RenrenExample.class
deleted file mode 100644
index 089c6b7..0000000
Binary files a/target/test-classes/org/scribe/examples/RenrenExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/SinaWeibo2Example.class b/target/test-classes/org/scribe/examples/SinaWeibo2Example.class
deleted file mode 100644
index a82393d..0000000
Binary files a/target/test-classes/org/scribe/examples/SinaWeibo2Example.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/SinaWeiboExample.class b/target/test-classes/org/scribe/examples/SinaWeiboExample.class
deleted file mode 100644
index 44740e1..0000000
Binary files a/target/test-classes/org/scribe/examples/SinaWeiboExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/SohuWeiboExample.class b/target/test-classes/org/scribe/examples/SohuWeiboExample.class
deleted file mode 100644
index 939f27a..0000000
Binary files a/target/test-classes/org/scribe/examples/SohuWeiboExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/TwitterExample.class b/target/test-classes/org/scribe/examples/TwitterExample.class
deleted file mode 100644
index 47b0c51..0000000
Binary files a/target/test-classes/org/scribe/examples/TwitterExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/VkontakteExample.class b/target/test-classes/org/scribe/examples/VkontakteExample.class
deleted file mode 100644
index bb9219a..0000000
Binary files a/target/test-classes/org/scribe/examples/VkontakteExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/examples/YahooExample.class b/target/test-classes/org/scribe/examples/YahooExample.class
deleted file mode 100644
index 8688595..0000000
Binary files a/target/test-classes/org/scribe/examples/YahooExample.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class b/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class
deleted file mode 100644
index 4a410d4..0000000
Binary files a/target/test-classes/org/scribe/extractors/BaseStringExtractorTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class b/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class
deleted file mode 100644
index 9532b41..0000000
Binary files a/target/test-classes/org/scribe/extractors/HeaderExtractorTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class b/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class
deleted file mode 100644
index ae476d2..0000000
Binary files a/target/test-classes/org/scribe/extractors/JsonTokenExtractorTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class b/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class
deleted file mode 100644
index e91347f..0000000
Binary files a/target/test-classes/org/scribe/extractors/TokenExtractor20Test.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/extractors/TokenExtractorTest.class b/target/test-classes/org/scribe/extractors/TokenExtractorTest.class
deleted file mode 100644
index d79b1b8..0000000
Binary files a/target/test-classes/org/scribe/extractors/TokenExtractorTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/ConnectionStub.class b/target/test-classes/org/scribe/model/ConnectionStub.class
deleted file mode 100644
index edd8ed6..0000000
Binary files a/target/test-classes/org/scribe/model/ConnectionStub.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/OAuthRequestTest.class b/target/test-classes/org/scribe/model/OAuthRequestTest.class
deleted file mode 100644
index 230e4d7..0000000
Binary files a/target/test-classes/org/scribe/model/OAuthRequestTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/ParameterListTest.class b/target/test-classes/org/scribe/model/ParameterListTest.class
deleted file mode 100644
index 46be609..0000000
Binary files a/target/test-classes/org/scribe/model/ParameterListTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/RequestTest.class b/target/test-classes/org/scribe/model/RequestTest.class
deleted file mode 100644
index 5305773..0000000
Binary files a/target/test-classes/org/scribe/model/RequestTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class b/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class
deleted file mode 100644
index 0b29ee0..0000000
Binary files a/target/test-classes/org/scribe/model/ResponseTest$FaultyConnection.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/model/ResponseTest.class b/target/test-classes/org/scribe/model/ResponseTest.class
deleted file mode 100644
index 355450f..0000000
Binary files a/target/test-classes/org/scribe/model/ResponseTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class b/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class
deleted file mode 100644
index 9302cad..0000000
Binary files a/target/test-classes/org/scribe/services/HMACSha1SignatureServiceTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest$1.class b/target/test-classes/org/scribe/services/TimestampServiceTest$1.class
deleted file mode 100644
index 75ce21d..0000000
Binary files a/target/test-classes/org/scribe/services/TimestampServiceTest$1.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class b/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class
deleted file mode 100644
index ec73c44..0000000
Binary files a/target/test-classes/org/scribe/services/TimestampServiceTest$TimerStub.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/services/TimestampServiceTest.class b/target/test-classes/org/scribe/services/TimestampServiceTest.class
deleted file mode 100644
index 1d60ba7..0000000
Binary files a/target/test-classes/org/scribe/services/TimestampServiceTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/test/helpers/ObjectMother.class b/target/test-classes/org/scribe/test/helpers/ObjectMother.class
deleted file mode 100644
index aba8619..0000000
Binary files a/target/test-classes/org/scribe/test/helpers/ObjectMother.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/utils/MapUtilsTest.class b/target/test-classes/org/scribe/utils/MapUtilsTest.class
deleted file mode 100644
index e90e56e..0000000
Binary files a/target/test-classes/org/scribe/utils/MapUtilsTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/utils/OAuthEncoderTest.class b/target/test-classes/org/scribe/utils/OAuthEncoderTest.class
deleted file mode 100644
index b6126c4..0000000
Binary files a/target/test-classes/org/scribe/utils/OAuthEncoderTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/utils/PreconditionsTest.class b/target/test-classes/org/scribe/utils/PreconditionsTest.class
deleted file mode 100644
index 4ac39fa..0000000
Binary files a/target/test-classes/org/scribe/utils/PreconditionsTest.class and /dev/null differ
diff --git a/target/test-classes/org/scribe/utils/StreamUtilsTest.class b/target/test-classes/org/scribe/utils/StreamUtilsTest.class
deleted file mode 100644
index 793b2a0..0000000
Binary files a/target/test-classes/org/scribe/utils/StreamUtilsTest.class and /dev/null differ

commit ed65d25697360f7cf038d1d1704bdd5c4f1fab7a
Merge: 6ae769e d35ef44
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Apr 11 20:53:06 2012 -0700

    Merge pull request #246 from ponyloky/master
    
    Freelancer Api

commit 1208fd815ac023f5acf2de491badbe8b68f98c40
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Apr 12 01:03:30 2012 -0300

    wrong filename

diff --git a/changelog.txt b/changelog.txt
index d908f3a..93a2cd8 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -81,3 +81,4 @@
   * FEATURE: NetProspex Api
   * FEATURE: Kaixin2, SinaWeibo2 and Renren Apis
   * FEATURE: ImgUr Api
+  * FEATURE: Freelancer Api (thanks Juan Palacios!)
diff --git a/src/main/java/org/scribe/builder/api/FreelancerAPI.java b/src/main/java/org/scribe/builder/api/FreelancerAPI.java
deleted file mode 100644
index 482e66f..0000000
--- a/src/main/java/org/scribe/builder/api/FreelancerAPI.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.scribe.builder.api;
-
-import org.scribe.model.*;
-
-public class FreelancerApi extends DefaultApi10a
-{
-  private static final String AUTHORIZATION_URL = "http://www.freelancer.com/users/api-token/auth.php?oauth_token=%s";
-
-  @Override
-  public String getAccessTokenEndpoint()
-  {
-    return "http://api.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
-  }
-
-  @Override
-  public String getRequestTokenEndpoint()
-  {
-    return "http://api.freelancer.com/RequestRequestToken/requestRequestToken.xml";
-  }
-
-  @Override
-  public Verb getAccessTokenVerb()
-  {
-    return Verb.GET;
-  }
-
-  @Override
-  public Verb getRequestTokenVerb()
-  {
-    return Verb.GET;
-  }
-
-  @Override
-  public String getAuthorizationUrl(Token requestToken)
-  {
-    return String.format(AUTHORIZATION_URL, requestToken.getToken());
-  }
-
-  public static class Sandbox extends FreelancerApi
-  {
-    private static final String SANDBOX_AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php";
-
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-      return "http://api.sandbox.freelancer.com/RequestRequestToken/requestRequestToken.xml";
-    }
-
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-      return "http://api.sandbox.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
-    }
-
-    @Override
-    public String getAuthorizationUrl(Token requestToken)
-    {
-      return String.format(SANDBOX_AUTHORIZATION_URL + "?oauth_token=%s", requestToken.getToken());
-    }
-  }
-}
diff --git a/src/main/java/org/scribe/builder/api/FreelancerApi.java b/src/main/java/org/scribe/builder/api/FreelancerApi.java
new file mode 100644
index 0000000..482e66f
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/FreelancerApi.java
@@ -0,0 +1,61 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class FreelancerApi extends DefaultApi10a
+{
+  private static final String AUTHORIZATION_URL = "http://www.freelancer.com/users/api-token/auth.php?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "http://api.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "http://api.freelancer.com/RequestRequestToken/requestRequestToken.xml";
+  }
+
+  @Override
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  public Verb getRequestTokenVerb()
+  {
+    return Verb.GET;
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  public static class Sandbox extends FreelancerApi
+  {
+    private static final String SANDBOX_AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php";
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+      return "http://api.sandbox.freelancer.com/RequestRequestToken/requestRequestToken.xml";
+    }
+
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+      return "http://api.sandbox.freelancer.com/RequestAccessToken/requestAccessToken.xml?";
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(SANDBOX_AUTHORIZATION_URL + "?oauth_token=%s", requestToken.getToken());
+    }
+  }
+}

commit 488fc1451a23f148a9e8adfa37879213b3f55848
Author: Adam England <adam.n.england@gmail.com>
Date:   Mon Apr 16 21:47:00 2012 -0500

    Added Digg Support
    
    Refactoring

diff --git a/src/main/java/org/scribe/builder/api/DiggApi.java b/src/main/java/org/scribe/builder/api/DiggApi.java
new file mode 100644
index 0000000..6334d2e
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/DiggApi.java
@@ -0,0 +1,26 @@
+
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class DiggApi extends DefaultApi10a {
+
+  private static final String AUTHORIZATION_URL = "http://digg.com/oauth/authorize?oauth_token=%s";
+  private static final String BASE_URL = "http://services.digg.com/oauth/";
+
+  @Override
+  public String getRequestTokenEndpoint() {
+    return BASE_URL + "request_token";
+  }
+
+  @Override
+  public String getAccessTokenEndpoint() {
+    return BASE_URL + "access_token";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken) {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+}
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 7c1ee04..487dd65 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -2,15 +2,14 @@ package org.scribe.extractors;
 
 import java.util.regex.*;
 
-import org.scribe.exceptions.*;
-import org.scribe.model.*;
-import org.scribe.utils.*;
+import org.scribe.exceptions.OAuthException;
+import org.scribe.model.Token;
+import org.scribe.utils.Preconditions;
 
 public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");
diff --git a/src/test/java/org/scribe/examples/DiggExample.java b/src/test/java/org/scribe/examples/DiggExample.java
new file mode 100644
index 0000000..444bfca
--- /dev/null
+++ b/src/test/java/org/scribe/examples/DiggExample.java
@@ -0,0 +1,63 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.DiggApi;
+import org.scribe.model.*;
+import org.scribe.oauth.OAuthService;
+
+public class DiggExample {
+  private static final String NETWORK_NAME = "Digg";
+  private static final String PROTECTED_RESOURCE_URL = "http://services.digg.com/2.0/comment.digg";
+
+  public static void main(String[] args) {
+    // Replace these with your own api key and secret
+    String apiKey = "myKey";
+    String apiSecret = "mySecret";
+    OAuthService service = new ServiceBuilder().provider(DiggApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(requestToken);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.POST, PROTECTED_RESOURCE_URL);
+    request.addBodyParameter("comment_id", "20100729223726:4fef610331ee46a3b5cbd740bf71313e");
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}
\ No newline at end of file

commit 13d1eaea0ab2910230c8d6b57049ab170a931217
Author: Adam England <adam.n.england@gmail.com>
Date:   Wed Apr 18 19:32:33 2012 -0500

    Updating code style

diff --git a/src/main/java/org/scribe/builder/api/DiggApi.java b/src/main/java/org/scribe/builder/api/DiggApi.java
index 6334d2e..b69253e 100644
--- a/src/main/java/org/scribe/builder/api/DiggApi.java
+++ b/src/main/java/org/scribe/builder/api/DiggApi.java
@@ -1,25 +1,28 @@
-
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
+import org.scribe.model.*;
 
-public class DiggApi extends DefaultApi10a {
+public class DiggApi extends DefaultApi10a 
+{
 
   private static final String AUTHORIZATION_URL = "http://digg.com/oauth/authorize?oauth_token=%s";
   private static final String BASE_URL = "http://services.digg.com/oauth/";
 
   @Override
-  public String getRequestTokenEndpoint() {
+  public String getRequestTokenEndpoint() 
+  {
     return BASE_URL + "request_token";
   }
 
   @Override
-  public String getAccessTokenEndpoint() {
+  public String getAccessTokenEndpoint() 
+  {
     return BASE_URL + "access_token";
   }
 
   @Override
-  public String getAuthorizationUrl(Token requestToken) {
+  public String getAuthorizationUrl(Token requestToken) 
+  {
     return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
 
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 487dd65..9344a21 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -2,14 +2,15 @@ package org.scribe.extractors;
 
 import java.util.regex.*;
 
-import org.scribe.exceptions.OAuthException;
-import org.scribe.model.Token;
-import org.scribe.utils.Preconditions;
+import org.scribe.exceptions.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
 
 public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
+  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");
@@ -24,4 +25,4 @@ public class JsonTokenExtractor implements AccessTokenExtractor
     }
   }
 
-}
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/examples/DiggExample.java b/src/test/java/org/scribe/examples/DiggExample.java
index 444bfca..63fea8b 100644
--- a/src/test/java/org/scribe/examples/DiggExample.java
+++ b/src/test/java/org/scribe/examples/DiggExample.java
@@ -1,17 +1,19 @@
 package org.scribe.examples;
 
-import java.util.Scanner;
+import java.util.*;
 
-import org.scribe.builder.ServiceBuilder;
-import org.scribe.builder.api.DiggApi;
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
 import org.scribe.model.*;
-import org.scribe.oauth.OAuthService;
+import org.scribe.oauth.*;
 
-public class DiggExample {
+public class DiggExample 
+{
   private static final String NETWORK_NAME = "Digg";
   private static final String PROTECTED_RESOURCE_URL = "http://services.digg.com/2.0/comment.digg";
 
-  public static void main(String[] args) {
+  public static void main(String[] args) 
+  {
     // Replace these with your own api key and secret
     String apiKey = "myKey";
     String apiSecret = "mySecret";

commit 89ddd131e42ee0bdd7a414439f6887aa213427ec
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Apr 25 14:19:09 2012 -0300

    removed key and secret from sina weibo example

diff --git a/src/test/java/org/scribe/examples/SinaWeibo2Example.java b/src/test/java/org/scribe/examples/SinaWeibo2Example.java
index 683efe5..89b14e1 100644
--- a/src/test/java/org/scribe/examples/SinaWeibo2Example.java
+++ b/src/test/java/org/scribe/examples/SinaWeibo2Example.java
@@ -15,8 +15,8 @@ public class SinaWeibo2Example
   public static void main(String[] args)
   {
     // Replace these with your own api key and secret
-    String apiKey = "342348223";
-    String apiSecret = "cfdf672e166a4bc954c0e33f03cf0d1b";
+    String apiKey = "your_api_key";
+    String apiSecret = "your_api_secret";
     OAuthService service = new ServiceBuilder()
         .provider(SinaWeiboApi20.class)
         .apiKey(apiKey)

commit d39f7ab3fc3f75a2ea0c2284fe131783fdfb1332
Author: Seth Hitchings <seth@evernote.com>
Date:   Fri Apr 27 11:25:04 2012 -0700

    Allow digits in URL schemes per RFC

diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index d7a06c3..0ac134e 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -12,7 +12,9 @@ import org.scribe.model.OAuthConstants;
 public class Preconditions
 {
   private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
-  private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z_-]+://\\S+");
+  
+  // scheme = alpha *( alpha | digit | "+" | "-" | "." )
+  private static final Pattern URL_PATTERN = Pattern.compile("^[a-zA-Z][a-zA-Z0-9+.-]*://\\S+");
 
   /**
    * Checks that an object is not null.
diff --git a/src/test/java/org/scribe/utils/PreconditionsTest.java b/src/test/java/org/scribe/utils/PreconditionsTest.java
index 54ec9f8..84bc117 100644
--- a/src/test/java/org/scribe/utils/PreconditionsTest.java
+++ b/src/test/java/org/scribe/utils/PreconditionsTest.java
@@ -43,16 +43,25 @@ public class PreconditionsTest
     Preconditions.checkValidUrl(null, ERROR_MSG);
   }
   
+  @Test
   public void shouldAllowValidUrls()
   {
     Preconditions.checkValidUrl("http://www.example.com", ERROR_MSG);
   }
   
+  @Test
   public void shouldAllowSSLUrls()
   {
     Preconditions.checkValidUrl("https://www.example.com", ERROR_MSG);
   }
+
+  @Test
+  public void shouldAllowSpecialCharsInScheme() 
+  {
+    Preconditions.checkValidUrl("custom+9.3-1://www.example.com", ERROR_MSG);
+  }
   
+  @Test
   public void shouldAllowNonStandarProtocolsForAndroid()
   {
     Preconditions.checkValidUrl("x-url-custom://www.example.com", ERROR_MSG);
@@ -64,6 +73,13 @@ public class PreconditionsTest
     Preconditions.checkValidUrl("$weird*://www.example.com", ERROR_MSG);
   }
   
+  @Test(expected = IllegalArgumentException.class)
+  public void shouldNotAllowUnderscoreInScheme()
+  {
+    Preconditions.checkValidUrl("http_custom://www.example.com", ERROR_MSG);
+  }
+  
+  @Test
   public void shouldAllowOutOfBandAsValidCallbackValue()
   {
     Preconditions.checkValidOAuthCallback("oob", ERROR_MSG);

commit 5c030ca36020097e8c80767c940a40d3083ac246
Author: Seth Hitchings <seth@evernote.com>
Date:   Fri Apr 27 11:36:36 2012 -0700

    Full Evernote API support

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index 48d45e9..a35c547 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -1,11 +1,18 @@
 package org.scribe.builder.api;
 
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.scribe.exceptions.OAuthException;
+import org.scribe.extractors.AccessTokenExtractor;
 import org.scribe.model.Token;
 import org.scribe.model.Verb;
+import org.scribe.utils.OAuthEncoder;
+import org.scribe.utils.Preconditions;
 
 public class EvernoteApi extends DefaultApi10a
 {
-  private static final String AUTHORIZATION_URL = "https://www.evernote.com/OAuth.action?oauth_token=%s";
+  private static final String EVERNOTE_URL = "https://www.evernote.com";
   
   @Override
   public Verb getRequestTokenVerb()
@@ -16,47 +23,122 @@ public class EvernoteApi extends DefaultApi10a
 	@Override
 	public String getRequestTokenEndpoint()
   {
-		return "https://www.evernote.com/oauth";
-	}
-
-	@Override
-	public Verb getAccessTokenVerb()
-	{
-	  return Verb.GET;
+		return EVERNOTE_URL + "/oauth";
 	}
 
 	@Override
 	public String getAccessTokenEndpoint()
 	{
-		return "https://www.evernote.com/oauth";
+		return EVERNOTE_URL + "/oauth";
 	}
 	
 	@Override
 	public String getAuthorizationUrl(Token requestToken)
 	{
-	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
+	  return String.format(EVERNOTE_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+	}
+	
+	@Override
+	public AccessTokenExtractor getAccessTokenExtractor() {
+	  return new EvernoteAccessTokenExtractor();
 	}
 
 	public static class Sandbox extends EvernoteApi
 	{
-	  private static final String SANDBOX_URL = "https://sandbox.evernote.com/oauth";
+	  private static final String SANDBOX_URL = "https://sandbox.evernote.com";
 
 	  @Override
 	  public String getRequestTokenEndpoint()
 	  {
-	    return SANDBOX_URL;
+	    return SANDBOX_URL + "/oauth";
 	  }
 
 	  @Override
 	  public String getAccessTokenEndpoint()
 	  {
-	    return SANDBOX_URL;
+      return SANDBOX_URL + "/oauth";
 	  }
 
 	  @Override
 	  public String getAuthorizationUrl(Token requestToken)
 	  {
-	    return String.format(SANDBOX_URL + "?oauth_token=%s", requestToken.getToken());
+	    return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
 	  }
 	}
+	
+	public static class EvernoteAuthToken extends Token {
+    private static final long serialVersionUID = 5913745981744917828L;
+
+    private String noteStoreUrl;
+	  private String webApiUrlPrefix;
+	  private int userId;
+
+	  public EvernoteAuthToken(String token, String secret,
+	      String noteStoreUrl, String webApiUrlPrefix, int userId, String rawResponse) {
+	    super(token, secret, rawResponse);
+	    this.noteStoreUrl = noteStoreUrl;
+	    this.webApiUrlPrefix = webApiUrlPrefix;
+	    this.userId = userId;
+	  }
+	  
+	  /**
+	   * Get the Evernote web service NoteStore URL from the OAuth access token response.
+	   */
+	  public String getNoteStoreUrl() {
+	    return noteStoreUrl;
+	  }
+
+	  /**
+	   * Get the Evernote web API URL prefix from the OAuth access token response.
+	   */
+	  public String getWebApiUrlPrefix() {
+	    return webApiUrlPrefix;
+	  }
+
+	  /**
+	   * Get the numeric Evernote user ID from the OAuth access token response.
+	   */
+	  public int getUserId() {
+	    return userId;
+	  }
+	}
+	
+	public static class EvernoteAccessTokenExtractor implements org.scribe.extractors.AccessTokenExtractor {
+	  
+	  private static final Pattern TOKEN_REGEX = Pattern.compile("oauth_token=([^&]+)");
+	  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]*)");
+	  private static final Pattern NOTESTORE_REGEX = Pattern.compile("edam_noteStoreUrl=([^&]+)");
+	  private static final Pattern WEBAPI_REGEX = Pattern.compile("edam_webApiUrlPrefix=([^&]+)");
+	  private static final Pattern USERID_REGEX = Pattern.compile("edam_userId=([^&]+)");
+	  
+	  /**
+	   * {@inheritDoc} 
+	   */
+	  public Token extract(String response)
+	  {
+	    Preconditions.checkEmptyString(response, "Response body is incorrect. " +
+	        "Can't extract a token from an empty string");
+	    return new EvernoteAuthToken(extract(response, TOKEN_REGEX), 
+	        extract(response, SECRET_REGEX), 
+	        extract(response, NOTESTORE_REGEX), 
+	        extract(response, WEBAPI_REGEX), 
+	        Integer.parseInt(extract(response, USERID_REGEX)), 
+	        response);
+	  }
+	  
+	  private String extract(String response, Pattern p)
+	  {
+	    Matcher matcher = p.matcher(response);
+	    if (matcher.find() && matcher.groupCount() >= 1)
+	    {
+	      return OAuthEncoder.decode(matcher.group(1));
+	    }
+	    else
+	    {
+	      throw new OAuthException("Response body is incorrect. " +
+	          "Can't extract token and secret from this: '" + response + "'", null);
+	    }
+	  }
+	}
+	
 }

commit 3f4189607c46a03b95ac2fe055d5605b0015b73d
Merge: 89ddd13 d39f7ab
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Apr 27 13:17:16 2012 -0700

    Merge pull request #257 from sethhitch/urlscheme
    
    Allow digits in URL schemes per RFC

commit 0a45342004252c91264bd400cf108187088cbd60
Author: Seth Hitchings <seth@evernote.com>
Date:   Fri Apr 27 13:27:13 2012 -0700

    Remove EvernoteAuthToken

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index a35c547..eaee96e 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -6,7 +6,6 @@ import java.util.regex.Pattern;
 import org.scribe.exceptions.OAuthException;
 import org.scribe.extractors.AccessTokenExtractor;
 import org.scribe.model.Token;
-import org.scribe.model.Verb;
 import org.scribe.utils.OAuthEncoder;
 import org.scribe.utils.Preconditions;
 
@@ -14,12 +13,6 @@ public class EvernoteApi extends DefaultApi10a
 {
   private static final String EVERNOTE_URL = "https://www.evernote.com";
   
-  @Override
-  public Verb getRequestTokenVerb()
-  {
-    return Verb.GET;
-  }
-
 	@Override
 	public String getRequestTokenEndpoint()
   {
@@ -65,51 +58,12 @@ public class EvernoteApi extends DefaultApi10a
 	    return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
 	  }
 	}
-	
-	public static class EvernoteAuthToken extends Token {
-    private static final long serialVersionUID = 5913745981744917828L;
-
-    private String noteStoreUrl;
-	  private String webApiUrlPrefix;
-	  private int userId;
-
-	  public EvernoteAuthToken(String token, String secret,
-	      String noteStoreUrl, String webApiUrlPrefix, int userId, String rawResponse) {
-	    super(token, secret, rawResponse);
-	    this.noteStoreUrl = noteStoreUrl;
-	    this.webApiUrlPrefix = webApiUrlPrefix;
-	    this.userId = userId;
-	  }
-	  
-	  /**
-	   * Get the Evernote web service NoteStore URL from the OAuth access token response.
-	   */
-	  public String getNoteStoreUrl() {
-	    return noteStoreUrl;
-	  }
 
-	  /**
-	   * Get the Evernote web API URL prefix from the OAuth access token response.
-	   */
-	  public String getWebApiUrlPrefix() {
-	    return webApiUrlPrefix;
-	  }
-
-	  /**
-	   * Get the numeric Evernote user ID from the OAuth access token response.
-	   */
-	  public int getUserId() {
-	    return userId;
-	  }
-	}
-	
-	public static class EvernoteAccessTokenExtractor implements org.scribe.extractors.AccessTokenExtractor {
+	public static class EvernoteAccessTokenExtractor implements AccessTokenExtractor {
 	  
 	  private static final Pattern TOKEN_REGEX = Pattern.compile("oauth_token=([^&]+)");
+	  // Evernote access tokens include an empty token secret (the empty string).
 	  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]*)");
-	  private static final Pattern NOTESTORE_REGEX = Pattern.compile("edam_noteStoreUrl=([^&]+)");
-	  private static final Pattern WEBAPI_REGEX = Pattern.compile("edam_webApiUrlPrefix=([^&]+)");
-	  private static final Pattern USERID_REGEX = Pattern.compile("edam_userId=([^&]+)");
 	  
 	  /**
 	   * {@inheritDoc} 
@@ -118,12 +72,7 @@ public class EvernoteApi extends DefaultApi10a
 	  {
 	    Preconditions.checkEmptyString(response, "Response body is incorrect. " +
 	        "Can't extract a token from an empty string");
-	    return new EvernoteAuthToken(extract(response, TOKEN_REGEX), 
-	        extract(response, SECRET_REGEX), 
-	        extract(response, NOTESTORE_REGEX), 
-	        extract(response, WEBAPI_REGEX), 
-	        Integer.parseInt(extract(response, USERID_REGEX)), 
-	        response);
+	    return new Token(extract(response, TOKEN_REGEX), extract(response, SECRET_REGEX), response);
 	  }
 	  
 	  private String extract(String response, Pattern p)

commit 8ceebf2deddde5122ab8d4c7d95ced294b34c16c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Apr 28 12:57:45 2012 -0700

    specific exception for connection problems

diff --git a/src/main/java/org/scribe/exceptions/OAuthConnectionException.java b/src/main/java/org/scribe/exceptions/OAuthConnectionException.java
new file mode 100644
index 0000000..918de81
--- /dev/null
+++ b/src/main/java/org/scribe/exceptions/OAuthConnectionException.java
@@ -0,0 +1,14 @@
+package org.scribe.exceptions;
+
+/**
+ * @author: Pablo Fernandez
+ */
+public class OAuthConnectionException extends OAuthException
+{
+  private static final String MSG = "There was a problem while creating a connection to the remote service.";
+
+  public OAuthConnectionException(Exception e)
+  {
+    super(MSG, e);
+  }
+}
diff --git a/src/main/java/org/scribe/exceptions/OAuthSignatureException.java b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
index 50143b5..94692be 100644
--- a/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
+++ b/src/main/java/org/scribe/exceptions/OAuthSignatureException.java
@@ -8,6 +8,7 @@ package org.scribe.exceptions;
 public class OAuthSignatureException extends OAuthException
 {
   private static final long serialVersionUID = 1L;
+  private static final String MSG = "Error while signing string: %s";
   
   /**
    * Default constructor
@@ -17,7 +18,7 @@ public class OAuthSignatureException extends OAuthException
    */
   public OAuthSignatureException(String stringToSign, Exception e)
   {
-    super("Error while signing string: " + stringToSign, e);
+    super(String.format(MSG, stringToSign), e);
   }
 
 }
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 6465c95..81db94e 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -61,13 +61,9 @@ class Request
       createConnection();
       return doSend();
     }
-    catch (UnknownHostException uhe)
+    catch (Exception e)
     {
-      throw new OAuthException("Could not reach the desired host. Check your network connection.", uhe);
-    }
-    catch (IOException ioe)
-    {
-      throw new OAuthException("Problems while creating connection.", ioe);
+      throw new OAuthConnectionException(e);
     }
   }
 

commit 8c8bcfcafd4b37183b2f135a6c2eb7e73be1a40b
Author: Julio Gutierrez <bubuntux@gmail.com>
Date:   Sun Apr 29 00:34:55 2012 -0700

    Update Dropbox

diff --git a/src/main/java/org/scribe/builder/api/DropBoxApi.java b/src/main/java/org/scribe/builder/api/DropBoxApi.java
index 73a5895..86f4a71 100644
--- a/src/main/java/org/scribe/builder/api/DropBoxApi.java
+++ b/src/main/java/org/scribe/builder/api/DropBoxApi.java
@@ -7,19 +7,19 @@ public class DropBoxApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "https://api.dropbox.com/0/oauth/access_token";
+    return "https://api.dropbox.com/1/oauth/access_token";
   }
 
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return "https://www.dropbox.com/0/oauth/authorize?oauth_token="+requestToken.getToken();
+    return "https://www.dropbox.com/1/oauth/authorize?oauth_token="+requestToken.getToken();
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://api.dropbox.com/0/oauth/request_token";
+    return "https://api.dropbox.com/1/oauth/request_token";
   }
 
 }
\ No newline at end of file

commit ebe4b0e7db3c74761b558ca283a1e4ec6f70b436
Merge: 8ceebf2 8c8bcfc
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Apr 29 12:06:24 2012 -0700

    Merge pull request #259 from bubuntux/master
    
    Update Dropbox api

commit 965a1ecd3fb3c6175cce61dcb3a708481b710a21
Merge: ebe4b0e 13d1eae
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Apr 29 12:06:54 2012 -0700

    Merge pull request #248 from adamnengland/master
    
    Digg API added

commit d721204939523368794b62bd760e72ed15b40960
Author: Seth Hitchings <seth@evernote.com>
Date:   Mon Apr 30 09:45:49 2012 -0700

    Allow empty oauth_token_secret values

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index eaee96e..007f48b 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -1,39 +1,27 @@
 package org.scribe.builder.api;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.scribe.exceptions.OAuthException;
-import org.scribe.extractors.AccessTokenExtractor;
 import org.scribe.model.Token;
-import org.scribe.utils.OAuthEncoder;
-import org.scribe.utils.Preconditions;
 
 public class EvernoteApi extends DefaultApi10a
 {
-  private static final String EVERNOTE_URL = "https://www.evernote.com";
-  
-	@Override
+  private static final String AUTHORIZATION_URL = "https://www.evernote.com/OAuth.action?oauth_token=%s";
+
+  @Override
 	public String getRequestTokenEndpoint()
   {
-		return EVERNOTE_URL + "/oauth";
-	}
+    return "https://www.evernote.com/oauth";
+  }
 
 	@Override
 	public String getAccessTokenEndpoint()
 	{
-		return EVERNOTE_URL + "/oauth";
+	  return "https://www.evernote.com/oauth";
 	}
 	
 	@Override
 	public String getAuthorizationUrl(Token requestToken)
 	{
-	  return String.format(EVERNOTE_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
-	}
-	
-	@Override
-	public AccessTokenExtractor getAccessTokenExtractor() {
-	  return new EvernoteAccessTokenExtractor();
+	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
 	}
 
 	public static class Sandbox extends EvernoteApi
@@ -57,37 +45,5 @@ public class EvernoteApi extends DefaultApi10a
 	  {
 	    return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
 	  }
-	}
-
-	public static class EvernoteAccessTokenExtractor implements AccessTokenExtractor {
-	  
-	  private static final Pattern TOKEN_REGEX = Pattern.compile("oauth_token=([^&]+)");
-	  // Evernote access tokens include an empty token secret (the empty string).
-	  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]*)");
-	  
-	  /**
-	   * {@inheritDoc} 
-	   */
-	  public Token extract(String response)
-	  {
-	    Preconditions.checkEmptyString(response, "Response body is incorrect. " +
-	        "Can't extract a token from an empty string");
-	    return new Token(extract(response, TOKEN_REGEX), extract(response, SECRET_REGEX), response);
-	  }
-	  
-	  private String extract(String response, Pattern p)
-	  {
-	    Matcher matcher = p.matcher(response);
-	    if (matcher.find() && matcher.groupCount() >= 1)
-	    {
-	      return OAuthEncoder.decode(matcher.group(1));
-	    }
-	    else
-	    {
-	      throw new OAuthException("Response body is incorrect. " +
-	          "Can't extract token and secret from this: '" + response + "'", null);
-	    }
-	  }
-	}
-	
+	}	
 }
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index c48fe35..ba1784b 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -16,7 +16,7 @@ import org.scribe.utils.*;
 public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExtractor
 {
   private static final Pattern TOKEN_REGEX = Pattern.compile("oauth_token=([^&]+)");
-  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]+)");
+  private static final Pattern SECRET_REGEX = Pattern.compile("oauth_token_secret=([^&]*)");
 
   /**
    * {@inheritDoc} 
diff --git a/src/test/java/org/scribe/extractors/TokenExtractorTest.java b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
index 2c9928f..aca5ad1 100644
--- a/src/test/java/org/scribe/extractors/TokenExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/TokenExtractorTest.java
@@ -43,6 +43,15 @@ public class TokenExtractorTest
     assertEquals("hh5s93j4hdidpola", extracted.getToken());
     assertEquals("hdhd0244k9j7ao03", extracted.getSecret());
   }
+  
+  @Test
+  public void shouldExtractTokenWithEmptySecret() 
+  {
+    String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=";
+    Token extracted = extractor.extract(response);
+    assertEquals("hh5s93j4hdidpola", extracted.getToken());
+    assertEquals("", extracted.getSecret());
+  }
 
   @Test(expected = OAuthException.class)
   public void shouldThrowExceptionIfTokenIsAbsent()

commit 294c3115d5bb31f610f90127c50c9becb852bc73
Merge: 965a1ec d721204
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Apr 30 10:14:30 2012 -0700

    Merge pull request #260 from sethhitch/master
    
    Support the Evernote API

commit 5ad8059b086ba8909bfd7f1800c14551c0faee86
Author: niQo <niQo @ NOSPAM>
Date:   Tue May 1 23:35:28 2012 +0200

    Added Skyrock.com support

diff --git a/src/main/java/org/scribe/builder/api/SkyrockApi.java b/src/main/java/org/scribe/builder/api/SkyrockApi.java
new file mode 100644
index 0000000..b0e76a3
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/SkyrockApi.java
@@ -0,0 +1,35 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+/**
+ * OAuth API for Skyrock.
+ *
+ * @author Nicolas Quiénot
+ * @see <a href="http://www.skyrock.com/developer/">Skyrock.com API</a>
+ */
+public class SkyrockApi extends DefaultApi10a
+{
+  private static final String API_ENDPOINT = "https://api.skyrock.com/v2";
+  private static final String REQUEST_TOKEN_RESOURCE = "/oauth/initiate";
+  private static final String AUTHORIZE_URL = "/oauth/authorize?oauth_token=%s";
+  private static final String ACCESS_TOKEN_RESOURCE = "/oauth/token";
+  
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return API_ENDPOINT + ACCESS_TOKEN_RESOURCE;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return API_ENDPOINT + REQUEST_TOKEN_RESOURCE;
+  }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(API_ENDPOINT + AUTHORIZE_URL, requestToken.getToken());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/SkyrockExample.java b/src/test/java/org/scribe/examples/SkyrockExample.java
new file mode 100644
index 0000000..422d067
--- /dev/null
+++ b/src/test/java/org/scribe/examples/SkyrockExample.java
@@ -0,0 +1,61 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class SkyrockExample
+{
+  private static final String PROTECTED_RESOURCE_URL = "https://api.skyrock.com/v2/user/get.json";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(SkyrockApi.class)
+                                .apiKey("your-api-key")
+                                .apiSecret("your-api-secret")
+                                .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== Skyrock's OAuth Workflow ===");
+    System.out.println();
+    
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    
+  }
+
+}

commit b35ea8d8ed814515da95115ae211bc92ce818ea2
Merge: 294c311 5ad8059
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue May 1 15:30:05 2012 -0700

    Merge pull request #264 from niQo/master
    
    Support for Skyrock.com API

commit cf9c4be00c2142fbfed6735d7d109bb2e90e4af6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue May 8 22:13:50 2012 -0700

    bounce version for release and updated changelog

diff --git a/changelog.txt b/changelog.txt
index 93a2cd8..dedcba6 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -82,3 +82,7 @@
   * FEATURE: Kaixin2, SinaWeibo2 and Renren Apis
   * FEATURE: ImgUr Api
   * FEATURE: Freelancer Api (thanks Juan Palacios!)
+  * FIX: Allow digits in url schemes
+  * FEATURE: Specific exception for connection problems (OAuthConnectionException)
+  * FIX: Dropbox Api and Evernote Api updated to their latests versions
+  * FIX: Digg and Skyrock Apis
diff --git a/pom.xml b/pom.xml
index a3b0196..e0c5d98 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.0</version>
+  <version>1.3.1</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 23fa5946a92d530dbb4b46359aaa38197a2fcb6c
Author: Yuya Goriki <y-goriki@mapion.co.jp>
Date:   Thu Jun 7 19:56:00 2012 +0900

    Remove Single-Quatation from AUTHORIZATION_URL

diff --git a/src/main/java/org/scribe/builder/api/YammerApi.java b/src/main/java/org/scribe/builder/api/YammerApi.java
index 68bcda5..e06543d 100644
--- a/src/main/java/org/scribe/builder/api/YammerApi.java
+++ b/src/main/java/org/scribe/builder/api/YammerApi.java
@@ -5,7 +5,7 @@ import org.scribe.services.*;
 
 public class YammerApi extends DefaultApi10a
 {
-  private static final String AUTHORIZATION_URL = "'https://www.yammer.com/oauth/authorize?oauth_token=%s'";
+  private static final String AUTHORIZATION_URL = "https://www.yammer.com/oauth/authorize?oauth_token=%s";
 
   @Override
   public String getRequestTokenEndpoint()

commit 2f553869950bad9d9a79ad4d8103ca6cea5d5210
Merge: cf9c4be 23fa594
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jun 7 07:40:23 2012 -0700

    Merge pull request #276 from potchama/master
    
    YammerAPI

commit 97fa26fce79f98d467edc1997b1a49df162bdb19
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Jun 22 13:27:30 2012 -0300

    do not include the token in the signature if it's empty

diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
index 286fec6..f8f84cd 100644
--- a/src/main/java/org/scribe/model/Token.java
+++ b/src/main/java/org/scribe/model/Token.java
@@ -57,4 +57,22 @@ public class Token implements Serializable
   {
     return String.format("Token[%s , %s]", token, secret);
   }
+
+  /**
+   * Returns true if the token is empty (token = "", secret = "")
+   */
+  public boolean isEmpty()
+  {
+    return "".equals(this.token) && "".equals(this.secret);
+  }
+
+  /**
+   * Factory method that returns an empty token (token = "", secret = "").
+   *
+   * Useful for two legged OAuth.
+   */
+  public static Token empty()
+  {
+    return new Token("","");
+  }
 }
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index b847b2d..0066797 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -8,7 +8,7 @@ import org.scribe.utils.*;
 
 /**
  * OAuth 1.0a implementation of {@link OAuthService}
- * 
+ *
  * @author Pablo Fernandez
  */
 public class OAuth10aServiceImpl implements OAuthService
@@ -20,7 +20,7 @@ public class OAuth10aServiceImpl implements OAuthService
 
   /**
    * Default constructor
-   * 
+   *
    * @param api OAuth1.0a api information
    * @param config OAuth 1.0a configuration param object
    */
@@ -88,8 +88,12 @@ public class OAuth10aServiceImpl implements OAuthService
   public void signRequest(Token token, OAuthRequest request)
   {
     config.log("signing request: " + request.getCompleteUrl());
-    request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
 
+    // Do not append the token if empty. This is for two legged OAuth calls.
+    if (!token.isEmpty())
+    {
+      request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
+    }
     config.log("setting token to: " + token);
     addOAuthParams(request, token);
     appendSignature(request);
@@ -110,7 +114,7 @@ public class OAuth10aServiceImpl implements OAuthService
   {
     return api.getAuthorizationUrl(requestToken);
   }
-  
+
   private String getSignature(OAuthRequest request, Token token)
   {
     config.log("generating signature...");

commit a121c3aa47a5d158f33aebba110e1d81a24ca8f3
Author: eranation <ehrann.mehdan@gmail.com>
Date:   Fri Aug 17 00:18:07 2012 -0300

    Update src/main/java/org/scribe/builder/api/ConstantContactApi2.java
    
    It didn't work for getting the token... 2 reasons,
    1: missing grant_type in the requeest
    2: token extractor wasn't expecting a JSON response 

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index 5709804..ed6d91a 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -1,7 +1,15 @@
 package org.scribe.builder.api;
 
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.scribe.exceptions.OAuthException;
+import org.scribe.extractors.AccessTokenExtractor;
 import org.scribe.model.OAuthConfig;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
 import org.scribe.utils.OAuthEncoder;
+import org.scribe.utils.Preconditions;
 
 public class ConstantContactApi2 extends DefaultApi20 
 {
@@ -11,12 +19,41 @@ public class ConstantContactApi2 extends DefaultApi20
 	@Override
 	public String getAccessTokenEndpoint() 
 	{
-		return "https://oauth2.constantcontact.com/oauth2/oauth/token";
+		return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=authorization_code";
 	}
 
+	
 	@Override
 	public String getAuthorizationUrl(OAuthConfig config) 
 	{
 		return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
 	}
-}
+	
+    @Override
+    public Verb getAccessTokenVerb() {
+        return Verb.POST;
+    }
+    
+    @Override
+    public AccessTokenExtractor getAccessTokenExtractor() {
+        return new AccessTokenExtractor() {
+            
+            @Override
+            public Token extract(String response) {
+                Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
+
+                String regex = "\"access_token\"\\s*:\\s*\"([^&\"]+)\"";
+				Matcher matcher = Pattern.compile(regex).matcher(response);
+                if (matcher.find())
+                {
+                  String token = OAuthEncoder.decode(matcher.group(1));
+                  return new Token(token, "", response);
+                } 
+                else
+                {
+                  throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+                }
+            }
+        };
+    }
+}
\ No newline at end of file

commit 6e6fd53306824462bfb42fa7b10690570a8e7c1c
Author: eranation <ehrann.mehdan@gmail.com>
Date:   Fri Aug 17 00:30:23 2012 -0300

    Update src/main/java/org/scribe/builder/api/ConstantContactApi2.java
    
    fixed indentation (4 spaces, no wrap)

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index ed6d91a..fb3e4aa 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -11,47 +11,40 @@ import org.scribe.model.Verb;
 import org.scribe.utils.OAuthEncoder;
 import org.scribe.utils.Preconditions;
 
-public class ConstantContactApi2 extends DefaultApi20 
-{
-	
-	private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
-	
-	@Override
-	public String getAccessTokenEndpoint() 
-	{
-		return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=authorization_code";
-	}
-
-	
-	@Override
-	public String getAuthorizationUrl(OAuthConfig config) 
-	{
-		return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
-	}
-	
+public class ConstantContactApi2 extends DefaultApi20 {
+
+    private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
+
+    @Override
+    public String getAccessTokenEndpoint() {
+        return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=authorization_code";
+    }
+
+    @Override
+    public String getAuthorizationUrl(OAuthConfig config) {
+        return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+    }
+
     @Override
     public Verb getAccessTokenVerb() {
         return Verb.POST;
     }
-    
+
     @Override
     public AccessTokenExtractor getAccessTokenExtractor() {
         return new AccessTokenExtractor() {
-            
+
             @Override
             public Token extract(String response) {
                 Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
 
                 String regex = "\"access_token\"\\s*:\\s*\"([^&\"]+)\"";
-				Matcher matcher = Pattern.compile(regex).matcher(response);
-                if (matcher.find())
-                {
-                  String token = OAuthEncoder.decode(matcher.group(1));
-                  return new Token(token, "", response);
-                } 
-                else
-                {
-                  throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+                Matcher matcher = Pattern.compile(regex).matcher(response);
+                if (matcher.find()) {
+                    String token = OAuthEncoder.decode(matcher.group(1));
+                    return new Token(token, "", response);
+                } else {
+                    throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
                 }
             }
         };

commit 979c6579ab662a9a88a0906a701e783e62251914
Author: Phillip Haines <phillip.haines@zestia.com>
Date:   Thu Dec 8 12:36:15 2011 +0000

    RSA-SHA1 / PKCS#1 signature service helper

diff --git a/src/main/java/org/scribe/services/RSASha1SignatureService.java b/src/main/java/org/scribe/services/RSASha1SignatureService.java
new file mode 100644
index 0000000..3b996f5
--- /dev/null
+++ b/src/main/java/org/scribe/services/RSASha1SignatureService.java
@@ -0,0 +1,47 @@
+package org.scribe.services;
+
+import org.apache.commons.codec.binary.*;
+import org.scribe.exceptions.*;
+import java.security.*;
+
+/**
+ * A signature service that uses the RSA-SHA1 algorithm.
+ */
+public class RSASha1SignatureService implements SignatureService
+{
+  private static final String METHOD = "RSA-SHA1";
+  private static final String RSA_SHA1 = "SHA1withRSA";
+
+  private PrivateKey privateKey;
+
+  public RSASha1SignatureService(PrivateKey privateKey)
+  {
+    this.privateKey = privateKey;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getSignature(String baseString, String apiSecret, String tokenSecret)
+  {
+    try
+    {
+      Signature signature = Signature.getInstance(RSA_SHA1);
+      signature.initSign(privateKey);
+      signature.update(baseString.getBytes());
+      return new String(Base64.encodeBase64(signature.sign(), false));
+    }
+    catch (Exception e)
+    {
+      throw new OAuthSignatureException(baseString, e);
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getSignatureMethod()
+  {
+    return METHOD;
+  }
+}
\ No newline at end of file
diff --git a/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java b/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java
new file mode 100644
index 0000000..9e375c5
--- /dev/null
+++ b/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java
@@ -0,0 +1,66 @@
+package org.scribe.services;
+
+import static org.junit.Assert.*;
+
+import org.junit.*;
+import org.apache.commons.codec.binary.*;
+import java.security.*;
+import java.security.spec.*;
+
+public class RSASha1SignatureServiceTest
+{
+
+	RSASha1SignatureService service = new RSASha1SignatureService(getPrivateKey());
+
+  @Test
+  public void shouldReturnSignatureMethodString()
+  {
+    String expected = "RSA-SHA1";
+    assertEquals(expected, service.getSignatureMethod());
+  }
+
+	@Test
+  public void shouldReturnSignature()
+  {
+    String apiSecret = "api secret";
+    String tokenSecret = "token secret";
+    String baseString = "base string";
+    String signature = "LUNRzQAlpdNyM9mLXm96Va6g/qVNnEAb7p7K1KM0g8IopOFQJPoOO7cvppgt7w3QyhijWJnCmvqXaaIAGrqvdyr3fIzBULh8D/iZQUNLMi08GCOA34P81XBvsc7A5uJjPDsGhJg2MzoVJ8nWJhU/lMMk4c92S1WGskeoDofRwpo=";
+    assertEquals(signature, service.getSignature(baseString, apiSecret, tokenSecret));
+  }
+
+  /**
+   *Created primary key using openssl.
+   *
+   * openssl req -x509 -nodes -days 365 -newkey rsa:1024 -sha1 -subj   '/C=GB/ST=/L=Manchester/CN=www.example.com' -keyout   myrsakey.pem -out /tmp/myrsacert.pem
+   * openssl pkcs8 -in myrsakey.pem -topk8 -nocrypt -out myrsakey.pk8
+   */
+  private static PrivateKey getPrivateKey()
+  {
+    String str = "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMPQ5BCMxlUq2TYy\n"+
+                 "iRIoEUsz6HGTJhHuasS2nx1Se4Co3lxwxyubVdFj8AuhHNJSmJvjlpbTsGOjLZpr\n"+
+                 "HyDEDdJmf1Fensh1MhUnBZ4a7uLrZrKzFHHJdamX9pxapB89vLeHlCot9hVXdrZH\n"+
+                 "nNtg6FdmRKH/8gbs8iDyIayFvzYDAgMBAAECgYA+c9MpTBy9cQsR9BAvkEPjvkx2\n"+
+                 "XL4ZnfbDgpNA4Nuu7yzsQrPjPomiXMNkkiAFHH67yVxwAlgRjyuuQlgNNTpKvyQt\n"+
+                 "XcHxffnU0820VmE23M+L7jg2TlB3+rUnEDmDvCoyjlwGDR6lNb7t7Fgg2iR+iaov\n"+
+                 "0iVzz+l9w0slRlyGsQJBAPWXW2m3NmFgqfDxtw8fsKC2y8o17/cnPjozRGtWb8LQ\n"+
+                 "g3VCb8kbOFHOYNGazq3M7+wD1qILF2h/HecgK9eQrZ0CQQDMHXoJMfKKbrFrTKgE\n"+
+                 "zyggO1gtuT5OXYeFewMEb5AbDI2FfSc2YP7SHij8iQ2HdukBrbTmi6qxh3HmIR58\n"+
+                 "I/AfAkEA0Y9vr0tombsUB8cZv0v5OYoBZvCTbMANtzfb4AOHpiKqqbohDOevLQ7/\n"+
+                 "SpvgVCmVaDz2PptcRAyEBZ5MCssneQJAB2pmvaDH7Ambfod5bztLfOhLCtY5EkXJ\n"+
+                 "n6rZcDbRaHorRhdG7m3VtDKOUKZ2DF7glkQGV33phKukErVPUzlHBwJAScD9TqaG\n"+
+                 "wJ3juUsVtujV23SnH43iMggXT7m82STpPGam1hPfmqu2Z0niePFo927ogQ7H1EMJ\n"+
+                 "UHgqXmuvk2X/Ww==";
+
+    try
+    {
+      KeyFactory fac = KeyFactory.getInstance("RSA");
+      PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(str.getBytes()));
+      return fac.generatePrivate(privKeySpec);
+    }
+    catch (Exception e)
+    {
+      throw new RuntimeException(e);
+    }
+  }
+}

commit 57409b50ac3cdd6a0f71421d4d29fd4a78ec3031
Author: whaley <jason@nodeable.com>
Date:   Mon Aug 20 15:24:45 2012 -0600

    Override equals/hashcode in Token

diff --git a/src/main/java/org/scribe/model/Token.java b/src/main/java/org/scribe/model/Token.java
index f8f84cd..4d8c0ee 100644
--- a/src/main/java/org/scribe/model/Token.java
+++ b/src/main/java/org/scribe/model/Token.java
@@ -1,25 +1,26 @@
 package org.scribe.model;
 
-import java.io.Serializable;
+import java.io.*;
+import org.scribe.utils.*;
 
 /**
  * Represents an OAuth token (either request or access token) and its secret
- * 
+ *
  * @author Pablo Fernandez
  */
 public class Token implements Serializable
 {
   private static final long serialVersionUID = 715000866082812683L;
-	
+
   private final String token;
   private final String secret;
   private final String rawResponse;
 
   /**
    * Default constructor
-   * 
-   * @param token token value
-   * @param secret token secret
+   *
+   * @param token token value. Can't be null.
+   * @param secret token secret. Can't be null.
    */
   public Token(String token, String secret)
   {
@@ -28,6 +29,9 @@ public class Token implements Serializable
 
   public Token(String token, String secret, String rawResponse)
   {
+    Preconditions.checkNotNull(token, "Token can't be null");
+    Preconditions.checkNotNull(secret, "Secret can't be null");
+
     this.token = token;
     this.secret = secret;
     this.rawResponse = rawResponse;
@@ -73,6 +77,22 @@ public class Token implements Serializable
    */
   public static Token empty()
   {
-    return new Token("","");
+    return new Token("", "");
+  }
+
+  @Override
+  public boolean equals(Object o)
+  {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+
+    Token that = (Token) o;
+    return token.equals(that.token) && secret.equals(that.secret);
+  }
+
+  @Override
+  public int hashCode()
+  {
+    return 31 * token.hashCode() + secret.hashCode();
   }
 }
diff --git a/src/test/java/org/scribe/model/TokenTest.java b/src/test/java/org/scribe/model/TokenTest.java
new file mode 100644
index 0000000..dff59cc
--- /dev/null
+++ b/src/test/java/org/scribe/model/TokenTest.java
@@ -0,0 +1,44 @@
+package org.scribe.model;
+
+import static junit.framework.Assert.*;
+import org.junit.*;
+
+public class TokenTest
+{
+  @Test
+  public void shouldTestEqualityBasedOnTokenAndSecret() throws Exception
+  {
+    Token expected = new Token("access","secret");
+    Token actual = new Token("access","secret");
+
+    assertEquals(expected, actual);
+    assertEquals(actual, actual);
+  }
+
+  @Test
+  public void shouldNotDependOnRawString() throws Exception
+  {
+    Token expected = new Token("access","secret", "raw_string");
+    Token actual = new Token("access","secret", "different_raw_string");
+
+    assertEquals(expected, actual);
+  }
+
+  @Test
+  public void shouldReturnSameHashCodeForEqualObjects() throws Exception
+  {
+    Token expected = new Token("access","secret");
+    Token actual = new Token("access","secret");
+
+    assertEquals(expected.hashCode(), actual.hashCode());
+  }
+
+  @Test
+  public void shouldNotBeEqualToNullOrOtherObjects() throws Exception
+  {
+    Token expected = new Token("access","secret","response");
+
+    assertNotSame(expected, null);
+    assertNotSame(expected, new Object());
+  }
+}

commit b777162322a6c6cda7baf24ba136bef57e07b3e5
Author: eranation <ehrann.mehdan@gmail.com>
Date:   Mon Sep 3 17:18:09 2012 -0300

    fixed code styling

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index fb3e4aa..631ec04 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -1,52 +1,55 @@
 package org.scribe.builder.api;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.scribe.exceptions.OAuthException;
-import org.scribe.extractors.AccessTokenExtractor;
-import org.scribe.model.OAuthConfig;
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
-import org.scribe.utils.OAuthEncoder;
-import org.scribe.utils.Preconditions;
-
-public class ConstantContactApi2 extends DefaultApi20 {
-
-    private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
-
-    @Override
-    public String getAccessTokenEndpoint() {
-        return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=authorization_code";
-    }
-
-    @Override
-    public String getAuthorizationUrl(OAuthConfig config) {
-        return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
-    }
-
-    @Override
-    public Verb getAccessTokenVerb() {
-        return Verb.POST;
-    }
-
-    @Override
-    public AccessTokenExtractor getAccessTokenExtractor() {
-        return new AccessTokenExtractor() {
-
-            @Override
-            public Token extract(String response) {
-                Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
-
-                String regex = "\"access_token\"\\s*:\\s*\"([^&\"]+)\"";
-                Matcher matcher = Pattern.compile(regex).matcher(response);
-                if (matcher.find()) {
-                    String token = OAuthEncoder.decode(matcher.group(1));
-                    return new Token(token, "", response);
-                } else {
-                    throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
-                }
-            }
-        };
-    }
+import java.util.regex.*;
+import org.scribe.exceptions.*;
+import org.scribe.extractors.*;
+import org.scribe.model.*;
+import org.scribe.utils.*;
+
+public class ConstantContactApi2 extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://oauth2.constantcontact.com/oauth2/oauth/siteowner/authorize?client_id=%s&response_type=code&redirect_uri=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+  }
+
+  @Override
+  public Verb getAccessTokenVerb()
+  {
+    return Verb.POST;
+  }
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new AccessTokenExtractor()
+    {
+
+      @Override
+      public Token extract(String response)
+      {
+        Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
+
+        String regex = "\"access_token\"\\s*:\\s*\"([^&\"]+)\"";
+        Matcher matcher = Pattern.compile(regex).matcher(response);
+        if (matcher.find())
+        {
+          String token = OAuthEncoder.decode(matcher.group(1));
+          return new Token(token, "", response);
+        } else
+        {
+          throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
+        }
+      }
+    };
+  }
 }
\ No newline at end of file

commit 5a88fa3b07a316f34de47ac7ed48b72fb6b619bc
Author: eranation <ehrann.mehdan@gmail.com>
Date:   Mon Sep 3 22:09:34 2012 -0300

    Fixed indentation

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index 631ec04..221495d 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -45,7 +45,8 @@ public class ConstantContactApi2 extends DefaultApi20
         {
           String token = OAuthEncoder.decode(matcher.group(1));
           return new Token(token, "", response);
-        } else
+        } 
+        else
         {
           throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
         }

commit f8448ee6f085ef5bc1bf7b3f84de122a91852ba9
Merge: 57409b5 5a88fa3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 3 18:22:55 2012 -0700

    Merge pull request #290 from eranation/master
    
    Oauth2 client for ConstantContact - fixed

commit a736912614301b595f9f1b88fde5880176a4d7ba
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Sep 5 11:43:07 2012 -0300

    bounced version number and added changes to changelog

diff --git a/changelog.txt b/changelog.txt
index dedcba6..cfe3e4a 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -85,4 +85,10 @@
   * FIX: Allow digits in url schemes
   * FEATURE: Specific exception for connection problems (OAuthConnectionException)
   * FIX: Dropbox Api and Evernote Api updated to their latests versions
-  * FIX: Digg and Skyrock Apis
+  * FEATURE: Digg and Skyrock Apis
+
+[1.3.2]
+  * FIX: Don't include oauth_token in 2legged calls.
+  * FEATURE: RSA-SHA1 Signatures.
+  * FEATURE: equals & hashcode on Token object.
+  * FEATURE: ConstantContact Api
diff --git a/pom.xml b/pom.xml
index e0c5d98..dbee18c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.1</version>
+  <version>1.3.2</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit d1a7b474f57520314fee59bc422c6a1b96ab8559
Author: Marcin Swierczynski <marcin@swierczynski.net>
Date:   Wed Sep 5 20:25:32 2012 +0200

    LinkedIn authorize URL changed

diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index f459404..dc3e583 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -4,7 +4,7 @@ import org.scribe.model.*;
 
 public class LinkedInApi extends DefaultApi10a
 {
-  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authorize?oauth_token=%s";
+  private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authenticate?oauth_token=%s";
 
   @Override
   public String getAccessTokenEndpoint()

commit 417d2e782f079459f1486ef23cac433e6ff4c8c3
Author: Julio Gutierrez <bubuntux@gmail.com>
Date:   Thu Sep 6 01:04:19 2012 -0700

    Add support for Ubutun One

diff --git a/src/main/java/org/scribe/builder/api/UbuntuOneApi.java b/src/main/java/org/scribe/builder/api/UbuntuOneApi.java
new file mode 100644
index 0000000..2a72c3a
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/UbuntuOneApi.java
@@ -0,0 +1,40 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+import org.scribe.services.*;
+
+/**
+ * @author Julio Gutierrez
+ * 
+ *         Sep 6, 2012
+ */
+public class UbuntuOneApi extends DefaultApi10a
+{
+
+  private static final String AUTHORIZATION_URL = "https://one.ubuntu.com/oauth/authorize/?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://one.ubuntu.com/oauth/access/";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://one.ubuntu.com/oauth/request/";
+  }
+
+  @Override
+  public SignatureService getSignatureService()
+  {
+    return new PlaintextSignatureService();
+  }
+
+}
diff --git a/src/main/java/org/scribe/services/PlaintextSignatureService.java b/src/main/java/org/scribe/services/PlaintextSignatureService.java
index b71ca97..03306e8 100644
--- a/src/main/java/org/scribe/services/PlaintextSignatureService.java
+++ b/src/main/java/org/scribe/services/PlaintextSignatureService.java
@@ -11,7 +11,7 @@ import org.scribe.utils.*;
  */
 public class PlaintextSignatureService implements SignatureService
 {
-  private static final String METHOD = "plaintext";
+  private static final String METHOD = "PLAINTEXT";
 
   /**
    * {@inheritDoc}

commit b058b68a36832e665dc10e304a23579be943648d
Author: Joe Littlejohn <joe.littlejohn@nokia.com>
Date:   Thu Sep 6 13:58:03 2012 +0100

    Add support for HEAD, OPTIONS, TRACE and PATCH

diff --git a/src/main/java/org/scribe/model/Verb.java b/src/main/java/org/scribe/model/Verb.java
index b370791..0c22f66 100644
--- a/src/main/java/org/scribe/model/Verb.java
+++ b/src/main/java/org/scribe/model/Verb.java
@@ -7,5 +7,5 @@ package org.scribe.model;
  */
 public enum Verb
 {
-  GET, POST, PUT, DELETE
+  GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH
 }

commit bf4f0db34ab5524c53abb5708ef0c0fa8520ceb3
Merge: a736912 b058b68
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Sep 7 07:29:58 2012 -0700

    Merge pull request #299 from joelittlejohn/more-verbs
    
    Add support for HEAD, OPTIONS, TRACE and PATCH

commit 295d32ce5371920bcd13955bc8a2900b4fd2bbdc
Author: Arieh Bibliowicz <vainolo@gmail.com>
Date:   Tue Sep 11 14:26:33 2012 +0300

    Added Mendeley API class

diff --git a/src/main/java/org/scribe/builder/api/MendeleyApi.java b/src/main/java/org/scribe/builder/api/MendeleyApi.java
new file mode 100644
index 0000000..e3c9e14
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/MendeleyApi.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2012 Arieh 'Vainolo' Bibliowicz
+ * You can use this code for educational purposes. For any other uses
+ * please contact me: vainolo@gmail.com
+ *******************************************************************************/
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+
+public class MendeleyApi extends DefaultApi10a {
+
+  private static final String AUTHORIZATION_URL = "http://api.mendeley.com/oauth/authorize?oauth_token=%s";
+
+  @Override
+  public String getRequestTokenEndpoint() {
+    return "http://api.mendeley.com/oauth/request_token/";
+  }
+
+  @Override
+  public String getAccessTokenEndpoint() {
+    return "http://api.mendeley.com/oauth/access_token/";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken) {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  @Override
+  public Verb getAccessTokenVerb() {
+    return Verb.GET;
+  }
+
+  @Override
+  public Verb getRequestTokenVerb() {
+    return Verb.GET;
+  }
+}

commit 3d2a3475d9bd94517695ea30ba7c416d50a1bf27
Author: Arieh Bibliowicz <vainolo@gmail.com>
Date:   Tue Sep 11 14:38:12 2012 +0300

    Removed copyright notice

diff --git a/src/main/java/org/scribe/builder/api/MendeleyApi.java b/src/main/java/org/scribe/builder/api/MendeleyApi.java
index e3c9e14..d4370af 100644
--- a/src/main/java/org/scribe/builder/api/MendeleyApi.java
+++ b/src/main/java/org/scribe/builder/api/MendeleyApi.java
@@ -1,13 +1,12 @@
-/*******************************************************************************
- * Copyright (c) 2012 Arieh 'Vainolo' Bibliowicz
- * You can use this code for educational purposes. For any other uses
- * please contact me: vainolo@gmail.com
- *******************************************************************************/
 package org.scribe.builder.api;
 
 import org.scribe.model.Token;
 import org.scribe.model.Verb;
 
+/**
+ * @author Arieh "Vainolo" Bibliowicz
+ * @see http://apidocs.mendeley.com/home/authentication
+ */
 public class MendeleyApi extends DefaultApi10a {
 
   private static final String AUTHORIZATION_URL = "http://api.mendeley.com/oauth/authorize?oauth_token=%s";

commit 517d3f6b21093d74eb5273488673efeacd5b6b69
Merge: bf4f0db 417d2e7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 13 06:47:54 2012 -0700

    Merge pull request #298 from bubuntux/ubuntuOne
    
    Add support for Ubutun One

commit 422fb2b299f28ac32de66f3cf129f6fce79578c8
Merge: 517d3f6 d1a7b47
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 13 06:49:01 2012 -0700

    Merge pull request #296 from MarcinOS/linkedin-integration
    
    LinkedIn authorize URL changed

commit d4474cd6034a5653cfb7887d5d949dab20c98876
Author: Arieh Bibliowicz <vainolo@gmail.com>
Date:   Thu Sep 13 22:04:25 2012 +0300

    Modified imports

diff --git a/src/main/java/org/scribe/builder/api/MendeleyApi.java b/src/main/java/org/scribe/builder/api/MendeleyApi.java
index d4370af..315fa53 100644
--- a/src/main/java/org/scribe/builder/api/MendeleyApi.java
+++ b/src/main/java/org/scribe/builder/api/MendeleyApi.java
@@ -1,7 +1,6 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
+import org.scribe.model.*;
 
 /**
  * @author Arieh "Vainolo" Bibliowicz

commit ca470f87a9c8c61c78aa020289a594be87394f74
Author: Arieh Bibliowicz <vainolo@gmail.com>
Date:   Thu Sep 13 22:08:14 2012 +0300

    Changed '{' to newlines

diff --git a/src/main/java/org/scribe/builder/api/MendeleyApi.java b/src/main/java/org/scribe/builder/api/MendeleyApi.java
index 315fa53..c6e0ece 100644
--- a/src/main/java/org/scribe/builder/api/MendeleyApi.java
+++ b/src/main/java/org/scribe/builder/api/MendeleyApi.java
@@ -6,32 +6,38 @@ import org.scribe.model.*;
  * @author Arieh "Vainolo" Bibliowicz
  * @see http://apidocs.mendeley.com/home/authentication
  */
-public class MendeleyApi extends DefaultApi10a {
+public class MendeleyApi extends DefaultApi10a 
+{
 
   private static final String AUTHORIZATION_URL = "http://api.mendeley.com/oauth/authorize?oauth_token=%s";
 
   @Override
-  public String getRequestTokenEndpoint() {
+  public String getRequestTokenEndpoint() 
+  {
     return "http://api.mendeley.com/oauth/request_token/";
   }
 
   @Override
-  public String getAccessTokenEndpoint() {
+  public String getAccessTokenEndpoint()  
+  {
     return "http://api.mendeley.com/oauth/access_token/";
   }
 
   @Override
-  public String getAuthorizationUrl(Token requestToken) {
+  public String getAuthorizationUrl(Token requestToken) 
+  {
     return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
 
   @Override
-  public Verb getAccessTokenVerb() {
+  public Verb getAccessTokenVerb() 
+  {
     return Verb.GET;
   }
 
   @Override
-  public Verb getRequestTokenVerb() {
+  public Verb getRequestTokenVerb() 
+  {
     return Verb.GET;
   }
 }

commit 7b4fe73ba2b958627d838704ee6a706abd266301
Merge: 422fb2b ca470f8
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Sep 13 14:25:43 2012 -0700

    Merge pull request #301 from vainolo/master
    
    Added Mendeley API

commit eac0ffd257f804b773cd471271f02b646e1b157f
Author: Adrian Servy <a.i.servenschi@gmail.com>
Date:   Thu Sep 27 04:42:12 2012 +0300

    Live authorization endpoints changed

diff --git a/src/main/java/org/scribe/builder/api/LiveApi.java b/src/main/java/org/scribe/builder/api/LiveApi.java
index 18140f6..125b880 100644
--- a/src/main/java/org/scribe/builder/api/LiveApi.java
+++ b/src/main/java/org/scribe/builder/api/LiveApi.java
@@ -7,13 +7,13 @@ import org.scribe.utils.*;
 public class LiveApi extends DefaultApi20
 {
 
-	private static final String AUTHORIZE_URL = "https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+	private static final String AUTHORIZE_URL = "https://login.live.com/oauth20_authorize.srf?client_id=%s&redirect_uri=%s&response_type=code";
 	private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
 
 	@Override
 	public String getAccessTokenEndpoint()
 	{
-		return "https://oauth.live.com/token?grant_type=authorization_code";
+		return "https://login.live.com/oauth20_token.srf?grant_type=authorization_code";
 	}
 
 	@Override

commit 09d85d6713af6c97ae7d4450f88ceac20c60e2fd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 10 08:31:23 2012 -0300

    read timeouts for access token and request token calls

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 0066797..87558c6 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -5,6 +5,7 @@ import java.util.*;
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
 import org.scribe.utils.*;
+import java.util.concurrent.TimeUnit;
 
 /**
  * OAuth 1.0a implementation of {@link OAuthService}
@@ -33,7 +34,7 @@ public class OAuth10aServiceImpl implements OAuthService
   /**
    * {@inheritDoc}
    */
-  public Token getRequestToken()
+  public Token getRequestToken(int timeout, TimeUnit unit)
   {
     config.log("obtaining request token from " + api.getRequestTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
@@ -44,6 +45,7 @@ public class OAuth10aServiceImpl implements OAuthService
     appendSignature(request);
 
     config.log("sending request...");
+    request.setReadTimeout(timeout, unit);
     Response response = request.send();
     String body = response.getBody();
 
@@ -52,6 +54,11 @@ public class OAuth10aServiceImpl implements OAuthService
     return api.getRequestTokenExtractor().extract(body);
   }
 
+  public Token getRequestToken()
+  {
+    return getRequestToken(2, TimeUnit.SECONDS);
+  }
+
   private void addOAuthParams(OAuthRequest request, Token token)
   {
     request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
@@ -68,7 +75,7 @@ public class OAuth10aServiceImpl implements OAuthService
   /**
    * {@inheritDoc}
    */
-  public Token getAccessToken(Token requestToken, Verifier verifier)
+  public Token getAccessToken(Token requestToken, Verifier verifier, int timeout, TimeUnit unit)
   {
     config.log("obtaining access token from " + api.getAccessTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
@@ -78,10 +85,16 @@ public class OAuth10aServiceImpl implements OAuthService
     config.log("setting token to: " + requestToken + " and verifier to: " + verifier);
     addOAuthParams(request, requestToken);
     appendSignature(request);
+    request.setReadTimeout(timeout, unit);
     Response response = request.send();
     return api.getAccessTokenExtractor().extract(response.getBody());
   }
 
+  public Token getAccessToken(Token requestToken, Verifier verifier)
+  {
+    return getAccessToken(requestToken, verifier, 2, TimeUnit.SECONDS);
+  }
+
   /**
    * {@inheritDoc}
    */

commit eebc00f7e21ba190fa9c6f064f6d351b8b4a9cc5
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Oct 10 08:35:06 2012 -0300

    missing changelog description

diff --git a/changelog.txt b/changelog.txt
index cfe3e4a..6175678 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -92,3 +92,6 @@
   * FEATURE: RSA-SHA1 Signatures.
   * FEATURE: equals & hashcode on Token object.
   * FEATURE: ConstantContact Api
+
+[1.3.3]
+  * FEATURE: accessToken and requestToken timeouts default to 2 seconds and can be specified.

commit b129a2c04f3f36a378dc851b14cafad7dea8c245
Author: Dave Syer <dsyer@vmware.com>
Date:   Tue Oct 23 14:39:40 2012 +0100

    Fix Java 5 compilation (#318)
    
    I found a previous issue that had explicitly made the code
    create 1.5 compatible binaries, so I assume that is the
    intended behaviour.

diff --git a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
index 221495d..b5e4cac 100644
--- a/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
+++ b/src/main/java/org/scribe/builder/api/ConstantContactApi2.java
@@ -34,7 +34,6 @@ public class ConstantContactApi2 extends DefaultApi20
     return new AccessTokenExtractor()
     {
 
-      @Override
       public Token extract(String response)
       {
         Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 9344a21..801cd62 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -10,7 +10,6 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

commit b8ca4910f883dbc2759ba9ef494c591eb65e2521
Merge: eebc00f b129a2c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Oct 23 09:09:58 2012 -0700

    Merge pull request #319 from dsyer/Java5Compatibility
    
    Fix Java 5 compilation (#318)

commit 9a99a44c5f5a7e557f0a4bfa5d64a2587947b590
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Oct 23 13:43:48 2012 -0300

    add request 'tuners' for access and request token calls

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 81db94e..b19e4a8 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -13,10 +13,13 @@ import org.scribe.exceptions.*;
  * 
  * @author Pablo Fernandez
  */
-class Request
+public class Request
 {
   private static final String CONTENT_LENGTH = "Content-Length";
   private static final String CONTENT_TYPE = "Content-Type";
+  private static RequestTuner NOOP = new RequestTuner() {
+    @Override public void tune(Request _){}
+  };
   public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
 
   private String url;
@@ -54,12 +57,12 @@ class Request
    * @throws RuntimeException
    *           if the connection cannot be created.
    */
-  public Response send()
+  public Response send(RequestTuner tuner)
   {
     try
     {
       createConnection();
-      return doSend();
+      return doSend(tuner);
     }
     catch (Exception e)
     {
@@ -67,6 +70,11 @@ class Request
     }
   }
 
+  public Response send()
+  {
+    return send(NOOP);
+  }
+
   private void createConnection() throws IOException
   {
     String completeUrl = getCompleteUrl();
@@ -87,7 +95,7 @@ class Request
     return querystringParams.appendTo(url);
   }
 
-  Response doSend() throws IOException
+  Response doSend(RequestTuner tuner) throws IOException
   {
     connection.setRequestMethod(this.verb.name());
     if (connectTimeout != null) 
@@ -103,6 +111,7 @@ class Request
     {
       addBody(connection, getByteBodyContents());
     }
+    tuner.tune(this);
     return new Response(connection);
   }
 
diff --git a/src/main/java/org/scribe/model/RequestTuner.java b/src/main/java/org/scribe/model/RequestTuner.java
new file mode 100644
index 0000000..34ea1eb
--- /dev/null
+++ b/src/main/java/org/scribe/model/RequestTuner.java
@@ -0,0 +1,6 @@
+package org.scribe.model;
+
+public abstract class RequestTuner
+{
+  public abstract void tune(Request request);
+}
\ No newline at end of file
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index 87558c6..ff5b5d6 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -36,6 +36,16 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getRequestToken(int timeout, TimeUnit unit)
   {
+    return getRequestToken(new TimeoutTuner(timeout, unit));
+  }
+
+  public Token getRequestToken()
+  {
+    return getRequestToken(2, TimeUnit.SECONDS);
+  }
+
+  public Token getRequestToken(RequestTuner tuner)
+  {
     config.log("obtaining request token from " + api.getRequestTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
 
@@ -45,8 +55,7 @@ public class OAuth10aServiceImpl implements OAuthService
     appendSignature(request);
 
     config.log("sending request...");
-    request.setReadTimeout(timeout, unit);
-    Response response = request.send();
+    Response response = request.send(tuner);
     String body = response.getBody();
 
     config.log("response status code: " + response.getCode());
@@ -54,11 +63,6 @@ public class OAuth10aServiceImpl implements OAuthService
     return api.getRequestTokenExtractor().extract(body);
   }
 
-  public Token getRequestToken()
-  {
-    return getRequestToken(2, TimeUnit.SECONDS);
-  }
-
   private void addOAuthParams(OAuthRequest request, Token token)
   {
     request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
@@ -77,6 +81,16 @@ public class OAuth10aServiceImpl implements OAuthService
    */
   public Token getAccessToken(Token requestToken, Verifier verifier, int timeout, TimeUnit unit)
   {
+    return getAccessToken(requestToken, verifier, new TimeoutTuner(timeout, unit));
+  }
+
+  public Token getAccessToken(Token requestToken, Verifier verifier)
+  {
+    return getAccessToken(requestToken, verifier, 2, TimeUnit.SECONDS);
+  }
+
+  public Token getAccessToken(Token requestToken, Verifier verifier, RequestTuner tuner)
+  {
     config.log("obtaining access token from " + api.getAccessTokenEndpoint());
     OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
     request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
@@ -85,16 +99,10 @@ public class OAuth10aServiceImpl implements OAuthService
     config.log("setting token to: " + requestToken + " and verifier to: " + verifier);
     addOAuthParams(request, requestToken);
     appendSignature(request);
-    request.setReadTimeout(timeout, unit);
-    Response response = request.send();
+    Response response = request.send(tuner);
     return api.getAccessTokenExtractor().extract(response.getBody());
   }
 
-  public Token getAccessToken(Token requestToken, Verifier verifier)
-  {
-    return getAccessToken(requestToken, verifier, 2, TimeUnit.SECONDS);
-  }
-
   /**
    * {@inheritDoc}
    */
@@ -159,4 +167,22 @@ public class OAuth10aServiceImpl implements OAuthService
         break;
     }
   }
+
+  private static class TimeoutTuner extends RequestTuner
+  {
+    private final int duration;
+    private final TimeUnit unit;
+
+    public TimeoutTuner(int duration, TimeUnit unit)
+    {
+      this.duration = duration;
+      this.unit = unit;
+    }
+
+    @Override
+    public void tune(Request request)
+    {
+      request.setReadTimeout(duration, unit);
+    }
+  }
 }

commit 1e39668c935540c533168da41bae4cf14f323fe5
Author: Will Fleming <wfleming77@gmail.com>
Date:   Fri Nov 9 13:31:28 2012 -0800

    Update maven dependency version to 1.3.2

diff --git a/README.textile b/README.textile
index 9cecfb4..a20bcca 100644
--- a/README.textile
+++ b/README.textile
@@ -65,7 +65,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.3.0</version>@
+  @<version>1.3.2</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes

commit c1b3561c5d4421ff7dfc2a9df2bfb15262b66369
Merge: 9a99a44 1e39668
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Nov 9 17:16:11 2012 -0800

    Merge pull request #322 from wtfleming/master
    
    Update maven dependency in README to point to 1.3.2

commit 55fb59c61022a6a229be939fd6ab4dd6689ada28
Author: Luis de la Rosa <luis@luisdelarosa.com>
Date:   Fri Nov 23 11:43:23 2012 -0500

    Added support for the Trello API, documented at https://trello.com/docs/.  This includes an example in the style of the other examples, which allows the user to see their member record.

diff --git a/src/main/java/org/scribe/builder/api/TrelloApi.java b/src/main/java/org/scribe/builder/api/TrelloApi.java
new file mode 100644
index 0000000..9e46730
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/TrelloApi.java
@@ -0,0 +1,27 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class TrelloApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://trello.com/1/OAuthAuthorizeToken?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://trello.com/1/OAuthGetAccessToken";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://trello.com/1/OAuthGetRequestToken";
+  }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+  
+}
diff --git a/src/test/java/org/scribe/examples/TrelloExample.java b/src/test/java/org/scribe/examples/TrelloExample.java
new file mode 100644
index 0000000..9888f5e
--- /dev/null
+++ b/src/test/java/org/scribe/examples/TrelloExample.java
@@ -0,0 +1,60 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class TrelloExample
+{
+  private static final String API_KEY = "your_api_key";
+  private static final String API_SECRET = "your_api_secret";
+  private static final String PROTECTED_RESOURCE_URL = "https://trello.com/1/members/me";
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(TrelloApi.class)
+                                .apiKey(API_KEY)
+                                .apiSecret(API_SECRET)
+                                .build();
+    Scanner in = new Scanner(System.in);
+    
+    System.out.println("=== Trello's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+
+}

commit 0ed1989b73dd0996e5644b89a1856608991b9134
Merge: c1b3561 55fb59c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Nov 23 21:00:16 2012 -0800

    Merge pull request #328 from luisdelarosa/trello
    
    Added support for Trello API.

commit 85257fd8959d1f32934f1a9ae60066a6139a5f64
Author: Александр Чиченин <sovnarkom@somebugs.com>
Date:   Tue Nov 27 03:19:03 2012 +0400

    Update src/main/java/org/scribe/builder/api/VkontakteApi.java
    
    Updated hostname to avoid https policy exception

diff --git a/src/main/java/org/scribe/builder/api/VkontakteApi.java b/src/main/java/org/scribe/builder/api/VkontakteApi.java
index 83050e3..e12f395 100644
--- a/src/main/java/org/scribe/builder/api/VkontakteApi.java
+++ b/src/main/java/org/scribe/builder/api/VkontakteApi.java
@@ -10,7 +10,7 @@ import org.scribe.model.*;
  */
 public class VkontakteApi extends DefaultApi20
 {
-  private static final String AUTHORIZE_URL = "https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String AUTHORIZE_URL = "https://oauth.vk.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
   private static final String SCOPED_AUTHORIZE_URL = String.format("%s&scope=%%s", AUTHORIZE_URL);
 
   @Override

commit 78f57fb2203b9547034cde6f7d0bd5bd67a19d5c
Merge: 0ed1989 85257fd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Nov 26 15:35:23 2012 -0800

    Merge pull request #330 from sovnarkom/master
    
    Important fix to fix security alert and https sertificate exception

commit 7b4ebc3a728ef9614c2f2946d21664130c32a8df
Author: Matthias Miltz <matthias.miltz@haufe-lexware.net>
Date:   Thu Dec 13 11:59:42 2012 +0100

    added API for xing.com incl. example

diff --git a/src/main/java/org/scribe/builder/api/XingApi.java b/src/main/java/org/scribe/builder/api/XingApi.java
new file mode 100755
index 0000000..ec8823e
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/XingApi.java
@@ -0,0 +1,27 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.*;
+
+public class XingApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://api.xing.com/v1/authorize?oauth_token=%s";
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://api.xing.com/v1/access_token";
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return "https://api.xing.com/v1/request_token";
+  }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+  
+}
diff --git a/src/test/java/org/scribe/examples/XingExample.java b/src/test/java/org/scribe/examples/XingExample.java
new file mode 100755
index 0000000..93d7080
--- /dev/null
+++ b/src/test/java/org/scribe/examples/XingExample.java
@@ -0,0 +1,59 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class XingExample
+{
+  private static final String PROTECTED_RESOURCE_URL = "https://api.xing.com/v1/users/me";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(XingApi.class)
+                                .apiKey("097ccfd3ef25a1cb6d75")
+                                .apiSecret("e43364b2afd5d92f2ec28951a75bd8075f9cc221")
+                                .build();
+    Scanner in = new Scanner(System.in);
+    
+    System.out.println("=== Xing's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+
+}

commit 45cc91b50f3f13a50a15f69a261a6dfed4136f25
Merge: 78f57fb 7b4ebc3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Dec 15 18:01:45 2012 -0800

    Merge pull request #336 from matthias-m/master
    
    Added API impl. for Xing.com

commit 877bcb7fa23edf30b755b2ce43821fb1c047ce5a
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Dec 15 23:13:18 2012 -0300

    bounce version numbers for release 1.3.3

diff --git a/README.textile b/README.textile
index a20bcca..392be12 100644
--- a/README.textile
+++ b/README.textile
@@ -65,7 +65,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.3.2</version>@
+  @<version>1.3.3</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/changelog.txt b/changelog.txt
index 6175678..5423c62 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -95,3 +95,4 @@
 
 [1.3.3]
   * FEATURE: accessToken and requestToken timeouts default to 2 seconds and can be specified.
+  * FEATURE: New Apis.
diff --git a/pom.xml b/pom.xml
index dbee18c..1813aba 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.2</version>
+  <version>1.3.3</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 479bfe6a425bd4b66f018417c247d52cc91216b8
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Dec 25 16:52:15 2012 -0200

    Update README.textile
    
    Remove my address from the readme hoping people will first dig a bit
    trough the docs instead of just sending email.

diff --git a/README.textile b/README.textile
index 392be12..ab7deab 100644
--- a/README.textile
+++ b/README.textile
@@ -90,6 +90,4 @@ h1. About me
 
 "LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85
 
-Email me: fernandezpablo85 at gmail.com
-
 Follow me: "@fernandezpablo":http://twitter.com/fernandezpablo

commit 0359c853e2e248ab5b1422e436b37e3e1086fbb8
Author: Darko Zelic <zelic@tkw52.(none)>
Date:   Thu Feb 7 15:57:16 2013 +0100

    Added ViadeoApi and example

diff --git a/src/main/java/org/scribe/builder/api/ViadeoApi.java b/src/main/java/org/scribe/builder/api/ViadeoApi.java
new file mode 100644
index 0000000..0f5e77e
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/ViadeoApi.java
@@ -0,0 +1,42 @@
+package org.scribe.builder.api;
+
+import org.scribe.extractors.AccessTokenExtractor;
+import org.scribe.model.OAuthConfig;
+import org.scribe.utils.OAuthEncoder;
+import org.scribe.utils.Preconditions;
+
+import org.scribe.extractors.JsonTokenExtractor;
+
+public class ViadeoApi extends DefaultApi20
+{
+  private static final String AUTHORIZE_URL = "https://secure.viadeo.com/oauth-provider/authorize2?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String SCOPED_AUTHORIZE_URL = AUTHORIZE_URL + "&scope=%s";
+
+  @Override
+  public AccessTokenExtractor getAccessTokenExtractor()
+  {
+    return new JsonTokenExtractor();
+  }
+  
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://secure.viadeo.com/oauth-provider/access_token2?grant_type=authorization_code";
+  }
+
+  @Override
+  public String getAuthorizationUrl(OAuthConfig config)
+  {
+    Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Viadeo does not support OOB");
+
+    // Append scope if present
+    if(config.hasScope())
+    {
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));
+    }
+    else
+    {
+      return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
+    }
+  }
+}
diff --git a/src/test/java/org/scribe/examples/ViadeoExample.java b/src/test/java/org/scribe/examples/ViadeoExample.java
new file mode 100644
index 0000000..ebb4385
--- /dev/null
+++ b/src/test/java/org/scribe/examples/ViadeoExample.java
@@ -0,0 +1,64 @@
+package org.scribe.examples;
+
+import java.util.*;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class ViadeoExample
+{
+  private static final String NETWORK_NAME = "Viadeo";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.viadeo.com/me?user_detail=full";
+  private static final Token EMPTY_TOKEN = null;
+
+  public static void main(String[] args)
+  {
+    // Replace these with your own api key and secret
+    String apiKey = "your_app_id";
+    String apiSecret = "your_api_secret";
+    OAuthService service = new ServiceBuilder()
+                                  .provider(ViadeoApi.class)
+                                  .apiKey(apiKey)
+                                  .apiSecret(apiSecret)
+                                  .callback("http://www.example.com/oauth_callback/")
+                                  .build();
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== " + NETWORK_NAME + "'s OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Authorization URL
+    System.out.println("Fetching the Authorization URL...");
+    String authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);
+    System.out.println("Got the Authorization URL!");
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(authorizationUrl);
+    System.out.println("And paste the authorization code here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+    
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getCode());
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+
+  }
+}

commit 1453dfb94c1641a22f6665d516c7c1c7af4bbe75
Merge: 479bfe6 0359c85
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 7 14:35:40 2013 -0800

    Merge pull request #348 from Dachaz/master
    
    Added support (and an example) for Viadeo

commit 0cb3301b8e07a54c7ff8bdd99961de421e6a49f2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Feb 12 18:54:43 2013 -0300

    add support for LinekdIn scopes

diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index dc3e583..a39bf70 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -1,10 +1,24 @@
 package org.scribe.builder.api;
 
 import org.scribe.model.*;
+import java.util.*;
 
 public class LinkedInApi extends DefaultApi10a
 {
   private static final String AUTHORIZE_URL = "https://api.linkedin.com/uas/oauth/authenticate?oauth_token=%s";
+  private static final String REQUEST_TOKEN_URL = "https://api.linkedin.com/uas/oauth/requestToken";
+
+  private final Set<String> scopes;
+
+  public LinkedInApi()
+  {
+    scopes = Collections.EMPTY_SET;
+  }
+
+  public LinkedInApi(Set<String> scopes)
+  {
+    this.scopes = Collections.unmodifiableSet(scopes);
+  }
 
   @Override
   public String getAccessTokenEndpoint()
@@ -15,13 +29,29 @@ public class LinkedInApi extends DefaultApi10a
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://api.linkedin.com/uas/oauth/requestToken";
+    return scopes.isEmpty() ? REQUEST_TOKEN_URL : REQUEST_TOKEN_URL + "?scopes=" + scopesAsString();
   }
-  
+
+  private String scopesAsString()
+  {
+    StringBuilder builder = new StringBuilder();
+    for(String scope : scopes)
+    {
+      builder.append("+" + scope);
+    }
+    return builder.substring(1);
+  }
+
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
     return String.format(AUTHORIZE_URL, requestToken.getToken());
   }
+
+  public static LinkedInApi withScopes(String... scopes)
+  {
+    Set<String> scopeSet = new HashSet<String>(Arrays.asList(scopes));
+    return new LinkedInApi(scopeSet);
+  }
   
 }
diff --git a/src/test/java/org/scribe/examples/LinkedInExampleWithScopes.java b/src/test/java/org/scribe/examples/LinkedInExampleWithScopes.java
new file mode 100644
index 0000000..b8e8b28
--- /dev/null
+++ b/src/test/java/org/scribe/examples/LinkedInExampleWithScopes.java
@@ -0,0 +1,59 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class LinkedInExampleWithScopes
+{
+  private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
+  
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(LinkedInApi.withScopes("foo", "bar", "baz"))
+                                .apiKey("CiEgwWDkA5BFpNrc0RfGyVuSlOh4tig5kOTZ9q97qcXNrFl7zqk-Ts7DqRGaKDCV")
+                                .apiSecret("dhho4dfoCmiQXrkw4yslork5XWLFnPSuMR-8gscPVjY4jqFFHPYWJKgpFl4uLTM6")
+                                .build();
+    Scanner in = new Scanner(System.in);
+    
+    System.out.println("=== LinkedIn's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+  }
+
+}

commit 69eee25cacb270abe78ce1771694df5a68538c78
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 13 09:37:38 2013 -0300

    typo

diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index a39bf70..a3dcc3d 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -29,7 +29,7 @@ public class LinkedInApi extends DefaultApi10a
   @Override
   public String getRequestTokenEndpoint()
   {
-    return scopes.isEmpty() ? REQUEST_TOKEN_URL : REQUEST_TOKEN_URL + "?scopes=" + scopesAsString();
+    return scopes.isEmpty() ? REQUEST_TOKEN_URL : REQUEST_TOKEN_URL + "?scope=" + scopesAsString();
   }
 
   private String scopesAsString()

commit e0a13c80504cf052260b4ac6f64f9fbe53846edf
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 13 14:03:20 2013 -0300

    added findbugs + maven task to check at compile time

diff --git a/pom.xml b/pom.xml
index 1813aba..1371ab5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -49,19 +49,20 @@
       <artifactId>commons-codec</artifactId>
       <version>1.4</version>
     </dependency>
-    
+
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
       <version>4.8.1</version>
       <scope>test</scope>
     </dependency>
-    
+
   </dependencies>
   <build>
     <plugins>
       <plugin>
         <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.0</version>
         <configuration>
           <source>1.5</source>
           <target>1.5</target>
@@ -70,6 +71,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-gpg-plugin</artifactId>
+        <version>1.4</version>
         <executions>
           <execution>
             <id>sign-artifacts</id>
@@ -80,6 +82,23 @@
           </execution>
         </executions>
       </plugin>
+        <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>findbugs-maven-plugin</artifactId>
+        <version>2.5.2</version>
+        <executions>
+          <execution>
+            <id>failing-on-high</id>
+            <phase>compile</phase>
+            <goals>
+              <goal>check</goal>
+            </goals>
+            <configuration>
+              <threshold>Low</threshold>
+            </configuration>
+          </execution>
+        </executions>
+        </plugin>
     </plugins>
   </build>
 </project>  
diff --git a/src/main/java/org/scribe/builder/api/PlurkApi.java b/src/main/java/org/scribe/builder/api/PlurkApi.java
index 323ad2c..22b1ddb 100644
--- a/src/main/java/org/scribe/builder/api/PlurkApi.java
+++ b/src/main/java/org/scribe/builder/api/PlurkApi.java
@@ -26,7 +26,7 @@ public class PlurkApi extends DefaultApi10a
     return ACCESS_TOKEN_URL;
   }
 
-  public class Mobile extends PlurkApi
+  public static class Mobile extends PlurkApi
   {
     private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";
 
diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index 73c4ada..460f23b 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -26,13 +26,13 @@ public class HeaderExtractorImpl implements HeaderExtractor
     Map<String, String> parameters = request.getOauthParameters();
     StringBuffer header = new StringBuffer(parameters.size() * 20);
     header.append(PREAMBLE);
-    for (String key : parameters.keySet())
+    for (Map.Entry<String, String> entry : parameters.entrySet())
     {
       if(header.length() > PREAMBLE.length())
       { 
         header.append(PARAM_SEPARATOR);
       }
-      header.append(String.format("%s=\"%s\"", key, OAuthEncoder.encode(parameters.get(key))));
+      header.append(String.format("%s=\"%s\"", entry.getKey(), OAuthEncoder.encode(entry.getValue())));
     }
     return header.toString();
   }
diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index b19e4a8..e0cac2b 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -4,7 +4,7 @@ import java.io.*;
 import java.net.*;
 import java.nio.charset.*;
 import java.util.*;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 
 import org.scribe.exceptions.*;
 
@@ -189,7 +189,7 @@ public class Request
    */
   public void addPayload(byte[] payload)
   {
-    this.bytePayload = payload;
+    this.bytePayload = payload.clone();
   }
 
   /**
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index cadda68..34754ba 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -44,7 +44,7 @@ public class HMACSha1SignatureService implements SignatureService
     Mac mac = Mac.getInstance(HMAC_SHA1);
     mac.init(key);
     byte[] bytes = mac.doFinal(toSign.getBytes(UTF8));
-    return new String(Base64.encodeBase64(bytes)).replace(CARRIAGE_RETURN, EMPTY_STRING);
+    return new String(Base64.encodeBase64(bytes), UTF8).replace(CARRIAGE_RETURN, EMPTY_STRING);
   }
 
   /**
diff --git a/src/main/java/org/scribe/services/RSASha1SignatureService.java b/src/main/java/org/scribe/services/RSASha1SignatureService.java
index 3b996f5..1622cc0 100644
--- a/src/main/java/org/scribe/services/RSASha1SignatureService.java
+++ b/src/main/java/org/scribe/services/RSASha1SignatureService.java
@@ -11,6 +11,7 @@ public class RSASha1SignatureService implements SignatureService
 {
   private static final String METHOD = "RSA-SHA1";
   private static final String RSA_SHA1 = "SHA1withRSA";
+  private static final String UTF8 = "UTF-8";
 
   private PrivateKey privateKey;
 
@@ -28,8 +29,8 @@ public class RSASha1SignatureService implements SignatureService
     {
       Signature signature = Signature.getInstance(RSA_SHA1);
       signature.initSign(privateKey);
-      signature.update(baseString.getBytes());
-      return new String(Base64.encodeBase64(signature.sign(), false));
+      signature.update(baseString.getBytes(UTF8));
+      return new String(Base64.encodeBase64(signature.sign(), false), UTF8);
     }
     catch (Exception e)
     {
diff --git a/src/main/java/org/scribe/services/TimestampServiceImpl.java b/src/main/java/org/scribe/services/TimestampServiceImpl.java
index 4aa27e0..486e93c 100644
--- a/src/main/java/org/scribe/services/TimestampServiceImpl.java
+++ b/src/main/java/org/scribe/services/TimestampServiceImpl.java
@@ -53,6 +53,7 @@ public class TimestampServiceImpl implements TimestampService
    */
   static class Timer
   {
+    private final Random rand = new Random();
     Long getMilis()
     {
       return System.currentTimeMillis();
@@ -60,7 +61,7 @@ public class TimestampServiceImpl implements TimestampService
 
     Integer getRandomInteger()
     {
-      return new Random().nextInt();
+      return rand.nextInt();
     }
   }
 

commit 28cd1740c1874627b58fe99f126a7cfb3d729a05
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 14 10:30:29 2013 -0300

    make constructors private since these classes aren't meant for creating instances

diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index c93c31c..1719c54 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -22,6 +22,8 @@ package org.scribe.model;
  */
 public class OAuthConstants
 {
+  private OAuthConstants(){}
+
   public static final String TIMESTAMP = "oauth_timestamp";
   public static final String SIGN_METHOD = "oauth_signature_method";
   public static final String SIGNATURE = "oauth_signature";
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index 9e461b8..ee09d16 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -7,6 +7,8 @@ import java.util.Map;
  */
 public class MapUtils
 {
+  private MapUtils(){}
+
   public static <K,V> String toString(Map<K,V> map)
   {
     if (map == null) return "";
diff --git a/src/main/java/org/scribe/utils/OAuthEncoder.java b/src/main/java/org/scribe/utils/OAuthEncoder.java
index 10beabd..7fdbc84 100644
--- a/src/main/java/org/scribe/utils/OAuthEncoder.java
+++ b/src/main/java/org/scribe/utils/OAuthEncoder.java
@@ -23,6 +23,8 @@ public class OAuthEncoder
     ENCODING_RULES = Collections.unmodifiableMap(rules);
   }
 
+  private OAuthEncoder(){}
+
   public static String encode(String plain)
   {
     Preconditions.checkNotNull(plain, "Cannot encode null object");
diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index 0ac134e..d4dd1be 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -16,6 +16,8 @@ public class Preconditions
   // scheme = alpha *( alpha | digit | "+" | "-" | "." )
   private static final Pattern URL_PATTERN = Pattern.compile("^[a-zA-Z][a-zA-Z0-9+.-]*://\\S+");
 
+  private Preconditions(){}
+
   /**
    * Checks that an object is not null.
    * 
diff --git a/src/main/java/org/scribe/utils/StreamUtils.java b/src/main/java/org/scribe/utils/StreamUtils.java
index 0799b9c..30dd8bc 100644
--- a/src/main/java/org/scribe/utils/StreamUtils.java
+++ b/src/main/java/org/scribe/utils/StreamUtils.java
@@ -9,6 +9,8 @@ import java.io.*;
  */
 public class StreamUtils
 {
+  private StreamUtils(){}
+
   /**
    * Returns the stream contents as an UTF-8 encoded string
    * 

commit 045914d2c0b1a049509fd9ddcdc77efff075985a
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 14 10:41:32 2013 -0300

    minor fixes

diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index 460f23b..0209469 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -16,6 +16,7 @@ public class HeaderExtractorImpl implements HeaderExtractor
 {
   private static final String PARAM_SEPARATOR = ", ";
   private static final String PREAMBLE = "OAuth ";
+  public static final int ESTIMATED_PARAM_LENGTH = 20;
 
   /**
    * {@inheritDoc}
@@ -24,7 +25,7 @@ public class HeaderExtractorImpl implements HeaderExtractor
   {
     checkPreconditions(request);
     Map<String, String> parameters = request.getOauthParameters();
-    StringBuffer header = new StringBuffer(parameters.size() * 20);
+    StringBuilder header = new StringBuilder(parameters.size() * ESTIMATED_PARAM_LENGTH);
     header.append(PREAMBLE);
     for (Map.Entry<String, String> entry : parameters.entrySet())
     {
diff --git a/src/main/java/org/scribe/model/Parameter.java b/src/main/java/org/scribe/model/Parameter.java
index 9fe610b..f8f3b81 100644
--- a/src/main/java/org/scribe/model/Parameter.java
+++ b/src/main/java/org/scribe/model/Parameter.java
@@ -1,9 +1,6 @@
 package org.scribe.model;
 
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import org.scribe.exceptions.OAuthException;
-import org.scribe.utils.OAuthEncoder;
+import org.scribe.utils.*;
 
 /**
  * @author: Pablo Fernandez

commit b3d83739980aa214bd93ed6c1a6a7ce4a4ce4077
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 20 12:56:03 2013 -0300

    removed apache commons dependencies since there is a way to base64-encode an array of bytes in the JDK (though it's hidden)

diff --git a/pom.xml b/pom.xml
index 1371ab5..3e9e5ce 100644
--- a/pom.xml
+++ b/pom.xml
@@ -44,11 +44,6 @@
   </scm>
 
   <dependencies>
-    <dependency>
-      <groupId>commons-codec</groupId>
-      <artifactId>commons-codec</artifactId>
-      <version>1.4</version>
-    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 34754ba..7068eb5 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -3,10 +3,12 @@ package org.scribe.services;
 import javax.crypto.*;
 import javax.crypto.spec.*;
 
-import org.apache.commons.codec.binary.*;
 import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
+// implementation of base64 encoding lives here.
+import javax.xml.bind.DatatypeConverter;
+
 /**
  * HMAC-SHA1 implementation of {@SignatureService}
  * 
@@ -44,7 +46,12 @@ public class HMACSha1SignatureService implements SignatureService
     Mac mac = Mac.getInstance(HMAC_SHA1);
     mac.init(key);
     byte[] bytes = mac.doFinal(toSign.getBytes(UTF8));
-    return new String(Base64.encodeBase64(bytes), UTF8).replace(CARRIAGE_RETURN, EMPTY_STRING);
+    return bytesToBase64String(bytes).replace(CARRIAGE_RETURN, EMPTY_STRING);
+  }
+
+  private String bytesToBase64String(byte[] bytes)
+  {
+    return DatatypeConverter.printBase64Binary(bytes);
   }
 
   /**
diff --git a/src/main/java/org/scribe/services/RSASha1SignatureService.java b/src/main/java/org/scribe/services/RSASha1SignatureService.java
index 1622cc0..6f4c25d 100644
--- a/src/main/java/org/scribe/services/RSASha1SignatureService.java
+++ b/src/main/java/org/scribe/services/RSASha1SignatureService.java
@@ -1,9 +1,11 @@
 package org.scribe.services;
 
-import org.apache.commons.codec.binary.*;
 import org.scribe.exceptions.*;
 import java.security.*;
 
+// implementation of base64 encoding lives here.
+import javax.xml.bind.DatatypeConverter;
+
 /**
  * A signature service that uses the RSA-SHA1 algorithm.
  */
@@ -30,7 +32,7 @@ public class RSASha1SignatureService implements SignatureService
       Signature signature = Signature.getInstance(RSA_SHA1);
       signature.initSign(privateKey);
       signature.update(baseString.getBytes(UTF8));
-      return new String(Base64.encodeBase64(signature.sign(), false), UTF8);
+      return bytesToBase64String(signature);
     }
     catch (Exception e)
     {
@@ -38,6 +40,11 @@ public class RSASha1SignatureService implements SignatureService
     }
   }
 
+  private String bytesToBase64String(Signature signature) throws SignatureException
+  {
+    return DatatypeConverter.printBase64Binary(signature.sign());
+  }
+
   /**
    * {@inheritDoc}
    */
diff --git a/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java b/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java
index 9e375c5..2e78e84 100644
--- a/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java
+++ b/src/test/java/org/scribe/services/RSASha1SignatureServiceTest.java
@@ -3,7 +3,8 @@ package org.scribe.services;
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.apache.commons.codec.binary.*;
+
+import javax.xml.bind.DatatypeConverter;
 import java.security.*;
 import java.security.spec.*;
 
@@ -55,7 +56,7 @@ public class RSASha1SignatureServiceTest
     try
     {
       KeyFactory fac = KeyFactory.getInstance("RSA");
-      PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(str.getBytes()));
+      PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(DatatypeConverter.parseBase64Binary(str));
       return fac.generatePrivate(privKeySpec);
     }
     catch (Exception e)

commit b85ca334ccda499ca7f7f02f0555c8f4a107151d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 20 13:05:55 2013 -0300

    remove generic warning

diff --git a/src/main/java/org/scribe/builder/api/LinkedInApi.java b/src/main/java/org/scribe/builder/api/LinkedInApi.java
index a3dcc3d..ee6becd 100644
--- a/src/main/java/org/scribe/builder/api/LinkedInApi.java
+++ b/src/main/java/org/scribe/builder/api/LinkedInApi.java
@@ -12,7 +12,7 @@ public class LinkedInApi extends DefaultApi10a
 
   public LinkedInApi()
   {
-    scopes = Collections.EMPTY_SET;
+    scopes = Collections.emptySet();
   }
 
   public LinkedInApi(Set<String> scopes)

commit e7f578deafc49cfef39cc7df365291ce7517c76c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Feb 20 13:07:42 2013 -0300

    version bump for release

diff --git a/README.textile b/README.textile
index ab7deab..cd676f6 100644
--- a/README.textile
+++ b/README.textile
@@ -65,7 +65,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.3.3</version>@
+  @<version>1.3.4</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/pom.xml b/pom.xml
index 3e9e5ce..120856b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.3</version>
+  <version>1.3.4</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>
@@ -22,12 +22,6 @@
       <email>fernandezpablo85@gmail.com</email>
       <timezone>-3</timezone>
     </developer>
-    <developer>
-      <id>diegossilveira</id>
-      <name>Diego Silveira</name>
-      <email>diegossilveira@gmail.com</email>
-      <timezone>-3</timezone>
-    </developer>
   </developers>
 
   <licenses>

commit 6eb9208064630014ca2a99cfb30d89a06661ed89
Author: stevee <stevee@aweber.com>
Date:   Fri Feb 22 11:04:35 2013 -0500

    Create an AWeber example.

diff --git a/src/main/java/org/scribe/builder/api/AWeberApi.java b/src/main/java/org/scribe/builder/api/AWeberApi.java
new file mode 100644
index 0000000..53ae1fc
--- /dev/null
+++ b/src/main/java/org/scribe/builder/api/AWeberApi.java
@@ -0,0 +1,28 @@
+package org.scribe.builder.api;
+
+import org.scribe.model.Token;
+
+public class AWeberApi extends DefaultApi10a
+{
+  private static final String AUTHORIZE_URL = "https://auth.aweber.com/1.0/oauth/authorize?oauth_token=%s";
+  private static final String REQUEST_TOKEN_ENDPOINT = "https://auth.aweber.com/1.0/oauth/request_token";
+  private static final String ACCESS_TOKEN_ENDPOINT = "https://auth.aweber.com/1.0/oauth/access_token";
+ 
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return ACCESS_TOKEN_ENDPOINT;
+  }
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return REQUEST_TOKEN_ENDPOINT;
+  }
+  
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZE_URL, requestToken.getToken());
+  }
+}
diff --git a/src/test/java/org/scribe/examples/AWeberExample.java b/src/test/java/org/scribe/examples/AWeberExample.java
new file mode 100644
index 0000000..2d86d61
--- /dev/null
+++ b/src/test/java/org/scribe/examples/AWeberExample.java
@@ -0,0 +1,65 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class AWeberExample
+{
+	
+  //To get your consumer key/secret, and view API docs, see https://labs.aweber.com/docs	
+  private static final String ACCOUNT_RESOURCE_URL = "https://api.aweber.com/1.0/accounts/";
+
+  private static final String CONSUMER_KEY = "";
+  private static final String CONSUMER_SECRET = "";
+
+  public static void main(String[] args)
+  {
+    OAuthService service = new ServiceBuilder()
+                                .provider(AWeberApi.class)
+                                .apiKey(CONSUMER_KEY)
+                                .apiSecret(CONSUMER_SECRET)
+                                .build();
+ 
+    Scanner in = new Scanner(System.in);
+
+    System.out.println("=== AWeber's OAuth Workflow ===");
+    System.out.println();
+
+    // Obtain the Request Token
+    System.out.println("Fetching the Request Token...");
+    Token requestToken = service.getRequestToken();
+    System.out.println("Got the Request Token!");
+    System.out.println();
+
+    System.out.println("Now go and authorize Scribe here:");
+    System.out.println(service.getAuthorizationUrl(requestToken));
+    System.out.println("And paste the verifier here");
+    System.out.print(">>");
+    Verifier verifier = new Verifier(in.nextLine());
+    System.out.println();
+
+    // Trade the Request Token and Verfier for the Access Token
+    System.out.println("Trading the Request Token for an Access Token...");
+    Token accessToken = service.getAccessToken(requestToken, verifier);
+    System.out.println("Got the Access Token!");
+    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println();
+
+    // Now let's go and ask for a protected resource!
+    System.out.println("Now we're going to access a protected resource...");
+    OAuthRequest request = new OAuthRequest(Verb.GET, ACCOUNT_RESOURCE_URL);
+    service.signRequest(accessToken, request);
+    Response response = request.send();
+    System.out.println("Got it! Lets see what we found...");
+    System.out.println();
+    System.out.println(response.getBody());
+
+    System.out.println();
+    System.out.println("Thats it man! Go and build something awesome with AWeber and Scribe! :)");
+  }
+
+}
\ No newline at end of file

commit c9401eb62df5d98e7c0aef04719bed98cc18cf00
Merge: e7f578d 6eb9208
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Feb 22 12:53:36 2013 -0800

    Merge pull request #354 from srelsner/aweber-example
    
    AWeber api and example.

commit 86f12eb5bcc1059833c0b8b19d5eb0c2a1726eaa
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Feb 28 20:08:28 2013 -0300

    added optional commons-codec dependency
    
    there are some platforms (e.g. android) that do not have by default the java.xml.bind package. The solution is to use the commons-codec implementation if it's on the classpath and fallback to java.xml.bind

diff --git a/pom.xml b/pom.xml
index 120856b..7418220 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,14 +38,19 @@
   </scm>
 
   <dependencies>
-
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
       <version>4.8.1</version>
       <scope>test</scope>
     </dependency>
-
+    <dependency>
+      <groupId>commons-codec</groupId>
+      <artifactId>commons-codec</artifactId>
+      <version>1.4</version>
+      <scope>compile</scope>
+      <optional>true</optional>
+    </dependency>
   </dependencies>
   <build>
     <plugins>
diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index ff5b5d6..abde253 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -4,6 +4,7 @@ import java.util.*;
 
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
+import org.scribe.services.*;
 import org.scribe.utils.*;
 import java.util.concurrent.TimeUnit;
 
@@ -139,6 +140,7 @@ public class OAuth10aServiceImpl implements OAuthService
   private String getSignature(OAuthRequest request, Token token)
   {
     config.log("generating signature...");
+    config.log("using base64 encoder: " + Base64Encoder.type());
     String baseString = api.getBaseStringExtractor().extract(request);
     String signature = api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
 
diff --git a/src/main/java/org/scribe/services/Base64Encoder.java b/src/main/java/org/scribe/services/Base64Encoder.java
new file mode 100644
index 0000000..4a091c1
--- /dev/null
+++ b/src/main/java/org/scribe/services/Base64Encoder.java
@@ -0,0 +1,36 @@
+package org.scribe.services;
+
+public abstract class Base64Encoder
+{
+  private static Base64Encoder instance;
+
+  public static synchronized Base64Encoder getInstance()
+  {
+    if (instance == null)
+    {
+      instance = createEncoderInstance();
+    }
+    return instance;
+  }
+
+  private static Base64Encoder createEncoderInstance()
+  {
+    if (CommonsEncoder.isPresent())
+    {
+      return new CommonsEncoder();
+    }
+    else
+    {
+      return new DatatypeConverterEncoder();
+    }
+  }
+
+  public static String type()
+  {
+    return getInstance().getType();
+  }
+
+  public abstract String encode(byte[] bytes);
+
+  public abstract String getType();
+}
diff --git a/src/main/java/org/scribe/services/CommonsEncoder.java b/src/main/java/org/scribe/services/CommonsEncoder.java
new file mode 100644
index 0000000..4269a69
--- /dev/null
+++ b/src/main/java/org/scribe/services/CommonsEncoder.java
@@ -0,0 +1,42 @@
+package org.scribe.services;
+
+import org.apache.commons.codec.binary.*;
+import org.scribe.exceptions.*;
+
+import java.io.UnsupportedEncodingException;
+
+public class CommonsEncoder extends Base64Encoder
+{
+
+  @Override
+  public String encode(byte[] bytes)
+  {
+    try
+    {
+      return new String(Base64.encodeBase64(bytes), "UTF-8");
+    }
+    catch (UnsupportedEncodingException e)
+    {
+      throw new OAuthSignatureException("Can't perform base64 encoding", e);
+    }
+  }
+
+  @Override
+  public String getType()
+  {
+    return "CommonsCodec";
+  }
+
+  public static boolean isPresent()
+  {
+    try
+    {
+      Class.forName("org.apache.commons.codec.binary.Base64");
+      return true;
+    }
+    catch (ClassNotFoundException e)
+    {
+      return false;
+    }
+  }
+}
diff --git a/src/main/java/org/scribe/services/DatatypeConverterEncoder.java b/src/main/java/org/scribe/services/DatatypeConverterEncoder.java
new file mode 100644
index 0000000..d147eba
--- /dev/null
+++ b/src/main/java/org/scribe/services/DatatypeConverterEncoder.java
@@ -0,0 +1,18 @@
+package org.scribe.services;
+
+import javax.xml.bind.*;
+
+public class DatatypeConverterEncoder extends Base64Encoder
+{
+  @Override
+  public String encode(byte[] bytes)
+  {
+    return DatatypeConverter.printBase64Binary(bytes);
+  }
+
+  @Override
+  public String getType()
+  {
+    return "DatatypeConverter";
+  }
+}
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 7068eb5..560c2e6 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -6,9 +6,6 @@ import javax.crypto.spec.*;
 import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
-// implementation of base64 encoding lives here.
-import javax.xml.bind.DatatypeConverter;
-
 /**
  * HMAC-SHA1 implementation of {@SignatureService}
  * 
@@ -51,7 +48,7 @@ public class HMACSha1SignatureService implements SignatureService
 
   private String bytesToBase64String(byte[] bytes)
   {
-    return DatatypeConverter.printBase64Binary(bytes);
+    return Base64Encoder.getInstance().encode(bytes);
   }
 
   /**
diff --git a/src/main/java/org/scribe/services/RSASha1SignatureService.java b/src/main/java/org/scribe/services/RSASha1SignatureService.java
index 6f4c25d..c427611 100644
--- a/src/main/java/org/scribe/services/RSASha1SignatureService.java
+++ b/src/main/java/org/scribe/services/RSASha1SignatureService.java
@@ -3,9 +3,6 @@ package org.scribe.services;
 import org.scribe.exceptions.*;
 import java.security.*;
 
-// implementation of base64 encoding lives here.
-import javax.xml.bind.DatatypeConverter;
-
 /**
  * A signature service that uses the RSA-SHA1 algorithm.
  */
@@ -42,7 +39,7 @@ public class RSASha1SignatureService implements SignatureService
 
   private String bytesToBase64String(Signature signature) throws SignatureException
   {
-    return DatatypeConverter.printBase64Binary(signature.sign());
+    return Base64Encoder.getInstance().encode(signature.sign());
   }
 
   /**

commit 9b6a5ec1a82a65a563fc940f36d44d4d40c1b00d
Author: Daan de Wit <d.dewit@gmail.com>
Date:   Fri Mar 1 13:30:04 2013 +0100

    make status message available on response

diff --git a/src/main/java/org/scribe/model/Response.java b/src/main/java/org/scribe/model/Response.java
index 9835a05..d433922 100644
--- a/src/main/java/org/scribe/model/Response.java
+++ b/src/main/java/org/scribe/model/Response.java
@@ -17,6 +17,7 @@ public class Response
   private static final String EMPTY = "";
 
   private int code;
+  private String message;
   private String body;
   private InputStream stream;
   private Map<String, String> headers;
@@ -27,6 +28,7 @@ public class Response
     {
       connection.connect();
       code = connection.getResponseCode();
+      message = connection.getResponseMessage();
       headers = parseHeaders(connection);
       stream = isSuccessful() ? connection.getInputStream() : connection.getErrorStream();
     }
@@ -87,6 +89,17 @@ public class Response
   {
     return code;
   }
+  
+  /**
+   * Obtains the HTTP status message.
+   * Returns <code>null</code> if the message can not be discerned from the response (not valid HTTP)
+   * 
+   * @return the status message
+   */
+  public String getMessage() 
+  {
+    return message;
+  }
 
   /**
    * Obtains a {@link Map} containing the HTTP Response Headers

commit ad55e225a668facb367956b47d7230fd4d253413
Merge: 86f12eb 9b6a5ec
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Mar 7 09:49:29 2013 -0800

    Merge pull request #362 from NetForce1/master
    
    make status message available on response

commit a4851d8d9f6845b43d94f1ac4528ae63e3385fd8
Author: Justin Plock <jplock@gmail.com>
Date:   Wed Jun 5 08:34:35 2013 -0400

    Added setFollowRedirects() method to Request object to handle following HTTP redirects or not

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index e0cac2b..0202db0 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -32,6 +32,7 @@ public class Request
   private String charset;
   private byte[] bytePayload = null;
   private boolean connectionKeepAlive = false;
+  private boolean followRedirects = true;
   private Long connectTimeout = null;
   private Long readTimeout = null;
 
@@ -82,6 +83,7 @@ public class Request
     {
       System.setProperty("http.keepAlive", connectionKeepAlive ? "true" : "false");
       connection = (HttpURLConnection) new URL(completeUrl).openConnection();
+      connection.setInstanceFollowRedirects(followRedirects);
     }
   }
 
@@ -351,6 +353,19 @@ public class Request
     this.connectionKeepAlive = connectionKeepAlive;
   }
 
+  /**
+   * Sets whether the underlying Http Connection follows redirects or not.
+   *
+   * Defaults to true (follow redirects)
+   *
+   * @see http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setInstanceFollowRedirects(boolean)
+   * @param followRedirects
+   */
+  public void setFollowRedirects(boolean followRedirects)
+  {
+    this.followRedirects = followRedirects;
+  }
+
   /*
    * We need this in order to stub the connection object for test cases
    */

commit cf6f10e3dfa9a7aedd82c5d8bb1862f498dc9717
Merge: ad55e22 a4851d8
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Jun 5 06:47:33 2013 -0700

    Merge pull request #387 from jplock/gh380-redirects
    
    Added setFollowRedirects() method to Request object

commit 53fd69aa9e855de9f7061fbfdb039268632051e7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jun 20 17:42:48 2013 -0300

    Update README.textile

diff --git a/README.textile b/README.textile
index cd676f6..e1aea3a 100644
--- a/README.textile
+++ b/README.textile
@@ -2,6 +2,8 @@ h2. Welcome to the home of Scribe, the simple OAuth Java lib!
 
 !https://secure.travis-ci.org/fernandezpablo85/scribe-java.png?branch=master(travis-ci-status)!
 
+h2. Before submitting a pull request "please read this":https://github.com/fernandezpablo85/scribe-java/wiki/Scribe-scope-revised
+
 h1. Why use Scribe?
 
 h3. Dead Simple 

commit cafa2fd69f70bfbf81324c83528b196ca7c14998
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Jun 22 19:06:01 2013 -0300

    version bump for release

diff --git a/README.textile b/README.textile
index e1aea3a..e1726c9 100644
--- a/README.textile
+++ b/README.textile
@@ -67,7 +67,7 @@ You can pull scribe from a maven repository, just add this to your __pom.xml__ f
 @<dependency>@
   @<groupId>org.scribe</groupId>@
   @<artifactId>scribe</artifactId>@
-  @<version>1.3.4</version>@
+  @<version>1.3.5</version>@
 @</dependency>@
 
 h1. Getting started in less than 2 minutes
diff --git a/pom.xml b/pom.xml
index 7418220..a276ae1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.4</version>
+  <version>1.3.5</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit f661af08c016f710329040c677710b0a96385ed3
Author: denis <denis@Hoteia-Laptop.home>
Date:   Fri Aug 23 17:20:19 2013 +0200

    Changing the Twitter URL corresponding with the 1.1 API

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index 28d9bea..b68aee0 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -9,10 +9,11 @@ import org.scribe.oauth.*;
 
 public class TwitterExample
 {
-  private static final String PROTECTED_RESOURCE_URL = "https://api.twitter.com/1/statuses/update.json";
+  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1.1/account/verify_credentials.json";
   
   public static void main(String[] args)
   {
+    // If you choose to use a callback, "oauth_verifier" will be the return value by Twitter (request param)
     OAuthService service = new ServiceBuilder()
                                 .provider(TwitterApi.class)
                                 .apiKey("6icbcAXyZx67r8uTAUM5Qw")

commit 7fca6d5c188e2a5102da4a162167697f241ab2c0
Merge: cafa2fd f661af0
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Aug 23 09:32:54 2013 -0700

    Merge pull request #415 from dgosset/master
    
    Changing the Twitter URL corresponding with the 1.1 API

commit 0fe6578ad7200365116953a06001e3a1a659be2a
Author: Fabien Vauchelles <fabien@vauchelles.com>
Date:   Fri Nov 22 12:10:03 2013 +0100

    added TumblrExample

diff --git a/src/test/java/org/scribe/examples/TumblrExample.java b/src/test/java/org/scribe/examples/TumblrExample.java
new file mode 100644
index 0000000..d024efb
--- /dev/null
+++ b/src/test/java/org/scribe/examples/TumblrExample.java
@@ -0,0 +1,62 @@
+package org.scribe.examples;
+
+import java.util.Scanner;
+
+import org.scribe.builder.*;
+import org.scribe.builder.api.*;
+import org.scribe.model.*;
+import org.scribe.oauth.*;
+
+public class TumblrExample
+{
+    private static final String PROTECTED_RESOURCE_URL = "http://api.tumblr.com/v2/user/info";
+
+    public static void main( String[] args )
+    {
+        OAuthService service = new ServiceBuilder()
+                .provider( TumblrApi.class )
+                .apiKey( "MY_CONSUMER_KEY" )
+                .apiSecret( "MY_CONSUMER_SECRET" )
+                .callback( "http://www.tumblr.com/connect/login_success.html" ) // OOB forbidden. We need an url and the better is on the tumblr website !
+                .build();
+        Scanner in = new Scanner( System.in );
+
+        System.out.println( "=== Tumblr's OAuth Workflow ===" );
+        System.out.println();
+
+        // Obtain the Request Token
+        System.out.println( "Fetching the Request Token..." );
+        Token requestToken = service.getRequestToken();
+        System.out.println( "Got the Request Token!" );
+        System.out.println();
+
+        System.out.println( "Now go and authorize Scribe here:" );
+        System.out.println( service.getAuthorizationUrl( requestToken ) );
+        System.out.println( "And paste the verifier here" );
+        System.out.print( ">>" );
+        Verifier verifier = new Verifier( in.nextLine() );
+        System.out.println();
+
+        // Trade the Request Token and Verfier for the Access Token
+        System.out.println( "Trading the Request Token for an Access Token..." );
+        Token accessToken = service.getAccessToken( requestToken ,
+                                                    verifier );
+        System.out.println( "Got the Access Token!" );
+        System.out.println( "(if your curious it looks like this: " + accessToken + " )" );
+        System.out.println();
+
+        // Now let's go and ask for a protected resource!
+        System.out.println( "Now we're going to access a protected resource..." );
+        OAuthRequest request = new OAuthRequest( Verb.GET ,
+                                                 PROTECTED_RESOURCE_URL );
+        service.signRequest( accessToken ,
+                             request );
+        Response response = request.send();
+        System.out.println( "Got it! Lets see what we found..." );
+        System.out.println();
+        System.out.println( response.getBody() );
+
+        System.out.println();
+        System.out.println( "Thats it man! Go and build something awesome with Scribe! :)" );
+    }
+}

commit 11dc6b1f541633a6432a41d258357f7fa483778c
Merge: 7fca6d5 0fe6578
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Nov 22 06:31:15 2013 -0800

    Merge pull request #430 from fabienvauchelles/master
    
    added TumblrExample

commit 8fb4d5d4fd23d66e1840bc9da85aec1c771e2e25
Author: Angelo <angelo.1986@gmail.com>
Date:   Sat Nov 23 15:58:02 2013 -0500

    Remove port 80 and 443 from base string

diff --git a/src/main/java/org/scribe/model/Request.java b/src/main/java/org/scribe/model/Request.java
index 0202db0..e48578e 100644
--- a/src/main/java/org/scribe/model/Request.java
+++ b/src/main/java/org/scribe/model/Request.java
@@ -237,14 +237,22 @@ public class Request
   }
 
   /**
-   * Returns the URL without the port and the query string part.
+   * Returns the URL without the default port and the query string part.
    * 
    * @return the OAuth-sanitized URL
    */
   public String getSanitizedUrl()
   {
-    return url.replaceAll("\\?.*", "").replace("\\:\\d{4}", "");
-  }
+	 if(url.startsWith("http://") && (url.endsWith(":80") || url.contains(":80/"))){
+	   return url.replaceAll("\\?.*", "").replaceAll(":80", "");
+	 }
+	 else  if(url.startsWith("https://") && (url.endsWith(":443") || url.contains(":443/"))){
+	   return url.replaceAll("\\?.*", "").replaceAll(":443", "");
+	 }
+	 else{
+	   return url.replaceAll("\\?.*", "");
+	 }
+   }
 
   /**
    * Returns the body of the request

commit d1274eb001b310b2d6674e42c096a32475b6559a
Author: Angelo <angelo.1986@gmail.com>
Date:   Mon Nov 25 21:05:08 2013 -0500

    Added test cases for port 80 and 443 in basestring

diff --git a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
index edc101d..0fac082 100644
--- a/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
+++ b/src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
@@ -12,11 +12,21 @@ public class BaseStringExtractorTest
 
   private BaseStringExtractorImpl extractor;
   private OAuthRequest request;
+  private OAuthRequest requestPort80;
+  private OAuthRequest requestPort80_2;
+  private OAuthRequest requestPort8080;
+  private OAuthRequest requestPort443;
+  private OAuthRequest requestPort443_2;
 
   @Before
   public void setup()
   {
     request = ObjectMother.createSampleOAuthRequest();
+    requestPort80 = ObjectMother.createSampleOAuthRequestPort80();
+    requestPort80_2 = ObjectMother.createSampleOAuthRequestPort80_2();
+    requestPort8080 = ObjectMother.createSampleOAuthRequestPort8080();
+    requestPort443 = ObjectMother.createSampleOAuthRequestPort443();
+    requestPort443_2 = ObjectMother.createSampleOAuthRequestPort443_2();
     extractor = new BaseStringExtractorImpl();
   }
 
@@ -27,7 +37,47 @@ public class BaseStringExtractorTest
     String baseString = extractor.extract(request);
     assertEquals(expected, baseString);
   }
+  
+  @Test
+  public void shouldExcludePort80()
+  {
+    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(requestPort80);
+    assertEquals(expected, baseString);
+  }
+  
+  @Test
+  public void shouldExcludePort80_2()
+  {
+    String expected = "GET&http%3A%2F%2Fexample.com%2Ftest&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(requestPort80_2);
+    assertEquals(expected, baseString);
+  }
+  
+  @Test
+  public void shouldIncludePort8080()
+  {
+    String expected = "GET&http%3A%2F%2Fexample.com%3A8080&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(requestPort8080);
+    assertEquals(expected, baseString);
+  }
 
+  @Test
+  public void shouldExcludePort443()
+  {
+    String expected = "GET&https%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(requestPort443);
+    assertEquals(expected, baseString);
+  }
+  
+  @Test
+  public void shouldExcludePort443_2()
+  {
+    String expected = "GET&https%3A%2F%2Fexample.com%2Ftest&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String baseString = extractor.extract(requestPort443_2);
+    assertEquals(expected, baseString);
+  }
+  
   @Test(expected = IllegalArgumentException.class)
   public void shouldThrowExceptionIfRquestIsNull()
   {
diff --git a/src/test/java/org/scribe/test/helpers/ObjectMother.java b/src/test/java/org/scribe/test/helpers/ObjectMother.java
index a69a3c1..abd75cc 100644
--- a/src/test/java/org/scribe/test/helpers/ObjectMother.java
+++ b/src/test/java/org/scribe/test/helpers/ObjectMother.java
@@ -14,4 +14,54 @@ public class ObjectMother
     request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
     return request;
   }
+  
+  public static OAuthRequest createSampleOAuthRequestPort80()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com:80");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
+  
+  public static OAuthRequest createSampleOAuthRequestPort80_2()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com:80/test");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
+  
+  public static OAuthRequest createSampleOAuthRequestPort8080()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com:8080");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
+  
+  public static OAuthRequest createSampleOAuthRequestPort443()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "https://example.com:443");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
+  
+  public static OAuthRequest createSampleOAuthRequestPort443_2()
+  {
+    OAuthRequest request = new OAuthRequest(Verb.GET, "https://example.com:443/test");
+    request.addOAuthParameter(OAuthConstants.TIMESTAMP, "123456");
+    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, "AS#$^*@&");
+    request.addOAuthParameter(OAuthConstants.CALLBACK, "http://example/callback");
+    request.addOAuthParameter(OAuthConstants.SIGNATURE, "OAuth-Signature");
+    return request;
+  }
 }

commit b06efa5058fef019b493e8125dd015fe2e1e6ec5
Merge: 11dc6b1 d1274eb
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Nov 26 08:50:02 2013 -0800

    Merge pull request #431 from angelocorreia/master
    
    Remove port 80 and 443 from base string

commit 94add5a8dc5e14e06f3f10108a3e33f7825d56e6
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Dec 6 02:18:52 2013 -0200

    Update TwitterExample.java

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index b68aee0..c387cb9 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -46,7 +46,7 @@ public class TwitterExample
 
     // Now let's go and ask for a protected resource!
     System.out.println("Now we're going to access a protected resource...");
-    OAuthRequest request = new OAuthRequest(Verb.POST, PROTECTED_RESOURCE_URL);
+    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
     request.addBodyParameter("status", "this is sparta! *");
     service.signRequest(accessToken, request);
     Response response = request.send();
@@ -58,4 +58,4 @@ public class TwitterExample
     System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
   }
 
-}
\ No newline at end of file
+}

commit f000558883403da839df73b33796825a3c626c48
Author: Joe Littlejohn <joe.littlejohn@nokia.com>
Date:   Tue Dec 10 13:46:39 2013 +0000

    Add support for the Authorization parameter 'realm'

diff --git a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
index 0209469..85f4526 100644
--- a/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
@@ -35,6 +35,13 @@ public class HeaderExtractorImpl implements HeaderExtractor
       }
       header.append(String.format("%s=\"%s\"", entry.getKey(), OAuthEncoder.encode(entry.getValue())));
     }
+    
+    if (request.getRealm() != null && !request.getRealm().isEmpty())
+    {
+      header.append(PARAM_SEPARATOR);
+      header.append(String.format("%s=\"%s\"", OAuthConstants.REALM, request.getRealm()));
+    }
+        
     return header.toString();
   }
 
diff --git a/src/main/java/org/scribe/model/OAuthConstants.java b/src/main/java/org/scribe/model/OAuthConstants.java
index 1719c54..c442dee 100644
--- a/src/main/java/org/scribe/model/OAuthConstants.java
+++ b/src/main/java/org/scribe/model/OAuthConstants.java
@@ -32,6 +32,7 @@ public class OAuthConstants
   public static final String CALLBACK = "oauth_callback";
   public static final String VERSION = "oauth_version";
   public static final String NONCE = "oauth_nonce";
+  public static final String REALM = "realm";
   public static final String PARAM_PREFIX = "oauth_";
   public static final String TOKEN = "oauth_token";
   public static final String TOKEN_SECRET = "oauth_token_secret";
diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
index 4389227..d3b2e5a 100644
--- a/src/main/java/org/scribe/model/OAuthRequest.java
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -13,7 +13,8 @@ public class OAuthRequest extends Request
 {
   private static final String OAUTH_PREFIX = "oauth_";
   private Map<String, String> oauthParameters;
-
+  private String realm;
+  
   /**
    * Default constructor.
    * 
@@ -61,6 +62,16 @@ public class OAuthRequest extends Request
     return oauthParameters;
   }
 
+  public void setRealm(String realm) 
+  {
+    this.realm = realm;
+  }
+  
+  public String getRealm() 
+  {
+    return realm;
+  }
+  
   @Override
   public String toString()
   {

commit d25432be0517fa6b058a66fb1286e1a037582494
Author: Dave Brosius <dbrosius@mebigfatguy.com>
Date:   Wed Dec 25 15:00:10 2013 -0500

    no need to use .toLowerCase() and .equalsIgnoreCase() on the same string

diff --git a/src/main/java/org/scribe/utils/Preconditions.java b/src/main/java/org/scribe/utils/Preconditions.java
index d4dd1be..f6e5b15 100644
--- a/src/main/java/org/scribe/utils/Preconditions.java
+++ b/src/main/java/org/scribe/utils/Preconditions.java
@@ -65,7 +65,7 @@ public class Preconditions
   public static void checkValidOAuthCallback(String url, String errorMsg)
   {
     checkEmptyString(url, errorMsg);
-    if(url.toLowerCase().compareToIgnoreCase(OAuthConstants.OUT_OF_BAND) != 0)
+    if(url.compareToIgnoreCase(OAuthConstants.OUT_OF_BAND) != 0)
     {
       check(isUrl(url), errorMsg);  
     }

commit f8021ebc222288b4c23c09569c37910f7f9aa611
Merge: 94add5a d25432b
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Dec 26 04:58:29 2013 -0800

    Merge pull request #440 from mebigfatguy/master
    
    no need to use .toLowerCase() and .compareToIgnoreCase() on the same string

commit b1878c44375761e77ca3720f35480f8188dc988d
Author: Chris Arriola <arriolac279@gmail.com>
Date:   Tue Jan 7 13:49:43 2014 -0800

    Updated README for Android include instructions.
    
    Missing colon.

diff --git a/README.textile b/README.textile
index e1726c9..6a52b52 100644
--- a/README.textile
+++ b/README.textile
@@ -52,7 +52,11 @@ Scribe's code is small (about 1k LOC) and simple to understand. No smart-ass or
 
 h3. Android-Ready
 
-Works out of the box with android(TM) applications.
+Works out of the box with android(TM) applications. Just include the following in your _build.gradle_ file:
+
+@dependencies {@
+  @compile 'org.scribe:scribe:1.3.5'@
+@}@
 
 h3. Stable & bulletproof
 

commit 77add59a4a661fa8e9c787c07b4e1ed76b6b3270
Merge: f8021eb b1878c4
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Jan 7 14:23:20 2014 -0800

    Merge pull request #442 from arriolac/master
    
    Updated README to include Android build.gradle instructions.

commit 71022007663ce4480c1e7ec79d762330d4e4207c
Author: Abby M <warmicing@gmail.com>
Date:   Thu Jan 9 19:24:13 2014 +0000

    Added request logging to OAuth10aServiceImpl getAccessToken

diff --git a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
index abde253..2b207f5 100644
--- a/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
+++ b/src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
@@ -100,8 +100,14 @@ public class OAuth10aServiceImpl implements OAuthService
     config.log("setting token to: " + requestToken + " and verifier to: " + verifier);
     addOAuthParams(request, requestToken);
     appendSignature(request);
+    
+    config.log("sending request...");
     Response response = request.send(tuner);
-    return api.getAccessTokenExtractor().extract(response.getBody());
+    String body = response.getBody();
+    
+    config.log("response status code: " + response.getCode());
+    config.log("response body: " + body);
+    return api.getAccessTokenExtractor().extract(body);
   }
 
   /**

commit c775d45608da117c5bd3732cb331fc38fccf484f
Merge: 77add59 7102200
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jan 9 16:31:28 2014 -0800

    Merge pull request #447 from amillward/master
    
    Added request logging to OAuth10aServiceImpl getAccessToken

commit 65ae79d2702ccb192161db8fc6d1edaa5df07be8
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Jan 14 21:27:55 2014 -0200

    remove patch verb, not supported by HttpUrlConnection

diff --git a/src/main/java/org/scribe/model/Verb.java b/src/main/java/org/scribe/model/Verb.java
index 0c22f66..ec05731 100644
--- a/src/main/java/org/scribe/model/Verb.java
+++ b/src/main/java/org/scribe/model/Verb.java
@@ -7,5 +7,5 @@ package org.scribe.model;
  */
 public enum Verb
 {
-  GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH
+  GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE
 }

commit 371136152befbbd1904b6310644a9f6150f8bffc
Merge: 65ae79d f000558
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jan 16 05:47:00 2014 -0800

    Merge pull request #437 from joelittlejohn/realm
    
    Add support for the Authorization parameter 'realm'

commit f46114f0fc0e1d1aa137f62b8493ed68afb56383
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 19 16:47:56 2014 -0300

    deploy to github instead of central

diff --git a/pom.xml b/pom.xml
index a276ae1..6a3e384 100644
--- a/pom.xml
+++ b/pom.xml
@@ -15,6 +15,10 @@
     <version>5</version>
   </parent>
 
+  <properties>
+    <github.global.server>github</github.global.server>
+  </properties>
+
   <developers>
     <developer>
       <id>fernandezpablo85</id>
@@ -37,6 +41,14 @@
     <url>http://github.com/fernandezpablo85/scribe-java.git</url>
   </scm>
 
+  <distributionManagement>
+    <repository>
+      <id>internal.repo</id>
+      <name>Temporary Staging Repository</name>
+      <url>file://${project.build.directory}/mvn-repo</url>
+    </repository>
+  </distributionManagement>
+
   <dependencies>
     <dependency>
       <groupId>junit</groupId>
@@ -63,19 +75,27 @@
         </configuration>
       </plugin>
       <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-gpg-plugin</artifactId>
-        <version>1.4</version>
+        <groupId>com.github.github</groupId>
+        <artifactId>site-maven-plugin</artifactId>
+        <version>0.9</version>
+        <configuration>
+          <message>Maven artifacts for ${project.version}</message>
+          <noJekyll>true</noJekyll>
+          <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
+          <branch>refs/heads/mvn-repo</branch>
+          <includes><include>**/*</include></includes>
+          <repositoryName>scribe-java</repositoryName>
+          <repositoryOwner>fernandezpablo85</repositoryOwner>
+        </configuration>
         <executions>
           <execution>
-            <id>sign-artifacts</id>
-            <phase>verify</phase>
             <goals>
-              <goal>sign</goal>
+              <goal>site</goal>
             </goals>
+            <phase>deploy</phase>
           </execution>
         </executions>
-      </plugin>
+        </plugin>
         <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>findbugs-maven-plugin</artifactId>
@@ -95,4 +115,4 @@
         </plugin>
     </plugins>
   </build>
-</project>  
+</project>

commit e675441b943731a60ce4c0f2da2251631ff25f3c
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 19 17:06:19 2014 -0300

    update readme to markdown, add information for the new maven repo

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..77991c6
--- /dev/null
+++ b/README.md
@@ -0,0 +1,109 @@
+# Welcome to the home of Scribe, the simple OAuth Java lib!
+
+![travis ci](https://secure.travis-ci.org/fernandezpablo85/scribe-java.png?branch=master)
+
+### Before submitting a pull request [please read this](https://github.com/fernandezpablo85/scribe-java/wiki/Scribe-scope-revised)
+
+# Why use Scribe?
+
+### Dead Simple
+
+Who said OAuth was difficult? Configuring scribe is __so easy your grandma can do it__! check it out:
+
+```java
+OAuthService service = new ServiceBuilder()
+                                  .provider(LinkedInApi.class)
+                                  .apiKey(YOUR_API_KEY)
+                                  .apiSecret(YOUR_API_SECRET)
+                                  .build();
+```
+
+That **single line** (added newlines for readability) is the only thing you need to configure scribe with LinkedIn's OAuth API for example.
+
+### Threadsafe
+
+Hit Scribe as hard and with many threads as you like.
+
+### Supports all major 1.0a and 2.0 OAuth APIs out-of-the-box
+
+* Google
+
+* Facebook
+
+* Yahoo
+
+* LinkedIn
+
+* Twitter
+
+* Foursquare
+
+* Evernote
+
+* Vimeo
+
+* Yammer
+
+* Windows Live
+
+* and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
+
+### Small and modular
+
+Scribe's code is small (about 1k LOC) and simple to understand. No smart-ass or "clever" hacks here.
+
+### Android-Ready
+
+Works out of the box with android(TM) applications.
+
+### Stable & bulletproof
+
+Good test coverage to keep you safe from harm.
+
+When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
+
+### Pull it from Maven!
+
+You can pull scribe from my maven repository, just add these to your __pom.xml__ file:
+
+```xml
+
+<!-- repository -->
+<repositories>
+  <repository>
+    <id>scribe-java-mvn-repo</id>
+    <url>https://raw.github.com/fernandezpablo85/scribe-java/mvn-repo/</url>
+    <snapshots>
+      <enabled>true</enabled>
+      <updatePolicy>always</updatePolicy>
+    </snapshots>
+  </repository>
+</repositories>
+
+<!-- dependency -->
+<dependency>
+  <groupId>org.scribe</groupId>
+  <artifactId>scribe</artifactId>
+  <version>1.3.5</version>
+</dependency>
+```
+
+## Getting started in less than 2 minutes
+
+Check the [Getting Started](http://wiki.github.com/fernandezpablo85/scribe-java/getting-started) page and start rocking! Please Read the [FAQ](http://wiki.github.com/fernandezpablo85/scribe-java/faq) before creating an issue :)
+
+## Questions?
+
+Feel free to drop me an email, but there's already a [StackOverflow](http://stackoverflow.com) tag for [scribe](http://stackoverflow.com/questions/tagged/scribe) you should use. I'm subscribed to it so I'll pick the question immediately.
+
+## Forks
+
+Looking for a scribe variation? check the [Fork List](https://github.com/fernandezpablo85/scribe-java/wiki/Forks)
+
+If you have a useful fork that should be listed there please contact me (see About me).
+
+## About me
+
+[LinkedIn profile](http://www.linkedin.com/in/fernandezpablo85)
+
+Follow me: [@fernandezpablo](http://twitter.com/fernandezpablo)
diff --git a/README.textile b/README.textile
deleted file mode 100644
index 6a52b52..0000000
--- a/README.textile
+++ /dev/null
@@ -1,99 +0,0 @@
-h2. Welcome to the home of Scribe, the simple OAuth Java lib!
-
-!https://secure.travis-ci.org/fernandezpablo85/scribe-java.png?branch=master(travis-ci-status)!
-
-h2. Before submitting a pull request "please read this":https://github.com/fernandezpablo85/scribe-java/wiki/Scribe-scope-revised
-
-h1. Why use Scribe?
-
-h3. Dead Simple 
-
-Who said OAuth was difficult? Configuring scribe is __so easy your grandma can do it__! check it out:
-
-@OAuthService service = new ServiceBuilder()@
-                                  @.provider(LinkedInApi.class)@
-                                  @.apiKey(YOUR_API_KEY)@
-                                  @.apiSecret(YOUR_API_SECRET)@
-                                  @.build();@
-                                  
-That **single line** (added newlines for readability) is the only thing you need to configure scribe with LinkedIn's OAuth API for example.
-
-h3. Threadsafe
-
-Hit Scribe as hard and with many threads as you like.
-
-h3. Supports all major 1.0a and 2.0 OAuth APIs out-of-the-box
-
-* Google
-
-* Facebook
-
-* Yahoo
-
-* LinkedIn
-
-* Twitter
-
-* Foursquare
-
-* Evernote
-
-* Vimeo
-
-* Yammer
-
-* Windows Live
-
-* and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
-
-h3. Small and modular
-
-Scribe's code is small (about 1k LOC) and simple to understand. No smart-ass or "clever" hacks here.
-
-h3. Android-Ready
-
-Works out of the box with android(TM) applications. Just include the following in your _build.gradle_ file:
-
-@dependencies {@
-  @compile 'org.scribe:scribe:1.3.5'@
-@}@
-
-h3. Stable & bulletproof
-
-Good test coverage to keep you safe from harm. 
-
-When something bad actually happens, Scribe's meaningful error messages will tell you exactly what went wrong, when and where.
-
-h3. Pull it from Maven! (new)
-
-You can pull scribe from a maven repository, just add this to your __pom.xml__ file:
-
-@<dependency>@
-  @<groupId>org.scribe</groupId>@
-  @<artifactId>scribe</artifactId>@
-  @<version>1.3.5</version>@
-@</dependency>@
-
-h1. Getting started in less than 2 minutes
-
-Check the "Getting Started":http://wiki.github.com/fernandezpablo85/scribe-java/getting-started page and start rocking!
-
-h1. Please Read the "FAQ":http://wiki.github.com/fernandezpablo85/scribe-java/faq before creating an issue :)
-
-h1. Questions?
-
-Feel free to drop me an email, but there's already a "StackOverflow":http://stackoverflow.com tag for "scribe":http://stackoverflow.com/questions/tagged/scribe you should use. I'm subscribed to it so I'll pick the question immediately.
-
-Note that it really helps to run scribe on "debug mode":https://github.com/fernandezpablo85/scribe-java/wiki/debug-mode (since 1.3.0), to get additional info. To do this simply call the @.debug()@ method on the @ServiceBuilder@.
-
-h1. Forks
-
-Looking for a scribe variation? check the "Fork List":https://github.com/fernandezpablo85/scribe-java/wiki/Forks
-
-If you have a useful fork that should be listed there please contact me (see About me).
-
-h1. About me
-
-"LinkedIn profile":http://www.linkedin.com/in/fernandezpablo85
-
-Follow me: "@fernandezpablo":http://twitter.com/fernandezpablo

commit 929d36f136f758bf7f016572881169510683bad3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun Jan 19 19:58:44 2014 -0200

    missing link

diff --git a/README.md b/README.md
index 77991c6..81d2b2f 100644
--- a/README.md
+++ b/README.md
@@ -46,7 +46,7 @@ Hit Scribe as hard and with many threads as you like.
 
 * Windows Live
 
-* and many more! check the "examples folder":http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples
+* and many more! check the [examples folder](http://github.com/fernandezpablo85/scribe-java/tree/master/src/test/java/org/scribe/examples)
 
 ### Small and modular
 

commit 33a89bd002ae88422ef00583ff7fbb7f9deb9790
Author: robindrost <robindrost@gmail.com>
Date:   Mon Jan 27 17:27:40 2014 +0100

    Update TwitterApi.java
    
    - Changed the request and access token endpoints to https.
    
    - Removed the inner SSL class since Twitter now forces to use https instead of http.
    
    - Removed the extend SSL from the Authenticate class since it no longer exists anymore.

diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index a83c28e..1c8a8f1 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -11,13 +11,13 @@ public class TwitterApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://" + ACCESS_TOKEN_RESOURCE;
+    return "https://" + ACCESS_TOKEN_RESOURCE;
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://" + REQUEST_TOKEN_RESOURCE;
+    return "https://" + REQUEST_TOKEN_RESOURCE;
   }
 
   @Override
@@ -26,27 +26,10 @@ public class TwitterApi extends DefaultApi10a
     return String.format(AUTHORIZE_URL, requestToken.getToken());
   }
 
-  public static class SSL extends TwitterApi
-  {
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-      return "https://" + ACCESS_TOKEN_RESOURCE;
-    }
-
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-      return "https://" + REQUEST_TOKEN_RESOURCE;
-    }
-  }
-
   /**
    * Twitter 'friendlier' authorization endpoint for OAuth.
-   *
-   * Uses SSL.
    */
-  public static class Authenticate extends SSL
+  public static class Authenticate
   {
     private static final String AUTHENTICATE_URL = "https://api.twitter.com/oauth/authenticate?oauth_token=%s";
 
@@ -56,11 +39,4 @@ public class TwitterApi extends DefaultApi10a
       return String.format(AUTHENTICATE_URL, requestToken.getToken());
     }
   }
-
-  /**
-   * Just an alias to the default (SSL) authorization endpoint.
-   *
-   * Need to include this for symmetry with 'Authenticate' only.
-   */
-  public static class Authorize extends SSL{}
 }

commit 7afdb1f8a0636e6c6db9d7f6c6ee44728417908d
Author: robindrost <robindrost@gmail.com>
Date:   Mon Jan 27 17:57:30 2014 +0100

    Update TwitterApi.java
    
    - Authenticate now extends the TwitterApi class so the @Override annotation is used correctly.

diff --git a/src/main/java/org/scribe/builder/api/TwitterApi.java b/src/main/java/org/scribe/builder/api/TwitterApi.java
index 1c8a8f1..86494c5 100644
--- a/src/main/java/org/scribe/builder/api/TwitterApi.java
+++ b/src/main/java/org/scribe/builder/api/TwitterApi.java
@@ -29,7 +29,7 @@ public class TwitterApi extends DefaultApi10a
   /**
    * Twitter 'friendlier' authorization endpoint for OAuth.
    */
-  public static class Authenticate
+  public static class Authenticate extends TwitterApi
   {
     private static final String AUTHENTICATE_URL = "https://api.twitter.com/oauth/authenticate?oauth_token=%s";
 

commit 7947eb0efff774ef6251f39cd0319c67d5bc0597
Author: Doug Roper <roperdj@gmail.com>
Date:   Mon Jan 27 16:40:00 2014 -0500

    Fix spelling in OAuthException message.

diff --git a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
index 801cd62..b51091f 100644
--- a/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
+++ b/src/main/java/org/scribe/extractors/JsonTokenExtractor.java
@@ -20,7 +20,7 @@ public class JsonTokenExtractor implements AccessTokenExtractor
     }
     else
     {
-      throw new OAuthException("Cannot extract an acces token. Response was: " + response);
+      throw new OAuthException("Cannot extract an access token. Response was: " + response);
     }
   }
 

commit 3ac699766a19ebc17d08990a46d7833af407f678
Merge: 929d36f 7947eb0
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jan 27 14:14:03 2014 -0800

    Merge pull request #456 from htmldoug/master-spelling-fix
    
    Fix spelling in OAuthException message.

commit f70c628ac840245b97ebeae1280560b4f14b0d51
Merge: 3ac6997 7afdb1f
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Jan 27 14:14:47 2014 -0800

    Merge pull request #455 from robindrost/patch-2
    
    Update TwitterApi.java

commit 1f8b7375aa6e4e819aaa5c90393f14e25f48e185
Author: richarth <richarth@gmail.com>
Date:   Tue Jan 28 16:00:06 2014 +0000

    Update TwitterExample.java
    
    Changed the protected resource URL to a secure URL now that Twitter always require HTTPS

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index c387cb9..4f3435b 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -9,7 +9,7 @@ import org.scribe.oauth.*;
 
 public class TwitterExample
 {
-  private static final String PROTECTED_RESOURCE_URL = "http://api.twitter.com/1.1/account/verify_credentials.json";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.twitter.com/1.1/account/verify_credentials.json";
   
   public static void main(String[] args)
   {

commit 26792c063045e9557e79c9e84c3709f5ada22395
Merge: f70c628 1f8b737
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue Jan 28 08:17:52 2014 -0800

    Merge pull request #457 from appassembla/master
    
    Update TwitterExample.java

commit 76d6810e85fd62f8561c1b95c85edfad2c241afe
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Mar 17 15:57:56 2014 -0300

    bump for version release

diff --git a/README.md b/README.md
index 81d2b2f..fddf1da 100644
--- a/README.md
+++ b/README.md
@@ -84,7 +84,7 @@ You can pull scribe from my maven repository, just add these to your __pom.xml__
 <dependency>
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
-  <version>1.3.5</version>
+  <version>1.3.6</version>
 </dependency>
 ```
 
diff --git a/pom.xml b/pom.xml
index 6a3e384..9cd54e3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.5</version>
+  <version>1.3.6</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>

commit 271b1d66c1ee21695968cbed90be200135def808
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Wed Mar 19 20:25:39 2014 -0300

    typo on string

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index 4f3435b..7573ed6 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -55,7 +55,7 @@ public class TwitterExample
     System.out.println(response.getBody());
 
     System.out.println();
-    System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
+    System.out.println("That's it man! Go and build something awesome with Scribe! :)");
   }
 
 }

commit 9bcb7a478c73832725e35fe8d5f354dbae9381e0
Author: Norbert Potocki <norbert.potocki@gmail.com>
Date:   Fri Apr 4 00:30:20 2014 -0700

    various documentation/spelling fixes

diff --git a/src/main/java/org/scribe/exceptions/OAuthConnectionException.java b/src/main/java/org/scribe/exceptions/OAuthConnectionException.java
index 918de81..8b17167 100644
--- a/src/main/java/org/scribe/exceptions/OAuthConnectionException.java
+++ b/src/main/java/org/scribe/exceptions/OAuthConnectionException.java
@@ -1,7 +1,7 @@
 package org.scribe.exceptions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthConnectionException extends OAuthException
 {
diff --git a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
index ca21a0d..5e28ce2 100644
--- a/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
@@ -38,7 +38,7 @@ public class BaseStringExtractorImpl implements BaseStringExtractor
 
   private void checkPreconditions(OAuthRequest request)
   {
-    Preconditions.checkNotNull(request, "Cannot extract base string from null object");
+    Preconditions.checkNotNull(request, "Cannot extract base string from a null object");
 
     if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0)
     {
diff --git a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
index 1eb22ad..daa58b9 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
@@ -7,8 +7,7 @@ import org.scribe.model.*;
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@AccessTokenExtractor}. Conforms to OAuth 2.0
- *
+ * Default implementation of {@link AccessTokenExtractor}. Conforms to OAuth 2.0
  */
 public class TokenExtractor20Impl implements AccessTokenExtractor
 {
diff --git a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
index ba1784b..165a0e6 100644
--- a/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
+++ b/src/main/java/org/scribe/extractors/TokenExtractorImpl.java
@@ -7,7 +7,7 @@ import org.scribe.model.*;
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@RequestTokenExtractor} and {@AccessTokenExtractor}. Conforms to OAuth 1.0a
+ * Default implementation of {@link RequestTokenExtractor} and {@link AccessTokenExtractor}. Conforms to OAuth 1.0a
  *
  * The process for extracting access and request tokens is similar so this class can do both things.
  * 
diff --git a/src/main/java/org/scribe/model/OAuthConfig.java b/src/main/java/org/scribe/model/OAuthConfig.java
index 374c958..51811d7 100644
--- a/src/main/java/org/scribe/model/OAuthConfig.java
+++ b/src/main/java/org/scribe/model/OAuthConfig.java
@@ -72,7 +72,7 @@ public class OAuthConfig
       }
       catch (Exception e)
       {
-        throw new RuntimeException("there were problems while writting to the debug stream", e);
+        throw new RuntimeException("there were problems while writing to the debug stream", e);
       }
     }
   }
diff --git a/src/main/java/org/scribe/model/Parameter.java b/src/main/java/org/scribe/model/Parameter.java
index f8f3b81..f22e300 100644
--- a/src/main/java/org/scribe/model/Parameter.java
+++ b/src/main/java/org/scribe/model/Parameter.java
@@ -3,7 +3,7 @@ package org.scribe.model;
 import org.scribe.utils.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class Parameter implements Comparable<Parameter>
 {
diff --git a/src/main/java/org/scribe/model/ParameterList.java b/src/main/java/org/scribe/model/ParameterList.java
index b365cba..747b399 100644
--- a/src/main/java/org/scribe/model/ParameterList.java
+++ b/src/main/java/org/scribe/model/ParameterList.java
@@ -8,7 +8,7 @@ import org.scribe.utils.OAuthEncoder;
 import org.scribe.utils.Preconditions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class ParameterList
 {
diff --git a/src/main/java/org/scribe/services/HMACSha1SignatureService.java b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
index 560c2e6..dcb8289 100644
--- a/src/main/java/org/scribe/services/HMACSha1SignatureService.java
+++ b/src/main/java/org/scribe/services/HMACSha1SignatureService.java
@@ -7,7 +7,7 @@ import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
 /**
- * HMAC-SHA1 implementation of {@SignatureService}
+ * HMAC-SHA1 implementation of {@link SignatureService}
  * 
  * @author Pablo Fernandez
  *
diff --git a/src/main/java/org/scribe/services/PlaintextSignatureService.java b/src/main/java/org/scribe/services/PlaintextSignatureService.java
index 03306e8..e8c3520 100644
--- a/src/main/java/org/scribe/services/PlaintextSignatureService.java
+++ b/src/main/java/org/scribe/services/PlaintextSignatureService.java
@@ -4,7 +4,7 @@ import org.scribe.exceptions.*;
 import org.scribe.utils.*;
 
 /**
- * plaintext implementation of {@SignatureService}
+ * plaintext implementation of {@link SignatureService}
  *
  * @author Pablo Fernandez
  *
diff --git a/src/main/java/org/scribe/services/SignatureService.java b/src/main/java/org/scribe/services/SignatureService.java
index 229c2f6..6843d1c 100644
--- a/src/main/java/org/scribe/services/SignatureService.java
+++ b/src/main/java/org/scribe/services/SignatureService.java
@@ -22,7 +22,7 @@ public interface SignatureService
   /**
    * Returns the signature method/algorithm
    * 
-   * @return
+   * @return signature method/algorithm
    */
   public String getSignatureMethod();
 }
diff --git a/src/main/java/org/scribe/utils/MapUtils.java b/src/main/java/org/scribe/utils/MapUtils.java
index ee09d16..4ece958 100644
--- a/src/main/java/org/scribe/utils/MapUtils.java
+++ b/src/main/java/org/scribe/utils/MapUtils.java
@@ -3,7 +3,7 @@ package org.scribe.utils;
 import java.util.Map;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class MapUtils
 {
diff --git a/src/main/java/org/scribe/utils/OAuthEncoder.java b/src/main/java/org/scribe/utils/OAuthEncoder.java
index 7fdbc84..523f311 100644
--- a/src/main/java/org/scribe/utils/OAuthEncoder.java
+++ b/src/main/java/org/scribe/utils/OAuthEncoder.java
@@ -7,7 +7,7 @@ import java.util.regex.*;
 import org.scribe.exceptions.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthEncoder
 {

commit 32c37cde6903f632d592bca0e279cf59e5f8fa6f
Author: Norbert Potocki <norbert.potocki@gmail.com>
Date:   Fri Apr 4 00:51:53 2014 -0700

    add Chinese Evernote (Yinxiang) endpoint

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index 007f48b..4042595 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -2,48 +2,77 @@ package org.scribe.builder.api;
 
 import org.scribe.model.Token;
 
+/**
+ * OAuth API for Evernote
+ *
+ * @author Pablo Fernandez
+ * @author Norbert Potocki
+ */
 public class EvernoteApi extends DefaultApi10a
 {
   private static final String AUTHORIZATION_URL = "https://www.evernote.com/OAuth.action?oauth_token=%s";
 
   @Override
-	public String getRequestTokenEndpoint()
+  public String getRequestTokenEndpoint()
   {
     return "https://www.evernote.com/oauth";
   }
 
-	@Override
-	public String getAccessTokenEndpoint()
-	{
-	  return "https://www.evernote.com/oauth";
-	}
-	
-	@Override
-	public String getAuthorizationUrl(Token requestToken)
-	{
-	  return String.format(AUTHORIZATION_URL, requestToken.getToken());
-	}
-
-	public static class Sandbox extends EvernoteApi
-	{
-	  private static final String SANDBOX_URL = "https://sandbox.evernote.com";
-
-	  @Override
-	  public String getRequestTokenEndpoint()
-	  {
-	    return SANDBOX_URL + "/oauth";
-	  }
-
-	  @Override
-	  public String getAccessTokenEndpoint()
-	  {
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return "https://www.evernote.com/oauth";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+  }
+
+  public static class Sandbox extends EvernoteApi
+  {
+    private static final String SANDBOX_URL = "https://sandbox.evernote.com";
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
       return SANDBOX_URL + "/oauth";
-	  }
-
-	  @Override
-	  public String getAuthorizationUrl(Token requestToken)
-	  {
-	    return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
-	  }
-	}	
+    }
+
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+      return SANDBOX_URL + "/oauth";
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+    }
+  }
+
+  public static class Yinxiang extends EvernoteApi
+  {
+    private static final String SANDBOX_URL = "https://app.yinxiang.com";
+
+    @Override
+    public String getRequestTokenEndpoint()
+    {
+      return SANDBOX_URL + "/oauth";
+    }
+
+    @Override
+    public String getAccessTokenEndpoint()
+    {
+      return SANDBOX_URL + "/oauth";
+    }
+
+    @Override
+    public String getAuthorizationUrl(Token requestToken)
+    {
+      return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+    }
+  }
 }

commit bb6435dda17cad428ca03518c111f8b79550e72c
Author: Norbert Potocki <norbert.potocki@gmail.com>
Date:   Fri Apr 4 01:03:48 2014 -0700

    refactor EvernoteApi getting rid of duplicate code

diff --git a/src/main/java/org/scribe/builder/api/EvernoteApi.java b/src/main/java/org/scribe/builder/api/EvernoteApi.java
index 4042595..05ee502 100644
--- a/src/main/java/org/scribe/builder/api/EvernoteApi.java
+++ b/src/main/java/org/scribe/builder/api/EvernoteApi.java
@@ -5,74 +5,51 @@ import org.scribe.model.Token;
 /**
  * OAuth API for Evernote
  *
- * @author Pablo Fernandez
  * @author Norbert Potocki
  */
 public class EvernoteApi extends DefaultApi10a
 {
-  private static final String AUTHORIZATION_URL = "https://www.evernote.com/OAuth.action?oauth_token=%s";
+  protected String serviceUrl() {
+    return "https://www.evernote.com";
+  }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://www.evernote.com/oauth";
+    return serviceUrl() + "/oauth";
   }
 
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "https://www.evernote.com/oauth";
+    return serviceUrl() + "/oauth";
   }
 
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return String.format(AUTHORIZATION_URL, requestToken.getToken());
+    return String.format(serviceUrl() + "/OAuth.action?oauth_token=%s", requestToken.getToken());
   }
 
+  /**
+   * Sandbox endpoint
+   */
   public static class Sandbox extends EvernoteApi
   {
-    private static final String SANDBOX_URL = "https://sandbox.evernote.com";
-
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-      return SANDBOX_URL + "/oauth";
-    }
-
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-      return SANDBOX_URL + "/oauth";
-    }
-
     @Override
-    public String getAuthorizationUrl(Token requestToken)
-    {
-      return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+    protected String serviceUrl() {
+      return "https://sandbox.evernote.com";
     }
   }
 
+  /**
+   * Yinxiang Biji endpoint
+   */
   public static class Yinxiang extends EvernoteApi
   {
-    private static final String SANDBOX_URL = "https://app.yinxiang.com";
-
-    @Override
-    public String getRequestTokenEndpoint()
-    {
-      return SANDBOX_URL + "/oauth";
-    }
-
-    @Override
-    public String getAccessTokenEndpoint()
-    {
-      return SANDBOX_URL + "/oauth";
-    }
-
     @Override
-    public String getAuthorizationUrl(Token requestToken)
-    {
-      return String.format(SANDBOX_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+    protected String serviceUrl() {
+      return "https://app.yinxiang.com";
     }
   }
 }

commit 5b7f44e772fc77d1e1d22cdd79c2f366e9cfb1bf
Merge: 271b1d6 9bcb7a4
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Apr 4 11:39:33 2014 -0300

    Merge pull request #476 from norbertpotocki/documentation-fixes
    
    various documentation/spelling fixes

commit 304cb6a0c16b4c24e422b0bba2a053af60d9dadc
Merge: 5b7f44e bb6435d
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Apr 4 11:40:10 2014 -0300

    Merge pull request #477 from norbertpotocki/evernote-extended-api
    
    Add support for Chinese Evernote endpoint and refactor EvernoteApi

commit 135ad50a4e4e27e97f09e42ae50d6011c7af7a4b
Merge: 304cb6a eac0ffd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat Apr 12 19:04:18 2014 -0300

    Merge pull request #309 from adrianServy/master
    
    Live OAuth endpoints have changed

commit ed359d36f2d49c412c929ce1fbca824f26c07b34
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Tue May 20 12:44:13 2014 -0300

    bump version for release, add javadocs and source artifacts.

diff --git a/pom.xml b/pom.xml
index 9cd54e3..db0afd1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.scribe</groupId>
   <artifactId>scribe</artifactId>
   <packaging>jar</packaging>
-  <version>1.3.6</version>
+  <version>1.3.7</version>
   <name>Scribe OAuth Library</name>
   <description>The best OAuth library out there</description>
   <url>http://github.com/fernandezpablo85/scribe-java</url>
@@ -75,6 +75,30 @@
         </configuration>
       </plugin>
       <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>attach-sources</id>
+            <goals>
+              <goal>jar</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-javadoc-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>attach-javadocs</id>
+            <goals>
+              <goal>jar</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
         <groupId>com.github.github</groupId>
         <artifactId>site-maven-plugin</artifactId>
         <version>0.9</version>

commit 3e974d7375c0697eb464fdb1c0149b5f41495bc8
Author: lethalbrains <rahul@lethalbrains.com>
Date:   Sat May 24 12:53:21 2014 +0530

    Fixed grammar.

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index 7573ed6..9a810d7 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -41,7 +41,7 @@ public class TwitterExample
     System.out.println("Trading the Request Token for an Access Token...");
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println("(if you're curious, it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!

commit f5edc0718da0abb83b26c8cf6797090e64fc8114
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sat May 24 16:24:53 2014 -0300

    travis ignore mvn-repo

diff --git a/.travis.yml b/.travis.yml
index c966b9e..6ecb86a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,3 +3,7 @@ language: java
 
 # need to override travis 'install' since it will try gpg sign and fail.
 install: mvn clean package -DskipTests=true
+
+branches:
+  except:
+      - mvn-repo

commit c4dbbcf98992d4f83f51e06ed2b71dc6f7eacb6a
Merge: f5edc07 3e974d7
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Sun May 25 22:34:00 2014 +0300

    Merge pull request #490 from lethalbrains/master
    
    Fixed grammar.

commit 5eeb6fe8b3914f7fd4961bed26bd8b4c66b082b9
Author: jeremybrooks <jeremyb@whirljack.net>
Date:   Fri Jul 4 20:49:15 2014 -0700

    updated the FlickrApi to use https

diff --git a/src/main/java/org/scribe/builder/api/FlickrApi.java b/src/main/java/org/scribe/builder/api/FlickrApi.java
index a630436..2e900de 100644
--- a/src/main/java/org/scribe/builder/api/FlickrApi.java
+++ b/src/main/java/org/scribe/builder/api/FlickrApi.java
@@ -17,7 +17,7 @@ public class FlickrApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "http://www.flickr.com/services/oauth/access_token";
+    return "https://www.flickr.com/services/oauth/access_token";
   }
 
   /**
@@ -26,7 +26,7 @@ public class FlickrApi extends DefaultApi10a
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return "http://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
+    return "https://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
   }
 
   /**
@@ -35,6 +35,6 @@ public class FlickrApi extends DefaultApi10a
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "http://www.flickr.com/services/oauth/request_token";
+    return "https://www.flickr.com/services/oauth/request_token";
   }
 }

commit cc55615470101c272bacf1fecd3dfa2a9b0692e9
Author: jeremybrooks <jeremyb@whirljack.net>
Date:   Fri Jul 4 20:54:34 2014 -0700

    updated the FlickrExample to use https

diff --git a/src/test/java/org/scribe/examples/FlickrExample.java b/src/test/java/org/scribe/examples/FlickrExample.java
index ac38ad3..92e9e6b 100644
--- a/src/test/java/org/scribe/examples/FlickrExample.java
+++ b/src/test/java/org/scribe/examples/FlickrExample.java
@@ -9,12 +9,12 @@ import java.util.*;
 
 public class FlickrExample
 {
-  private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
+  private static final String PROTECTED_RESOURCE_URL = "https://api.flickr.com/services/rest/";
 
   public static void main(String[] args)
   {
     // Replace these with your own api key and secret
-    String apiKey = "your_app_id";
+    String apiKey = "your_api_key";
     String apiSecret = "your_api_secret";
     OAuthService service = new ServiceBuilder().provider(FlickrApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
     Scanner in = new Scanner(System.in);
@@ -41,6 +41,7 @@ public class FlickrExample
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
     System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println("(you can get the username, full name, and nsid by parsing the rawResponse: " + accessToken.getRawResponse() + ")");
     System.out.println();
 
     // Now let's go and ask for a protected resource!

commit e83fa1c3da06ca85468b69a7d7d13b0077f8079f
Merge: c4dbbcf cc55615
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Jul 10 20:32:32 2014 -0300

    Merge pull request #496 from jeremybrooks/master
    
    Support for Flickr https endpoints

commit 60aa4bb714a291a4694fc27085017ed83b00bbc3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Thu Aug 7 17:51:32 2014 -0300

    remove body parameter
    
    it was previously used since the sample request was sending a twit,
    now twitter validation got stricter and it's making the sample get
    request fail.
    
    thanks @witbrock for noticing!

diff --git a/src/test/java/org/scribe/examples/TwitterExample.java b/src/test/java/org/scribe/examples/TwitterExample.java
index 9a810d7..0cfbdfb 100644
--- a/src/test/java/org/scribe/examples/TwitterExample.java
+++ b/src/test/java/org/scribe/examples/TwitterExample.java
@@ -47,7 +47,6 @@ public class TwitterExample
     // Now let's go and ask for a protected resource!
     System.out.println("Now we're going to access a protected resource...");
     OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
-    request.addBodyParameter("status", "this is sparta! *");
     service.signRequest(accessToken, request);
     Response response = request.send();
     System.out.println("Got it! Lets see what we found...");

commit 3fb9fa83ccdee8f1d67332fed6d0bd79b4f827a2
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 1 23:19:21 2014 -0300

    allow 'realm' parameter in OAuthParameters

diff --git a/src/main/java/org/scribe/model/OAuthRequest.java b/src/main/java/org/scribe/model/OAuthRequest.java
index d3b2e5a..8d241a4 100644
--- a/src/main/java/org/scribe/model/OAuthRequest.java
+++ b/src/main/java/org/scribe/model/OAuthRequest.java
@@ -4,9 +4,9 @@ import java.util.*;
 
 /**
  * The representation of an OAuth HttpRequest.
- * 
- * Adds OAuth-related functionality to the {@link Request}  
- * 
+ *
+ * Adds OAuth-related functionality to the {@link Request}
+ *
  * @author Pablo Fernandez
  */
 public class OAuthRequest extends Request
@@ -14,10 +14,10 @@ public class OAuthRequest extends Request
   private static final String OAUTH_PREFIX = "oauth_";
   private Map<String, String> oauthParameters;
   private String realm;
-  
+
   /**
    * Default constructor.
-   * 
+   *
    * @param verb Http verb/method
    * @param url resource URL
    */
@@ -29,10 +29,10 @@ public class OAuthRequest extends Request
 
   /**
    * Adds an OAuth parameter.
-   * 
+   *
    * @param key name of the parameter
    * @param value value of the parameter
-   * 
+   *
    * @throws IllegalArgumentException if the parameter is not an OAuth parameter
    */
   public void addOAuthParameter(String key, String value)
@@ -42,19 +42,19 @@ public class OAuthRequest extends Request
 
   private String checkKey(String key)
   {
-    if (key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE))
+    if (key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE) || key.equals(OAuthConstants.REALM))
     {
       return key;
-    } 
+    }
     else
     {
-      throw new IllegalArgumentException(String.format("OAuth parameters must either be '%s' or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
+      throw new IllegalArgumentException(String.format("OAuth parameters must either be '%s', '%s' or start with '%s'", OAuthConstants.SCOPE, OAuthConstants.REALM, OAUTH_PREFIX));
     }
   }
 
   /**
    * Returns the {@link Map} containing the key-value pair of parameters.
-   * 
+   *
    * @return parameters as map
    */
   public Map<String, String> getOauthParameters()
@@ -62,16 +62,16 @@ public class OAuthRequest extends Request
     return oauthParameters;
   }
 
-  public void setRealm(String realm) 
+  public void setRealm(String realm)
   {
     this.realm = realm;
   }
-  
-  public String getRealm() 
+
+  public String getRealm()
   {
     return realm;
   }
-  
+
   @Override
   public String toString()
   {
diff --git a/src/test/java/org/scribe/model/OAuthRequestTest.java b/src/test/java/org/scribe/model/OAuthRequestTest.java
index 1ea2f2f..685c34c 100644
--- a/src/test/java/org/scribe/model/OAuthRequestTest.java
+++ b/src/test/java/org/scribe/model/OAuthRequestTest.java
@@ -22,8 +22,9 @@ public class OAuthRequestTest
     request.addOAuthParameter(OAuthConstants.NONCE, "nonce");
     request.addOAuthParameter(OAuthConstants.TIMESTAMP, "ts");
     request.addOAuthParameter(OAuthConstants.SCOPE, "feeds");
+    request.addOAuthParameter(OAuthConstants.REALM, "some-realm");
 
-    assertEquals(4, request.getOauthParameters().size());
+    assertEquals(5, request.getOauthParameters().size());
   }
 
   @Test(expected = IllegalArgumentException.class)

commit a01963ec7c4f5bb40f998107df52b662a0610400
Author: Leandro Doctors <ldoctors@gmail.com>
Date:   Mon Sep 22 22:05:21 2014 +0200

    Use FindBugs 3.0.0

diff --git a/pom.xml b/pom.xml
index db0afd1..fcd6a4b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -123,7 +123,7 @@
         <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>findbugs-maven-plugin</artifactId>
-        <version>2.5.2</version>
+        <version>3.0.0</version>
         <executions>
           <execution>
             <id>failing-on-high</id>

commit 99ae2c34b822db588e19810a22da2ce74e3144b0
Merge: a01963e 3fb9fa8
Author: Leandro Doctors <ldoctors@gmail.com>
Date:   Mon Sep 22 22:53:50 2014 +0200

    Merge branch 'master' of github.com:fernandezpablo85/scribe-java

commit 648f8e359a20c6538c71c8b4925c324aadf44fcd
Merge: 3fb9fa8 99ae2c3
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Mon Sep 22 19:18:44 2014 -0300

    Merge pull request #514 from allentiak/master
    
    Use FindBugs 3.0.0

commit b1813fdd186fa8581e9a89653cfeba495ed0569c
Author: stevepeak <steve@stevepeak.net>
Date:   Fri Oct 3 21:46:53 2014 +0000

    Added Codecov.io coverage reporting

diff --git a/.travis.yml b/.travis.yml
index 6ecb86a..2e6f88b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,7 @@
 # kickstart travis.
 language: java
+before_install: sudo pip install codecov
+after_success: codecov
 
 # need to override travis 'install' since it will try gpg sign and fail.
 install: mvn clean package -DskipTests=true
diff --git a/README.md b/README.md
index fddf1da..4d8527c 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,7 @@
-# Welcome to the home of Scribe, the simple OAuth Java lib!
+# Welcome to the home of Scribe, the simple OAuth Java lib! 
 
 ![travis ci](https://secure.travis-ci.org/fernandezpablo85/scribe-java.png?branch=master)
+[![codecov.io](https://codecov.io/github/fernandezpablo85/scribe-java/coverage.svg?branch=master)](https://codecov.io/github/fernandezpablo85/scribe-java?branch=master)
 
 ### Before submitting a pull request [please read this](https://github.com/fernandezpablo85/scribe-java/wiki/Scribe-scope-revised)
 
diff --git a/pom.xml b/pom.xml
index fcd6a4b..ac6ed35 100644
--- a/pom.xml
+++ b/pom.xml
@@ -137,6 +137,25 @@
           </execution>
         </executions>
         </plugin>
+        <plugin>
+            <groupId>org.jacoco</groupId>
+            <artifactId>jacoco-maven-plugin</artifactId>
+            <version>0.5.8.201207111220</version>
+            <executions>
+                <execution>
+                    <goals>
+                        <goal>prepare-agent</goal>
+                    </goals>
+                </execution>
+                <execution>
+                    <id>report</id>
+                    <phase>test</phase>
+                    <goals>
+                        <goal>report</goal>
+                    </goals>
+                </execution>
+            </executions>
+        </plugin>
     </plugins>
   </build>
 </project>

commit e47e494ce39f9b180352fc9b5fd73c8b3ccce7f8
Merge: 648f8e3 b1813fd
Author: Pablo Fernandez <fernandezpablo85@gmail.com>
Date:   Fri Oct 3 19:12:56 2014 -0300

    Merge pull request #515 from stevepeak/master
    
    Added Codecov.io coverage reporting
