commit cd30d6da8e2228a5575d28dd924d37531c7da1d6
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 7 22:00:48 2013 +0100

    Completed JFrame
    
    JFrame is now ready to be used

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..412eeda
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,22 @@
+# Auto detect text files and perform LF normalization
+* text=auto
+
+# Custom for Visual Studio
+*.cs     diff=csharp
+*.sln    merge=union
+*.csproj merge=union
+*.vbproj merge=union
+*.fsproj merge=union
+*.dbproj merge=union
+
+# Standard to msysgit
+*.doc	 diff=astextplain
+*.DOC	 diff=astextplain
+*.docx diff=astextplain
+*.DOCX diff=astextplain
+*.dot  diff=astextplain
+*.DOT  diff=astextplain
+*.pdf  diff=astextplain
+*.PDF	 diff=astextplain
+*.rtf	 diff=astextplain
+*.RTF	 diff=astextplain
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..5ebd21a
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,163 @@
+#################
+## Eclipse
+#################
+
+*.pydevproject
+.project
+.metadata
+bin/
+tmp/
+*.tmp
+*.bak
+*.swp
+*~.nib
+local.properties
+.classpath
+.settings/
+.loadpath
+
+# External tool builders
+.externalToolBuilders/
+
+# Locally stored "Eclipse launch configurations"
+*.launch
+
+# CDT-specific
+.cproject
+
+# PDT-specific
+.buildpath
+
+
+#################
+## Visual Studio
+#################
+
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+
+# User-specific files
+*.suo
+*.user
+*.sln.docstates
+
+# Build results
+[Dd]ebug/
+[Rr]elease/
+*_i.c
+*_p.c
+*.ilk
+*.meta
+*.obj
+*.pch
+*.pdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.vspscc
+.builds
+*.dotCover
+
+## TODO: If you have NuGet Package Restore enabled, uncomment this
+#packages/
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opensdf
+*.sdf
+
+# Visual Studio profiler
+*.psess
+*.vsp
+
+# ReSharper is a .NET coding add-in
+_ReSharper*
+
+# Installshield output folder
+[Ee]xpress
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish
+
+# Others
+[Bb]in
+[Oo]bj
+sql
+TestResults
+*.Cache
+ClientBin
+stylecop.*
+~$*
+*.dbmdl
+Generated_Code #added for RIA/Silverlight projects
+
+# Backup & report files from converting an old project file to a newer
+# Visual Studio version. Backup files are not needed, because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+
+
+
+############
+## Windows
+############
+
+# Windows image file caches
+Thumbs.db
+
+# Folder config file
+Desktop.ini
+
+
+#############
+## Python
+#############
+
+*.py[co]
+
+# Packages
+*.egg
+*.egg-info
+dist
+build
+eggs
+parts
+bin
+var
+sdist
+develop-eggs
+.installed.cfg
+
+# Installer logs
+pip-log.txt
+
+# Unit test / coverage reports
+.coverage
+.tox
+
+#Translations
+*.mo
+
+#Mr Developer
+.mr.developer.cfg
+
+# Mac crap
+.DS_Store
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
new file mode 100644
index 0000000..9396b96
--- /dev/null
+++ b/src/com/redomar/game/Game.java
@@ -0,0 +1,131 @@
+package com.redomar.game;
+
+import java.awt.BorderLayout;
+import java.awt.Canvas;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.image.BufferStrategy;
+import java.awt.image.BufferedImage;
+import java.awt.image.DataBufferInt;
+
+import javax.swing.JFrame;
+
+public class Game extends Canvas implements Runnable {
+
+	private static final long serialVersionUID = 1L;
+
+	// Setting the size and name of the frame/canvas
+	public static final int WIDTH = 160;
+	public static final int HEIGHT = (WIDTH / 3 * 2);
+	public static final int SCALE = 3;
+	public static final String NAME = "Game";
+
+	private JFrame frame;
+
+	public boolean running = false;	
+	public int tickCount = 0;
+	
+	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
+	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
+	
+	public Game() {
+		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+
+		frame = new JFrame(NAME);
+		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		frame.setLayout(new BorderLayout());
+		frame.add(this, BorderLayout.CENTER);
+		frame.pack();
+		frame.setResizable(false);
+		frame.setLocationRelativeTo(null);
+		frame.setVisible(true);
+
+	}
+
+	public synchronized void start() {
+		running = true;
+		new Thread(this).start();
+	}
+
+	public synchronized void stop() {
+		running = false;
+	}
+
+	public void run() {
+		long lastTime = System.nanoTime();
+		double nsPerTick = 1000000000D / 60D;
+
+		int ticks = 0;
+		int frames = 0;
+
+		long lastTimer = System.currentTimeMillis();
+		double delta = 0;
+
+		while (running) {
+			long now = System.nanoTime();
+			delta += (now - lastTime) / nsPerTick;
+			lastTime = now;
+			boolean shouldRender = true;
+
+			while (delta >= 1) {
+				ticks++;
+				tick();
+				delta -= 1;
+				shouldRender = true;
+			}
+
+			try {
+				Thread.sleep(2);
+			} catch (InterruptedException e) {
+				e.printStackTrace();
+			}
+
+			if (shouldRender) {
+				frames++;
+				render();
+			}
+
+			if (System.currentTimeMillis() - lastTimer >= 1000) {
+				lastTimer += 1000;
+				System.out.println("Frames: " + frames + " Ticks: " + ticks);
+				frames = 0;
+				ticks = 0;
+			}
+		}
+
+	}
+
+	public void tick() {
+		tickCount++;
+		
+		for(int i = 0; i<pixels.length;i++){
+			pixels[i] = i + tickCount;
+		}
+	}
+
+	public void render() {
+		BufferStrategy bs = getBufferStrategy();
+		if (bs == null) {
+            createBufferStrategy(3);
+            return;
+        }
+		
+		Graphics g = bs.getDrawGraphics();
+		
+		g.setColor(Color.BLACK);
+		g.fillRect(0, 0, getWidth(), getHeight());
+		
+		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
+		
+		g.dispose();
+		bs.show();
+	}
+
+	public static void main(String[] args) {
+		new Game().start();
+	}
+
+}

commit eb2987b2df93f8168c56db76efed2899176db21a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 7 22:58:45 2013 +0100

    Added Sprite Sheet
    
    added the sprite sheet

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
new file mode 100644
index 0000000..4e571e0
Binary files /dev/null and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 9396b96..45af46f 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -11,6 +11,8 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 
+import com.redomar.game.gfx.SpriteSheet;
+
 public class Game extends Canvas implements Runnable {
 
 	private static final long serialVersionUID = 1L;
@@ -29,6 +31,8 @@ public class Game extends Canvas implements Runnable {
 	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
 	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
 	
+	private SpriteSheet spriteSheet = new SpriteSheet("/sprite_sheet.png");
+	
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
new file mode 100644
index 0000000..c575972
--- /dev/null
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -0,0 +1,45 @@
+package com.redomar.game.gfx;
+
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+
+import javax.imageio.ImageIO;
+
+public class SpriteSheet {
+
+	public String path;
+	public int width;
+	public int height;
+
+	public int[] pixels;
+
+	public SpriteSheet(String path) {
+		BufferedImage image = null;
+
+		try {
+			image = ImageIO.read(SpriteSheet.class.getResourceAsStream(path));
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		if (image == null) {
+			return;
+		}
+
+		this.path = path;
+		this.width = image.getWidth();
+		this.height = image.getHeight();
+
+		pixels = image.getRGB(0, 0, width, height, null, 0, width);
+
+		for (int i = 0; i < pixels.length; i++) {
+			pixels[i] = (pixels[i] & 0xff) / 64;
+		}
+		
+		for (int i = 0; i<8; i++){
+			System.out.println(pixels[i]);
+		}
+
+	}
+
+}

commit 6e0966a34fbbcbbb803034d711e7d1555e10608a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 01:26:57 2013 +0100

    Added Screen
    
    added sprites to the JFrame screen

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 4e571e0..667a93c 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 45af46f..88386e0 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -2,7 +2,6 @@ package com.redomar.game;
 
 import java.awt.BorderLayout;
 import java.awt.Canvas;
-import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.image.BufferStrategy;
@@ -11,6 +10,7 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 
+import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 
 public class Game extends Canvas implements Runnable {
@@ -31,7 +31,7 @@ public class Game extends Canvas implements Runnable {
 	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
 	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
 	
-	private SpriteSheet spriteSheet = new SpriteSheet("/sprite_sheet.png");
+	private Screen screen;
 	
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -48,6 +48,10 @@ public class Game extends Canvas implements Runnable {
 		frame.setVisible(true);
 
 	}
+	
+	public void init(){
+		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
+	}
 
 	public synchronized void start() {
 		running = true;
@@ -67,6 +71,8 @@ public class Game extends Canvas implements Runnable {
 
 		long lastTimer = System.currentTimeMillis();
 		double delta = 0;
+		
+		init();
 
 		while (running) {
 			long now = System.nanoTime();
@@ -104,10 +110,8 @@ public class Game extends Canvas implements Runnable {
 
 	public void tick() {
 		tickCount++;
+		//screen.xOffset++;
 		
-		for(int i = 0; i<pixels.length;i++){
-			pixels[i] = i + tickCount;
-		}
 	}
 
 	public void render() {
@@ -117,13 +121,12 @@ public class Game extends Canvas implements Runnable {
             return;
         }
 		
-		Graphics g = bs.getDrawGraphics();
-		
-		g.setColor(Color.BLACK);
-		g.fillRect(0, 0, getWidth(), getHeight());
+		screen.render(pixels, 0, WIDTH);
 		
-		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
+		Graphics g = bs.getDrawGraphics();
 		
+		g.drawRect(0, 0, getWidth(), getHeight());
+		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);		
 		g.dispose();
 		bs.show();
 	}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
new file mode 100644
index 0000000..ab82b5a
--- /dev/null
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -0,0 +1,67 @@
+package com.redomar.game.gfx;
+
+public class Screen {
+
+	public static final int MAP_WIDTH = 64;
+	public static final int MAP_WIDTH_MASK = MAP_WIDTH - 1;
+
+	public int[] tiles = new int[MAP_WIDTH * MAP_WIDTH];
+	public int[] colours = new int[MAP_WIDTH * MAP_WIDTH * 4];
+
+	public int xOffset = 0;
+	public int yOffset = 0;
+
+	public int width;
+	public int height;
+
+	public SpriteSheet sheet;
+
+	public Screen(int width, int height, SpriteSheet sheet) {
+
+		this.width = width;
+		this.height = height;
+		this.sheet = sheet;
+
+		// Choosing colours from sprite_sheet.png
+		for (int i = 0; i < MAP_WIDTH * MAP_WIDTH; i++) {
+			colours[i * 4 + 0] = 0xff00ff;
+			colours[i * 4 + 1] = 0x00ffff;
+			colours[i * 4 + 2] = 0xffff00;
+			colours[i * 4 + 3] = 0xffffff;
+		}
+	}
+
+	public void render(int[] pixels, int offset, int row) {
+
+		for (int yTile = yOffset >> 3; yTile <= (yOffset + height) >> 3; yTile++) {
+
+			int yMin = yTile * 8 - yOffset;
+			int yMax = yMin + 8;
+
+			if (yMin < 0) yMin = 0;
+			if (yMax > height) yMax = height;
+
+			for (int xTile = xOffset >> 3; xTile <= (xOffset + width) >> 3; xTile++) {
+
+				int xMin = xTile * 8 - xOffset;
+				int xMax = xMin + 8;
+
+				if (xMin < 0) xMin = 0;
+				if (xMax > width) xMax = width;
+
+				int tileIndex = (xTile & (MAP_WIDTH_MASK)) + (yTile & (MAP_WIDTH_MASK)) * MAP_WIDTH;
+
+				for (int y = yMin; y < yMax; y++) {
+					int sheetPixel = ((y + yOffset) & 7) * sheet.width + ((xMin + xOffset) & 7);
+					int tilePixel = offset + xMin + y * row;
+					for (int x = xMin; x < xMax; x++) {
+						int colour = tileIndex * 4 + sheet.pixels[sheetPixel++];
+						pixels[tilePixel++] = colours[colour];
+					}
+				}
+				
+			}
+		}
+
+	}
+}
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index c575972..ce1c08c 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -33,7 +33,7 @@ public class SpriteSheet {
 		pixels = image.getRGB(0, 0, width, height, null, 0, width);
 
 		for (int i = 0; i < pixels.length; i++) {
-			pixels[i] = (pixels[i] & 0xff) / 64;
+			pixels[i] = (pixels[i] & 0xff) / 64; //removes alpha (transparency)
 		}
 		
 		for (int i = 0; i<8; i++){

commit 56699ae3e0570426823047a5596d2989968f3c48
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 13:38:03 2013 +0100

    added an Input Handler
    
    added a handler that detects when key is pressed
    tidied up the code (basic)

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 88386e0..8f22109 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -25,14 +25,17 @@ public class Game extends Canvas implements Runnable {
 
 	private JFrame frame;
 
-	public boolean running = false;	
+	public boolean running = false;
 	public int tickCount = 0;
-	
-	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
-	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
-	
+
+	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT,
+			BufferedImage.TYPE_INT_RGB);
+	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer())
+			.getData();
+
 	private Screen screen;
-	
+	public InputHandler input;
+
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -48,9 +51,10 @@ public class Game extends Canvas implements Runnable {
 		frame.setVisible(true);
 
 	}
-	
-	public void init(){
+
+	public void init() {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
+		input = new InputHandler(this);
 	}
 
 	public synchronized void start() {
@@ -71,7 +75,7 @@ public class Game extends Canvas implements Runnable {
 
 		long lastTimer = System.currentTimeMillis();
 		double delta = 0;
-		
+
 		init();
 
 		while (running) {
@@ -110,23 +114,34 @@ public class Game extends Canvas implements Runnable {
 
 	public void tick() {
 		tickCount++;
-		//screen.xOffset++;
-		
+
+		if (input.up.isPressed()) {
+			screen.yOffset--;
+		}
+		if (input.down.isPressed()) {
+			screen.yOffset++;
+		}
+		if (input.left.isPressed()) {
+			screen.xOffset--;
+		}
+		if (input.right.isPressed()) {
+			screen.xOffset++;
+		}
 	}
 
 	public void render() {
 		BufferStrategy bs = getBufferStrategy();
 		if (bs == null) {
-            createBufferStrategy(3);
-            return;
-        }
-		
+			createBufferStrategy(3);
+			return;
+		}
+
 		screen.render(pixels, 0, WIDTH);
-		
+
 		Graphics g = bs.getDrawGraphics();
-		
+
 		g.drawRect(0, 0, getWidth(), getHeight());
-		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);		
+		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
 		g.dispose();
 		bs.show();
 	}
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
new file mode 100644
index 0000000..63613ec
--- /dev/null
+++ b/src/com/redomar/game/InputHandler.java
@@ -0,0 +1,64 @@
+package com.redomar.game;
+
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+
+public class InputHandler implements KeyListener {
+
+	public InputHandler(Game game) {
+		game.addKeyListener(this);
+	}
+
+	public class Key {
+		private int numTimesPressed = 0;
+		private boolean pressed = false;
+
+		public int getNumTimesPressed() {
+			return numTimesPressed;
+		}
+
+		public boolean isPressed() {
+			return pressed;
+		}
+
+		public void toggle(boolean isPressed) {
+			pressed = isPressed;
+			if (isPressed) {
+				numTimesPressed++;
+			}
+		}
+	}
+
+	public Key up = new Key();
+	public Key down = new Key();
+	public Key left = new Key();
+	public Key right = new Key();
+
+	public void keyPressed(KeyEvent e) {
+		toggleKey(e.getKeyCode(), true);
+	}
+
+	public void keyReleased(KeyEvent e) {
+		toggleKey(e.getKeyCode(), false);
+	}
+
+	public void keyTyped(KeyEvent e) {
+
+	}
+
+	public void toggleKey(int keyCode, boolean isPressed) {
+		if (keyCode == KeyEvent.VK_W) {
+			up.toggle(isPressed);
+		}
+		if (keyCode == KeyEvent.VK_S) {
+			down.toggle(isPressed);
+		}
+		if (keyCode == KeyEvent.VK_A) {
+			left.toggle(isPressed);
+		}
+		if (keyCode == KeyEvent.VK_D) {
+			right.toggle(isPressed);
+		}
+	}
+
+}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index ab82b5a..996c227 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -38,30 +38,34 @@ public class Screen {
 			int yMin = yTile * 8 - yOffset;
 			int yMax = yMin + 8;
 
-			if (yMin < 0) yMin = 0;
-			if (yMax > height) yMax = height;
+			if (yMin < 0)
+				yMin = 0;
+			if (yMax > height)
+				yMax = height;
 
 			for (int xTile = xOffset >> 3; xTile <= (xOffset + width) >> 3; xTile++) {
 
 				int xMin = xTile * 8 - xOffset;
 				int xMax = xMin + 8;
 
-				if (xMin < 0) xMin = 0;
-				if (xMax > width) xMax = width;
+				if (xMin < 0)
+					xMin = 0;
+				if (xMax > width)
+					xMax = width;
 
-				int tileIndex = (xTile & (MAP_WIDTH_MASK)) + (yTile & (MAP_WIDTH_MASK)) * MAP_WIDTH;
+				int tileIndex = (xTile & (MAP_WIDTH_MASK))
+						+ (yTile & (MAP_WIDTH_MASK)) * MAP_WIDTH;
 
 				for (int y = yMin; y < yMax; y++) {
-					int sheetPixel = ((y + yOffset) & 7) * sheet.width + ((xMin + xOffset) & 7);
+					int sheetPixel = ((y + yOffset) & 7) * sheet.width
+							+ ((xMin + xOffset) & 7);
 					int tilePixel = offset + xMin + y * row;
 					for (int x = xMin; x < xMax; x++) {
 						int colour = tileIndex * 4 + sheet.pixels[sheetPixel++];
 						pixels[tilePixel++] = colours[colour];
 					}
 				}
-				
 			}
 		}
-
 	}
 }
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index ce1c08c..6a70adf 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -33,13 +33,11 @@ public class SpriteSheet {
 		pixels = image.getRGB(0, 0, width, height, null, 0, width);
 
 		for (int i = 0; i < pixels.length; i++) {
-			pixels[i] = (pixels[i] & 0xff) / 64; //removes alpha (transparency)
+			pixels[i] = (pixels[i] & 0xff) / 64; // removes alpha (transparency)
 		}
-		
-		for (int i = 0; i<8; i++){
+
+		for (int i = 0; i < 8; i++) {
 			System.out.println(pixels[i]);
 		}
-
 	}
-
 }

commit 8b67db6382b22279e3fe8d47e8624b37f5c063fb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 15:06:37 2013 +0100

    Added 256 bit Colours
    
    added 256 unique colours
    optimized and rewritten render engine

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 8f22109..c9dcaca 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -10,6 +10,7 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 
+import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 
@@ -32,6 +33,7 @@ public class Game extends Canvas implements Runnable {
 			BufferedImage.TYPE_INT_RGB);
 	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer())
 			.getData();
+	private int[] colours = new int[6 * 6 * 6];
 
 	private Screen screen;
 	public InputHandler input;
@@ -53,6 +55,18 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public void init() {
+		int index = 0;
+		for (int r = 0; r < 6; r++) {
+			for (int g = 0; g < 6; g++) {
+				for (int b = 0; b < 6; b++) {
+					int rr = (r * 255 / 5);
+					int gg = (g * 255 / 5);
+					int bb = (b * 255 / 5);
+					colours[index++] = rr << 16 | gg << 8 | bb;
+				}
+			}
+		}
+
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 	}
@@ -136,7 +150,21 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		screen.render(pixels, 0, WIDTH);
+		for (int y = 0; y < 32; y++) {
+			for (int x = 0; x < 32; x++) {
+				screen.render(x << 3, y << 3, 0,
+						Colours.get(555, 500, 050, 005));
+			}
+		}
+
+		for (int y = 0; y < screen.height; y++) {
+			for (int x = 0; x < screen.width; x++) {
+				int colourCode = screen.pixels[x + y * screen.width];
+				if(colourCode < 255){
+					pixels[x+y*WIDTH] = colours[colourCode];
+				}
+			}
+		}
 
 		Graphics g = bs.getDrawGraphics();
 
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 63613ec..c4ec71b 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -47,16 +47,16 @@ public class InputHandler implements KeyListener {
 	}
 
 	public void toggleKey(int keyCode, boolean isPressed) {
-		if (keyCode == KeyEvent.VK_W) {
+		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
 			up.toggle(isPressed);
 		}
-		if (keyCode == KeyEvent.VK_S) {
+		if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
 			down.toggle(isPressed);
 		}
-		if (keyCode == KeyEvent.VK_A) {
+		if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
 			left.toggle(isPressed);
 		}
-		if (keyCode == KeyEvent.VK_D) {
+		if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
 			right.toggle(isPressed);
 		}
 	}
diff --git a/src/com/redomar/game/gfx/Colours.java b/src/com/redomar/game/gfx/Colours.java
new file mode 100644
index 0000000..630ff16
--- /dev/null
+++ b/src/com/redomar/game/gfx/Colours.java
@@ -0,0 +1,22 @@
+package com.redomar.game.gfx;
+
+public class Colours {
+
+	public static int get(int colour1, int colour2, int colour3, int colour4) {
+		return (get(colour4) << 24) + (get(colour3) << 16)
+				+ (get(colour2) << 8) + (get(colour1));
+	}
+
+	private static int get(int colour) {
+
+		if (colour < 0) {
+			return 255;
+		}
+
+		int r = colour / 100 % 10;
+		int g = colour / 10 % 10;
+		int b = colour % 10;
+
+		return r * 36 + g * 6 + b;
+	}
+}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index 996c227..4dcee58 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -5,8 +5,7 @@ public class Screen {
 	public static final int MAP_WIDTH = 64;
 	public static final int MAP_WIDTH_MASK = MAP_WIDTH - 1;
 
-	public int[] tiles = new int[MAP_WIDTH * MAP_WIDTH];
-	public int[] colours = new int[MAP_WIDTH * MAP_WIDTH * 4];
+	public int[] pixels;
 
 	public int xOffset = 0;
 	public int yOffset = 0;
@@ -22,50 +21,32 @@ public class Screen {
 		this.height = height;
 		this.sheet = sheet;
 
-		// Choosing colours from sprite_sheet.png
-		for (int i = 0; i < MAP_WIDTH * MAP_WIDTH; i++) {
-			colours[i * 4 + 0] = 0xff00ff;
-			colours[i * 4 + 1] = 0x00ffff;
-			colours[i * 4 + 2] = 0xffff00;
-			colours[i * 4 + 3] = 0xffffff;
-		}
+		pixels = new int[width * height];
 	}
 
-	public void render(int[] pixels, int offset, int row) {
-
-		for (int yTile = yOffset >> 3; yTile <= (yOffset + height) >> 3; yTile++) {
-
-			int yMin = yTile * 8 - yOffset;
-			int yMax = yMin + 8;
-
-			if (yMin < 0)
-				yMin = 0;
-			if (yMax > height)
-				yMax = height;
-
-			for (int xTile = xOffset >> 3; xTile <= (xOffset + width) >> 3; xTile++) {
-
-				int xMin = xTile * 8 - xOffset;
-				int xMax = xMin + 8;
-
-				if (xMin < 0)
-					xMin = 0;
-				if (xMax > width)
-					xMax = width;
-
-				int tileIndex = (xTile & (MAP_WIDTH_MASK))
-						+ (yTile & (MAP_WIDTH_MASK)) * MAP_WIDTH;
-
-				for (int y = yMin; y < yMax; y++) {
-					int sheetPixel = ((y + yOffset) & 7) * sheet.width
-							+ ((xMin + xOffset) & 7);
-					int tilePixel = offset + xMin + y * row;
-					for (int x = xMin; x < xMax; x++) {
-						int colour = tileIndex * 4 + sheet.pixels[sheetPixel++];
-						pixels[tilePixel++] = colours[colour];
-					}
+	public void render(int xPos, int yPos, int tile, int colour) {
+		xPos -= xOffset;
+		yPos -= yOffset;
+
+		int xTile = tile % 32;
+		int yTile = tile / 32;
+		int tileOffset = (xTile << 3) + (yTile << 3) * sheet.width;
+
+		for (int y = 0; y < 8; y++) {
+			int ySheet = y;
+			if (y + yPos < 0 | y + yPos >= height)
+				continue;
+			for (int x = 0; x < 8; x++) {
+				int xSheet = x;
+				if (x + xPos < 0 | x + xPos >= width)
+					continue;
+				int col = (colour >> (sheet.pixels[xSheet + ySheet
+						* sheet.width + tileOffset] * 8)) & 255;
+				if (col < 255) {
+					pixels[(x + xPos) + (y + yPos) * width] = col;
 				}
 			}
 		}
+
 	}
 }

commit b6d293b25adbef224777e32ebe656b8834267f07
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 16:07:07 2013 +0100

    Added mirroring to the Sprites

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 667a93c..6b5c064 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index c9dcaca..262a94c 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -153,15 +153,15 @@ public class Game extends Canvas implements Runnable {
 		for (int y = 0; y < 32; y++) {
 			for (int x = 0; x < 32; x++) {
 				screen.render(x << 3, y << 3, 0,
-						Colours.get(555, 500, 050, 005));
+						Colours.get(555, 505, 055, 550), false, false);
 			}
 		}
 
 		for (int y = 0; y < screen.height; y++) {
 			for (int x = 0; x < screen.width; x++) {
 				int colourCode = screen.pixels[x + y * screen.width];
-				if(colourCode < 255){
-					pixels[x+y*WIDTH] = colours[colourCode];
+				if (colourCode < 255) {
+					pixels[x + y * WIDTH] = colours[colourCode];
 				}
 			}
 		}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index 4dcee58..c3868de 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -24,7 +24,8 @@ public class Screen {
 		pixels = new int[width * height];
 	}
 
-	public void render(int xPos, int yPos, int tile, int colour) {
+	public void render(int xPos, int yPos, int tile, int colour,
+			boolean mirrorX, boolean mirrorY) {
 		xPos -= xOffset;
 		yPos -= yOffset;
 
@@ -34,12 +35,25 @@ public class Screen {
 
 		for (int y = 0; y < 8; y++) {
 			int ySheet = y;
-			if (y + yPos < 0 | y + yPos >= height)
+
+			if (mirrorY) {
+				ySheet = 7 - y;
+			}
+
+			if (y + yPos < 0 | y + yPos >= height) {
 				continue;
+			}
+
 			for (int x = 0; x < 8; x++) {
 				int xSheet = x;
-				if (x + xPos < 0 | x + xPos >= width)
+
+				if (mirrorX) {
+					xSheet = 7 - x;
+				}
+
+				if (x + xPos < 0 | x + xPos >= width) {
 					continue;
+				}
 				int col = (colour >> (sheet.pixels[xSheet + ySheet
 						* sheet.width + tileOffset] * 8)) & 255;
 				if (col < 255) {

commit 66eaf3b13f89461cbf625b271701c93d0559f4e9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 17:50:22 2013 +0100

    Added a font library
    
    added 8 bit letters to the sprite sheet

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 6b5c064..247b1d4 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 262a94c..e8a821f 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -13,6 +13,7 @@ import javax.swing.JFrame;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
+import com.redomar.game.lib.Font;
 
 public class Game extends Canvas implements Runnable {
 
@@ -157,6 +158,11 @@ public class Game extends Canvas implements Runnable {
 			}
 		}
 
+		String msg = "HeLLo ThErE";
+		Font.render(msg, screen,
+				screen.xOffset + screen.width / 2 - ((msg.length() * 8) / 2),
+				screen.yOffset + screen.height / 2, Colours.get(-1, -1, -1, 0));
+
 		for (int y = 0; y < screen.height; y++) {
 			for (int x = 0; x < screen.width; x++) {
 				int colourCode = screen.pixels[x + y * screen.width];
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
new file mode 100644
index 0000000..b6f7cff
--- /dev/null
+++ b/src/com/redomar/game/lib/Font.java
@@ -0,0 +1,23 @@
+package com.redomar.game.lib;
+
+import com.redomar.game.gfx.Screen;
+
+public class Font {
+
+	private static String chars = "" +
+	"ABCDEFGHIJKLMNOPQRSTUVWXYZ      " +
+	"0123456789.,:;'\"!?$%()-=+/      ";
+	
+	public static void render(String msg, Screen screen, int x, int y, int colour){
+		msg = msg.toUpperCase();
+
+		for (int i = 0; i < msg.length(); i++) {
+			int charIndex = chars.indexOf(msg.charAt(i));
+			if (charIndex >= 0) {
+				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, false, false);
+			}
+		}
+	}
+
+}
+

commit 9e7b2feacd572fe199024e9701937323d6a2d121
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 8 21:33:11 2013 +0100

    Added level and tile handler
    
    added 3 new tiles

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 247b1d4..f26363a 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e8a821f..8519a5c 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -13,6 +13,7 @@ import javax.swing.JFrame;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
+import com.redomar.game.level.Level;
 import com.redomar.game.lib.Font;
 
 public class Game extends Canvas implements Runnable {
@@ -38,6 +39,7 @@ public class Game extends Canvas implements Runnable {
 
 	private Screen screen;
 	public InputHandler input;
+	public Level level;
 
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -70,6 +72,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
+		level = new Level(64, 64);
 	}
 
 	public synchronized void start() {
@@ -127,21 +130,25 @@ public class Game extends Canvas implements Runnable {
 
 	}
 
+	private int x = 0, y = 0;
+
 	public void tick() {
 		tickCount++;
 
 		if (input.up.isPressed()) {
-			screen.yOffset--;
+			y--;
 		}
 		if (input.down.isPressed()) {
-			screen.yOffset++;
+			y++;
 		}
 		if (input.left.isPressed()) {
-			screen.xOffset--;
+			x--;
 		}
 		if (input.right.isPressed()) {
-			screen.xOffset++;
+			x++;
 		}
+
+		level.tick();
 	}
 
 	public void render() {
@@ -151,18 +158,19 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		for (int y = 0; y < 32; y++) {
-			for (int x = 0; x < 32; x++) {
-				screen.render(x << 3, y << 3, 0,
-						Colours.get(555, 505, 055, 550), false, false);
+		int xOffset = x - (screen.width / 2);
+		int yOffset = y - (screen.height / 2);
+
+		level.renderTiles(screen, xOffset, yOffset);
+
+		for (int x = 0; x < level.width; x++) {
+			int colour = Colours.get(-1, -1, -1, 000);
+			if (x % 10 == 0 && x != 0) {
+				colour = Colours.get(-1, -1, -1, 500);
 			}
+			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour);
 		}
 
-		String msg = "HeLLo ThErE";
-		Font.render(msg, screen,
-				screen.xOffset + screen.width / 2 - ((msg.length() * 8) / 2),
-				screen.yOffset + screen.height / 2, Colours.get(-1, -1, -1, 0));
-
 		for (int y = 0; y < screen.height; y++) {
 			for (int x = 0; x < screen.width; x++) {
 				int colourCode = screen.pixels[x + y * screen.width];
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index c3868de..dc844ad 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -63,4 +63,9 @@ public class Screen {
 		}
 
 	}
+
+	public void setOffset(int xOffset, int yOffset) {
+		this.xOffset = xOffset;
+		this.yOffset = yOffset;
+	}
 }
diff --git a/src/com/redomar/game/level/Level.java b/src/com/redomar/game/level/Level.java
new file mode 100644
index 0000000..90a6fde
--- /dev/null
+++ b/src/com/redomar/game/level/Level.java
@@ -0,0 +1,64 @@
+package com.redomar.game.level;
+
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.tiles.Tile;
+
+public class Level {
+
+	private byte[] tiles;
+	public int width;
+	public int height;
+
+	public Level(int width, int height) {
+		tiles = new byte[width * height];
+		this.width = width;
+		this.height = height;
+		this.generateLevel();
+	}
+
+	private void generateLevel() {
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				if (x * y % 10 < 5) {
+					tiles[x + y * width] = Tile.GRASS.getId();
+				} else {
+					tiles[x + y * width] = Tile.STONE.getId();
+				}
+			}
+		}
+	}
+	
+	public void tick(){
+		
+	}
+
+	public void renderTiles(Screen screen, int xOffset, int yOffset) {
+		if (xOffset < 0) {
+			xOffset = 0;
+		}
+		if (xOffset > ((width << 3) - screen.width)) {
+			xOffset = ((width << 3) - screen.width);
+		}
+		if (yOffset < 0) {
+			yOffset = 0;
+		}
+		if (yOffset > ((height << 3) - screen.height)) {
+			yOffset = ((height << 3) - screen.height);
+		}
+
+		screen.setOffset(xOffset, yOffset);
+
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				getTile(x, y).render(screen, this, x << 3, y << 3);
+			}
+		}
+	}
+
+	private Tile getTile(int x, int y) {
+		if (x < 0 || x > width || y < 0 || y > height) {
+			return Tile.VOID;
+		}
+		return Tile.tiles[tiles[x + y * width]];
+	}
+}
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
new file mode 100644
index 0000000..e99eb50
--- /dev/null
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -0,0 +1,22 @@
+package com.redomar.game.level.tiles;
+
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.Level;
+
+public class BasicTile extends Tile {
+
+	protected int tileId;
+	protected int tileColour;
+
+	public BasicTile(int id, int x, int y, int tileColour) {
+		super(id, false, false);
+		
+		this.tileId = x + y;
+		this.tileColour = tileColour;
+	}
+
+	public void render(Screen screen, Level level, int x, int y) {
+		screen.render(x, y, tileId, tileColour, false, false);
+	}
+
+}
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
new file mode 100644
index 0000000..b503da5
--- /dev/null
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -0,0 +1,45 @@
+package com.redomar.game.level.tiles;
+
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.Level;
+
+public abstract class Tile {
+
+	public static final Tile[] tiles = new Tile[256];
+	public static final Tile VOID = new BasicTile(0, 0, 0, Colours.get(0, -1, -1, -1));
+	public static final Tile STONE = new BasicTile(1, 1, 0, Colours.get(-1, 333, -1, -1));
+	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1));
+
+	protected byte id;
+	protected boolean solid;
+	protected boolean emitter;
+
+	public Tile(int id, boolean isSolid, boolean isEmitter) {
+		this.id = (byte) id;
+
+		if (tiles[id] != null) {
+			throw new RuntimeException("Duplicate tile id on:" + id);
+		}
+
+		this.solid = isSolid;
+		this.emitter = isEmitter;
+
+		tiles[id] = this;
+	}
+
+	public byte getId() {
+		return id;
+	}
+
+	public boolean isSolid() {
+		return solid;
+	}
+
+	public boolean isEmitter() {
+		return emitter;
+	}
+
+	public abstract void render(Screen screen, Level level, int x, int y);
+
+}

commit dc663bbbb29ba2499505b38c0421ccd28bf811dd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu May 9 01:50:40 2013 +0100

    Added entities
    
    added mobs

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index f26363a..7fd0c9b 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 8519a5c..c6b8f05 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -10,10 +10,11 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 
+import com.redomar.game.entities.Player;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
-import com.redomar.game.level.Level;
+import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
 
 public class Game extends Canvas implements Runnable {
@@ -39,7 +40,8 @@ public class Game extends Canvas implements Runnable {
 
 	private Screen screen;
 	public InputHandler input;
-	public Level level;
+	public LevelHandler level;
+	public Player player;
 
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -72,7 +74,9 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
-		level = new Level(64, 64);
+		level = new LevelHandler(64, 64);
+		player = new Player(level, 0, 0, input);
+		level.addEntity(player);
 	}
 
 	public synchronized void start() {
@@ -130,24 +134,9 @@ public class Game extends Canvas implements Runnable {
 
 	}
 
-	private int x = 0, y = 0;
 
 	public void tick() {
 		tickCount++;
-
-		if (input.up.isPressed()) {
-			y--;
-		}
-		if (input.down.isPressed()) {
-			y++;
-		}
-		if (input.left.isPressed()) {
-			x--;
-		}
-		if (input.right.isPressed()) {
-			x++;
-		}
-
 		level.tick();
 	}
 
@@ -158,8 +147,8 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		int xOffset = x - (screen.width / 2);
-		int yOffset = y - (screen.height / 2);
+		int xOffset = player.x - (screen.width / 2);
+		int yOffset = player.y - (screen.height / 2);
 
 		level.renderTiles(screen, xOffset, yOffset);
 
@@ -170,6 +159,8 @@ public class Game extends Canvas implements Runnable {
 			}
 			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour);
 		}
+		
+		level.renderEntities(screen);
 
 		for (int y = 0; y < screen.height; y++) {
 			for (int x = 0; x < screen.width; x++) {
diff --git a/src/com/redomar/game/entities/Entity.java b/src/com/redomar/game/entities/Entity.java
new file mode 100644
index 0000000..380210f
--- /dev/null
+++ b/src/com/redomar/game/entities/Entity.java
@@ -0,0 +1,22 @@
+package com.redomar.game.entities;
+
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public abstract class Entity {
+
+	public int x, y;
+	protected LevelHandler level;
+
+	public Entity(LevelHandler level) {
+		init(level);
+	}
+
+	public final void init(LevelHandler level) {
+		this.level = level;
+	}
+
+	public abstract void tick();
+
+	public abstract void render(Screen screen);
+}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
new file mode 100644
index 0000000..fadc8be
--- /dev/null
+++ b/src/com/redomar/game/entities/Mob.java
@@ -0,0 +1,53 @@
+package com.redomar.game.entities;
+
+import com.redomar.game.level.LevelHandler;
+
+public abstract class Mob extends Entity {
+
+	protected String name;
+	protected int speed;
+	protected int numSteps = 0;
+	protected boolean isMoving;
+	protected int movingDir = 1;
+	protected int scale = 1;
+
+	public Mob(LevelHandler level, String name, int x, int y, int speed) {
+		super(level);
+		this.name = name;
+		this.x = x;
+		this.y = y;
+		this.speed = speed;
+	}
+
+	public void move(int xa, int ya) {
+		if (xa != 0 && ya != 0) {
+			move(xa, 0);
+			move(0, ya);
+			numSteps--;
+			return;
+		}
+		numSteps++;
+		if (!hasCollided(xa, ya)) {
+			if (ya < 0) {
+				movingDir = 0;
+			}
+			if (ya > 0) {
+				movingDir = 1;
+			}
+			if (xa < 0) {
+				movingDir = 2;
+			}
+			if (xa > 0) {
+				movingDir = 3;
+			}
+			x += xa * speed;
+			y += ya * speed;
+		}
+	}
+
+	public abstract boolean hasCollided(int xa, int ya);
+
+	public String getName() {
+		return name;
+	}
+}
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
new file mode 100644
index 0000000..e822156
--- /dev/null
+++ b/src/com/redomar/game/entities/Player.java
@@ -0,0 +1,61 @@
+package com.redomar.game.entities;
+
+import com.redomar.game.InputHandler;
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public class Player extends Mob {
+
+	private InputHandler input;
+	private int colour = Colours.get(-1, 111, 240, 310);
+
+	public Player(LevelHandler level, int x, int y, InputHandler input) {
+		super(level, "Player", x, y, 1);
+		this.input = input;
+	}
+
+	public void tick() {
+		int xa = 0;
+		int ya = 0;
+
+		if (input.up.isPressed()) {
+			ya--;
+		}
+		if (input.down.isPressed()) {
+			ya++;
+		}
+		if (input.left.isPressed()) {
+			xa--;
+		}
+		if (input.right.isPressed()) {
+			xa++;
+		}
+
+		if (xa != 0 || ya != 0) {
+			move(xa, ya);
+			isMoving = true;
+		} else {
+			isMoving = false;
+		}
+	}
+
+	public void render(Screen screen) {
+		int xTile = 0;
+		int yTile = 28;
+
+		int modifier = 8 * scale;
+		int xOffset = x - modifier / 2;
+		int yOffset = y - modifier / 2 - 4;
+
+		screen.render(xOffset, yOffset, xTile + yTile * 32, colour);
+		screen.render(xOffset + modifier, yOffset, (xTile + 1) + yTile * 32, colour);
+		screen.render(xOffset, yOffset + modifier, xTile + (yTile + 1) * 32, colour);
+		screen.render(xOffset + modifier, yOffset + modifier, (xTile + 1) + (yTile + 1) * 32, colour);
+	}
+
+	public boolean hasCollided(int xa, int ya) {
+		return false;
+	}
+
+}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index dc844ad..873b3cf 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -5,6 +5,9 @@ public class Screen {
 	public static final int MAP_WIDTH = 64;
 	public static final int MAP_WIDTH_MASK = MAP_WIDTH - 1;
 
+	public static final byte BIT_MIRROR_X = 0x01;
+	public static final byte BIT_MIRROR_Y = 0x02;
+
 	public int[] pixels;
 
 	public int xOffset = 0;
@@ -24,11 +27,17 @@ public class Screen {
 		pixels = new int[width * height];
 	}
 
-	public void render(int xPos, int yPos, int tile, int colour,
-			boolean mirrorX, boolean mirrorY) {
+	public void render(int xPos, int yPos, int tile, int colour) {
+		render(xPos, yPos, tile, colour, 0x00);
+	}
+	
+	public void render(int xPos, int yPos, int tile, int colour, int mirrorDir) {
 		xPos -= xOffset;
 		yPos -= yOffset;
 
+		boolean mirrorX = (mirrorDir & BIT_MIRROR_X) > 0;
+		boolean mirrorY = (mirrorDir & BIT_MIRROR_Y) > 0;
+
 		int xTile = tile % 32;
 		int yTile = tile / 32;
 		int tileOffset = (xTile << 3) + (yTile << 3) * sheet.width;
diff --git a/src/com/redomar/game/level/Level.java b/src/com/redomar/game/level/Level.java
deleted file mode 100644
index 90a6fde..0000000
--- a/src/com/redomar/game/level/Level.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.redomar.game.level;
-
-import com.redomar.game.gfx.Screen;
-import com.redomar.game.level.tiles.Tile;
-
-public class Level {
-
-	private byte[] tiles;
-	public int width;
-	public int height;
-
-	public Level(int width, int height) {
-		tiles = new byte[width * height];
-		this.width = width;
-		this.height = height;
-		this.generateLevel();
-	}
-
-	private void generateLevel() {
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
-				if (x * y % 10 < 5) {
-					tiles[x + y * width] = Tile.GRASS.getId();
-				} else {
-					tiles[x + y * width] = Tile.STONE.getId();
-				}
-			}
-		}
-	}
-	
-	public void tick(){
-		
-	}
-
-	public void renderTiles(Screen screen, int xOffset, int yOffset) {
-		if (xOffset < 0) {
-			xOffset = 0;
-		}
-		if (xOffset > ((width << 3) - screen.width)) {
-			xOffset = ((width << 3) - screen.width);
-		}
-		if (yOffset < 0) {
-			yOffset = 0;
-		}
-		if (yOffset > ((height << 3) - screen.height)) {
-			yOffset = ((height << 3) - screen.height);
-		}
-
-		screen.setOffset(xOffset, yOffset);
-
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
-				getTile(x, y).render(screen, this, x << 3, y << 3);
-			}
-		}
-	}
-
-	private Tile getTile(int x, int y) {
-		if (x < 0 || x > width || y < 0 || y > height) {
-			return Tile.VOID;
-		}
-		return Tile.tiles[tiles[x + y * width]];
-	}
-}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
new file mode 100644
index 0000000..ff29f3b
--- /dev/null
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -0,0 +1,82 @@
+package com.redomar.game.level;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.redomar.game.entities.Entity;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.tiles.Tile;
+
+public class LevelHandler {
+
+	private byte[] tiles;
+	public int width;
+	public int height;
+	public List<Entity> entities = new ArrayList<Entity>();
+
+	public LevelHandler(int width, int height) {
+		tiles = new byte[width * height];
+		this.width = width;
+		this.height = height;
+		this.generateLevel();
+	}
+
+	private void generateLevel() {
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				if (x * y % 10 < 5) {
+					tiles[x + y * width] = Tile.GRASS.getId();
+				} else {
+					tiles[x + y * width] = Tile.STONE.getId();
+				}
+			}
+		}
+	}
+
+	public void tick() {
+		for (Entity e : entities) {
+			e.tick();
+		}
+	}
+
+	public void renderTiles(Screen screen, int xOffset, int yOffset) {
+		if (xOffset < 0) {
+			xOffset = 0;
+		}
+		if (xOffset > ((width << 3) - screen.width)) {
+			xOffset = ((width << 3) - screen.width);
+		}
+		if (yOffset < 0) {
+			yOffset = 0;
+		}
+		if (yOffset > ((height << 3) - screen.height)) {
+			yOffset = ((height << 3) - screen.height);
+		}
+
+		screen.setOffset(xOffset, yOffset);
+
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				getTile(x, y).render(screen, this, x << 3, y << 3);
+			}
+		}
+	}
+
+	public void renderEntities(Screen screen) {
+		for (Entity e : entities) {
+			e.render(screen);
+		}
+	}
+
+	private Tile getTile(int x, int y) {
+		if (x < 0 || x > width || y < 0 || y > height) {
+			return Tile.VOID;
+		}
+		return Tile.tiles[tiles[x + y * width]];
+	}
+
+	public void addEntity(Entity entity) {
+		this.entities.add(entity);
+	}
+
+}
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
index e99eb50..61147cb 100644
--- a/src/com/redomar/game/level/tiles/BasicTile.java
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -1,7 +1,7 @@
 package com.redomar.game.level.tiles;
 
 import com.redomar.game.gfx.Screen;
-import com.redomar.game.level.Level;
+import com.redomar.game.level.LevelHandler;
 
 public class BasicTile extends Tile {
 
@@ -15,8 +15,8 @@ public class BasicTile extends Tile {
 		this.tileColour = tileColour;
 	}
 
-	public void render(Screen screen, Level level, int x, int y) {
-		screen.render(x, y, tileId, tileColour, false, false);
+	public void render(Screen screen, LevelHandler level, int x, int y) {
+		screen.render(x, y, tileId, tileColour, 0x00);
 	}
 
 }
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index b503da5..5183ab4 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -2,7 +2,7 @@ package com.redomar.game.level.tiles;
 
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
-import com.redomar.game.level.Level;
+import com.redomar.game.level.LevelHandler;
 
 public abstract class Tile {
 
@@ -40,6 +40,6 @@ public abstract class Tile {
 		return emitter;
 	}
 
-	public abstract void render(Screen screen, Level level, int x, int y);
+	public abstract void render(Screen screen, LevelHandler level, int x, int y);
 
 }
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
index b6f7cff..e662446 100644
--- a/src/com/redomar/game/lib/Font.java
+++ b/src/com/redomar/game/lib/Font.java
@@ -14,7 +14,7 @@ public class Font {
 		for (int i = 0; i < msg.length(); i++) {
 			int charIndex = chars.indexOf(msg.charAt(i));
 			if (charIndex >= 0) {
-				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, false, false);
+				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, 0x00);
 			}
 		}
 	}

commit 9d913f80363ebdc6322bcd26eee50d48b4a5a0aa
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu May 9 02:29:26 2013 +0100

    Added scale

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index c6b8f05..efd8a17 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -157,7 +157,7 @@ public class Game extends Canvas implements Runnable {
 			if (x % 10 == 0 && x != 0) {
 				colour = Colours.get(-1, -1, -1, 500);
 			}
-			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour);
+			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour, 1);
 		}
 		
 		level.renderEntities(screen);
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index e822156..3f8f479 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -48,10 +48,10 @@ public class Player extends Mob {
 		int xOffset = x - modifier / 2;
 		int yOffset = y - modifier / 2 - 4;
 
-		screen.render(xOffset, yOffset, xTile + yTile * 32, colour);
-		screen.render(xOffset + modifier, yOffset, (xTile + 1) + yTile * 32, colour);
-		screen.render(xOffset, yOffset + modifier, xTile + (yTile + 1) * 32, colour);
-		screen.render(xOffset + modifier, yOffset + modifier, (xTile + 1) + (yTile + 1) * 32, colour);
+		screen.render(xOffset, yOffset, xTile + yTile * 32, colour, 0x00, scale);
+		screen.render(xOffset + modifier, yOffset, (xTile + 1) + yTile * 32, colour, 0x00, scale);
+		screen.render(xOffset, yOffset + modifier, xTile + (yTile + 1) * 32, colour, 0x00, scale);
+		screen.render(xOffset + modifier, yOffset + modifier, (xTile + 1) + (yTile + 1) * 32, colour, 0x00, scale);
 	}
 
 	public boolean hasCollided(int xa, int ya) {
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index 873b3cf..e4baaaf 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -27,17 +27,15 @@ public class Screen {
 		pixels = new int[width * height];
 	}
 
-	public void render(int xPos, int yPos, int tile, int colour) {
-		render(xPos, yPos, tile, colour, 0x00);
-	}
-	
-	public void render(int xPos, int yPos, int tile, int colour, int mirrorDir) {
+	public void render(int xPos, int yPos, int tile, int colour, int mirrorDir,
+			int scale) {
 		xPos -= xOffset;
 		yPos -= yOffset;
 
 		boolean mirrorX = (mirrorDir & BIT_MIRROR_X) > 0;
 		boolean mirrorY = (mirrorDir & BIT_MIRROR_Y) > 0;
 
+		int scaleMap = scale - 1;
 		int xTile = tile % 32;
 		int yTile = tile / 32;
 		int tileOffset = (xTile << 3) + (yTile << 3) * sheet.width;
@@ -49,9 +47,7 @@ public class Screen {
 				ySheet = 7 - y;
 			}
 
-			if (y + yPos < 0 | y + yPos >= height) {
-				continue;
-			}
+			int yPixel = y + yPos + (y * scaleMap) - ((scaleMap << 3) / 2);
 
 			for (int x = 0; x < 8; x++) {
 				int xSheet = x;
@@ -60,13 +56,28 @@ public class Screen {
 					xSheet = 7 - x;
 				}
 
-				if (x + xPos < 0 | x + xPos >= width) {
-					continue;
-				}
+				int xPixel = x + xPos + (x * scaleMap) - ((scaleMap << 3) / 2);
+
 				int col = (colour >> (sheet.pixels[xSheet + ySheet
 						* sheet.width + tileOffset] * 8)) & 255;
 				if (col < 255) {
-					pixels[(x + xPos) + (y + yPos) * width] = col;
+
+					for (int yScale = 0; yScale < scale; yScale++) {
+
+						if (yPixel + yScale < 0 | yPixel + yScale >= height) {
+							continue;
+						}
+
+						for (int xScale = 0; xScale < scale; xScale++) {
+
+							if (xPixel + xScale < 0 | xPixel + xScale >= width) {
+								continue;
+							}
+							
+							pixels[(xPixel + xScale) + (yPixel + yScale) * width] = col;
+						}
+					}
+
 				}
 			}
 		}
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
index 61147cb..a16bfac 100644
--- a/src/com/redomar/game/level/tiles/BasicTile.java
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -16,7 +16,7 @@ public class BasicTile extends Tile {
 	}
 
 	public void render(Screen screen, LevelHandler level, int x, int y) {
-		screen.render(x, y, tileId, tileColour, 0x00);
+		screen.render(x, y, tileId, tileColour, 0x00, 1);
 	}
 
 }
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
index e662446..bdb1b9c 100644
--- a/src/com/redomar/game/lib/Font.java
+++ b/src/com/redomar/game/lib/Font.java
@@ -8,13 +8,13 @@ public class Font {
 	"ABCDEFGHIJKLMNOPQRSTUVWXYZ      " +
 	"0123456789.,:;'\"!?$%()-=+/      ";
 	
-	public static void render(String msg, Screen screen, int x, int y, int colour){
+	public static void render(String msg, Screen screen, int x, int y, int colour, int scale){
 		msg = msg.toUpperCase();
 
 		for (int i = 0; i < msg.length(); i++) {
 			int charIndex = chars.indexOf(msg.charAt(i));
 			if (charIndex >= 0) {
-				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, 0x00);
+				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, 0x00, scale);
 			}
 		}
 	}

commit fb5eb3aff4a19a8d4b62d83be8b61488bae54ead
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu May 9 20:16:57 2013 +0100

    Added walk animation

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 7fd0c9b..4f1f8ac 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 3f8f479..f76c87b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -43,15 +43,25 @@ public class Player extends Mob {
 	public void render(Screen screen) {
 		int xTile = 0;
 		int yTile = 28;
+		int walkingSpeed = 4;
+		int flipTop = (numSteps >> walkingSpeed) & 1;
+		int flipBottom = (numSteps >> walkingSpeed) & 1;
+
+		if (movingDir == 1) {
+			xTile += 2;
+		} else if (movingDir > 1) {
+			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
+			flipTop = (movingDir - 1) % 2;
+		}
 
 		int modifier = 8 * scale;
 		int xOffset = x - modifier / 2;
 		int yOffset = y - modifier / 2 - 4;
 
-		screen.render(xOffset, yOffset, xTile + yTile * 32, colour, 0x00, scale);
-		screen.render(xOffset + modifier, yOffset, (xTile + 1) + yTile * 32, colour, 0x00, scale);
-		screen.render(xOffset, yOffset + modifier, xTile + (yTile + 1) * 32, colour, 0x00, scale);
-		screen.render(xOffset + modifier, yOffset + modifier, (xTile + 1) + (yTile + 1) * 32, colour, 0x00, scale);
+		screen.render((xOffset + (modifier * flipTop)), yOffset, (xTile + yTile * 32), colour, flipTop, scale);
+		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset, ((xTile + 1) + yTile * 32), colour, flipTop, scale);
+		screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
+		screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
 	}
 
 	public boolean hasCollided(int xa, int ya) {
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index ff29f3b..38acbf4 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -24,7 +24,7 @@ public class LevelHandler {
 	private void generateLevel() {
 		for (int y = 0; y < height; y++) {
 			for (int x = 0; x < width; x++) {
-				if (x * y % 10 < 5) {
+				if ((x * y % 10) == (x * y % 10)) {
 					tiles[x + y * width] = Tile.GRASS.getId();
 				} else {
 					tiles[x + y * width] = Tile.STONE.getId();

commit f85d6763e737259bd8a03326f1e26d0195cf4a8a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu May 9 21:26:10 2013 +0100

    Added player collision

diff --git a/src/com/redomar/game/BasicSolidTile.java b/src/com/redomar/game/BasicSolidTile.java
new file mode 100644
index 0000000..43c0b11
--- /dev/null
+++ b/src/com/redomar/game/BasicSolidTile.java
@@ -0,0 +1,12 @@
+package com.redomar.game;
+
+import com.redomar.game.level.tiles.BasicTile;
+
+public class BasicSolidTile extends BasicTile{
+
+	public BasicSolidTile(int id, int x, int y, int tileColour) {
+		super(id, x, y, tileColour);
+		this.solid = true;
+	}
+
+}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index fadc8be..12a2e94 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -1,6 +1,7 @@
 package com.redomar.game.entities;
 
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.level.tiles.Tile;
 
 public abstract class Mob extends Entity {
 
@@ -47,6 +48,22 @@ public abstract class Mob extends Entity {
 
 	public abstract boolean hasCollided(int xa, int ya);
 
+	protected boolean isSolid(int xa, int ya, int x, int y) {
+		
+		if(level == null){
+			return false;
+		}
+		
+		Tile lastTile = level.getTile((this.x + x) >> 3, (this.y + y) >> 3);
+		Tile newtTile = level.getTile((this.x + x + xa) >> 3, (this.y + y + ya) >> 3);
+		
+		if(!lastTile.equals(newtTile) && newtTile.isSolid()){
+			return true;
+		}
+
+		return false;
+	}
+
 	public String getName() {
 		return name;
 	}
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index f76c87b..99c5058 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -65,6 +65,35 @@ public class Player extends Mob {
 	}
 
 	public boolean hasCollided(int xa, int ya) {
+		int xMin = 0;
+		int xMax = 7;
+		int yMin = 3;
+		int yMax = 7;
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMin)) {
+				return true;
+			}
+		}
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMax)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMin, y)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMax, y)) {
+				return true;
+			}
+		}
+
 		return false;
 	}
 
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 38acbf4..6a2d60b 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -24,7 +24,7 @@ public class LevelHandler {
 	private void generateLevel() {
 		for (int y = 0; y < height; y++) {
 			for (int x = 0; x < width; x++) {
-				if ((x * y % 10) == (x * y % 10)) {
+				if (x * y % 10 < 7) {
 					tiles[x + y * width] = Tile.GRASS.getId();
 				} else {
 					tiles[x + y * width] = Tile.STONE.getId();
@@ -68,8 +68,8 @@ public class LevelHandler {
 		}
 	}
 
-	private Tile getTile(int x, int y) {
-		if (x < 0 || x > width || y < 0 || y > height) {
+	public Tile getTile(int x, int y) {
+		if (0 > x || x >= width || 0 > y || y >= height) {
 			return Tile.VOID;
 		}
 		return Tile.tiles[tiles[x + y * width]];
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 5183ab4..78fd34a 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -1,5 +1,6 @@
 package com.redomar.game.level.tiles;
 
+import com.redomar.game.BasicSolidTile;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -7,8 +8,8 @@ import com.redomar.game.level.LevelHandler;
 public abstract class Tile {
 
 	public static final Tile[] tiles = new Tile[256];
-	public static final Tile VOID = new BasicTile(0, 0, 0, Colours.get(0, -1, -1, -1));
-	public static final Tile STONE = new BasicTile(1, 1, 0, Colours.get(-1, 333, -1, -1));
+	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1));
+	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 333, -1, -1));
 	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1));
 
 	protected byte id;

commit c39565f881b96abd9df9b0c1a82338debf745ffc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu May 9 23:36:22 2013 +0100

    Added level loader

diff --git a/res/levels/small_level.png b/res/levels/small_level.png
new file mode 100644
index 0000000..9a3f3b7
Binary files /dev/null and b/res/levels/small_level.png differ
diff --git a/src/com/redomar/game/BasicSolidTile.java b/src/com/redomar/game/BasicSolidTile.java
index 43c0b11..e0be006 100644
--- a/src/com/redomar/game/BasicSolidTile.java
+++ b/src/com/redomar/game/BasicSolidTile.java
@@ -4,8 +4,8 @@ import com.redomar.game.level.tiles.BasicTile;
 
 public class BasicSolidTile extends BasicTile{
 
-	public BasicSolidTile(int id, int x, int y, int tileColour) {
-		super(id, x, y, tileColour);
+	public BasicSolidTile(int id, int x, int y, int tileColour, int levelColour) {
+		super(id, x, y, tileColour, levelColour);
 		this.solid = true;
 	}
 
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index efd8a17..fc8c6d2 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -74,7 +74,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
-		level = new LevelHandler(64, 64);
+		level = new LevelHandler("/levels/small_level.png");
 		player = new Player(level, 0, 0, input);
 		level.addEntity(player);
 	}
@@ -152,6 +152,7 @@ public class Game extends Canvas implements Runnable {
 
 		level.renderTiles(screen, xOffset, yOffset);
 
+		/*
 		for (int x = 0; x < level.width; x++) {
 			int colour = Colours.get(-1, -1, -1, 000);
 			if (x % 10 == 0 && x != 0) {
@@ -159,6 +160,7 @@ public class Game extends Canvas implements Runnable {
 			}
 			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour, 1);
 		}
+		*/
 		
 		level.renderEntities(screen);
 
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 6a2d60b..67fda47 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -1,7 +1,13 @@
 package com.redomar.game.level;
 
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.logging.Level;
+
+import javax.imageio.ImageIO;
 
 import com.redomar.game.entities.Entity;
 import com.redomar.game.gfx.Screen;
@@ -13,12 +19,59 @@ public class LevelHandler {
 	public int width;
 	public int height;
 	public List<Entity> entities = new ArrayList<Entity>();
+	private String imagePath;
+	private BufferedImage image;
+
+	public LevelHandler(String imagePath) {
+
+		if (imagePath != null) {
+			this.imagePath = imagePath;
+			this.loadLevelFromFile();
+		} else {
+			tiles = new byte[width * height];
+			this.width = 64;
+			this.height = 64;
+			this.generateLevel();
+		}
+	}
+
+	private void loadLevelFromFile() {
+		try {
+			this.image = ImageIO.read(Level.class.getResource(this.imagePath));
+			this.width = image.getWidth();
+			this.height = image.getHeight();
+			tiles = new byte[width * height];
+			this.loadTiles();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
 
-	public LevelHandler(int width, int height) {
-		tiles = new byte[width * height];
-		this.width = width;
-		this.height = height;
-		this.generateLevel();
+	private void loadTiles() {
+		int[] tileColours = this.image.getRGB(0, 0, width, height, null, 0, width);
+		for (int y = 0; y < height; y++) {
+			for (int x = 0; x < width; x++) {
+				tileCheck: for (Tile t : Tile.tiles) {
+					if(t != null && t.getLevelColour() == tileColours[x+y*width]){
+						this.tiles[x+y*width] = t.getId();
+						break tileCheck;
+					}
+				}
+			}
+		}
+	}
+	
+	private void saveLevelToFile(){
+		try {
+			ImageIO.write(image, "png", new File(Level.class.getResource(this.imagePath).getFile()));
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	private void alterTile(int x, int y, Tile newTile){
+		this.tiles[x+y*width] = newTile.getId();
+		image.setRGB(x, y, newTile.getLevelColour());
 	}
 
 	private void generateLevel() {
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
index a16bfac..c3e9d8f 100644
--- a/src/com/redomar/game/level/tiles/BasicTile.java
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -8,8 +8,8 @@ public class BasicTile extends Tile {
 	protected int tileId;
 	protected int tileColour;
 
-	public BasicTile(int id, int x, int y, int tileColour) {
-		super(id, false, false);
+	public BasicTile(int id, int x, int y, int tileColour, int levelColour) {
+		super(id, false, false, levelColour);
 		
 		this.tileId = x + y;
 		this.tileColour = tileColour;
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 78fd34a..35d5d89 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -8,15 +8,16 @@ import com.redomar.game.level.LevelHandler;
 public abstract class Tile {
 
 	public static final Tile[] tiles = new Tile[256];
-	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1));
-	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 333, -1, -1));
-	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1));
+	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1), 0xFF000000);
+	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 333, -1, -1), 0xFF555555);
+	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
 
 	protected byte id;
 	protected boolean solid;
 	protected boolean emitter;
+	private int levelColour;
 
-	public Tile(int id, boolean isSolid, boolean isEmitter) {
+	public Tile(int id, boolean isSolid, boolean isEmitter, int colour) {
 		this.id = (byte) id;
 
 		if (tiles[id] != null) {
@@ -25,6 +26,7 @@ public abstract class Tile {
 
 		this.solid = isSolid;
 		this.emitter = isEmitter;
+		this.levelColour = colour;
 
 		tiles[id] = this;
 	}
@@ -43,4 +45,8 @@ public abstract class Tile {
 
 	public abstract void render(Screen screen, LevelHandler level, int x, int y);
 
+	public int getLevelColour() {
+		return levelColour;
+	}
+
 }

commit 4e6743fc7e286a49a8e6d85c9ffe9218d67b9638
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 01:52:44 2013 +0100

    Added tile animation
    
    added water tile animation

diff --git a/res/levels/water_level.png b/res/levels/water_level.png
new file mode 100644
index 0000000..defb121
Binary files /dev/null and b/res/levels/water_level.png differ
diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 4f1f8ac..3b08069 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/BasicSolidTile.java b/src/com/redomar/game/BasicSolidTile.java
deleted file mode 100644
index e0be006..0000000
--- a/src/com/redomar/game/BasicSolidTile.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.redomar.game;
-
-import com.redomar.game.level.tiles.BasicTile;
-
-public class BasicSolidTile extends BasicTile{
-
-	public BasicSolidTile(int id, int x, int y, int tileColour, int levelColour) {
-		super(id, x, y, tileColour, levelColour);
-		this.solid = true;
-	}
-
-}
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index fc8c6d2..1871579 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -11,11 +11,9 @@ import java.awt.image.DataBufferInt;
 import javax.swing.JFrame;
 
 import com.redomar.game.entities.Player;
-import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
-import com.redomar.game.lib.Font;
 
 public class Game extends Canvas implements Runnable {
 
@@ -74,7 +72,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
-		level = new LevelHandler("/levels/small_level.png");
+		level = new LevelHandler("/levels/water_level.png");
 		player = new Player(level, 0, 0, input);
 		level.addEntity(player);
 	}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 67fda47..7efffb4 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -61,6 +61,7 @@ public class LevelHandler {
 		}
 	}
 	
+	@SuppressWarnings("unused")
 	private void saveLevelToFile(){
 		try {
 			ImageIO.write(image, "png", new File(Level.class.getResource(this.imagePath).getFile()));
@@ -69,6 +70,7 @@ public class LevelHandler {
 		}
 	}
 	
+	@SuppressWarnings("unused")
 	private void alterTile(int x, int y, Tile newTile){
 		this.tiles[x+y*width] = newTile.getId();
 		image.setRGB(x, y, newTile.getLevelColour());
@@ -90,6 +92,14 @@ public class LevelHandler {
 		for (Entity e : entities) {
 			e.tick();
 		}
+
+		for (Tile t : Tile.tiles) {
+			if (t == null) {
+				break;
+			}
+			t.tick();
+		}
+
 	}
 
 	public void renderTiles(Screen screen, int xOffset, int yOffset) {
diff --git a/src/com/redomar/game/level/tiles/AnimatedTile.java b/src/com/redomar/game/level/tiles/AnimatedTile.java
new file mode 100644
index 0000000..7aaa3f9
--- /dev/null
+++ b/src/com/redomar/game/level/tiles/AnimatedTile.java
@@ -0,0 +1,25 @@
+package com.redomar.game.level.tiles;
+
+public class AnimatedTile extends BasicTile {
+
+	private int[][] animationTileCoords;
+	private int currentAnimationIndex;
+	private long lastIterationTime;
+	private int animationSwitchDelay;
+
+	public AnimatedTile(int id, int[][] animationCoords, int tileColour, int levelColour, int animationSwitchDelay) {
+        super(id, animationCoords[0][0], animationCoords[0][1], tileColour, levelColour);
+        this.animationTileCoords = animationCoords;
+        this.currentAnimationIndex = 0;
+        this.lastIterationTime = System.currentTimeMillis();
+        this.animationSwitchDelay = animationSwitchDelay;
+    }
+
+    public void tick() {
+        if ((System.currentTimeMillis() - lastIterationTime) >= (animationSwitchDelay)) {
+            lastIterationTime = System.currentTimeMillis();
+            currentAnimationIndex = (currentAnimationIndex + 1) % animationTileCoords.length;
+            this.tileId = (animationTileCoords[currentAnimationIndex][0] + (animationTileCoords[currentAnimationIndex][1] * 32));
+        }
+    }
+}
diff --git a/src/com/redomar/game/level/tiles/BasicSolidTile.java b/src/com/redomar/game/level/tiles/BasicSolidTile.java
new file mode 100644
index 0000000..cf35257
--- /dev/null
+++ b/src/com/redomar/game/level/tiles/BasicSolidTile.java
@@ -0,0 +1,11 @@
+package com.redomar.game.level.tiles;
+
+
+public class BasicSolidTile extends BasicTile{
+
+	public BasicSolidTile(int id, int x, int y, int tileColour, int levelColour) {
+		super(id, x, y, tileColour, levelColour);
+		this.solid = true;
+	}
+
+}
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
index c3e9d8f..0464d4c 100644
--- a/src/com/redomar/game/level/tiles/BasicTile.java
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -10,13 +10,16 @@ public class BasicTile extends Tile {
 
 	public BasicTile(int id, int x, int y, int tileColour, int levelColour) {
 		super(id, false, false, levelColour);
-		
-		this.tileId = x + y;
+
+		this.tileId = x + y * 32;
 		this.tileColour = tileColour;
 	}
 
+	public void tick() {
+	}
+
 	public void render(Screen screen, LevelHandler level, int x, int y) {
 		screen.render(x, y, tileId, tileColour, 0x00, 1);
 	}
-
+	
 }
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 35d5d89..ae24a51 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -1,6 +1,5 @@
 package com.redomar.game.level.tiles;
 
-import com.redomar.game.BasicSolidTile;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -11,6 +10,7 @@ public abstract class Tile {
 	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1), 0xFF000000);
 	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 333, -1, -1), 0xFF555555);
 	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
+	public static final Tile WATER = new AnimatedTile(3, new int[][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115, -1), 0xFF0000FF, 1000);
 
 	protected byte id;
 	protected boolean solid;
@@ -43,6 +43,8 @@ public abstract class Tile {
 		return emitter;
 	}
 
+	public abstract void tick();
+	
 	public abstract void render(Screen screen, LevelHandler level, int x, int y);
 
 	public int getLevelColour() {

commit 89c365a83d5fdeaf4f3da6c31d4b0b8df684f9de
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 02:46:01 2013 +0100

    Added swimming animation

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 3b08069..4be8cc6 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 12a2e94..ec5967c 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -11,6 +11,7 @@ public abstract class Mob extends Entity {
 	protected boolean isMoving;
 	protected int movingDir = 1;
 	protected int scale = 1;
+	protected boolean isSwimming = false;
 
 	public Mob(LevelHandler level, String name, int x, int y, int speed) {
 		super(level);
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 99c5058..0ba00d9 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -9,6 +9,7 @@ public class Player extends Mob {
 
 	private InputHandler input;
 	private int colour = Colours.get(-1, 111, 240, 310);
+	private int tickCount = 0;
 
 	public Player(LevelHandler level, int x, int y, InputHandler input) {
 		super(level, "Player", x, y, 1);
@@ -38,6 +39,16 @@ public class Player extends Mob {
 		} else {
 			isMoving = false;
 		}
+		
+		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 3) {
+			isSwimming = true;
+		}
+
+		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 3) {
+			isSwimming = false;
+		}
+		
+		tickCount++;
 	}
 
 	public void render(Screen screen) {
@@ -57,11 +68,33 @@ public class Player extends Mob {
 		int modifier = 8 * scale;
 		int xOffset = x - modifier / 2;
 		int yOffset = y - modifier / 2 - 4;
+		
+		if(isSwimming){
+			int waterColour = 0;
+			yOffset += 4;
+			
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 255, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 225, 115, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 115, -1, 225);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 225, 115);
+			}
+			
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour, 0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour, 0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset, (xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset, ((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
-		screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
+		if(!isSwimming){
+			screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
+			screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
+		}
 	}
 
 	public boolean hasCollided(int xa, int ya) {

commit 05f1236d8bd1fa1198f2cea4535acf9ff8e93e74
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 03:12:54 2013 +0100

    Optimized rendering

diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 7efffb4..3c03275 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -118,8 +118,8 @@ public class LevelHandler {
 
 		screen.setOffset(xOffset, yOffset);
 
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
+		for (int y = (yOffset >> 3); y < (yOffset + screen.height >> 3) + 1; y++) {
+			for (int x = (xOffset >> 3); x < (xOffset + screen.width >> 3) + 1; x++) {
 				getTile(x, y).render(screen, this, x << 3, y << 3);
 			}
 		}

commit 30139c0e78239f5f01e97b40512c57e1c159c002
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 03:24:41 2013 +0100

    Added name display

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1871579..7ec2cb6 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -9,6 +9,7 @@ import java.awt.image.BufferedImage;
 import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
+import javax.swing.JOptionPane;
 
 import com.redomar.game.entities.Player;
 import com.redomar.game.gfx.Screen;
@@ -73,7 +74,7 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		level = new LevelHandler("/levels/water_level.png");
-		player = new Player(level, 0, 0, input);
+		player = new Player(level, 0, 0, input, JOptionPane.showInputDialog(this, "Enter a name"));
 		level.addEntity(player);
 	}
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 0ba00d9..aeddf4b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -4,16 +4,19 @@ import com.redomar.game.InputHandler;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.lib.Font;
 
 public class Player extends Mob {
 
 	private InputHandler input;
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
+	private String userName;
 
-	public Player(LevelHandler level, int x, int y, InputHandler input) {
+	public Player(LevelHandler level, int x, int y, InputHandler input, String userName) {
 		super(level, "Player", x, y, 1);
 		this.input = input;
+		this.userName = userName;
 	}
 
 	public void tick() {
@@ -95,6 +98,10 @@ public class Player extends Mob {
 			screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
 			screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
 		}
+		
+		if(userName != null){
+			Font.render(userName, screen, xOffset - ((userName.length() - 1) / 2 * 8), yOffset - 10, Colours.get(-1, -1, -1, 555), 1);
+		}
 	}
 
 	public boolean hasCollided(int xa, int ya) {

commit 83aa3d4e1cc20d055fe086768088a138838c0acf
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 14:47:25 2013 +0100

    Started Custom world
    
    changed couple of tile id's around
    added new chiseled stone tile

diff --git a/res/levels/castle_level.png b/res/levels/castle_level.png
new file mode 100644
index 0000000..c247f2c
Binary files /dev/null and b/res/levels/castle_level.png differ
diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 4be8cc6..e7ef853 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1871579..4cd8958 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -72,7 +72,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
-		level = new LevelHandler("/levels/water_level.png");
+		level = new LevelHandler("/levels/castle_level.png");
 		player = new Player(level, 0, 0, input);
 		level.addEntity(player);
 	}
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 0ba00d9..18e216b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -40,11 +40,11 @@ public class Player extends Mob {
 			isMoving = false;
 		}
 		
-		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 3) {
+		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 4) {
 			isSwimming = true;
 		}
 
-		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 3) {
+		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
 			isSwimming = false;
 		}
 		
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index ae24a51..b4a39e6 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -8,9 +8,10 @@ public abstract class Tile {
 
 	public static final Tile[] tiles = new Tile[256];
 	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1), 0xFF000000);
-	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 333, -1, -1), 0xFF555555);
-	public static final Tile GRASS = new BasicTile(2, 2, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
-	public static final Tile WATER = new AnimatedTile(3, new int[][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115, -1), 0xFF0000FF, 1000);
+	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
+	public static final Tile CHISELED_STONE = new BasicTile(2, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
+	public static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
+	public static final Tile WATER = new AnimatedTile(4, new int[][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115, -1), 0xFF0000FF, 1000);
 
 	protected byte id;
 	protected boolean solid;

commit c377219a7ff3edd1716cea80de7c7e71212ec8db
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 10 23:36:51 2013 +0100

    Changed player starting position
    
    removed orange spot when swimming

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4cd8958..e7b7a52 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -73,7 +73,7 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		level = new LevelHandler("/levels/castle_level.png");
-		player = new Player(level, 0, 0, input);
+		player = new Player(level, 30*8, 5*8, input);
 		level.addEntity(player);
 	}
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 18e216b..e1eb437 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -73,6 +73,8 @@ public class Player extends Mob {
 			int waterColour = 0;
 			yOffset += 4;
 			
+			colour = Colours.get(-1, 111, -1, 310);
+			
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, 255, -1);
 			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
@@ -94,6 +96,7 @@ public class Player extends Mob {
 		if(!isSwimming){
 			screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
 			screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
+			colour = Colours.get(-1, 111, 240, 310);;
 		}
 	}
 

commit 0e87b1624a12c7773aa2b584043c56e28eea5c49
Merge: 30139c0 83aa3d4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 11 13:30:38 2013 +0100

    Merge commit '83aa3d4e1cc20d055fe086768088a138838c0acf' into Devaside
    
    Conflicts:
    	src/com/redomar/game/Game.java

commit 7170add6e92cc2ade7300637709d9ec01d045536
Merge: 0e87b16 c377219
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 11 13:35:16 2013 +0100

    Merge commit 'c377219a7ff3edd1716cea80de7c7e71212ec8db' into Devaside
    
    Conflicts:
    	src/com/redomar/game/Game.java

commit e20e98fc1fb092908bfda9461f7baae60f5feb55
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 13 00:13:16 2013 +0100

    Multiplayer: Setting up UDP
    
    ping pong

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 7ec2cb6..2880bea 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -15,6 +15,8 @@ import com.redomar.game.entities.Player;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.net.GameClient;
+import com.redomar.game.net.GameServer;
 
 public class Game extends Canvas implements Runnable {
 
@@ -41,6 +43,9 @@ public class Game extends Canvas implements Runnable {
 	public InputHandler input;
 	public LevelHandler level;
 	public Player player;
+	
+	private GameClient socketClient;
+	private GameServer socketServer;
 
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -76,11 +81,20 @@ public class Game extends Canvas implements Runnable {
 		level = new LevelHandler("/levels/water_level.png");
 		player = new Player(level, 0, 0, input, JOptionPane.showInputDialog(this, "Enter a name"));
 		level.addEntity(player);
+		socketClient.sendData("ping".getBytes());
 	}
 
 	public synchronized void start() {
 		running = true;
 		new Thread(this).start();
+		
+		if(JOptionPane.showConfirmDialog(this, "Do you want to be the HOST?") == 0){
+			socketServer = new GameServer(this);
+			socketServer.start();
+		}
+		
+		socketClient = new GameClient(this, "localhost");
+		socketClient.start();
 	}
 
 	public synchronized void stop() {
@@ -125,7 +139,7 @@ public class Game extends Canvas implements Runnable {
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				System.out.println("Frames: " + frames + " Ticks: " + ticks);
+				frame.setTitle("Frames: " + frames + " Ticks: " + ticks);
 				frames = 0;
 				ticks = 0;
 			}
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index 6a70adf..e85ed8e 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -37,7 +37,7 @@ public class SpriteSheet {
 		}
 
 		for (int i = 0; i < 8; i++) {
-			System.out.println(pixels[i]);
+			//System.out.println(pixels[i]);
 		}
 	}
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
new file mode 100644
index 0000000..f6fe9b8
--- /dev/null
+++ b/src/com/redomar/game/net/GameClient.java
@@ -0,0 +1,48 @@
+package com.redomar.game.net;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.net.SocketException;
+import java.net.UnknownHostException;
+
+import com.redomar.game.Game;
+
+public class GameClient extends Thread{
+	
+	private InetAddress ipAddress;
+	private DatagramSocket socket;
+	public GameClient(Game game, String ipAddress){
+		try {
+			this.socket = new DatagramSocket();
+			this.ipAddress = InetAddress.getByName(ipAddress);
+		} catch (SocketException e) {
+			e.printStackTrace();
+		} catch (UnknownHostException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	public void run(){
+		while (true){
+			byte[] data = new byte[1024];
+			DatagramPacket packet = new DatagramPacket(data, data.length);
+			try {
+				socket.receive(packet);
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+			System.out.println("SERVER > "+new String(packet.getData()));
+		}
+	}
+
+	public void sendData(byte[] data){
+		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, 1331);
+		try {
+			socket.send(packet);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+}
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
new file mode 100644
index 0000000..3c02ce9
--- /dev/null
+++ b/src/com/redomar/game/net/GameServer.java
@@ -0,0 +1,47 @@
+package com.redomar.game.net;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.net.SocketException;
+
+import com.redomar.game.Game;
+
+public class GameServer extends Thread{
+
+	private DatagramSocket socket;
+	public GameServer(Game game){
+		try {
+			this.socket = new DatagramSocket(1331);
+		} catch (SocketException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	public void run(){
+		while (true){
+			byte[] data = new byte[1024];
+			DatagramPacket packet = new DatagramPacket(data, data.length);
+			try {
+				socket.receive(packet);
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+			String message = new String(packet.getData());
+			System.out.println("CLIENT ["+packet.getAddress().getHostAddress()+":"+packet.getPort()+"] "+message);
+			if(message.trim().equalsIgnoreCase("ping")){
+				sendData("pong".getBytes(), packet.getAddress(), packet.getPort());
+			}
+		}
+	}
+	
+	public void sendData(byte[] data, InetAddress ipAddress, int port){
+		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
+		try {
+			this.socket.send(packet);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+}

commit e5cb6c7cfe02d1de60de291836efc49d443da6bb
Merge: 7170add e20e98f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 13 00:14:56 2013 +0100

    Merge commit 'e20e98fc1fb092908bfda9461f7baae60f5feb55' into Devaside

commit 62c5ef0a690780cbf923259887a34c1dcba8d1d3
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 13 02:39:59 2013 +0100

    Multiplayer: Login packet
    
    Buggy

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 2880bea..36e2e93 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -17,6 +17,7 @@ import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
+import com.redomar.game.net.packets.Packet00Login;
 
 public class Game extends Canvas implements Runnable {
 
@@ -79,9 +80,12 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		level = new LevelHandler("/levels/water_level.png");
-		player = new Player(level, 0, 0, input, JOptionPane.showInputDialog(this, "Enter a name"));
-		level.addEntity(player);
-		socketClient.sendData("ping".getBytes());
+		// player = new Player(level, 0, 0, input,
+		// JOptionPane.showInputDialog(this, "Enter a name"));
+		// level.addEntity(player);
+		// socketClient.sendData("ping".getBytes());
+		Packet00Login loginPacket = new Packet00Login(JOptionPane.showInputDialog(this, "Please enter a username"));
+		loginPacket.writeData(socketClient);
 	}
 
 	public synchronized void start() {
diff --git a/src/com/redomar/game/entities/PlayerMP.java b/src/com/redomar/game/entities/PlayerMP.java
new file mode 100644
index 0000000..71241c4
--- /dev/null
+++ b/src/com/redomar/game/entities/PlayerMP.java
@@ -0,0 +1,30 @@
+package com.redomar.game.entities;
+
+import java.net.InetAddress;
+
+import com.redomar.game.InputHandler;
+import com.redomar.game.level.LevelHandler;
+
+public class PlayerMP extends Player{
+	
+	public InetAddress ipAddess;
+	public int port;
+
+	public PlayerMP(LevelHandler level, int x, int y, InputHandler input, String userName, InetAddress ipAddress, int port) {
+		super(level, x, y, input, userName);
+		this.ipAddess = ipAddress;
+		this.port = port;
+	}
+	
+	public PlayerMP(LevelHandler level, int x, int y, String userName, InetAddress ipAddress, int port) {
+		super(level, x, y, null, userName);
+		this.ipAddess = ipAddress;
+		this.port = port;
+	}
+	
+	@Override
+	public void tick(){
+		super.tick();
+	}
+
+}
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 3c02ce9..99a1427 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -5,12 +5,21 @@ import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 import java.net.SocketException;
+import java.util.ArrayList;
+import java.util.List;
 
 import com.redomar.game.Game;
+import com.redomar.game.entities.PlayerMP;
+import com.redomar.game.net.packets.Packet;
+import com.redomar.game.net.packets.Packet00Login;
+import com.redomar.game.net.packets.Packet.PacketTypes;
 
 public class GameServer extends Thread{
 
 	private DatagramSocket socket;
+	private Game game;
+	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
+	
 	public GameServer(Game game){
 		try {
 			this.socket = new DatagramSocket(1331);
@@ -28,14 +37,45 @@ public class GameServer extends Thread{
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-			String message = new String(packet.getData());
-			System.out.println("CLIENT ["+packet.getAddress().getHostAddress()+":"+packet.getPort()+"] "+message);
-			if(message.trim().equalsIgnoreCase("ping")){
-				sendData("pong".getBytes(), packet.getAddress(), packet.getPort());
+			
+			parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
+			
+			// String message = new String(packet.getData());
+			// System.out.println("CLIENT ["+packet.getAddress().getHostAddress()+":"+packet.getPort()+"] "+message);
+			// if(message.trim().equalsIgnoreCase("ping")){
+			// sendData("pong".getBytes(), packet.getAddress(),
+			// packet.getPort());
+			// }
+		}
+	}
+
+	private void parsePacket(byte[] data, InetAddress address, int port) {
+		String message = new String(data).trim();
+		PacketTypes type = Packet.lookupPacket(message.substring(0, 2));
+		switch (type) {
+		default:
+		case INVALID:
+			break;
+		case LOGIN:
+			Packet00Login packet = new Packet00Login(data);
+			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + packet.getUsername() + " has connected...");
+			PlayerMP player = null;
+			if(address.getHostAddress().equalsIgnoreCase("127.0.0.1")){
+				player = new PlayerMP(game.level, 10, 10, game.input, packet.getUsername(), address, port);				
+			} else {
+				player = new PlayerMP(game.level, 10, 10, packet.getUsername(), address, port);
+			}
+			if(player != null){
+				this.connectedPlayers.add(player);
+				game.level.addEntity(player);
+				game.player = player;
 			}
+			break;
+		case DISCONNECT:
+			break;
 		}
 	}
-	
+
 	public void sendData(byte[] data, InetAddress ipAddress, int port){
 		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
 		try {
@@ -44,4 +84,10 @@ public class GameServer extends Thread{
 			e.printStackTrace();
 		}
 	}
+
+	public void sendDataToAllClients(byte[] data) {
+		for (PlayerMP p : connectedPlayers) {
+			sendData(data, p.ipAddess, p.port);
+		}
+	}
 }
diff --git a/src/com/redomar/game/net/packets/Packet.java b/src/com/redomar/game/net/packets/Packet.java
new file mode 100644
index 0000000..b41732e
--- /dev/null
+++ b/src/com/redomar/game/net/packets/Packet.java
@@ -0,0 +1,56 @@
+package com.redomar.game.net.packets;
+
+import com.redomar.game.net.GameClient;
+import com.redomar.game.net.GameServer;
+
+public abstract class Packet {
+
+	public static enum PacketTypes {
+		INVALID(-1), LOGIN(00), DISCONNECT(01);
+
+		private int packetId;
+
+		private PacketTypes(int packetId) {
+			this.packetId = packetId;
+		}
+
+		public int getId() {
+			return packetId;
+		}
+	}
+
+	public byte packetId;
+
+	public Packet(int packetId) {
+		this.packetId = (byte) packetId;
+	}
+	
+	public abstract byte[] getData();
+
+	public abstract void writeData(GameClient client);
+
+	public abstract void writeData(GameServer server);
+
+	
+	public String readData(byte[] data) {
+		String message = new String(data).trim();
+		return message.substring(2);
+	}
+
+	public static PacketTypes lookupPacket(String packetId){
+		try{
+			return lookupPacket(Integer.parseInt(packetId));
+		} catch (NumberFormatException e){
+			return PacketTypes.INVALID;
+		}
+	}
+	
+	public static PacketTypes lookupPacket(int id) {
+		for (PacketTypes p : PacketTypes.values()) {
+			if (p.getId() == id) {
+				return p;
+			}
+		}
+		return PacketTypes.INVALID;
+	}
+}
diff --git a/src/com/redomar/game/net/packets/Packet00Login.java b/src/com/redomar/game/net/packets/Packet00Login.java
new file mode 100644
index 0000000..7bddea8
--- /dev/null
+++ b/src/com/redomar/game/net/packets/Packet00Login.java
@@ -0,0 +1,38 @@
+package com.redomar.game.net.packets;
+
+import com.redomar.game.net.GameClient;
+import com.redomar.game.net.GameServer;
+
+public class Packet00Login extends Packet{
+
+	private String username;
+	
+	public Packet00Login(byte[] data) {
+		super(00);
+		this.username = readData(data);
+	}
+
+	public Packet00Login(String username) {
+		super(00);
+		this.username = username;
+	}
+	
+	@Override
+	public byte[] getData() {
+		return ("00"+this.username).getBytes();
+	}
+	
+	@Override
+	public void writeData(GameClient client) {
+		client.sendData(getData());
+	}
+
+	@Override
+	public void writeData(GameServer server) {
+		server.sendDataToAllClients(getData());
+	}
+
+	public String getUsername(){
+		return username;
+	}
+}

commit b4c05a0b457b1ca829d9634dc1b31c25ac6b256b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 14:59:46 2013 +0100

    Multiplayer: Removed a bug
    
    game wouldn't load

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 36e2e93..0e12261 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -97,7 +97,7 @@ public class Game extends Canvas implements Runnable {
 			socketServer.start();
 		}
 		
-		socketClient = new GameClient(this, "localhost");
+		socketClient = new GameClient(this, "127.0.0.1");
 		socketClient.start();
 	}
 
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 99a1427..93a30bb 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -21,6 +21,7 @@ public class GameServer extends Thread{
 	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
 	
 	public GameServer(Game game){
+		this.game = game;
 		try {
 			this.socket = new DatagramSocket(1331);
 		} catch (SocketException e) {

commit 6d36472070e6241755481d905428c26b7d513ed3
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 16:18:30 2013 +0100

    Multiplayer: Updated the login packet

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 0e12261..82a20be 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -12,6 +12,7 @@ import javax.swing.JFrame;
 import javax.swing.JOptionPane;
 
 import com.redomar.game.entities.Player;
+import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
@@ -44,7 +45,7 @@ public class Game extends Canvas implements Runnable {
 	public InputHandler input;
 	public LevelHandler level;
 	public Player player;
-	
+
 	private GameClient socketClient;
 	private GameServer socketServer;
 
@@ -80,23 +81,30 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		level = new LevelHandler("/levels/water_level.png");
-		// player = new Player(level, 0, 0, input,
-		// JOptionPane.showInputDialog(this, "Enter a name"));
-		// level.addEntity(player);
+		
+		player = new PlayerMP(level, 100, 100, input,
+				JOptionPane.showInputDialog(this, "Enter a name"), null, -1);
+		
+		level.addEntity(player);		
+		Packet00Login loginPacket = new Packet00Login(player.getUsername());
+		
+		if (socketServer != null) {
+			socketServer.addConnection((PlayerMP) player, loginPacket);
+		}
+		
 		// socketClient.sendData("ping".getBytes());
-		Packet00Login loginPacket = new Packet00Login(JOptionPane.showInputDialog(this, "Please enter a username"));
 		loginPacket.writeData(socketClient);
 	}
 
 	public synchronized void start() {
 		running = true;
 		new Thread(this).start();
-		
-		if(JOptionPane.showConfirmDialog(this, "Do you want to be the HOST?") == 0){
+
+		if (JOptionPane.showConfirmDialog(this, "Do you want to be the HOST?") == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
 		}
-		
+
 		socketClient = new GameClient(this, "127.0.0.1");
 		socketClient.start();
 	}
@@ -151,7 +159,6 @@ public class Game extends Canvas implements Runnable {
 
 	}
 
-
 	public void tick() {
 		tickCount++;
 		level.tick();
@@ -170,15 +177,12 @@ public class Game extends Canvas implements Runnable {
 		level.renderTiles(screen, xOffset, yOffset);
 
 		/*
-		for (int x = 0; x < level.width; x++) {
-			int colour = Colours.get(-1, -1, -1, 000);
-			if (x % 10 == 0 && x != 0) {
-				colour = Colours.get(-1, -1, -1, 500);
-			}
-			Font.render((x % 10) + "", screen, 0 + (x * 8), 0, colour, 1);
-		}
-		*/
-		
+		 * for (int x = 0; x < level.width; x++) { int colour = Colours.get(-1,
+		 * -1, -1, 000); if (x % 10 == 0 && x != 0) { colour = Colours.get(-1,
+		 * -1, -1, 500); } Font.render((x % 10) + "", screen, 0 + (x * 8), 0,
+		 * colour, 1); }
+		 */
+
 		level.renderEntities(screen);
 
 		for (int y = 0; y < screen.height; y++) {
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index aeddf4b..6791331 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -23,17 +23,19 @@ public class Player extends Mob {
 		int xa = 0;
 		int ya = 0;
 
-		if (input.up.isPressed()) {
-			ya--;
-		}
-		if (input.down.isPressed()) {
-			ya++;
-		}
-		if (input.left.isPressed()) {
-			xa--;
-		}
-		if (input.right.isPressed()) {
-			xa++;
+		if(input != null){
+			if (input.up.isPressed()) {
+				ya--;
+			}
+			if (input.down.isPressed()) {
+				ya++;
+			}
+			if (input.left.isPressed()) {
+				xa--;
+			}
+			if (input.right.isPressed()) {
+				xa++;
+			}
 		}
 
 		if (xa != 0 || ya != 0) {
@@ -136,5 +138,9 @@ public class Player extends Mob {
 
 		return false;
 	}
+	
+	public String getUsername(){
+		return this.userName;
+	}
 
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index f6fe9b8..a991470 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -8,12 +8,18 @@ import java.net.SocketException;
 import java.net.UnknownHostException;
 
 import com.redomar.game.Game;
+import com.redomar.game.entities.PlayerMP;
+import com.redomar.game.net.packets.Packet;
+import com.redomar.game.net.packets.Packet00Login;
+import com.redomar.game.net.packets.Packet.PacketTypes;
 
 public class GameClient extends Thread{
 	
 	private InetAddress ipAddress;
 	private DatagramSocket socket;
+	private Game game;
 	public GameClient(Game game, String ipAddress){
+		this.game = game;
 		try {
 			this.socket = new DatagramSocket();
 			this.ipAddress = InetAddress.getByName(ipAddress);
@@ -33,7 +39,27 @@ public class GameClient extends Thread{
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-			System.out.println("SERVER > "+new String(packet.getData()));
+			this.parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
+			// System.out.println("SERVER > "+new String(packet.getData()));
+		}
+	}
+	
+	private void parsePacket(byte[] data, InetAddress address, int port) {
+		String message = new String(data).trim();
+		PacketTypes type = Packet.lookupPacket(message.substring(0, 2));
+		Packet packet = null;
+		switch (type) {
+		default:
+		case INVALID:
+			break;
+		case LOGIN:
+			packet = new Packet00Login(data);
+			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + ((Packet00Login)packet).getUsername() + " has joined...");
+			PlayerMP player = new PlayerMP(game.level, 10, 10, ((Packet00Login)packet).getUsername(), address, port);
+			game.level.addEntity(player);
+			break;
+		case DISCONNECT:
+			break;
 		}
 	}
 
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 93a30bb..ab0f177 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -39,7 +39,7 @@ public class GameServer extends Thread{
 				e.printStackTrace();
 			}
 			
-			parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
+			this.parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
 			
 			// String message = new String(packet.getData());
 			// System.out.println("CLIENT ["+packet.getAddress().getHostAddress()+":"+packet.getPort()+"] "+message);
@@ -53,30 +53,47 @@ public class GameServer extends Thread{
 	private void parsePacket(byte[] data, InetAddress address, int port) {
 		String message = new String(data).trim();
 		PacketTypes type = Packet.lookupPacket(message.substring(0, 2));
+		Packet packet = null;
 		switch (type) {
 		default:
 		case INVALID:
 			break;
 		case LOGIN:
-			Packet00Login packet = new Packet00Login(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + packet.getUsername() + " has connected...");
-			PlayerMP player = null;
-			if(address.getHostAddress().equalsIgnoreCase("127.0.0.1")){
-				player = new PlayerMP(game.level, 10, 10, game.input, packet.getUsername(), address, port);				
-			} else {
-				player = new PlayerMP(game.level, 10, 10, packet.getUsername(), address, port);
-			}
-			if(player != null){
-				this.connectedPlayers.add(player);
-				game.level.addEntity(player);
-				game.player = player;
-			}
+			packet = new Packet00Login(data);
+			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + ((Packet00Login)packet).getUsername() + " has connected...");
+			PlayerMP player = new PlayerMP(game.level, 10, 10, ((Packet00Login)packet).getUsername(), address, port);
+			this.addConnection(player, (Packet00Login)packet);
 			break;
 		case DISCONNECT:
 			break;
 		}
 	}
 
+	public void addConnection(PlayerMP player, Packet00Login packet) {
+		boolean alreadyConnected = false;
+		for(PlayerMP p : this.connectedPlayers){
+			if(player.getUsername().equalsIgnoreCase(p.getUsername())){
+				if(p.ipAddess == null){
+					p.ipAddess = player.ipAddess;
+				}
+				
+				if(p.port == -1){
+					p.port = player.port;
+				}
+				
+				alreadyConnected = true;
+			} else {
+				sendData(packet.getData(), p.ipAddess, p.port);
+				
+				packet = new Packet00Login(p.getUsername());
+				sendData(packet.getData(), player.ipAddess, player.port);
+			}
+		}
+		if(!alreadyConnected){
+			this.connectedPlayers.add(player);
+		}
+	}
+
 	public void sendData(byte[] data, InetAddress ipAddress, int port){
 		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
 		try {

commit 3ce08949fc1ba83bfd9d0e809afa37ea90c5ca83
Merge: e5cb6c7 6d36472
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 16:34:46 2013 +0100

    Merge branch 'aside' into Devaside
    
    Conflicts:
    	src/com/redomar/game/Game.java

commit 42d1f5a5caddd62f6637169dff6e8fe5b89d09cd
Merge: 05f1236 3ce0894
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 09:28:15 2013 -0700

    Merge pull request #1 from redomar/Devaside
    
    Updated local multiplayer to master branch

commit a4d843d8263163c996be74260e4416cea5f9cfa1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 21:27:59 2013 +0100

    added readme

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..7d1801f
--- /dev/null
+++ b/README.md
@@ -0,0 +1,23 @@
+JavaGame Alpha v1.1
+===================
+
+#####What is JavaGame?
+JavaGame is a game project that i am working on for an assignment for college.
+
+#####Why name it JavaGame?
+Well i'm still not sure what exactly i'm going to do with it, and I haven't thought of a suitable name either
+
+####How to use this repository
+
+* Fork it.
+* Create a branch (```git checkout -b my_branch```)
+  * Using Eclipse make a workspace on the top directory of JavaGame
+  * Create new project
+  * Name the Project JavaGame
+  * Press next and click the Libraries tab
+  * Click Add Class Folder
+  * Check the /res folder and hit finish
+  * Make the changes in the /src folder
+* Commit your changes (```git commit -am "Change Title"```)
+* Push to the branch (```git push origin my_branch```)
+* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
\ No newline at end of file

commit 250b5f6913ce7f7ca5c82b728b0a93a74a42876e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 14 21:44:04 2013 +0100

    Edited code positionings

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 82a20be..2a6684e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -81,17 +81,17 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		level = new LevelHandler("/levels/water_level.png");
-		
+
 		player = new PlayerMP(level, 100, 100, input,
 				JOptionPane.showInputDialog(this, "Enter a name"), null, -1);
-		
-		level.addEntity(player);		
+
+		level.addEntity(player);
 		Packet00Login loginPacket = new Packet00Login(player.getUsername());
-		
+
 		if (socketServer != null) {
 			socketServer.addConnection((PlayerMP) player, loginPacket);
 		}
-		
+
 		// socketClient.sendData("ping".getBytes());
 		loginPacket.writeData(socketClient);
 	}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index ec5967c..74402b2 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -50,15 +50,16 @@ public abstract class Mob extends Entity {
 	public abstract boolean hasCollided(int xa, int ya);
 
 	protected boolean isSolid(int xa, int ya, int x, int y) {
-		
-		if(level == null){
+
+		if (level == null) {
 			return false;
 		}
-		
+
 		Tile lastTile = level.getTile((this.x + x) >> 3, (this.y + y) >> 3);
-		Tile newtTile = level.getTile((this.x + x + xa) >> 3, (this.y + y + ya) >> 3);
-		
-		if(!lastTile.equals(newtTile) && newtTile.isSolid()){
+		Tile newtTile = level.getTile((this.x + x + xa) >> 3,
+				(this.y + y + ya) >> 3);
+
+		if (!lastTile.equals(newtTile) && newtTile.isSolid()) {
 			return true;
 		}
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 143fc54..91fdfe3 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -13,7 +13,8 @@ public class Player extends Mob {
 	private int tickCount = 0;
 	private String userName;
 
-	public Player(LevelHandler level, int x, int y, InputHandler input, String userName) {
+	public Player(LevelHandler level, int x, int y, InputHandler input,
+			String userName) {
 		super(level, "Player", x, y, 1);
 		this.input = input;
 		this.userName = userName;
@@ -23,7 +24,7 @@ public class Player extends Mob {
 		int xa = 0;
 		int ya = 0;
 
-		if(input != null){
+		if (input != null) {
 			if (input.up.isPressed()) {
 				ya--;
 			}
@@ -44,7 +45,7 @@ public class Player extends Mob {
 		} else {
 			isMoving = false;
 		}
-		
+
 		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 4) {
 			isSwimming = true;
 		}
@@ -52,7 +53,7 @@ public class Player extends Mob {
 		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
 			isSwimming = false;
 		}
-		
+
 		tickCount++;
 	}
 
@@ -73,13 +74,13 @@ public class Player extends Mob {
 		int modifier = 8 * scale;
 		int xOffset = x - modifier / 2;
 		int yOffset = y - modifier / 2 - 4;
-		
-		if(isSwimming){
+
+		if (isSwimming) {
 			int waterColour = 0;
 			yOffset += 4;
-			
+
 			colour = Colours.get(-1, 111, -1, 310);
-			
+
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, 255, -1);
 			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
@@ -91,21 +92,32 @@ public class Player extends Mob {
 				yOffset--;
 				waterColour = Colours.get(-1, -1, 225, 115);
 			}
-			
-			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour, 0x00, 1);
-			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour, 0x01, 1);
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
 		}
 
-		screen.render((xOffset + (modifier * flipTop)), yOffset, (xTile + yTile * 32), colour, flipTop, scale);
-		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset, ((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if(!isSwimming){
-			screen.render((xOffset + (modifier * flipBottom)), (yOffset + modifier), (xTile	+ (yTile + 1) * 32), colour, flipBottom, scale);
-			screen.render((xOffset + modifier - (modifier * flipBottom)), (yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32), colour, flipBottom, scale);
-			colour = Colours.get(-1, 111, 240, 310);;
+		screen.render((xOffset + (modifier * flipTop)), yOffset,
+				(xTile + yTile * 32), colour, flipTop, scale);
+		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
+				((xTile + 1) + yTile * 32), colour, flipTop, scale);
+		if (!isSwimming) {
+			screen.render((xOffset + (modifier * flipBottom)),
+					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
+					flipBottom, scale);
+			screen.render((xOffset + modifier - (modifier * flipBottom)),
+					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
+					colour, flipBottom, scale);
+			colour = Colours.get(-1, 111, 240, 310);
+			;
 		}
-		
-		if(userName != null){
-			Font.render(userName, screen, xOffset - ((userName.length() - 1) / 2 * 8), yOffset - 10, Colours.get(-1, -1, -1, 555), 1);
+
+		if (userName != null) {
+			Font.render(userName, screen, xOffset
+					- ((userName.length() - 1) / 2 * 8), yOffset - 10,
+					Colours.get(-1, -1, -1, 555), 1);
 		}
 	}
 
@@ -141,8 +153,8 @@ public class Player extends Mob {
 
 		return false;
 	}
-	
-	public String getUsername(){
+
+	public String getUsername() {
 		return this.userName;
 	}
 
diff --git a/src/com/redomar/game/entities/PlayerMP.java b/src/com/redomar/game/entities/PlayerMP.java
index 71241c4..a0f6eb0 100644
--- a/src/com/redomar/game/entities/PlayerMP.java
+++ b/src/com/redomar/game/entities/PlayerMP.java
@@ -5,25 +5,27 @@ import java.net.InetAddress;
 import com.redomar.game.InputHandler;
 import com.redomar.game.level.LevelHandler;
 
-public class PlayerMP extends Player{
-	
+public class PlayerMP extends Player {
+
 	public InetAddress ipAddess;
 	public int port;
 
-	public PlayerMP(LevelHandler level, int x, int y, InputHandler input, String userName, InetAddress ipAddress, int port) {
+	public PlayerMP(LevelHandler level, int x, int y, InputHandler input,
+			String userName, InetAddress ipAddress, int port) {
 		super(level, x, y, input, userName);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
-	
-	public PlayerMP(LevelHandler level, int x, int y, String userName, InetAddress ipAddress, int port) {
+
+	public PlayerMP(LevelHandler level, int x, int y, String userName,
+			InetAddress ipAddress, int port) {
 		super(level, x, y, null, userName);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
-	
+
 	@Override
-	public void tick(){
+	public void tick() {
 		super.tick();
 	}
 
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index e4baaaf..d63362f 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -73,8 +73,9 @@ public class Screen {
 							if (xPixel + xScale < 0 | xPixel + xScale >= width) {
 								continue;
 							}
-							
-							pixels[(xPixel + xScale) + (yPixel + yScale) * width] = col;
+
+							pixels[(xPixel + xScale) + (yPixel + yScale)
+									* width] = col;
 						}
 					}
 
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index e85ed8e..22a3606 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -37,7 +37,7 @@ public class SpriteSheet {
 		}
 
 		for (int i = 0; i < 8; i++) {
-			//System.out.println(pixels[i]);
+			// System.out.println(pixels[i]);
 		}
 	}
 }
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 3c03275..1f195a5 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -48,31 +48,34 @@ public class LevelHandler {
 	}
 
 	private void loadTiles() {
-		int[] tileColours = this.image.getRGB(0, 0, width, height, null, 0, width);
+		int[] tileColours = this.image.getRGB(0, 0, width, height, null, 0,
+				width);
 		for (int y = 0; y < height; y++) {
 			for (int x = 0; x < width; x++) {
 				tileCheck: for (Tile t : Tile.tiles) {
-					if(t != null && t.getLevelColour() == tileColours[x+y*width]){
-						this.tiles[x+y*width] = t.getId();
+					if (t != null
+							&& t.getLevelColour() == tileColours[x + y * width]) {
+						this.tiles[x + y * width] = t.getId();
 						break tileCheck;
 					}
 				}
 			}
 		}
 	}
-	
+
 	@SuppressWarnings("unused")
-	private void saveLevelToFile(){
+	private void saveLevelToFile() {
 		try {
-			ImageIO.write(image, "png", new File(Level.class.getResource(this.imagePath).getFile()));
+			ImageIO.write(image, "png",
+					new File(Level.class.getResource(this.imagePath).getFile()));
 		} catch (IOException e) {
 			e.printStackTrace();
 		}
 	}
-	
+
 	@SuppressWarnings("unused")
-	private void alterTile(int x, int y, Tile newTile){
-		this.tiles[x+y*width] = newTile.getId();
+	private void alterTile(int x, int y, Tile newTile) {
+		this.tiles[x + y * width] = newTile.getId();
 		image.setRGB(x, y, newTile.getLevelColour());
 	}
 
diff --git a/src/com/redomar/game/level/tiles/AnimatedTile.java b/src/com/redomar/game/level/tiles/AnimatedTile.java
index 7aaa3f9..b5d53bd 100644
--- a/src/com/redomar/game/level/tiles/AnimatedTile.java
+++ b/src/com/redomar/game/level/tiles/AnimatedTile.java
@@ -7,19 +7,22 @@ public class AnimatedTile extends BasicTile {
 	private long lastIterationTime;
 	private int animationSwitchDelay;
 
-	public AnimatedTile(int id, int[][] animationCoords, int tileColour, int levelColour, int animationSwitchDelay) {
-        super(id, animationCoords[0][0], animationCoords[0][1], tileColour, levelColour);
-        this.animationTileCoords = animationCoords;
-        this.currentAnimationIndex = 0;
-        this.lastIterationTime = System.currentTimeMillis();
-        this.animationSwitchDelay = animationSwitchDelay;
-    }
+	public AnimatedTile(int id, int[][] animationCoords, int tileColour,
+			int levelColour, int animationSwitchDelay) {
+		super(id, animationCoords[0][0], animationCoords[0][1], tileColour,
+				levelColour);
+		this.animationTileCoords = animationCoords;
+		this.currentAnimationIndex = 0;
+		this.lastIterationTime = System.currentTimeMillis();
+		this.animationSwitchDelay = animationSwitchDelay;
+	}
 
-    public void tick() {
-        if ((System.currentTimeMillis() - lastIterationTime) >= (animationSwitchDelay)) {
-            lastIterationTime = System.currentTimeMillis();
-            currentAnimationIndex = (currentAnimationIndex + 1) % animationTileCoords.length;
-            this.tileId = (animationTileCoords[currentAnimationIndex][0] + (animationTileCoords[currentAnimationIndex][1] * 32));
-        }
-    }
+	public void tick() {
+		if ((System.currentTimeMillis() - lastIterationTime) >= (animationSwitchDelay)) {
+			lastIterationTime = System.currentTimeMillis();
+			currentAnimationIndex = (currentAnimationIndex + 1)
+					% animationTileCoords.length;
+			this.tileId = (animationTileCoords[currentAnimationIndex][0] + (animationTileCoords[currentAnimationIndex][1] * 32));
+		}
+	}
 }
diff --git a/src/com/redomar/game/level/tiles/BasicSolidTile.java b/src/com/redomar/game/level/tiles/BasicSolidTile.java
index cf35257..c78e58d 100644
--- a/src/com/redomar/game/level/tiles/BasicSolidTile.java
+++ b/src/com/redomar/game/level/tiles/BasicSolidTile.java
@@ -1,7 +1,6 @@
 package com.redomar.game.level.tiles;
 
-
-public class BasicSolidTile extends BasicTile{
+public class BasicSolidTile extends BasicTile {
 
 	public BasicSolidTile(int id, int x, int y, int tileColour, int levelColour) {
 		super(id, x, y, tileColour, levelColour);
diff --git a/src/com/redomar/game/level/tiles/BasicTile.java b/src/com/redomar/game/level/tiles/BasicTile.java
index 0464d4c..ea2faaf 100644
--- a/src/com/redomar/game/level/tiles/BasicTile.java
+++ b/src/com/redomar/game/level/tiles/BasicTile.java
@@ -21,5 +21,5 @@ public class BasicTile extends Tile {
 	public void render(Screen screen, LevelHandler level, int x, int y) {
 		screen.render(x, y, tileId, tileColour, 0x00, 1);
 	}
-	
+
 }
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index b4a39e6..d9b4537 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -7,11 +7,17 @@ import com.redomar.game.level.LevelHandler;
 public abstract class Tile {
 
 	public static final Tile[] tiles = new Tile[256];
-	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0, -1, -1, -1), 0xFF000000);
-	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
-	public static final Tile CHISELED_STONE = new BasicTile(2, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
-	public static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
-	public static final Tile WATER = new AnimatedTile(4, new int[][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115, -1), 0xFF0000FF, 1000);
+	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,
+			-1, -1, -1), 0xFF000000);
+	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(
+			-1, 444, 333, -1), 0xFF555555);
+	public static final Tile CHISELED_STONE = new BasicTile(2, 2, 0,
+			Colours.get(-1, 333, 222, -1), 0xFF666666);
+	public static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1,
+			131, 141, -1), 0xFF00FF00);
+	public static final Tile WATER = new AnimatedTile(4, new int[][] {
+			{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,
+			-1), 0xFF0000FF, 1000);
 
 	protected byte id;
 	protected boolean solid;
@@ -45,7 +51,7 @@ public abstract class Tile {
 	}
 
 	public abstract void tick();
-	
+
 	public abstract void render(Screen screen, LevelHandler level, int x, int y);
 
 	public int getLevelColour() {
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
index bdb1b9c..e781df0 100644
--- a/src/com/redomar/game/lib/Font.java
+++ b/src/com/redomar/game/lib/Font.java
@@ -4,20 +4,20 @@ import com.redomar.game.gfx.Screen;
 
 public class Font {
 
-	private static String chars = "" +
-	"ABCDEFGHIJKLMNOPQRSTUVWXYZ      " +
-	"0123456789.,:;'\"!?$%()-=+/      ";
-	
-	public static void render(String msg, Screen screen, int x, int y, int colour, int scale){
+	private static String chars = "" + "ABCDEFGHIJKLMNOPQRSTUVWXYZ      "
+			+ "0123456789.,:;'\"!?$%()-=+/      ";
+
+	public static void render(String msg, Screen screen, int x, int y,
+			int colour, int scale) {
 		msg = msg.toUpperCase();
 
 		for (int i = 0; i < msg.length(); i++) {
 			int charIndex = chars.indexOf(msg.charAt(i));
 			if (charIndex >= 0) {
-				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour, 0x00, scale);
+				screen.render(x + (i * 8), y, charIndex + 30 * 32, colour,
+						0x00, scale);
 			}
 		}
 	}
 
 }
-
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index a991470..4da575e 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -13,12 +13,13 @@ import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 
-public class GameClient extends Thread{
-	
+public class GameClient extends Thread {
+
 	private InetAddress ipAddress;
 	private DatagramSocket socket;
 	private Game game;
-	public GameClient(Game game, String ipAddress){
+
+	public GameClient(Game game, String ipAddress) {
 		this.game = game;
 		try {
 			this.socket = new DatagramSocket();
@@ -29,9 +30,9 @@ public class GameClient extends Thread{
 			e.printStackTrace();
 		}
 	}
-	
-	public void run(){
-		while (true){
+
+	public void run() {
+		while (true) {
 			byte[] data = new byte[1024];
 			DatagramPacket packet = new DatagramPacket(data, data.length);
 			try {
@@ -39,11 +40,12 @@ public class GameClient extends Thread{
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-			this.parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
+			this.parsePacket(packet.getData(), packet.getAddress(),
+					packet.getPort());
 			// System.out.println("SERVER > "+new String(packet.getData()));
 		}
 	}
-	
+
 	private void parsePacket(byte[] data, InetAddress address, int port) {
 		String message = new String(data).trim();
 		PacketTypes type = Packet.lookupPacket(message.substring(0, 2));
@@ -54,8 +56,11 @@ public class GameClient extends Thread{
 			break;
 		case LOGIN:
 			packet = new Packet00Login(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + ((Packet00Login)packet).getUsername() + " has joined...");
-			PlayerMP player = new PlayerMP(game.level, 10, 10, ((Packet00Login)packet).getUsername(), address, port);
+			System.out.println("[" + address.getHostAddress() + ":" + port
+					+ "] " + ((Packet00Login) packet).getUsername()
+					+ " has joined...");
+			PlayerMP player = new PlayerMP(game.level, 10, 10,
+					((Packet00Login) packet).getUsername(), address, port);
 			game.level.addEntity(player);
 			break;
 		case DISCONNECT:
@@ -63,8 +68,9 @@ public class GameClient extends Thread{
 		}
 	}
 
-	public void sendData(byte[] data){
-		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, 1331);
+	public void sendData(byte[] data) {
+		DatagramPacket packet = new DatagramPacket(data, data.length,
+				ipAddress, 1331);
 		try {
 			socket.send(packet);
 		} catch (IOException e) {
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index ab0f177..6d9724a 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -14,13 +14,13 @@ import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 
-public class GameServer extends Thread{
+public class GameServer extends Thread {
 
 	private DatagramSocket socket;
 	private Game game;
 	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
-	
-	public GameServer(Game game){
+
+	public GameServer(Game game) {
 		this.game = game;
 		try {
 			this.socket = new DatagramSocket(1331);
@@ -28,9 +28,9 @@ public class GameServer extends Thread{
 			e.printStackTrace();
 		}
 	}
-	
-	public void run(){
-		while (true){
+
+	public void run() {
+		while (true) {
 			byte[] data = new byte[1024];
 			DatagramPacket packet = new DatagramPacket(data, data.length);
 			try {
@@ -38,9 +38,10 @@ public class GameServer extends Thread{
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-			
-			this.parsePacket(packet.getData(), packet.getAddress(), packet.getPort());
-			
+
+			this.parsePacket(packet.getData(), packet.getAddress(),
+					packet.getPort());
+
 			// String message = new String(packet.getData());
 			// System.out.println("CLIENT ["+packet.getAddress().getHostAddress()+":"+packet.getPort()+"] "+message);
 			// if(message.trim().equalsIgnoreCase("ping")){
@@ -60,9 +61,12 @@ public class GameServer extends Thread{
 			break;
 		case LOGIN:
 			packet = new Packet00Login(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port + "] " + ((Packet00Login)packet).getUsername() + " has connected...");
-			PlayerMP player = new PlayerMP(game.level, 10, 10, ((Packet00Login)packet).getUsername(), address, port);
-			this.addConnection(player, (Packet00Login)packet);
+			System.out.println("[" + address.getHostAddress() + ":" + port
+					+ "] " + ((Packet00Login) packet).getUsername()
+					+ " has connected...");
+			PlayerMP player = new PlayerMP(game.level, 10, 10,
+					((Packet00Login) packet).getUsername(), address, port);
+			this.addConnection(player, (Packet00Login) packet);
 			break;
 		case DISCONNECT:
 			break;
@@ -71,31 +75,32 @@ public class GameServer extends Thread{
 
 	public void addConnection(PlayerMP player, Packet00Login packet) {
 		boolean alreadyConnected = false;
-		for(PlayerMP p : this.connectedPlayers){
-			if(player.getUsername().equalsIgnoreCase(p.getUsername())){
-				if(p.ipAddess == null){
+		for (PlayerMP p : this.connectedPlayers) {
+			if (player.getUsername().equalsIgnoreCase(p.getUsername())) {
+				if (p.ipAddess == null) {
 					p.ipAddess = player.ipAddess;
 				}
-				
-				if(p.port == -1){
+
+				if (p.port == -1) {
 					p.port = player.port;
 				}
-				
+
 				alreadyConnected = true;
 			} else {
 				sendData(packet.getData(), p.ipAddess, p.port);
-				
+
 				packet = new Packet00Login(p.getUsername());
 				sendData(packet.getData(), player.ipAddess, player.port);
 			}
 		}
-		if(!alreadyConnected){
+		if (!alreadyConnected) {
 			this.connectedPlayers.add(player);
 		}
 	}
 
-	public void sendData(byte[] data, InetAddress ipAddress, int port){
-		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
+	public void sendData(byte[] data, InetAddress ipAddress, int port) {
+		DatagramPacket packet = new DatagramPacket(data, data.length,
+				ipAddress, port);
 		try {
 			this.socket.send(packet);
 		} catch (IOException e) {
diff --git a/src/com/redomar/game/net/packets/Packet.java b/src/com/redomar/game/net/packets/Packet.java
index b41732e..b49609b 100644
--- a/src/com/redomar/game/net/packets/Packet.java
+++ b/src/com/redomar/game/net/packets/Packet.java
@@ -24,27 +24,26 @@ public abstract class Packet {
 	public Packet(int packetId) {
 		this.packetId = (byte) packetId;
 	}
-	
+
 	public abstract byte[] getData();
 
 	public abstract void writeData(GameClient client);
 
 	public abstract void writeData(GameServer server);
 
-	
 	public String readData(byte[] data) {
 		String message = new String(data).trim();
 		return message.substring(2);
 	}
 
-	public static PacketTypes lookupPacket(String packetId){
-		try{
+	public static PacketTypes lookupPacket(String packetId) {
+		try {
 			return lookupPacket(Integer.parseInt(packetId));
-		} catch (NumberFormatException e){
+		} catch (NumberFormatException e) {
 			return PacketTypes.INVALID;
 		}
 	}
-	
+
 	public static PacketTypes lookupPacket(int id) {
 		for (PacketTypes p : PacketTypes.values()) {
 			if (p.getId() == id) {
diff --git a/src/com/redomar/game/net/packets/Packet00Login.java b/src/com/redomar/game/net/packets/Packet00Login.java
index 7bddea8..2430ae7 100644
--- a/src/com/redomar/game/net/packets/Packet00Login.java
+++ b/src/com/redomar/game/net/packets/Packet00Login.java
@@ -3,10 +3,10 @@ package com.redomar.game.net.packets;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 
-public class Packet00Login extends Packet{
+public class Packet00Login extends Packet {
 
 	private String username;
-	
+
 	public Packet00Login(byte[] data) {
 		super(00);
 		this.username = readData(data);
@@ -16,12 +16,12 @@ public class Packet00Login extends Packet{
 		super(00);
 		this.username = username;
 	}
-	
+
 	@Override
 	public byte[] getData() {
-		return ("00"+this.username).getBytes();
+		return ("00" + this.username).getBytes();
 	}
-	
+
 	@Override
 	public void writeData(GameClient client) {
 		client.sendData(getData());
@@ -32,7 +32,7 @@ public class Packet00Login extends Packet{
 		server.sendDataToAllClients(getData());
 	}
 
-	public String getUsername(){
+	public String getUsername() {
 		return username;
 	}
 }

commit c62340c50a47abec62c657b42e3a00241701665d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 17 21:49:50 2013 +0100

    Multiplayer: Disconnection
    
    implemented a way to disconnect from the server

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 2a6684e..134354e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -43,6 +43,7 @@ public class Game extends Canvas implements Runnable {
 
 	private Screen screen;
 	public InputHandler input;
+	public WindowHandler window;
 	public LevelHandler level;
 	public Player player;
 
@@ -54,14 +55,14 @@ public class Game extends Canvas implements Runnable {
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 
-		frame = new JFrame(NAME);
-		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		frame.setLayout(new BorderLayout());
-		frame.add(this, BorderLayout.CENTER);
-		frame.pack();
-		frame.setResizable(false);
-		frame.setLocationRelativeTo(null);
-		frame.setVisible(true);
+		setFrame(new JFrame(NAME));
+		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		getFrame().setLayout(new BorderLayout());
+		getFrame().add(this, BorderLayout.CENTER);
+		getFrame().pack();
+		getFrame().setResizable(false);
+		getFrame().setLocationRelativeTo(null);
+		getFrame().setVisible(true);
 
 	}
 
@@ -80,6 +81,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
+		window = new WindowHandler(this);
 		level = new LevelHandler("/levels/water_level.png");
 
 		player = new PlayerMP(level, 100, 100, input,
@@ -93,7 +95,7 @@ public class Game extends Canvas implements Runnable {
 		}
 
 		// socketClient.sendData("ping".getBytes());
-		loginPacket.writeData(socketClient);
+		loginPacket.writeData(getSocketClient());
 	}
 
 	public synchronized void start() {
@@ -105,8 +107,8 @@ public class Game extends Canvas implements Runnable {
 			socketServer.start();
 		}
 
-		socketClient = new GameClient(this, "127.0.0.1");
-		socketClient.start();
+		setSocketClient(new GameClient(this, "127.0.0.1"));
+		getSocketClient().start();
 	}
 
 	public synchronized void stop() {
@@ -151,7 +153,7 @@ public class Game extends Canvas implements Runnable {
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				frame.setTitle("Frames: " + frames + " Ticks: " + ticks);
+				getFrame().setTitle("Frames: " + frames + " Ticks: " + ticks);
 				frames = 0;
 				ticks = 0;
 			}
@@ -206,4 +208,20 @@ public class Game extends Canvas implements Runnable {
 		new Game().start();
 	}
 
+	public JFrame getFrame() {
+		return frame;
+	}
+
+	public void setFrame(JFrame frame) {
+		this.frame = frame;
+	}
+
+	public GameClient getSocketClient() {
+		return socketClient;
+	}
+
+	public void setSocketClient(GameClient socketClient) {
+		this.socketClient = socketClient;
+	}
+
 }
diff --git a/src/com/redomar/game/WindowHandler.java b/src/com/redomar/game/WindowHandler.java
new file mode 100644
index 0000000..6530368
--- /dev/null
+++ b/src/com/redomar/game/WindowHandler.java
@@ -0,0 +1,53 @@
+package com.redomar.game;
+
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+
+import com.redomar.game.net.packets.Packet01Disconnect;
+
+public class WindowHandler implements WindowListener{
+
+	private final Game game;
+	
+	public WindowHandler(Game game){
+		this.game = game;
+		this.game.getFrame().addWindowListener(this);
+	}
+	
+	@Override
+	public void windowActivated(WindowEvent event) {
+		
+	}
+
+	@Override
+	public void windowClosed(WindowEvent event) {
+		
+	}
+
+	@Override
+	public void windowClosing(WindowEvent event) {
+		Packet01Disconnect packet = new Packet01Disconnect(this.game.player.getUsername());
+		packet.writeData(this.game.getSocketClient());
+	}
+
+	@Override
+	public void windowDeactivated(WindowEvent event) {
+		
+	}
+
+	@Override
+	public void windowDeiconified(WindowEvent event) {
+		
+	}
+
+	@Override
+	public void windowIconified(WindowEvent event) {
+		
+	}
+
+	@Override
+	public void windowOpened(WindowEvent event) {
+		
+	}
+
+}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 1f195a5..6954a13 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -10,6 +10,7 @@ import java.util.logging.Level;
 import javax.imageio.ImageIO;
 
 import com.redomar.game.entities.Entity;
+import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
 
@@ -145,4 +146,15 @@ public class LevelHandler {
 		this.entities.add(entity);
 	}
 
+	public void removeEntity(String username) {
+		int index = 0;
+		for(Entity e : entities){
+			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
+				break;
+			}
+			index++;
+		}
+		this.entities.remove(index);
+	}
+
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 4da575e..2b8470b 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -11,6 +11,7 @@ import com.redomar.game.Game;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
+import com.redomar.game.net.packets.Packet01Disconnect;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 
 public class GameClient extends Thread {
@@ -64,6 +65,11 @@ public class GameClient extends Thread {
 			game.level.addEntity(player);
 			break;
 		case DISCONNECT:
+			packet = new Packet01Disconnect(data);
+			System.out.println("[" + address.getHostAddress() + ":" + port
+					+ "] " + ((Packet01Disconnect) packet).getUsername()
+					+ " has disconnected...");
+			game.level.removeEntity(((Packet01Disconnect)packet).getUsername());
 			break;
 		}
 	}
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 6d9724a..a7ef9cf 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -13,6 +13,7 @@ import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet.PacketTypes;
+import com.redomar.game.net.packets.Packet01Disconnect;
 
 public class GameServer extends Thread {
 
@@ -69,6 +70,11 @@ public class GameServer extends Thread {
 			this.addConnection(player, (Packet00Login) packet);
 			break;
 		case DISCONNECT:
+			packet = new Packet01Disconnect(data);
+			System.out.println("[" + address.getHostAddress() + ":" + port
+					+ "] " + ((Packet01Disconnect) packet).getUsername()
+					+ " has disconnected...");
+			this.removeConnection((Packet01Disconnect) packet);
 			break;
 		}
 	}
@@ -98,6 +104,32 @@ public class GameServer extends Thread {
 		}
 	}
 
+	public void removeConnection(Packet01Disconnect packet) {
+		this.connectedPlayers.remove(getPlayerMPIndex(packet.getUsername()));
+		packet.writeData(this);
+	}
+
+	public PlayerMP getPlayerMP(String username){
+		for(PlayerMP player : this.connectedPlayers){
+			if(player.getUsername().equalsIgnoreCase(username)){
+				return player;
+			}
+		}
+		return null;
+	}
+	
+	public int getPlayerMPIndex(String username){
+		int index = 0;
+		for(PlayerMP player : this.connectedPlayers){
+			if(player.getUsername().equalsIgnoreCase(username)){
+				break;
+			} else {
+				index++;
+			}
+		}
+		return index;
+	}
+	
 	public void sendData(byte[] data, InetAddress ipAddress, int port) {
 		DatagramPacket packet = new DatagramPacket(data, data.length,
 				ipAddress, port);
diff --git a/src/com/redomar/game/net/packets/Packet01Disconnect.java b/src/com/redomar/game/net/packets/Packet01Disconnect.java
new file mode 100644
index 0000000..d95eec5
--- /dev/null
+++ b/src/com/redomar/game/net/packets/Packet01Disconnect.java
@@ -0,0 +1,38 @@
+package com.redomar.game.net.packets;
+
+import com.redomar.game.net.GameClient;
+import com.redomar.game.net.GameServer;
+
+public class Packet01Disconnect extends Packet {
+
+	private String username;
+
+	public Packet01Disconnect(byte[] data) {
+		super(01);
+		this.username = readData(data);
+	}
+
+	public Packet01Disconnect(String username) {
+		super(01);
+		this.username = username;
+	}
+
+	@Override
+	public byte[] getData() {
+		return ("01" + this.username).getBytes();
+	}
+
+	@Override
+	public void writeData(GameClient client) {
+		client.sendData(getData());
+	}
+
+	@Override
+	public void writeData(GameServer server) {
+		server.sendDataToAllClients(getData());
+	}
+
+	public String getUsername() {
+		return username;
+	}
+}

commit ccf95157835cb99236c44eb86671f148afce9f6e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 17 21:58:43 2013 +0100

    Encapsulated few important variables

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 134354e..68b84b2 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -42,10 +42,10 @@ public class Game extends Canvas implements Runnable {
 	private int[] colours = new int[6 * 6 * 6];
 
 	private Screen screen;
-	public InputHandler input;
-	public WindowHandler window;
-	public LevelHandler level;
-	public Player player;
+	private InputHandler input;
+	private WindowHandler window;
+	private LevelHandler level;
+	private Player player;
 
 	private GameClient socketClient;
 	private GameServer socketServer;
@@ -82,16 +82,16 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		window = new WindowHandler(this);
-		level = new LevelHandler("/levels/water_level.png");
+		setLevel(new LevelHandler("/levels/water_level.png"));
 
-		player = new PlayerMP(level, 100, 100, input,
-				JOptionPane.showInputDialog(this, "Enter a name"), null, -1);
+		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
+				JOptionPane.showInputDialog(this, "Enter a name"), null, -1));
 
-		level.addEntity(player);
-		Packet00Login loginPacket = new Packet00Login(player.getUsername());
+		getLevel().addEntity(getPlayer());
+		Packet00Login loginPacket = new Packet00Login(getPlayer().getUsername());
 
 		if (socketServer != null) {
-			socketServer.addConnection((PlayerMP) player, loginPacket);
+			socketServer.addConnection((PlayerMP) getPlayer(), loginPacket);
 		}
 
 		// socketClient.sendData("ping".getBytes());
@@ -163,7 +163,7 @@ public class Game extends Canvas implements Runnable {
 
 	public void tick() {
 		tickCount++;
-		level.tick();
+		getLevel().tick();
 	}
 
 	public void render() {
@@ -173,10 +173,10 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		int xOffset = player.x - (screen.width / 2);
-		int yOffset = player.y - (screen.height / 2);
+		int xOffset = getPlayer().x - (screen.width / 2);
+		int yOffset = getPlayer().y - (screen.height / 2);
 
-		level.renderTiles(screen, xOffset, yOffset);
+		getLevel().renderTiles(screen, xOffset, yOffset);
 
 		/*
 		 * for (int x = 0; x < level.width; x++) { int colour = Colours.get(-1,
@@ -185,7 +185,7 @@ public class Game extends Canvas implements Runnable {
 		 * colour, 1); }
 		 */
 
-		level.renderEntities(screen);
+		getLevel().renderEntities(screen);
 
 		for (int y = 0; y < screen.height; y++) {
 			for (int x = 0; x < screen.width; x++) {
@@ -224,4 +224,20 @@ public class Game extends Canvas implements Runnable {
 		this.socketClient = socketClient;
 	}
 
+	public Player getPlayer() {
+		return player;
+	}
+
+	public void setPlayer(Player player) {
+		this.player = player;
+	}
+
+	public LevelHandler getLevel() {
+		return level;
+	}
+
+	public void setLevel(LevelHandler level) {
+		this.level = level;
+	}
+
 }
diff --git a/src/com/redomar/game/WindowHandler.java b/src/com/redomar/game/WindowHandler.java
index 6530368..3c9f534 100644
--- a/src/com/redomar/game/WindowHandler.java
+++ b/src/com/redomar/game/WindowHandler.java
@@ -26,7 +26,7 @@ public class WindowHandler implements WindowListener{
 
 	@Override
 	public void windowClosing(WindowEvent event) {
-		Packet01Disconnect packet = new Packet01Disconnect(this.game.player.getUsername());
+		Packet01Disconnect packet = new Packet01Disconnect(this.game.getPlayer().getUsername());
 		packet.writeData(this.game.getSocketClient());
 	}
 
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 2b8470b..b080bc2 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -60,16 +60,16 @@ public class GameClient extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has joined...");
-			PlayerMP player = new PlayerMP(game.level, 10, 10,
+			PlayerMP player = new PlayerMP(game.getLevel(), 10, 10,
 					((Packet00Login) packet).getUsername(), address, port);
-			game.level.addEntity(player);
+			game.getLevel().addEntity(player);
 			break;
 		case DISCONNECT:
 			packet = new Packet01Disconnect(data);
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet01Disconnect) packet).getUsername()
 					+ " has disconnected...");
-			game.level.removeEntity(((Packet01Disconnect)packet).getUsername());
+			game.getLevel().removeEntity(((Packet01Disconnect)packet).getUsername());
 			break;
 		}
 	}
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index a7ef9cf..793f83f 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -65,7 +65,7 @@ public class GameServer extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has connected...");
-			PlayerMP player = new PlayerMP(game.level, 10, 10,
+			PlayerMP player = new PlayerMP(game.getLevel(), 10, 10,
 					((Packet00Login) packet).getUsername(), address, port);
 			this.addConnection(player, (Packet00Login) packet);
 			break;

commit 21f1a13ba227c1cc54e5d6a0695571a304f7ffff
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 17 22:17:57 2013 +0100

    Multiplayer: Setting up movement

diff --git a/src/com/redomar/game/net/packets/Packet02Move.java b/src/com/redomar/game/net/packets/Packet02Move.java
new file mode 100644
index 0000000..85e4d9a
--- /dev/null
+++ b/src/com/redomar/game/net/packets/Packet02Move.java
@@ -0,0 +1,52 @@
+package com.redomar.game.net.packets;
+
+import com.redomar.game.net.GameClient;
+import com.redomar.game.net.GameServer;
+
+public class Packet02Move extends Packet {
+
+	private String username;
+	private int x, y;
+
+	public Packet02Move(byte[] data) {
+		super(02);
+		String[] dataArray = readData(data).split(",");
+		this.username = dataArray[0];
+		this.x = Integer.parseInt(dataArray[1]);
+		this.y = Integer.parseInt(dataArray[2]);
+	}
+
+	public Packet02Move(String username, int x, int y) {
+		super(02);
+		this.username = username;
+		this.x = x;
+		this.y = y;
+	}
+
+	@Override
+	public byte[] getData() {
+		return ("02" + this.username + "," + this.x + "," + this.y).getBytes();
+	}
+
+	@Override
+	public void writeData(GameClient client) {
+		client.sendData(getData());
+	}
+
+	@Override
+	public void writeData(GameServer server) {
+		server.sendDataToAllClients(getData());
+	}
+
+	public String getUsername() {
+		return username;
+	}
+	
+	public int getX(){
+		return this.x;
+	}
+	
+	public int getY(){
+		return this.y;
+	}
+}

commit 3914bc4f0935b9385c7fcd32a44e04f5fcaa9bcc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 04:23:47 2013 +0100

    Multiplayer: Both players move on screen

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 134354e..9f0c9ad 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -29,6 +29,7 @@ public class Game extends Canvas implements Runnable {
 	public static final int HEIGHT = (WIDTH / 3 * 2);
 	public static final int SCALE = 3;
 	public static final String NAME = "Game";
+	public static Game game;
 
 	private JFrame frame;
 
@@ -67,6 +68,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public void init() {
+		game = this;
 		int index = 0;
 		for (int r = 0; r < 6; r++) {
 			for (int g = 0; g < 6; g++) {
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 91fdfe3..5e37da1 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -1,10 +1,12 @@
 package com.redomar.game.entities;
 
+import com.redomar.game.Game;
 import com.redomar.game.InputHandler;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
+import com.redomar.game.net.packets.Packet02Move;
 
 public class Player extends Mob {
 
@@ -42,6 +44,10 @@ public class Player extends Mob {
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);
 			isMoving = true;
+			
+			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y);
+			packet.writeData(Game.game.getSocketClient());
+			
 		} else {
 			isMoving = false;
 		}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 6954a13..92a5951 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -156,5 +156,22 @@ public class LevelHandler {
 		}
 		this.entities.remove(index);
 	}
+	
+	private int getPlayerMPIndex(String username){
+		int index = 0;
+		for(Entity e : entities){
+			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
+				break;
+			}
+			index++;
+		}
+		return index;
+	}
+	
+	public void movePlayer(String username, int x, int y){
+		int index = getPlayerMPIndex(username);
+		this.entities.get(index).x = x;
+		this.entities.get(index).y = y;
+	}
 
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 2b8470b..a74a328 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -13,6 +13,7 @@ import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet01Disconnect;
 import com.redomar.game.net.packets.Packet.PacketTypes;
+import com.redomar.game.net.packets.Packet02Move;
 
 public class GameClient extends Thread {
 
@@ -71,9 +72,17 @@ public class GameClient extends Thread {
 					+ " has disconnected...");
 			game.level.removeEntity(((Packet01Disconnect)packet).getUsername());
 			break;
+		case MOVE:
+			packet = new Packet02Move(data);
+			this.handlePacket((Packet02Move)packet);
+			break;
 		}
 	}
 
+	private void handlePacket(Packet02Move packet) {
+		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY());
+	}
+
 	public void sendData(byte[] data) {
 		DatagramPacket packet = new DatagramPacket(data, data.length,
 				ipAddress, 1331);
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index a7ef9cf..6b95cb4 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -14,6 +14,7 @@ import com.redomar.game.net.packets.Packet;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 import com.redomar.game.net.packets.Packet01Disconnect;
+import com.redomar.game.net.packets.Packet02Move;
 
 public class GameServer extends Thread {
 
@@ -76,6 +77,21 @@ public class GameServer extends Thread {
 					+ " has disconnected...");
 			this.removeConnection((Packet01Disconnect) packet);
 			break;
+		case MOVE:
+			packet = new Packet02Move(data);
+			System.out.println(((Packet02Move) packet).getUsername()
+					+ " has moved to " + ((Packet02Move) packet).getX() + ", "
+					+ ((Packet02Move) packet).getY());
+			this.handleMove(((Packet02Move)packet));
+		}
+	}
+
+	private void handleMove(Packet02Move packet) {
+		if(getPlayerMP(packet.getUsername()) != null){
+			int index = getPlayerMPIndex(packet.getUsername());
+			this.connectedPlayers.get(index).x = packet.getX();
+			this.connectedPlayers.get(index).y = packet.getY();
+			packet.writeData(this);
 		}
 	}
 
diff --git a/src/com/redomar/game/net/packets/Packet.java b/src/com/redomar/game/net/packets/Packet.java
index b49609b..743784f 100644
--- a/src/com/redomar/game/net/packets/Packet.java
+++ b/src/com/redomar/game/net/packets/Packet.java
@@ -6,7 +6,7 @@ import com.redomar.game.net.GameServer;
 public abstract class Packet {
 
 	public static enum PacketTypes {
-		INVALID(-1), LOGIN(00), DISCONNECT(01);
+		INVALID(-1), LOGIN(00), DISCONNECT(01), MOVE(02);
 
 		private int packetId;
 

commit 9f699c97ab8b63014d72330a1b93e787476f7e25
Merge: ccf9515 3914bc4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 04:24:42 2013 +0100

    Merge commit '3914bc4f0935b9385c7fcd32a44e04f5fcaa9bcc' into Devaside

commit e81d1ab62756e20972915b4f9295e3bffe8da888
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 04:30:04 2013 +0100

    Removed a small error
    
    applied encapsulated variables to newly merged code

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1b78bef..ca62916 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -83,7 +83,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
-		window = new WindowHandler(this);
+		setWindow(new WindowHandler(this));
 		setLevel(new LevelHandler("/levels/water_level.png"));
 
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
@@ -242,4 +242,12 @@ public class Game extends Canvas implements Runnable {
 		this.level = level;
 	}
 
+	public WindowHandler getWindow() {
+		return window;
+	}
+
+	public void setWindow(WindowHandler window) {
+		this.window = window;
+	}
+
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 7ac53f9..24d6eb8 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -80,7 +80,7 @@ public class GameClient extends Thread {
 	}
 
 	private void handlePacket(Packet02Move packet) {
-		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY());
+		this.game.getLevel().movePlayer(packet.getUsername(), packet.getX(), packet.getY());
 	}
 
 	public void sendData(byte[] data) {

commit 5cb0916a93e92035354102f02beae1707bdcc3ee
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 06:04:05 2013 +0200

    Update README.md

diff --git a/README.md b/README.md
index 7d1801f..1d05a35 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.1
+JavaGame Alpha v1.2
 ===================
 
 #####What is JavaGame?
@@ -20,4 +20,4 @@ Well i'm still not sure what exactly i'm going to do with it, and I haven't thou
   * Make the changes in the /src folder
 * Commit your changes (```git commit -am "Change Title"```)
 * Push to the branch (```git push origin my_branch```)
-* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
\ No newline at end of file
+* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)

commit cb07850f2406667c1ba9ade6f1b4aa8531dcdc03
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 12:44:45 2013 +0100

    Multiplayer: Changed player starting position

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 9f0c9ad..72e4c50 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -90,7 +90,7 @@ public class Game extends Canvas implements Runnable {
 				JOptionPane.showInputDialog(this, "Enter a name"), null, -1);
 
 		level.addEntity(player);
-		Packet00Login loginPacket = new Packet00Login(player.getUsername());
+		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
 
 		if (socketServer != null) {
 			socketServer.addConnection((PlayerMP) player, loginPacket);
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index a74a328..6fef0dd 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -58,12 +58,7 @@ public class GameClient extends Thread {
 			break;
 		case LOGIN:
 			packet = new Packet00Login(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port
-					+ "] " + ((Packet00Login) packet).getUsername()
-					+ " has joined...");
-			PlayerMP player = new PlayerMP(game.level, 10, 10,
-					((Packet00Login) packet).getUsername(), address, port);
-			game.level.addEntity(player);
+			handleLogin((Packet00Login)packet, address, port);
 			break;
 		case DISCONNECT:
 			packet = new Packet01Disconnect(data);
@@ -74,12 +69,20 @@ public class GameClient extends Thread {
 			break;
 		case MOVE:
 			packet = new Packet02Move(data);
-			this.handlePacket((Packet02Move)packet);
+			this.handleMove((Packet02Move)packet);
 			break;
 		}
 	}
 
-	private void handlePacket(Packet02Move packet) {
+	private void handleLogin(Packet00Login packet, InetAddress address, int port) {
+		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
+				+ packet.getUsername() + " has joined...");
+		PlayerMP player = new PlayerMP(game.level, packet.getX(), packet.getY(),
+				packet.getUsername(), address, port);
+		game.level.addEntity(player);
+	}
+
+	private void handleMove(Packet02Move packet) {
 		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY());
 	}
 
@@ -92,4 +95,5 @@ public class GameClient extends Thread {
 			e.printStackTrace();
 		}
 	}
+
 }
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 6b95cb4..dcf4c07 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -111,7 +111,7 @@ public class GameServer extends Thread {
 			} else {
 				sendData(packet.getData(), p.ipAddess, p.port);
 
-				packet = new Packet00Login(p.getUsername());
+				packet = new Packet00Login(p.getUsername(), p.x, p.y);
 				sendData(packet.getData(), player.ipAddess, player.port);
 			}
 		}
diff --git a/src/com/redomar/game/net/packets/Packet00Login.java b/src/com/redomar/game/net/packets/Packet00Login.java
index 2430ae7..871b921 100644
--- a/src/com/redomar/game/net/packets/Packet00Login.java
+++ b/src/com/redomar/game/net/packets/Packet00Login.java
@@ -6,20 +6,26 @@ import com.redomar.game.net.GameServer;
 public class Packet00Login extends Packet {
 
 	private String username;
+	private int x, y;
 
 	public Packet00Login(byte[] data) {
 		super(00);
-		this.username = readData(data);
+		String[] dataArray = readData(data).split(",");
+		this.username = dataArray[0];
+		this.x = Integer.parseInt(dataArray[1]);
+		this.y = Integer.parseInt(dataArray[2]);
 	}
 
-	public Packet00Login(String username) {
+	public Packet00Login(String username, int x, int y) {
 		super(00);
 		this.username = username;
+		this.x = x;
+		this.y = y;
 	}
 
 	@Override
 	public byte[] getData() {
-		return ("00" + this.username).getBytes();
+		return ("00" + this.username + "," + this.x + "," + this.y).getBytes();
 	}
 
 	@Override
@@ -35,4 +41,12 @@ public class Packet00Login extends Packet {
 	public String getUsername() {
 		return username;
 	}
+
+	public int getX() {
+		return this.x;
+	}
+
+	public int getY() {
+		return this.y;
+	}
 }

commit 7c28ec764b170a8b9d02327a19777533e43f1184
Merge: e81d1ab cb07850
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 12:48:28 2013 +0100

    Merge commit 'cb07850f2406667c1ba9ade6f1b4aa8531dcdc03' into Devaside
    
    Conflicts:
    	src/com/redomar/game/Game.java
    	src/com/redomar/game/net/GameClient.java

commit 0ee1d48df869d95deed48db223d98a9795c635bc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 12:52:43 2013 +0100

    Resolved merge issue

diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index b56d195..f313d08 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -74,21 +74,16 @@ public class GameClient extends Thread {
 		}
 	}
 
-<<<<<<< HEAD
-	private void handlePacket(Packet02Move packet) {
-		this.game.getLevel().movePlayer(packet.getUsername(), packet.getX(), packet.getY());
-=======
 	private void handleLogin(Packet00Login packet, InetAddress address, int port) {
 		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
 				+ packet.getUsername() + " has joined...");
-		PlayerMP player = new PlayerMP(game.level, packet.getX(), packet.getY(),
+		PlayerMP player = new PlayerMP(game.getLevel(), packet.getX(), packet.getY(),
 				packet.getUsername(), address, port);
-		game.level.addEntity(player);
+		game.getLevel().addEntity(player);
 	}
 
 	private void handleMove(Packet02Move packet) {
-		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY());
->>>>>>> cb07850f2406667c1ba9ade6f1b4aa8531dcdc03
+		this.game.getLevel().movePlayer(packet.getUsername(), packet.getX(), packet.getY());
 	}
 
 	public void sendData(byte[] data) {
diff --git a/src/com/redomar/game/net/packets/Packet00Login.java b/src/com/redomar/game/net/packets/Packet00Login.java
index 871b921..4e61dc4 100644
--- a/src/com/redomar/game/net/packets/Packet00Login.java
+++ b/src/com/redomar/game/net/packets/Packet00Login.java
@@ -25,7 +25,7 @@ public class Packet00Login extends Packet {
 
 	@Override
 	public byte[] getData() {
-		return ("00" + this.username + "," + this.x + "," + this.y).getBytes();
+		return ("00" + this.username + "," + getX() + "," + getY()).getBytes();
 	}
 
 	@Override
diff --git a/src/com/redomar/game/net/packets/Packet02Move.java b/src/com/redomar/game/net/packets/Packet02Move.java
index 85e4d9a..8e68eea 100644
--- a/src/com/redomar/game/net/packets/Packet02Move.java
+++ b/src/com/redomar/game/net/packets/Packet02Move.java
@@ -25,7 +25,7 @@ public class Packet02Move extends Packet {
 
 	@Override
 	public byte[] getData() {
-		return ("02" + this.username + "," + this.x + "," + this.y).getBytes();
+		return ("02" + this.username + "," + getX() + "," + getY()).getBytes();
 	}
 
 	@Override

commit cb08b86613aa332053faac61e79e9ec65c852599
Merge: 5cb0916 0ee1d48
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 12:54:47 2013 +0100

    Merge commit '0ee1d48df869d95deed48db223d98a9795c635bc'

commit dd74bf4d25b254b1eb7fb7a1aba54885676ded3a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 13:23:36 2013 +0100

    Multiplayer: Removed a bug
    
    removed a bug where the server would crash if a player joined.

diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 92a5951..02d02e0 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -19,7 +19,7 @@ public class LevelHandler {
 	private byte[] tiles;
 	public int width;
 	public int height;
-	public List<Entity> entities = new ArrayList<Entity>();
+	private List<Entity> entities = new ArrayList<Entity>();
 	private String imagePath;
 	private BufferedImage image;
 
@@ -91,9 +91,13 @@ public class LevelHandler {
 			}
 		}
 	}
+	
+	public synchronized List<Entity>getEntities(){
+		return this.entities;
+	}
 
 	public void tick() {
-		for (Entity e : entities) {
+		for (Entity e : getEntities()) {
 			e.tick();
 		}
 
@@ -130,7 +134,7 @@ public class LevelHandler {
 	}
 
 	public void renderEntities(Screen screen) {
-		for (Entity e : entities) {
+		for (Entity e : getEntities()) {
 			e.render(screen);
 		}
 	}
@@ -143,23 +147,23 @@ public class LevelHandler {
 	}
 
 	public void addEntity(Entity entity) {
-		this.entities.add(entity);
+		this.getEntities().add(entity);
 	}
 
 	public void removeEntity(String username) {
 		int index = 0;
-		for(Entity e : entities){
+		for(Entity e : getEntities()){
 			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
 				break;
 			}
 			index++;
 		}
-		this.entities.remove(index);
+		this.getEntities().remove(index);
 	}
 	
 	private int getPlayerMPIndex(String username){
 		int index = 0;
-		for(Entity e : entities){
+		for(Entity e : getEntities()){
 			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
 				break;
 			}
@@ -170,8 +174,8 @@ public class LevelHandler {
 	
 	public void movePlayer(String username, int x, int y){
 		int index = getPlayerMPIndex(username);
-		this.entities.get(index).x = x;
-		this.entities.get(index).y = y;
+		this.getEntities().get(index).x = x;
+		this.getEntities().get(index).y = y;
 	}
 
 }

commit 173937defd6f2d9be961c73e250c0634a5670409
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 14:17:00 2013 +0100

    Multiplayer: Player direction

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 74402b2..5a2cd3a 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -69,4 +69,17 @@ public abstract class Mob extends Entity {
 	public String getName() {
 		return name;
 	}
+
+	public void setNumSteps(int numSteps) {
+		this.numSteps = numSteps;
+	}
+
+	public void setMoving(boolean isMoving) {
+		this.isMoving = isMoving;
+	}
+
+	public void setMovingDir(int movingDir) {
+		this.movingDir = movingDir;
+	}
+	
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 5e37da1..2671673 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -45,7 +45,7 @@ public class Player extends Mob {
 			move(xa, ya);
 			isMoving = true;
 			
-			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y);
+			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y, this.numSteps, this.isMoving, this.movingDir);
 			packet.writeData(Game.game.getSocketClient());
 			
 		} else {
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 02d02e0..1d4a33f 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -10,6 +10,7 @@ import java.util.logging.Level;
 import javax.imageio.ImageIO;
 
 import com.redomar.game.entities.Entity;
+import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
@@ -172,10 +173,14 @@ public class LevelHandler {
 		return index;
 	}
 	
-	public void movePlayer(String username, int x, int y){
+	public void movePlayer(String username, int x, int y, int numSteps, boolean isMoving, int movingDir){
 		int index = getPlayerMPIndex(username);
-		this.getEntities().get(index).x = x;
-		this.getEntities().get(index).y = y;
+		PlayerMP player = (PlayerMP)this.getEntities().get(index);
+		player.x = x;
+		player.y = y;
+		player.setNumSteps(numSteps);
+		player.setMoving(isMoving);
+		player.setMovingDir(movingDir);
 	}
 
 }
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 6fef0dd..7f9495d 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -83,7 +83,7 @@ public class GameClient extends Thread {
 	}
 
 	private void handleMove(Packet02Move packet) {
-		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY());
+		this.game.level.movePlayer(packet.getUsername(), packet.getX(), packet.getY(), packet.getNumSteps(), packet.isMoving(), packet.getMovingDir());
 	}
 
 	public void sendData(byte[] data) {
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index dcf4c07..1019b43 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -79,9 +79,6 @@ public class GameServer extends Thread {
 			break;
 		case MOVE:
 			packet = new Packet02Move(data);
-			System.out.println(((Packet02Move) packet).getUsername()
-					+ " has moved to " + ((Packet02Move) packet).getX() + ", "
-					+ ((Packet02Move) packet).getY());
 			this.handleMove(((Packet02Move)packet));
 		}
 	}
@@ -89,8 +86,12 @@ public class GameServer extends Thread {
 	private void handleMove(Packet02Move packet) {
 		if(getPlayerMP(packet.getUsername()) != null){
 			int index = getPlayerMPIndex(packet.getUsername());
-			this.connectedPlayers.get(index).x = packet.getX();
-			this.connectedPlayers.get(index).y = packet.getY();
+			PlayerMP player = this.connectedPlayers.get(index);
+			player.x = packet.getX();
+			player.y = packet.getY();
+			player.setNumSteps(packet.getNumSteps());
+			player.setMoving(packet.isMoving());
+			player.setMovingDir(packet.getMovingDir());
 			packet.writeData(this);
 		}
 	}
diff --git a/src/com/redomar/game/net/packets/Packet02Move.java b/src/com/redomar/game/net/packets/Packet02Move.java
index 85e4d9a..cff6c14 100644
--- a/src/com/redomar/game/net/packets/Packet02Move.java
+++ b/src/com/redomar/game/net/packets/Packet02Move.java
@@ -7,6 +7,9 @@ public class Packet02Move extends Packet {
 
 	private String username;
 	private int x, y;
+	private int numSteps = 0;
+	private boolean isMoving;
+	private int movingDir = 1;
 
 	public Packet02Move(byte[] data) {
 		super(02);
@@ -14,18 +17,27 @@ public class Packet02Move extends Packet {
 		this.username = dataArray[0];
 		this.x = Integer.parseInt(dataArray[1]);
 		this.y = Integer.parseInt(dataArray[2]);
+		this.numSteps = Integer.parseInt(dataArray[3]);
+		this.isMoving = Integer.parseInt(dataArray[4]) == 1;
+		this.movingDir = Integer.parseInt(dataArray[5]);
 	}
 
-	public Packet02Move(String username, int x, int y) {
+	public Packet02Move(String username, int x, int y, int numSteps,
+			boolean isMoving, int movingDir) {
 		super(02);
 		this.username = username;
 		this.x = x;
 		this.y = y;
+		this.numSteps = numSteps;
+		this.isMoving = isMoving;
+		this.movingDir = movingDir;
 	}
 
 	@Override
 	public byte[] getData() {
-		return ("02" + this.username + "," + this.x + "," + this.y).getBytes();
+		return ("02" + this.username + "," + this.x + "," + this.y + ","
+				+ this.getNumSteps() + "," + (this.isMoving ? 1 : 0) + "," + this
+					.getMovingDir()).getBytes();
 	}
 
 	@Override
@@ -41,12 +53,24 @@ public class Packet02Move extends Packet {
 	public String getUsername() {
 		return username;
 	}
-	
-	public int getX(){
+
+	public int getX() {
 		return this.x;
 	}
-	
-	public int getY(){
+
+	public int getY() {
 		return this.y;
 	}
+
+	public int getNumSteps() {
+		return numSteps;
+	}
+
+	public boolean isMoving() {
+		return isMoving;
+	}
+
+	public int getMovingDir() {
+		return movingDir;
+	}
 }

commit 8791670ca5b43374d2888310bd49db5dd7402a2e
Merge: 0ee1d48 173937d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 14:21:55 2013 +0100

    Merge commit '173937defd6f2d9be961c73e250c0634a5670409' into Devaside
    
    Conflicts:
    	src/com/redomar/game/net/GameClient.java
    	src/com/redomar/game/net/packets/Packet02Move.java

commit f4670c486e2c3b8f99a5dafcf1758fc8d8e77fea
Merge: cb08b86 8791670
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 14:23:58 2013 +0100

    Merge commit '8791670c'

commit a871c5974e45e2b657f50f16d22f3dc3fabed5c8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat May 18 14:28:01 2013 +0100

    Update README.md

diff --git a/README.md b/README.md
index 1d05a35..1579af6 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.2
+JavaGame Alpha v1.3
 ===================
 
 #####What is JavaGame?

commit 336ed28031849667a5276cc62e61eaaa4aae3d42
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun May 26 16:09:03 2013 +0100

    updated .gitignore for NetBeans

diff --git a/.gitignore b/.gitignore
index 5ebd21a..c745d3c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -161,3 +161,16 @@ pip-log.txt
 
 # Mac crap
 .DS_Store
+
+##########
+## NetBeans
+##########
+nbproject/*
+build/
+nbbuild/
+dist/
+nbdist/
+nbactions.xml
+nb-configuration.xml
+manifest.mf
+.build.xml
\ No newline at end of file

commit 83b71991fc25a4c8e0b2e12b1006a14ee65acdf2
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 28 14:27:02 2013 +0100

    Removed unused import

diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 1d4a33f..06b737c 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -10,7 +10,6 @@ import java.util.logging.Level;
 import javax.imageio.ImageIO;
 
 import com.redomar.game.entities.Entity;
-import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;

commit e624553c54d2f05da3c72e8c27fa60a32796e7bf
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 28 16:07:01 2013 +0100

    Added new tiles/textures
    
    added 3 new tiles:
    a rose flower
    a dandelion flower
    a sand tile

diff --git a/res/levels/water_level.png b/res/levels/water_level.png
index defb121..783769d 100644
Binary files a/res/levels/water_level.png and b/res/levels/water_level.png differ
diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index e7ef853..05f1b3b 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index d9b4537..be1dcd7 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -18,6 +18,12 @@ public abstract class Tile {
 	public static final Tile WATER = new AnimatedTile(4, new int[][] {
 			{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,
 			-1), 0xFF0000FF, 1000);
+	public static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(
+			131, 151, 510, 553), 0xFFCCFF33);
+	public static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,
+			Colours.get(131, 151, 553, 510), 0xFFFFCC33);
+	public static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553,
+			554, 555), 0xFFFFFF99);
 
 	protected byte id;
 	protected boolean solid;

commit 01fe523efe305251764ab673eb07f294ab013e16
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 20:32:22 2013 +0100

    Added a splash screen

diff --git a/res/JSplashScreen.jar b/res/JSplashScreen.jar
new file mode 100644
index 0000000..b58e55b
Binary files /dev/null and b/res/JSplashScreen.jar differ
diff --git a/res/splash/splash.png b/res/splash/splash.png
new file mode 100644
index 0000000..69212c0
Binary files /dev/null and b/res/splash/splash.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index de7e2cf..1a72c2a 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -2,6 +2,7 @@ package com.redomar.game;
 
 import java.awt.BorderLayout;
 import java.awt.Canvas;
+import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.image.BufferStrategy;
@@ -19,6 +20,7 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
+import com.thehowtotutorial.splashscreen.JSplash;
 
 public class Game extends Canvas implements Runnable {
 
@@ -207,7 +209,31 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static void main(String[] args) {
-		new Game().start();
+		try {
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.3 Alpha", null, Color.RED, Color.ORANGE);
+			splash.splashOn();
+			splash.setProgress(10, "Initializing Game");
+			Thread.sleep(1500);
+			splash.setProgress(25, "Loading Classes");
+			Thread.sleep(1000);
+			splash.setProgress(35, "Applying Configurations");
+			Thread.sleep(1000);
+			splash.setProgress(40, "Loading Sprites");
+			Thread.sleep(1500);
+			splash.setProgress(50, "Loading Textures");
+			Thread.sleep(1000);
+			splash.setProgress(60, "Loading Map");
+			Thread.sleep(3000);
+			splash.setProgress(80, "Configuring Map");
+			Thread.sleep(1000);
+			splash.setProgress(90, "Pulling InputPanes");
+			Thread.sleep(1500);
+			splash.splashOff();
+			new Game().start();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		
 	}
 
 	public JFrame getFrame() {

commit 7833518a21ba0e583fa2245254ceec4755fd9d8e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 20:51:28 2013 +0100

    Updated the splash

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1a72c2a..bd98c3a 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -32,6 +32,8 @@ public class Game extends Canvas implements Runnable {
 	public static final int SCALE = 3;
 	public static final String NAME = "Game";
 	public static Game game;
+	private static int Jdata_Host;
+	private static String Jdata_UserName;	
 
 	private JFrame frame;
 
@@ -52,7 +54,7 @@ public class Game extends Canvas implements Runnable {
 
 	private GameClient socketClient;
 	private GameServer socketServer;
-
+	
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -89,7 +91,7 @@ public class Game extends Canvas implements Runnable {
 		setLevel(new LevelHandler("/levels/water_level.png"));
 
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
-				JOptionPane.showInputDialog(this, "Enter a name"), null, -1));
+				Jdata_UserName, null, -1));
 
 		level.addEntity(player);
 		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
@@ -106,7 +108,7 @@ public class Game extends Canvas implements Runnable {
 		running = true;
 		new Thread(this).start();
 
-		if (JOptionPane.showConfirmDialog(this, "Do you want to be the HOST?") == 0) {
+		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
 		}
@@ -228,6 +230,16 @@ public class Game extends Canvas implements Runnable {
 			Thread.sleep(1000);
 			splash.setProgress(90, "Pulling InputPanes");
 			Thread.sleep(1500);
+			splash.setProgress(92, "Aquring data: Multiplayer");
+			Thread.sleep(200);
+			Jdata_Host = JOptionPane.showConfirmDialog(game, "Do you want to be the HOST?");
+			Thread.sleep(200);
+			if(Jdata_Host == 0){
+				splash.setProgress(95, "Aquring data: Username");
+				Thread.sleep(200);
+				Jdata_UserName = JOptionPane.showInputDialog(game, "Enter a name");
+				Thread.sleep(200);
+			}
 			splash.splashOff();
 			new Game().start();
 		} catch (Exception e) {

commit c878ba8e61107516a2b2502fdfa1e6fd862e90e5
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 21:53:31 2013 +0200

    Getting ready for 1.4 merge

diff --git a/README.md b/README.md
index 1579af6..87d150f 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.3
+JavaGame Alpha v1.4
 ===================
 
 #####What is JavaGame?

commit a413e461884be540906705b76e585b3432d73398
Merge: c878ba8 7833518
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 20:54:38 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 8762357d592d9164a4649d4b3368869b613260cd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 21:05:18 2013 +0100

    Changed splash name

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index bd98c3a..5a13674 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -212,7 +212,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.3 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.4 Alpha", null, Color.RED, Color.ORANGE);
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
 			Thread.sleep(1500);

commit 486e10de44305d67a907c3f4f3443edd5a0615b8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 22:17:47 2013 +0100

    Optimized multiplayer initiation

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index bd98c3a..9ff3afd 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -33,7 +33,7 @@ public class Game extends Canvas implements Runnable {
 	public static final String NAME = "Game";
 	public static Game game;
 	private static int Jdata_Host;
-	private static String Jdata_UserName;	
+	private static String Jdata_UserName = "";	
 
 	private JFrame frame;
 
@@ -212,34 +212,34 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.3 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.4 Alpha", null, Color.RED, Color.ORANGE);
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
-			Thread.sleep(1500);
+			Thread.sleep(750);
 			splash.setProgress(25, "Loading Classes");
-			Thread.sleep(1000);
+			Thread.sleep(500);
 			splash.setProgress(35, "Applying Configurations");
-			Thread.sleep(1000);
+			Thread.sleep(500);
 			splash.setProgress(40, "Loading Sprites");
-			Thread.sleep(1500);
+			Thread.sleep(750);
 			splash.setProgress(50, "Loading Textures");
-			Thread.sleep(1000);
+			Thread.sleep(500);
 			splash.setProgress(60, "Loading Map");
-			Thread.sleep(3000);
+			Thread.sleep(1500);
 			splash.setProgress(80, "Configuring Map");
-			Thread.sleep(1000);
+			Thread.sleep(500);
 			splash.setProgress(90, "Pulling InputPanes");
-			Thread.sleep(1500);
+			Thread.sleep(750);
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(200);
 			Jdata_Host = JOptionPane.showConfirmDialog(game, "Do you want to be the HOST?");
 			Thread.sleep(200);
-			if(Jdata_Host == 0){
-				splash.setProgress(95, "Aquring data: Username");
-				Thread.sleep(200);
-				Jdata_UserName = JOptionPane.showInputDialog(game, "Enter a name");
-				Thread.sleep(200);
-			}
+			splash.setProgress(95, "Aquring data: Username");
+			Thread.sleep(200);
+			splash.setProgress(96, "Initalizing as Server:Host");
+			Jdata_UserName = JOptionPane.showInputDialog(game, "Enter a name");
+			splash.setProgress(97, "Connecting as" + Jdata_UserName);
+			Thread.sleep(500);
 			splash.splashOff();
 			new Game().start();
 		} catch (Exception e) {

commit 8f3b6ad0d46c5dbaea8884e896b40952d073a2db
Merge: 8762357 486e10d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed May 29 22:19:50 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit aeb119d9150ecaf9f637f8cfa91b482d68cbe35c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 01:33:36 2013 +0100

    Added music
    
    only works in the IDE

diff --git a/res/music/jl1.0.1.jar b/res/music/jl1.0.1.jar
new file mode 100644
index 0000000..bd5fb8b
Binary files /dev/null and b/res/music/jl1.0.1.jar differ
diff --git a/res/music/yoshi.mp3 b/res/music/yoshi.mp3
new file mode 100644
index 0000000..ed43677
Binary files /dev/null and b/res/music/yoshi.mp3 differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 9ff3afd..6e3c8d5 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -17,6 +17,7 @@ import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.lib.Music;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
@@ -108,6 +109,9 @@ public class Game extends Canvas implements Runnable {
 		running = true;
 		new Thread(this).start();
 
+		Music music = new Music();
+		new Thread(music).start();
+		
 		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
new file mode 100644
index 0000000..418bdd9
--- /dev/null
+++ b/src/com/redomar/game/lib/Music.java
@@ -0,0 +1,41 @@
+package com.redomar.game.lib;
+
+import java.io.BufferedInputStream;
+import java.io.FileInputStream;
+import java.net.URL;
+
+import com.redomar.game.Game;
+
+import javazoom.jl.player.Player;
+
+public class Music implements Runnable{
+
+	private String file;
+	private Player musicPlayer;
+	
+	public Music(URL url){
+		this.file =  url.toString().substring(6);
+	}
+	
+	public Music() {
+		
+	}
+
+	public void Play(){
+		try {
+			FileInputStream inputFile     = new FileInputStream(file);  
+            BufferedInputStream buffered = new BufferedInputStream(inputFile);  
+            musicPlayer = new Player(buffered);  
+            musicPlayer.play();
+		} catch (Exception e) {
+			System.out.println("Problem playing file " + file);  
+            System.out.println(e);
+		}
+	}
+
+	@Override
+	public void run() {
+		Music music = new Music(Game.class.getResource("/music/yoshi.mp3"));
+		music.Play();
+	}
+}

commit b958392e26105897527d0f078ed06868f3c2e19a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 02:39:27 2013 +0100

    Updated music
    
    now music can be played when built

diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index 418bdd9..9f51858 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -1,8 +1,7 @@
 package com.redomar.game.lib;
 
 import java.io.BufferedInputStream;
-import java.io.FileInputStream;
-import java.net.URL;
+import java.io.InputStream;
 
 import com.redomar.game.Game;
 
@@ -10,11 +9,11 @@ import javazoom.jl.player.Player;
 
 public class Music implements Runnable{
 
-	private String file;
+	private InputStream file;
 	private Player musicPlayer;
 	
-	public Music(URL url){
-		this.file =  url.toString().substring(6);
+	public Music(InputStream url){
+		this.file =  url;
 	}
 	
 	public Music() {
@@ -23,8 +22,7 @@ public class Music implements Runnable{
 
 	public void Play(){
 		try {
-			FileInputStream inputFile     = new FileInputStream(file);  
-            BufferedInputStream buffered = new BufferedInputStream(inputFile);  
+            BufferedInputStream buffered = new BufferedInputStream(file);  
             musicPlayer = new Player(buffered);  
             musicPlayer.play();
 		} catch (Exception e) {
@@ -35,7 +33,18 @@ public class Music implements Runnable{
 
 	@Override
 	public void run() {
-		Music music = new Music(Game.class.getResource("/music/yoshi.mp3"));
-		music.Play();
+		Music music = new Music(Game.class.getResourceAsStream("/music/yoshi.mp3"));
+		while(true){
+			music.Play();
+		}
+	}
+	
+	public void stop() {
+		Music music = new Music(Game.class.getResourceAsStream("/music/yoshi.mp3"));
+		while(true){
+			music.stop();
+		}
 	}
+	
+	
 }

commit f9e2b33ef616017f49c2310abac71989e910519c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 02:41:58 2013 +0100

    Updated splash
    
    always ontop

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 6e3c8d5..5872246 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -217,6 +217,7 @@ public class Game extends Canvas implements Runnable {
 	public static void main(String[] args) {
 		try {
 			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.4 Alpha", null, Color.RED, Color.ORANGE);
+			splash.setAlwaysOnTop(true);
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
 			Thread.sleep(750);

commit 82f76a1b39256718d2ac632e23ea7306aab71bb8
Merge: 8f3b6ad f9e2b33
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 02:42:54 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 228085f31ae51d66970e59c1bb8134e3e3dc099a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 03:12:27 2013 +0100

    Updated splash again

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 5872246..23efd60 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -52,6 +52,7 @@ public class Game extends Canvas implements Runnable {
 	private WindowHandler window;
 	private LevelHandler level;
 	private Player player;
+	private Music music;
 
 	private GameClient socketClient;
 	private GameServer socketServer;
@@ -107,10 +108,8 @@ public class Game extends Canvas implements Runnable {
 
 	public synchronized void start() {
 		running = true;
-		new Thread(this).start();
-
-		Music music = new Music();
 		new Thread(music).start();
+		new Thread(this).start();
 		
 		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);
@@ -217,7 +216,7 @@ public class Game extends Canvas implements Runnable {
 	public static void main(String[] args) {
 		try {
 			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.4 Alpha", null, Color.RED, Color.ORANGE);
-			splash.setAlwaysOnTop(true);
+			splash.toFront();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
 			Thread.sleep(750);

commit 68782d4227e59859a9035b106038d0d89c27bfb8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 03:18:02 2013 +0100

    Fixed a small issue

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 23efd60..e0738dd 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -52,7 +52,7 @@ public class Game extends Canvas implements Runnable {
 	private WindowHandler window;
 	private LevelHandler level;
 	private Player player;
-	private Music music;
+	private Music music = new Music();
 
 	private GameClient socketClient;
 	private GameServer socketServer;

commit 9aaf4a548e29c9d2070b9a1b632d78fb009351c7
Merge: 82f76a1 68782d4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri May 31 03:19:05 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 3218da7ed0334049d1d0f1e556fb49fb33ee0b62
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 1 20:19:11 2013 +0100

    Added randomized song sequencing
    
    also joining servers locally is flexible

diff --git a/res/music/Towards The End.mp3 b/res/music/Towards The End.mp3
new file mode 100644
index 0000000..7b70aed
Binary files /dev/null and b/res/music/Towards The End.mp3 differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e0738dd..cdd55f0 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -34,7 +34,8 @@ public class Game extends Canvas implements Runnable {
 	public static final String NAME = "Game";
 	public static Game game;
 	private static int Jdata_Host;
-	private static String Jdata_UserName = "";	
+	private static String Jdata_UserName = "";
+	private static String Jdata_IP = "127.0.0.1";
 
 	private JFrame frame;
 
@@ -53,6 +54,7 @@ public class Game extends Canvas implements Runnable {
 	private LevelHandler level;
 	private Player player;
 	private Music music = new Music();
+	public Thread musicThread = new Thread(music);
 
 	private GameClient socketClient;
 	private GameServer socketServer;
@@ -108,15 +110,15 @@ public class Game extends Canvas implements Runnable {
 
 	public synchronized void start() {
 		running = true;
-		new Thread(music).start();
 		new Thread(this).start();
+		musicThread.start();
 		
 		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
 		}
 
-		setSocketClient(new GameClient(this, "127.0.0.1"));
+		setSocketClient(new GameClient(this, Jdata_IP));
 		getSocketClient().start();
 	}
 
@@ -237,6 +239,9 @@ public class Game extends Canvas implements Runnable {
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(200);
 			Jdata_Host = JOptionPane.showConfirmDialog(game, "Do you want to be the HOST?");
+			if (Jdata_Host == 1){
+				Jdata_IP = JOptionPane.showInputDialog(game, "Enter the name \nleave blank for local");
+			}
 			Thread.sleep(200);
 			splash.setProgress(95, "Aquring data: Username");
 			Thread.sleep(200);
diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index 9f51858..b2e9074 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -2,6 +2,7 @@ package com.redomar.game.lib;
 
 import java.io.BufferedInputStream;
 import java.io.InputStream;
+import java.util.Random;
 
 import com.redomar.game.Game;
 
@@ -11,6 +12,10 @@ public class Music implements Runnable{
 
 	private InputStream file;
 	private Player musicPlayer;
+	private String songName[] = {"/music/yoshi.mp3", "/music/Towards The End.mp3"};
+	private int songNumber;
+	
+	private static Random rand = new Random();
 	
 	public Music(InputStream url){
 		this.file =  url;
@@ -33,18 +38,25 @@ public class Music implements Runnable{
 
 	@Override
 	public void run() {
-		Music music = new Music(Game.class.getResourceAsStream("/music/yoshi.mp3"));
-		while(true){
+		try {
+			Thread.sleep(300);
+			initSongNumber();
+			System.out.println("[MUSIC] loading song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
+			Music music = new Music(Game.class.getResourceAsStream(songName[songNumber]));
+			Thread.sleep(100);
+			System.out.println("[MUSIC] playing song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
 			music.Play();
+			this.run();
+		} catch (InterruptedException e) {
+			System.out.println("[ERROR][MUSIC] Could not stop, nothing currenly playing");
 		}
 	}
 	
 	public void stop() {
-		Music music = new Music(Game.class.getResourceAsStream("/music/yoshi.mp3"));
-		while(true){
-			music.stop();
-		}
+		
+	}
+
+	private void initSongNumber() {
+		this.songNumber = rand.nextInt(2);
 	}
-	
-	
 }

commit 19c614c0b3e5ffc3c7224dd04724106dd63d6d6c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Jun 18 01:40:02 2013 +0100

    Added a play now button
    
    pressing 'M' will now start to play the music

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index cdd55f0..a8e5a2c 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -55,6 +55,8 @@ public class Game extends Canvas implements Runnable {
 	private Player player;
 	private Music music = new Music();
 	public Thread musicThread = new Thread(music);
+	
+	public boolean notActive = true;
 
 	private GameClient socketClient;
 	private GameServer socketServer;
@@ -111,7 +113,6 @@ public class Game extends Canvas implements Runnable {
 	public synchronized void start() {
 		running = true;
 		new Thread(this).start();
-		musicThread.start();
 		
 		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);
@@ -206,6 +207,18 @@ public class Game extends Canvas implements Runnable {
 				}
 			}
 		}
+		
+		if (input.PlayMusic == true && notActive == true){
+			int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
+			if (musicOption == 0){
+				musicThread.start();
+				notActive = false;				
+			} else {
+				System.out.println("Canceled");
+				input.PlayMusic = false;
+			}
+		}
+		
 
 		Graphics g = bs.getDrawGraphics();
 
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index c4ec71b..b9ee2f9 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -33,6 +33,7 @@ public class InputHandler implements KeyListener {
 	public Key down = new Key();
 	public Key left = new Key();
 	public Key right = new Key();
+	public boolean PlayMusic = false;
 
 	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
@@ -59,6 +60,9 @@ public class InputHandler implements KeyListener {
 		if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
 			right.toggle(isPressed);
 		}
+		if (keyCode == KeyEvent.VK_M){
+			this.PlayMusic = true;
+		}
 	}
 
 }

commit a404bf003ddb2d96df36327edd3a46355391caa0
Merge: 9aaf4a5 19c614c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Jun 18 01:43:53 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit d36e906a079c740140a821fcf0991775af8c3811
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Jun 18 23:56:49 2013 +0100

    Added a Mini HUD

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index a8e5a2c..86a88d5 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -48,6 +48,7 @@ public class Game extends Canvas implements Runnable {
 			.getData();
 	private int[] colours = new int[6 * 6 * 6];
 
+	private BufferedImage image2 = new BufferedImage(WIDTH, HEIGHT - 30, BufferedImage.TYPE_INT_RGB);
 	private Screen screen;
 	private InputHandler input;
 	private WindowHandler window;
@@ -55,6 +56,7 @@ public class Game extends Canvas implements Runnable {
 	private Player player;
 	private Music music = new Music();
 	public Thread musicThread = new Thread(music);
+	public String nowPlaying = "Playing Music";
 	
 	public boolean notActive = true;
 
@@ -212,18 +214,27 @@ public class Game extends Canvas implements Runnable {
 			int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
 			if (musicOption == 0){
 				musicThread.start();
-				notActive = false;				
+				notActive = false;
 			} else {
 				System.out.println("Canceled");
 				input.PlayMusic = false;
 			}
 		}
 		
-
 		Graphics g = bs.getDrawGraphics();
 
 		g.drawRect(0, 0, getWidth(), getHeight());
-		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
+		g.drawImage(image, 0, 0, getWidth(), getHeight()-30, null);
+//		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
+		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
+		g.setColor(Color.WHITE);
+		g.drawString("Welcome "+player.getUsername(), 0, getHeight()-19);
+		if (notActive == true){			
+			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-8);
+		} else{
+			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-8);
+			g.drawString(nowPlaying, (getWidth() - nowPlaying.length()) - (120 + nowPlaying.length()), getHeight() - 20 );
+		}
 		g.dispose();
 		bs.show();
 	}
@@ -310,4 +321,12 @@ public class Game extends Canvas implements Runnable {
 		this.window = window;
 	}
 
+	public String getNowPlaying() {
+		return nowPlaying;
+	}
+
+	public void setNowPlaying(String nowPlaying) {
+		this.nowPlaying = nowPlaying;
+	}
+
 }
diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index b2e9074..bed979a 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -41,9 +41,9 @@ public class Music implements Runnable{
 		try {
 			Thread.sleep(300);
 			initSongNumber();
-			System.out.println("[MUSIC] loading song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
+			//System.out.println("[MUSIC] loading song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
 			Music music = new Music(Game.class.getResourceAsStream(songName[songNumber]));
-			Thread.sleep(100);
+			//Thread.sleep(100);
 			System.out.println("[MUSIC] playing song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
 			music.Play();
 			this.run();

commit a0b79ea28aad8aa6b02dce196aa9819dec44fd6f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 22 16:03:50 2013 +0100

    Organized words on the HUD

diff --git a/res/commons-lang3-3.1.jar b/res/commons-lang3-3.1.jar
new file mode 100644
index 0000000..a85e539
Binary files /dev/null and b/res/commons-lang3-3.1.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 86a88d5..4769999 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -12,6 +12,8 @@ import java.awt.image.DataBufferInt;
 import javax.swing.JFrame;
 import javax.swing.JOptionPane;
 
+import org.apache.commons.lang3.text.WordUtils;
+
 import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
@@ -228,7 +230,7 @@ public class Game extends Canvas implements Runnable {
 //		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
-		g.drawString("Welcome "+player.getUsername(), 0, getHeight()-19);
+		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getUsername()), 0, getHeight()-19);
 		if (notActive == true){			
 			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-8);
 		} else{

commit 103e42593b61e2eac75c84a03e4f59f8387de912
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 22 16:09:22 2013 +0100

    Updated /res folder structure

diff --git a/res/JSplashScreen.jar b/res/JSplashScreen.jar
deleted file mode 100644
index b58e55b..0000000
Binary files a/res/JSplashScreen.jar and /dev/null differ
diff --git a/res/commons-lang3-3.1.jar b/res/commons-lang3-3.1.jar
deleted file mode 100644
index a85e539..0000000
Binary files a/res/commons-lang3-3.1.jar and /dev/null differ
diff --git a/res/jars/JSplashScreen.jar b/res/jars/JSplashScreen.jar
new file mode 100644
index 0000000..b58e55b
Binary files /dev/null and b/res/jars/JSplashScreen.jar differ
diff --git a/res/jars/commons-lang3-3.1.jar b/res/jars/commons-lang3-3.1.jar
new file mode 100644
index 0000000..a85e539
Binary files /dev/null and b/res/jars/commons-lang3-3.1.jar differ
diff --git a/res/jars/jl1.0.1.jar b/res/jars/jl1.0.1.jar
new file mode 100644
index 0000000..bd5fb8b
Binary files /dev/null and b/res/jars/jl1.0.1.jar differ
diff --git a/res/music/jl1.0.1.jar b/res/music/jl1.0.1.jar
deleted file mode 100644
index bd5fb8b..0000000
Binary files a/res/music/jl1.0.1.jar and /dev/null differ

commit de2414f05e2e31ca917af75c1e1c5fdcb5e15efe
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 22 16:23:30 2013 +0100

    Encapsulated all variables

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4769999..cf5658b 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -30,19 +30,19 @@ public class Game extends Canvas implements Runnable {
 	private static final long serialVersionUID = 1L;
 
 	// Setting the size and name of the frame/canvas
-	public static final int WIDTH = 160;
-	public static final int HEIGHT = (WIDTH / 3 * 2);
-	public static final int SCALE = 3;
-	public static final String NAME = "Game";
-	public static Game game;
+	private static final int WIDTH = 160;
+	private static final int HEIGHT = (WIDTH / 3 * 2);
+	private static final int SCALE = 3;
+	private static final String NAME = "Game";
+	private static Game game;
 	private static int Jdata_Host;
 	private static String Jdata_UserName = "";
 	private static String Jdata_IP = "127.0.0.1";
 
 	private JFrame frame;
 
-	public boolean running = false;
-	public int tickCount = 0;
+	private boolean running = false;
+	private int tickCount = 0;
 
 	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT,
 			BufferedImage.TYPE_INT_RGB);
@@ -57,10 +57,10 @@ public class Game extends Canvas implements Runnable {
 	private LevelHandler level;
 	private Player player;
 	private Music music = new Music();
-	public Thread musicThread = new Thread(music);
-	public String nowPlaying = "Playing Music";
+	private Thread musicThread = new Thread(music);
+	private String nowPlaying = "Playing Music";
 	
-	public boolean notActive = true;
+	private boolean notActive = true;
 
 	private GameClient socketClient;
 	private GameServer socketServer;
@@ -82,7 +82,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public void init() {
-		game = this;
+		setGame(this);
 		int index = 0;
 		for (int r = 0; r < 6; r++) {
 			for (int g = 0; g < 6; g++) {
@@ -178,7 +178,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public void tick() {
-		tickCount++;
+		setTickCount(getTickCount() + 1);
 		getLevel().tick();
 	}
 
@@ -189,8 +189,8 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		int xOffset = getPlayer().x - (screen.width / 2);
-		int yOffset = getPlayer().y - (screen.height / 2);
+		int xOffset = getPlayer().x - (screen.getWidth() / 2);
+		int yOffset = getPlayer().y - (screen.getHeight() / 2);
 
 		getLevel().renderTiles(screen, xOffset, yOffset);
 
@@ -203,9 +203,9 @@ public class Game extends Canvas implements Runnable {
 
 		getLevel().renderEntities(screen);
 
-		for (int y = 0; y < screen.height; y++) {
-			for (int x = 0; x < screen.width; x++) {
-				int colourCode = screen.pixels[x + y * screen.width];
+		for (int y = 0; y < screen.getHeight(); y++) {
+			for (int x = 0; x < screen.getWidth(); x++) {
+				int colourCode = screen.getPixels()[x + y * screen.getWidth()];
 				if (colourCode < 255) {
 					pixels[x + y * WIDTH] = colours[colourCode];
 				}
@@ -264,15 +264,15 @@ public class Game extends Canvas implements Runnable {
 			Thread.sleep(750);
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(200);
-			Jdata_Host = JOptionPane.showConfirmDialog(game, "Do you want to be the HOST?");
+			Jdata_Host = JOptionPane.showConfirmDialog(getGame(), "Do you want to be the HOST?");
 			if (Jdata_Host == 1){
-				Jdata_IP = JOptionPane.showInputDialog(game, "Enter the name \nleave blank for local");
+				Jdata_IP = JOptionPane.showInputDialog(getGame(), "Enter the name \nleave blank for local");
 			}
 			Thread.sleep(200);
 			splash.setProgress(95, "Aquring data: Username");
 			Thread.sleep(200);
 			splash.setProgress(96, "Initalizing as Server:Host");
-			Jdata_UserName = JOptionPane.showInputDialog(game, "Enter a name");
+			Jdata_UserName = JOptionPane.showInputDialog(getGame(), "Enter a name");
 			splash.setProgress(97, "Connecting as" + Jdata_UserName);
 			Thread.sleep(500);
 			splash.splashOff();
@@ -331,4 +331,20 @@ public class Game extends Canvas implements Runnable {
 		this.nowPlaying = nowPlaying;
 	}
 
+	public int getTickCount() {
+		return tickCount;
+	}
+
+	public void setTickCount(int tickCount) {
+		this.tickCount = tickCount;
+	}
+
+	public static Game getGame() {
+		return game;
+	}
+
+	public static void setGame(Game game) {
+		Game.game = game;
+	}
+
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 2671673..b16c113 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -46,7 +46,7 @@ public class Player extends Mob {
 			isMoving = true;
 			
 			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y, this.numSteps, this.isMoving, this.movingDir);
-			packet.writeData(Game.game.getSocketClient());
+			packet.writeData(Game.getGame().getSocketClient());
 			
 		} else {
 			isMoving = false;
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index d63362f..c559358 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -2,29 +2,29 @@ package com.redomar.game.gfx;
 
 public class Screen {
 
-	public static final int MAP_WIDTH = 64;
-	public static final int MAP_WIDTH_MASK = MAP_WIDTH - 1;
+	private static final int MAP_WIDTH = 64;
+	private static final int MAP_WIDTH_MASK = MAP_WIDTH - 1;
 
-	public static final byte BIT_MIRROR_X = 0x01;
-	public static final byte BIT_MIRROR_Y = 0x02;
+	private static final byte BIT_MIRROR_X = 0x01;
+	private static final byte BIT_MIRROR_Y = 0x02;
 
-	public int[] pixels;
+	private int[] pixels;
 
-	public int xOffset = 0;
-	public int yOffset = 0;
+	private int xOffset = 0;
+	private int yOffset = 0;
 
-	public int width;
-	public int height;
+	private int width;
+	private int height;
 
-	public SpriteSheet sheet;
+	private SpriteSheet sheet;
 
 	public Screen(int width, int height, SpriteSheet sheet) {
 
-		this.width = width;
-		this.height = height;
+		this.setWidth(width);
+		this.setHeight(height);
 		this.sheet = sheet;
 
-		pixels = new int[width * height];
+		setPixels(new int[width * height]);
 	}
 
 	public void render(int xPos, int yPos, int tile, int colour, int mirrorDir,
@@ -38,7 +38,7 @@ public class Screen {
 		int scaleMap = scale - 1;
 		int xTile = tile % 32;
 		int yTile = tile / 32;
-		int tileOffset = (xTile << 3) + (yTile << 3) * sheet.width;
+		int tileOffset = (xTile << 3) + (yTile << 3) * sheet.getWidth();
 
 		for (int y = 0; y < 8; y++) {
 			int ySheet = y;
@@ -59,23 +59,23 @@ public class Screen {
 				int xPixel = x + xPos + (x * scaleMap) - ((scaleMap << 3) / 2);
 
 				int col = (colour >> (sheet.pixels[xSheet + ySheet
-						* sheet.width + tileOffset] * 8)) & 255;
+						* sheet.getWidth() + tileOffset] * 8)) & 255;
 				if (col < 255) {
 
 					for (int yScale = 0; yScale < scale; yScale++) {
 
-						if (yPixel + yScale < 0 | yPixel + yScale >= height) {
+						if (yPixel + yScale < 0 | yPixel + yScale >= getHeight()) {
 							continue;
 						}
 
 						for (int xScale = 0; xScale < scale; xScale++) {
 
-							if (xPixel + xScale < 0 | xPixel + xScale >= width) {
+							if (xPixel + xScale < 0 | xPixel + xScale >= getWidth()) {
 								continue;
 							}
 
-							pixels[(xPixel + xScale) + (yPixel + yScale)
-									* width] = col;
+							getPixels()[(xPixel + xScale) + (yPixel + yScale)
+									* getWidth()] = col;
 						}
 					}
 
@@ -89,4 +89,32 @@ public class Screen {
 		this.xOffset = xOffset;
 		this.yOffset = yOffset;
 	}
+
+	public static int getMapWidthMask() {
+		return MAP_WIDTH_MASK;
+	}
+
+	public int getWidth() {
+		return width;
+	}
+
+	public void setWidth(int width) {
+		this.width = width;
+	}
+
+	public int[] getPixels() {
+		return pixels;
+	}
+
+	public void setPixels(int[] pixels) {
+		this.pixels = pixels;
+	}
+
+	public int getHeight() {
+		return height;
+	}
+
+	public void setHeight(int height) {
+		this.height = height;
+	}
 }
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index 22a3606..38f8cc0 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -7,9 +7,9 @@ import javax.imageio.ImageIO;
 
 public class SpriteSheet {
 
-	public String path;
-	public int width;
-	public int height;
+	private String path;
+	private int width;
+	private int height;
 
 	public int[] pixels;
 
@@ -26,11 +26,11 @@ public class SpriteSheet {
 			return;
 		}
 
-		this.path = path;
-		this.width = image.getWidth();
+		this.setPath(path);
+		this.setWidth(image.getWidth());
 		this.height = image.getHeight();
 
-		pixels = image.getRGB(0, 0, width, height, null, 0, width);
+		pixels = image.getRGB(0, 0, getWidth(), height, null, 0, getWidth());
 
 		for (int i = 0; i < pixels.length; i++) {
 			pixels[i] = (pixels[i] & 0xff) / 64; // removes alpha (transparency)
@@ -40,4 +40,20 @@ public class SpriteSheet {
 			// System.out.println(pixels[i]);
 		}
 	}
+
+	public String getPath() {
+		return path;
+	}
+
+	public void setPath(String path) {
+		this.path = path;
+	}
+
+	public int getWidth() {
+		return width;
+	}
+
+	public void setWidth(int width) {
+		this.width = width;
+	}
 }
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 06b737c..126b4a8 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -17,8 +17,8 @@ import com.redomar.game.level.tiles.Tile;
 public class LevelHandler {
 
 	private byte[] tiles;
-	public int width;
-	public int height;
+	private int width;
+	private int height;
 	private List<Entity> entities = new ArrayList<Entity>();
 	private String imagePath;
 	private BufferedImage image;
@@ -53,7 +53,7 @@ public class LevelHandler {
 				width);
 		for (int y = 0; y < height; y++) {
 			for (int x = 0; x < width; x++) {
-				tileCheck: for (Tile t : Tile.tiles) {
+				tileCheck: for (Tile t : Tile.getTiles()) {
 					if (t != null
 							&& t.getLevelColour() == tileColours[x + y * width]) {
 						this.tiles[x + y * width] = t.getId();
@@ -84,9 +84,9 @@ public class LevelHandler {
 		for (int y = 0; y < height; y++) {
 			for (int x = 0; x < width; x++) {
 				if (x * y % 10 < 7) {
-					tiles[x + y * width] = Tile.GRASS.getId();
+					tiles[x + y * width] = Tile.getGrass().getId();
 				} else {
-					tiles[x + y * width] = Tile.STONE.getId();
+					tiles[x + y * width] = Tile.getStone().getId();
 				}
 			}
 		}
@@ -101,7 +101,7 @@ public class LevelHandler {
 			e.tick();
 		}
 
-		for (Tile t : Tile.tiles) {
+		for (Tile t : Tile.getTiles()) {
 			if (t == null) {
 				break;
 			}
@@ -114,20 +114,20 @@ public class LevelHandler {
 		if (xOffset < 0) {
 			xOffset = 0;
 		}
-		if (xOffset > ((width << 3) - screen.width)) {
-			xOffset = ((width << 3) - screen.width);
+		if (xOffset > ((width << 3) - screen.getWidth())) {
+			xOffset = ((width << 3) - screen.getWidth());
 		}
 		if (yOffset < 0) {
 			yOffset = 0;
 		}
-		if (yOffset > ((height << 3) - screen.height)) {
-			yOffset = ((height << 3) - screen.height);
+		if (yOffset > ((height << 3) - screen.getHeight())) {
+			yOffset = ((height << 3) - screen.getHeight());
 		}
 
 		screen.setOffset(xOffset, yOffset);
 
-		for (int y = (yOffset >> 3); y < (yOffset + screen.height >> 3) + 1; y++) {
-			for (int x = (xOffset >> 3); x < (xOffset + screen.width >> 3) + 1; x++) {
+		for (int y = (yOffset >> 3); y < (yOffset + screen.getHeight() >> 3) + 1; y++) {
+			for (int x = (xOffset >> 3); x < (xOffset + screen.getWidth() >> 3) + 1; x++) {
 				getTile(x, y).render(screen, this, x << 3, y << 3);
 			}
 		}
@@ -141,9 +141,9 @@ public class LevelHandler {
 
 	public Tile getTile(int x, int y) {
 		if (0 > x || x >= width || 0 > y || y >= height) {
-			return Tile.VOID;
+			return Tile.getVoid();
 		}
-		return Tile.tiles[tiles[x + y * width]];
+		return Tile.getTiles()[tiles[x + y * width]];
 	}
 
 	public void addEntity(Entity entity) {
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index be1dcd7..95cf341 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -6,23 +6,23 @@ import com.redomar.game.level.LevelHandler;
 
 public abstract class Tile {
 
-	public static final Tile[] tiles = new Tile[256];
-	public static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,
+	private static final Tile[] tiles = new Tile[256];
+	private static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,
 			-1, -1, -1), 0xFF000000);
-	public static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(
+	private static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(
 			-1, 444, 333, -1), 0xFF555555);
-	public static final Tile CHISELED_STONE = new BasicTile(2, 2, 0,
+	private static final Tile CHISELED_STONE = new BasicTile(2, 2, 0,
 			Colours.get(-1, 333, 222, -1), 0xFF666666);
-	public static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1,
+	private static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1,
 			131, 141, -1), 0xFF00FF00);
-	public static final Tile WATER = new AnimatedTile(4, new int[][] {
+	private static final Tile WATER = new AnimatedTile(4, new int[][] {
 			{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,
 			-1), 0xFF0000FF, 1000);
-	public static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(
+	private static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(
 			131, 151, 510, 553), 0xFFCCFF33);
-	public static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,
+	private static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,
 			Colours.get(131, 151, 553, 510), 0xFFFFCC33);
-	public static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553,
+	private static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553,
 			554, 555), 0xFFFFFF99);
 
 	protected byte id;
@@ -33,7 +33,7 @@ public abstract class Tile {
 	public Tile(int id, boolean isSolid, boolean isEmitter, int colour) {
 		this.id = (byte) id;
 
-		if (tiles[id] != null) {
+		if (getTiles()[id] != null) {
 			throw new RuntimeException("Duplicate tile id on:" + id);
 		}
 
@@ -41,7 +41,7 @@ public abstract class Tile {
 		this.emitter = isEmitter;
 		this.levelColour = colour;
 
-		tiles[id] = this;
+		getTiles()[id] = this;
 	}
 
 	public byte getId() {
@@ -64,4 +64,40 @@ public abstract class Tile {
 		return levelColour;
 	}
 
+	public static Tile getStone() {
+		return STONE;
+	}
+
+	public static Tile getChiseledStone() {
+		return CHISELED_STONE;
+	}
+
+	public static Tile getGrass() {
+		return GRASS;
+	}
+
+	public static Tile getFlowerRose() {
+		return FLOWER_rose;
+	}
+
+	public static Tile getFlowerDandelion() {
+		return FLOWER_dandelion;
+	}
+
+	public static Tile getSand() {
+		return SAND;
+	}
+
+	public static Tile getWater() {
+		return WATER;
+	}
+
+	public static Tile getVoid() {
+		return VOID;
+	}
+
+	public static Tile[] getTiles() {
+		return tiles;
+	}
+
 }

commit 7ce27d11af75f9f689b516c7fb4c4ce12ee8fa84
Merge: a404bf0 de2414f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 22 16:29:46 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 9051a6b8da35381c5aa3c1183a18a92fa7e4d485
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 22 16:35:46 2013 +0100

    Version alpha 1.5

diff --git a/README.md b/README.md
index 87d150f..5cb589a 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.4
+JavaGame Alpha v1.5
 ===================
 
 #####What is JavaGame?
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index cf5658b..97bc5e5 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -243,7 +243,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.4 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5 Alpha", null, Color.RED, Color.ORANGE);
 			splash.toFront();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");

commit e65273bdb7ec563859c3014f10e976da99e3dd84
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 29 18:48:11 2013 +0100

    Version 1.5.1: Music update
    
    added current song to HUD
    started ground work for menu
    optimized rendering: limited frames 60fps

diff --git a/README.md b/README.md
index 5cb589a..522f793 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.5
+JavaGame Alpha v1.5.1
 ===================
 
 #####What is JavaGame?
diff --git a/res/music/yoshi song.mp3 b/res/music/yoshi song.mp3
new file mode 100644
index 0000000..ed43677
Binary files /dev/null and b/res/music/yoshi song.mp3 differ
diff --git a/res/music/yoshi.mp3 b/res/music/yoshi.mp3
deleted file mode 100644
index ed43677..0000000
Binary files a/res/music/yoshi.mp3 and /dev/null differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 97bc5e5..1987b42 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -58,7 +58,7 @@ public class Game extends Canvas implements Runnable {
 	private Player player;
 	private Music music = new Music();
 	private Thread musicThread = new Thread(music);
-	private String nowPlaying = "Playing Music";
+	private String nowPlaying; 
 	
 	private boolean notActive = true;
 
@@ -147,7 +147,7 @@ public class Game extends Canvas implements Runnable {
 			long now = System.nanoTime();
 			delta += (now - lastTime) / nsPerTick;
 			lastTime = now;
-			boolean shouldRender = true;
+			boolean shouldRender = false;
 
 			while (delta >= 1) {
 				ticks++;
@@ -235,6 +235,7 @@ public class Game extends Canvas implements Runnable {
 			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-8);
 		} else{
 			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-8);
+			setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7, (music.getSongName()[music.getSongNumber()].length() - 4))));
 			g.drawString(nowPlaying, (getWidth() - nowPlaying.length()) - (120 + nowPlaying.length()), getHeight() - 20 );
 		}
 		g.dispose();
@@ -243,25 +244,25 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5.1 Alpha", null, Color.RED, Color.ORANGE);
 			splash.toFront();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
-			Thread.sleep(750);
-			splash.setProgress(25, "Loading Classes");
 			Thread.sleep(500);
+			splash.setProgress(25, "Loading Classes");
+			Thread.sleep(250);
 			splash.setProgress(35, "Applying Configurations");
-			Thread.sleep(500);
+			Thread.sleep(250);
 			splash.setProgress(40, "Loading Sprites");
-			Thread.sleep(750);
-			splash.setProgress(50, "Loading Textures");
 			Thread.sleep(500);
+			splash.setProgress(50, "Loading Textures");
+			Thread.sleep(250);
 			splash.setProgress(60, "Loading Map");
-			Thread.sleep(1500);
+			Thread.sleep(750);
 			splash.setProgress(80, "Configuring Map");
-			Thread.sleep(500);
+			Thread.sleep(250);
 			splash.setProgress(90, "Pulling InputPanes");
-			Thread.sleep(750);
+			Thread.sleep(500);
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(200);
 			Jdata_Host = JOptionPane.showConfirmDialog(getGame(), "Do you want to be the HOST?");
@@ -277,6 +278,7 @@ public class Game extends Canvas implements Runnable {
 			Thread.sleep(500);
 			splash.splashOff();
 			new Game().start();
+//			new Menu().start();
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index bed979a..7ccd263 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -12,8 +12,8 @@ public class Music implements Runnable{
 
 	private InputStream file;
 	private Player musicPlayer;
-	private String songName[] = {"/music/yoshi.mp3", "/music/Towards The End.mp3"};
-	private int songNumber;
+	private static String songName[] = {"/music/yoshi song.mp3", "/music/Towards The End.mp3", "/music/Towards The End.mp3"};
+	private static int songNumber;
 	
 	private static Random rand = new Random();
 	
@@ -22,7 +22,7 @@ public class Music implements Runnable{
 	}
 	
 	public Music() {
-		
+		Music.songNumber = rand.nextInt(3);
 	}
 
 	public void Play(){
@@ -35,6 +35,10 @@ public class Music implements Runnable{
             System.out.println(e);
 		}
 	}
+	
+	public synchronized void start(){
+		this.run();
+	}
 
 	@Override
 	public void run() {
@@ -57,6 +61,14 @@ public class Music implements Runnable{
 	}
 
 	private void initSongNumber() {
-		this.songNumber = rand.nextInt(2);
+		Music.songNumber = rand.nextInt(3);
+	}
+
+	public String[] getSongName() {
+		return songName;
+	}
+
+	public int getSongNumber() {
+		return songNumber;
 	}
 }
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
new file mode 100644
index 0000000..3512569
--- /dev/null
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -0,0 +1,34 @@
+package com.redomar.game.menu;
+
+import java.awt.BorderLayout;
+import java.awt.Dimension;
+
+import javax.swing.JFrame;
+
+public class DedicatedJFrame {
+
+	private static JFrame frame;
+
+	public DedicatedJFrame(int WIDTH, int HEIGHT, int SCALE, String NAME){
+		setFrame(new JFrame(NAME));
+		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		getFrame().setLayout(new BorderLayout());
+		getFrame().pack();
+		getFrame().setResizable(false);
+		getFrame().setLocationRelativeTo(null);
+		getFrame().setVisible(true);
+		
+		getFrame().setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		getFrame().setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		getFrame().setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+	}
+	
+	public JFrame getFrame() {
+		return frame;
+	}
+
+	public void setFrame(JFrame frame) {
+		DedicatedJFrame.frame = frame;
+	}
+	
+}
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
new file mode 100644
index 0000000..159fd39
--- /dev/null
+++ b/src/com/redomar/game/menu/Menu.java
@@ -0,0 +1,89 @@
+package com.redomar.game.menu;
+
+import java.awt.Color;
+import java.util.Random;
+
+
+
+public class Menu implements Runnable{
+
+	private static final int WIDTH = 160;
+	private static final int HEIGHT = (WIDTH / 3 * 2);
+	private static final int SCALE = 3;
+	private static final String NAME = "Menu";
+	
+	private DedicatedJFrame frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+	
+	private boolean running = false;
+	
+	public synchronized void start() {
+		running = true;
+		new Thread(this).start();
+	}
+
+	public synchronized void stop() {
+		running = false;
+	}
+	
+	public void run() {
+		long lastTime = System.nanoTime();
+		double nsPerTick = 1000000000D / 3D;
+
+		int ticks = 0;
+		int frames = 0;
+
+		long lastTimer = System.currentTimeMillis();
+		double delta = 0;
+
+		while (running) {
+			long now = System.nanoTime();
+			delta += (now - lastTime) / nsPerTick;
+			lastTime = now;
+			boolean shouldRender = false;
+
+			while (delta >= 1) {
+				ticks++;
+				delta -= 1;
+				shouldRender = true;
+			}
+
+			try {
+				Thread.sleep(2);
+			} catch (InterruptedException e) {
+				e.printStackTrace();
+			}
+
+			if (shouldRender) {
+				frames++;
+				render();
+			}
+
+			if (System.currentTimeMillis() - lastTimer >= 1000) {
+				lastTimer += 1000;
+				frame.getFrame().setTitle("Frames: " + frames + " Ticks: " + ticks);
+				frames = 0;
+				ticks = 0;
+			}
+		}
+	}
+
+	private void render() {
+		frame.getFrame().getContentPane().setBackground(Color.BLACK);
+		
+		Random rand = new Random();
+		
+		float r = rand.nextFloat();
+		float g = rand.nextFloat();
+		float b = rand.nextFloat();
+		
+		Color randomColor = new Color(r, g, b);
+		
+		frame.getFrame().getContentPane().setBackground(randomColor);
+		
+	}
+
+//	public static void main(String[] args) {
+//		new Menu().start();
+//	}
+	
+}

commit 891c4826b0c76e71a4fb13e29ff8f238e5514059
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 29 20:12:58 2013 +0100

    Added the jar to the repo

diff --git a/jar/javagame.jar b/jar/javagame.jar
new file mode 100644
index 0000000..60d19af
Binary files /dev/null and b/jar/javagame.jar differ

commit 82cdeccba82a392600464d5f8f3825e40dee89fd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Jun 30 14:44:06 2013 +0100

    Added chests

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
new file mode 100644
index 0000000..2e54f68
Binary files /dev/null and b/res/levels/custom_level.png differ
diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 05f1b3b..ce60195 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1987b42..d06f41a 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -98,7 +98,7 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		setWindow(new WindowHandler(this));
-		setLevel(new LevelHandler("/levels/water_level.png"));
+		setLevel(new LevelHandler("/levels/custom_level.png"));
 
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				Jdata_UserName, null, -1));
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 95cf341..d64ca1a 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -7,23 +7,16 @@ import com.redomar.game.level.LevelHandler;
 public abstract class Tile {
 
 	private static final Tile[] tiles = new Tile[256];
-	private static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,
-			-1, -1, -1), 0xFF000000);
-	private static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(
-			-1, 444, 333, -1), 0xFF555555);
-	private static final Tile CHISELED_STONE = new BasicTile(2, 2, 0,
-			Colours.get(-1, 333, 222, -1), 0xFF666666);
-	private static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1,
-			131, 141, -1), 0xFF00FF00);
-	private static final Tile WATER = new AnimatedTile(4, new int[][] {
-			{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,
-			-1), 0xFF0000FF, 1000);
-	private static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(
-			131, 151, 510, 553), 0xFFCCFF33);
-	private static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,
-			Colours.get(131, 151, 553, 510), 0xFFFFCC33);
-	private static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553,
-			554, 555), 0xFFFFFF99);
+	private static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,	-1, -1, -1), 0xFF000000);
+	private static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
+	private static final Tile CHISELED_stone = new BasicTile(2, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
+	private static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
+	private static final Tile WATER = new AnimatedTile(4, new int[][] {	{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,	-1), 0xFF0000FF, 1000);
+	private static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(131, 151, 510, 553), 0xFFCCFF33);
+	private static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,	Colours.get(131, 151, 553, 510), 0xFFFFCC33);
+	private static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553, 554, 555), 0xFFFFFF99);
+	private static final Tile CHEST_a = new BasicSolidTile(8, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
+	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
 
 	protected byte id;
 	protected boolean solid;
@@ -69,7 +62,7 @@ public abstract class Tile {
 	}
 
 	public static Tile getChiseledStone() {
-		return CHISELED_STONE;
+		return CHISELED_stone;
 	}
 
 	public static Tile getGrass() {
@@ -100,4 +93,12 @@ public abstract class Tile {
 		return tiles;
 	}
 
+	public static Tile getChestA() {
+		return CHEST_a;
+	}
+
+	public static Tile getChestB() {
+		return CHEST_b;
+	}
+
 }

commit de4f5a8722e4191962674750bb2e43107c102824
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Jun 30 15:26:57 2013 +0100

    Getting ready for 1.5.2

diff --git a/README.md b/README.md
index 522f793..fd59090 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,5 @@
-JavaGame Alpha v1.5.1
-===================
+JavaGame Alpha v1.5.2
+=====================
 
 #####What is JavaGame?
 JavaGame is a game project that i am working on for an assignment for college.
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 1987b42..3a83610 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -244,38 +244,38 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5.1 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5.2 Alpha", null, Color.RED, Color.ORANGE);
 			splash.toFront();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
-			Thread.sleep(500);
-			splash.setProgress(25, "Loading Classes");
 			Thread.sleep(250);
+			splash.setProgress(25, "Loading Classes");
+			Thread.sleep(125);
 			splash.setProgress(35, "Applying Configurations");
-			Thread.sleep(250);
+			Thread.sleep(125);
 			splash.setProgress(40, "Loading Sprites");
-			Thread.sleep(500);
-			splash.setProgress(50, "Loading Textures");
 			Thread.sleep(250);
+			splash.setProgress(50, "Loading Textures");
+			Thread.sleep(125);
 			splash.setProgress(60, "Loading Map");
-			Thread.sleep(750);
+			Thread.sleep(500);
 			splash.setProgress(80, "Configuring Map");
-			Thread.sleep(250);
+			Thread.sleep(125);
 			splash.setProgress(90, "Pulling InputPanes");
-			Thread.sleep(500);
+			Thread.sleep(250);
 			splash.setProgress(92, "Aquring data: Multiplayer");
-			Thread.sleep(200);
+			Thread.sleep(125);
 			Jdata_Host = JOptionPane.showConfirmDialog(getGame(), "Do you want to be the HOST?");
 			if (Jdata_Host == 1){
 				Jdata_IP = JOptionPane.showInputDialog(getGame(), "Enter the name \nleave blank for local");
 			}
-			Thread.sleep(200);
+			Thread.sleep(125);
 			splash.setProgress(95, "Aquring data: Username");
-			Thread.sleep(200);
+			Thread.sleep(125);
 			splash.setProgress(96, "Initalizing as Server:Host");
 			Jdata_UserName = JOptionPane.showInputDialog(getGame(), "Enter a name");
 			splash.setProgress(97, "Connecting as" + Jdata_UserName);
-			Thread.sleep(500);
+			Thread.sleep(250);
 			splash.splashOff();
 			new Game().start();
 //			new Menu().start();

commit 43eb7d693ff895dfaee84b5085546262c7224b0d
Merge: de4f5a8 82cdecc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Jun 30 15:29:33 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 0b145837decd706f1edebd749a2a011a1d7a3984
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Aug 2 15:20:06 2013 +0100

    Changed UI to OS "Look and Feel"

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 60d19af..b201dfe 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 111caef..a6027de 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -11,6 +11,7 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 import javax.swing.JOptionPane;
+import javax.swing.UIManager;
 
 import org.apache.commons.lang3.text.WordUtils;
 
@@ -265,6 +266,7 @@ public class Game extends Canvas implements Runnable {
 			Thread.sleep(250);
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(125);
+			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
 			Jdata_Host = JOptionPane.showConfirmDialog(getGame(), "Do you want to be the HOST?");
 			if (Jdata_Host == 1){
 				Jdata_IP = JOptionPane.showInputDialog(getGame(), "Enter the name \nleave blank for local");

commit 39567c07a38f470df7319dc18722021666def6da
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Aug 4 02:10:01 2013 +0100

    Quick Map switch

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index d06f41a..735ce06 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -98,12 +98,7 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		setWindow(new WindowHandler(this));
-		setLevel(new LevelHandler("/levels/custom_level.png"));
-
-		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
-				Jdata_UserName, null, -1));
-
-		level.addEntity(player);
+		setMap("/levels/custom_level.png");
 		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
 
 		if (socketServer != null) {
@@ -114,6 +109,13 @@ public class Game extends Canvas implements Runnable {
 		loginPacket.writeData(getSocketClient());
 	}
 
+	public void setMap(String Map_str) {
+		setLevel(new LevelHandler(Map_str));
+		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
+				Jdata_UserName, null, -1));
+		level.addEntity(player);
+	}
+
 	public synchronized void start() {
 		running = true;
 		new Thread(this).start();
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index b9ee2f9..c298ba1 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -33,7 +33,9 @@ public class InputHandler implements KeyListener {
 	public Key down = new Key();
 	public Key left = new Key();
 	public Key right = new Key();
+	public Key Z = new Key();
 	public boolean PlayMusic = false;
+	private int map;
 
 	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
@@ -63,6 +65,15 @@ public class InputHandler implements KeyListener {
 		if (keyCode == KeyEvent.VK_M){
 			this.PlayMusic = true;
 		}
+		if (keyCode == KeyEvent.VK_Z){
+			if (map == 0){
+				Game.getGame().setMap("/levels/water_level.png");
+				map++;
+			} else{
+				Game.getGame().setMap("/levels/custom_level.png");
+				map--;
+			}
+		}
 	}
 
 }

commit 2d1f5b881060846ae27d6c2818b8025466f32f8b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Aug 17 14:57:15 2013 +0100

    Disabled quick map switch

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 735ce06..e62dbd5 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -214,17 +214,22 @@ public class Game extends Canvas implements Runnable {
 			}
 		}
 		
-		if (input.PlayMusic == true && notActive == true){
+		if (input.isPlayMusic() == true && notActive == true){
 			int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
 			if (musicOption == 0){
 				musicThread.start();
 				notActive = false;
 			} else {
 				System.out.println("Canceled");
-				input.PlayMusic = false;
+				input.setPlayMusic(false);
 			}
 		}
 		
+		if (input.isChangeLevel() == true){
+			JOptionPane.showMessageDialog(this, "Switching Levels is currently disabled");
+			input.setChangeLevel(false);
+		}
+		
 		Graphics g = bs.getDrawGraphics();
 
 		g.drawRect(0, 0, getWidth(), getHeight());
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index c298ba1..a81746a 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -34,7 +34,8 @@ public class InputHandler implements KeyListener {
 	public Key left = new Key();
 	public Key right = new Key();
 	public Key Z = new Key();
-	public boolean PlayMusic = false;
+	private boolean PlayMusic = false;
+	private boolean ChangeLevel = false;
 	private int map;
 
 	public void keyPressed(KeyEvent e) {
@@ -63,17 +64,42 @@ public class InputHandler implements KeyListener {
 			right.toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_M){
-			this.PlayMusic = true;
+			this.setPlayMusic(true);
 		}
 		if (keyCode == KeyEvent.VK_Z){
-			if (map == 0){
-				Game.getGame().setMap("/levels/water_level.png");
-				map++;
-			} else{
-				Game.getGame().setMap("/levels/custom_level.png");
-				map--;
-			}
+//			if (map == 0){
+//				Game.getGame().setMap("/levels/water_level.png");
+//				map++;
+//			} else{
+//				Game.getGame().setMap("/levels/custom_level.png");
+//				map--;
+//			}
+			this.setChangeLevel(true);
 		}
 	}
 
+	public int getMap() {
+		return map;
+	}
+
+	public void setMap(int map) {
+		this.map = map;
+	}
+
+	public boolean isPlayMusic() {
+		return PlayMusic;
+	}
+
+	public void setPlayMusic(boolean playMusic) {
+		PlayMusic = playMusic;
+	}
+
+	public boolean isChangeLevel() {
+		return ChangeLevel;
+	}
+
+	public void setChangeLevel(boolean changeLevel) {
+		ChangeLevel = changeLevel;
+	}
+
 }

commit db976ed4b79284319a04c01ae47cfb8817c4ecea
Merge: 0b14583 2d1f5b8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Aug 17 14:58:43 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 2ab05bf814e8ca3d61d2e47e8a516212a92cf9d6
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Aug 18 16:14:40 2013 +0100

    Updated version number

diff --git a/README.md b/README.md
index 522f793..ce5a7d3 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.5.1
+JavaGame Alpha v1.5.3
 ===================
 
 #####What is JavaGame?
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e62dbd5..2209784 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -28,6 +28,7 @@ import com.thehowtotutorial.splashscreen.JSplash;
 public class Game extends Canvas implements Runnable {
 
 	private static final long serialVersionUID = 1L;
+	private static final String game_Version = "v1.5.3 Alpha";
 
 	// Setting the size and name of the frame/canvas
 	private static final int WIDTH = 160;
@@ -251,7 +252,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void main(String[] args) {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, "v1.5.1 Alpha", null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, game_Version, null, Color.RED, Color.ORANGE);
 			splash.toFront();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");

commit 8c07d1b595ae4878745ce595e509f96c49241bd3
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Aug 18 16:24:06 2013 +0100

    Encapsulated Input keys

diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index a81746a..b370bee 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -29,11 +29,10 @@ public class InputHandler implements KeyListener {
 		}
 	}
 
-	public Key up = new Key();
-	public Key down = new Key();
-	public Key left = new Key();
-	public Key right = new Key();
-	public Key Z = new Key();
+	private Key up = new Key();
+	private Key down = new Key();
+	private Key left = new Key();
+	private Key right = new Key();
 	private boolean PlayMusic = false;
 	private boolean ChangeLevel = false;
 	private int map;
@@ -52,16 +51,16 @@ public class InputHandler implements KeyListener {
 
 	public void toggleKey(int keyCode, boolean isPressed) {
 		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
-			up.toggle(isPressed);
+			getUp().toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
-			down.toggle(isPressed);
+			getDown().toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
-			left.toggle(isPressed);
+			getLeft().toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
-			right.toggle(isPressed);
+			getRight().toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_M){
 			this.setPlayMusic(true);
@@ -102,4 +101,36 @@ public class InputHandler implements KeyListener {
 		ChangeLevel = changeLevel;
 	}
 
+	public Key getUp() {
+		return up;
+	}
+
+	public void setUp(Key up) {
+		this.up = up;
+	}
+
+	public Key getDown() {
+		return down;
+	}
+
+	public void setDown(Key down) {
+		this.down = down;
+	}
+
+	public Key getLeft() {
+		return left;
+	}
+
+	public void setLeft(Key left) {
+		this.left = left;
+	}
+
+	public Key getRight() {
+		return right;
+	}
+
+	public void setRight(Key right) {
+		this.right = right;
+	}
+
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index b16c113..4355615 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -27,16 +27,16 @@ public class Player extends Mob {
 		int ya = 0;
 
 		if (input != null) {
-			if (input.up.isPressed()) {
+			if (input.getUp().isPressed()) {
 				ya--;
 			}
-			if (input.down.isPressed()) {
+			if (input.getDown().isPressed()) {
 				ya++;
 			}
-			if (input.left.isPressed()) {
+			if (input.getLeft().isPressed()) {
 				xa--;
 			}
-			if (input.right.isPressed()) {
+			if (input.getRight().isPressed()) {
 				xa++;
 			}
 		}

commit f7c5435e9561b3c91c3ac5e9a2a365e95da02cd9
Merge: db976ed 8c07d1b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Aug 18 16:33:35 2013 +0100

    Merge

commit 1132879054701f0ac947ad099033f5fae67f6aa8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Aug 18 16:39:33 2013 +0100

    Jar update

diff --git a/jar/javagame.jar b/jar/javagame.jar
index b201dfe..98d1c74 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit a6fd68b694ba35b4d5828893eae900378d9057e8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Aug 19 00:52:09 2013 +0100

    Empty usernames are now sanitized

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 2209784..52f56a1 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -238,7 +238,7 @@ public class Game extends Canvas implements Runnable {
 //		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
-		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getUsername()), 0, getHeight()-19);
+		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 0, getHeight()-19);
 		if (notActive == true){			
 			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-8);
 		} else{
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 4355615..8fb580e 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -163,5 +163,12 @@ public class Player extends Mob {
 	public String getUsername() {
 		return this.userName;
 	}
+	
+	public String getSantizedUsername() {
+		if(this.getUsername() == null || this.userName.isEmpty()){
+			return "Player";
+		}
+		else return this.getUsername();
+	}
 
 }

commit 6b3e9824438aaab67a9af3462eef8bacb6d04837
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Aug 19 01:40:48 2013 +0100

    players with no name now get a unique guest name

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 8fb580e..5d8ee9b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -6,15 +6,20 @@ import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
+import com.redomar.game.lib.Name;
 import com.redomar.game.net.packets.Packet02Move;
 
 public class Player extends Mob {
 
 	private InputHandler input;
+	private static Name customeName = new Name();
+	
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private String userName;
 
+	public static String guestPlayerName = customeName.setName("Player ");
+	
 	public Player(LevelHandler level, int x, int y, InputHandler input,
 			String userName) {
 		super(level, "Player", x, y, 1);
@@ -161,12 +166,20 @@ public class Player extends Mob {
 	}
 
 	public String getUsername() {
+		if(this.userName.isEmpty()){
+			return guestPlayerName;
+		}
 		return this.userName;
 	}
+
+	public void setUsername(String name) {
+		this.userName = name;
+	}
 	
 	public String getSantizedUsername() {
 		if(this.getUsername() == null || this.userName.isEmpty()){
-			return "Player";
+			setUsername(guestPlayerName);
+			return guestPlayerName;
 		}
 		else return this.getUsername();
 	}
diff --git a/src/com/redomar/game/lib/Name.java b/src/com/redomar/game/lib/Name.java
new file mode 100644
index 0000000..4db21f4
--- /dev/null
+++ b/src/com/redomar/game/lib/Name.java
@@ -0,0 +1,27 @@
+package com.redomar.game.lib;
+
+import java.util.Random;
+
+public class Name {
+
+	private Random rand = new Random();
+	private static int name_ID;
+	
+	public Name(){
+		setRand(rand);
+	}
+	
+	public String setName(String name){
+		
+		String finalName = name+getName_ID();
+		return finalName;
+	}
+
+	public static void setRand(Random rand) {
+		name_ID = rand.nextInt(300);
+	}
+
+	public static int getName_ID() {
+		return name_ID;
+	}
+}

commit 4eb72f2edc1873752c03e352be37f8a57bf962dc
Merge: 1132879 6b3e982
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Aug 19 08:26:54 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit fb057a84be4ac6358ce3328cb6343126f0d07482
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Aug 20 18:10:12 2013 +0100

    Added Time to the HUD

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 52f56a1..cf3358e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -20,6 +20,7 @@ import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Music;
+import com.redomar.game.lib.Time;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
@@ -58,6 +59,7 @@ public class Game extends Canvas implements Runnable {
 	private LevelHandler level;
 	private Player player;
 	private Music music = new Music();
+	private Time time = new Time();
 	private Thread musicThread = new Thread(music);
 	private String nowPlaying; 
 	
@@ -239,12 +241,13 @@ public class Game extends Canvas implements Runnable {
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
 		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 0, getHeight()-19);
+		g.drawString(time.getTime(), (getWidth() - 60), (getHeight()-6));
 		if (notActive == true){			
-			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-8);
+			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-6);
 		} else{
-			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-8);
+			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-6);
 			setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7, (music.getSongName()[music.getSongNumber()].length() - 4))));
-			g.drawString(nowPlaying, (getWidth() - nowPlaying.length()) - (120 + nowPlaying.length()), getHeight() - 20 );
+			g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 8), getHeight() - 20 );
 		}
 		g.dispose();
 		bs.show();
diff --git a/src/com/redomar/game/lib/Time.java b/src/com/redomar/game/lib/Time.java
new file mode 100644
index 0000000..76cd3ef
--- /dev/null
+++ b/src/com/redomar/game/lib/Time.java
@@ -0,0 +1,18 @@
+package com.redomar.game.lib;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
+public class Time {
+
+	public Time(){
+		
+	}
+	
+	public String getTime(){
+		Calendar cal = Calendar.getInstance();
+    	cal.getTime();
+    	SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
+    	return( sdf.format(cal.getTime()) );
+	}
+}

commit 2083039c6e43242a5bc52f1b7928e5d2a6026ea2
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Aug 20 21:48:18 2013 +0100

    Changed HUD colours

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index cf3358e..2b098ac 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -241,11 +241,16 @@ public class Game extends Canvas implements Runnable {
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
 		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 0, getHeight()-19);
+		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 60), (getHeight()-6));
-		if (notActive == true){			
+		g.setColor(Color.WHITE);
+		if (notActive == true){
+			g.setColor(Color.RED);
 			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-6);
 		} else{
+			g.setColor(Color.GREEN);
 			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-6);
+			g.setColor(Color.WHITE);
 			setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7, (music.getSongName()[music.getSongNumber()].length() - 4))));
 			g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 8), getHeight() - 20 );
 		}

commit 1c6c15339cb1ef420e51c5f45ff4950451b58398
Merge: 4eb72f2 2083039
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Aug 20 21:50:04 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 72ae52144375ef9de4924bac2428338b0dbabe77
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 21 22:41:36 2013 +0100

    Updated Hud
    
    Changed the Font (size, type)
    Aligned the Text

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 2b098ac..994e187 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -4,6 +4,7 @@ import java.awt.BorderLayout;
 import java.awt.Canvas;
 import java.awt.Color;
 import java.awt.Dimension;
+import java.awt.Font;
 import java.awt.Graphics;
 import java.awt.image.BufferStrategy;
 import java.awt.image.BufferedImage;
@@ -61,8 +62,8 @@ public class Game extends Canvas implements Runnable {
 	private Music music = new Music();
 	private Time time = new Time();
 	private Thread musicThread = new Thread(music);
-	private String nowPlaying; 
-	
+	private String nowPlaying;
+	private Font arial = new Font("Arial", Font.BOLD, 14);
 	private boolean notActive = true;
 
 	private GameClient socketClient;
@@ -234,25 +235,29 @@ public class Game extends Canvas implements Runnable {
 		}
 		
 		Graphics g = bs.getDrawGraphics();
-
 		g.drawRect(0, 0, getWidth(), getHeight());
 		g.drawImage(image, 0, 0, getWidth(), getHeight()-30, null);
 //		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
-		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 0, getHeight()-19);
+		g.setFont(arial);
+		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 3, getHeight()-17);
 		g.setColor(Color.YELLOW);
-		g.drawString(time.getTime(), (getWidth() - 60), (getHeight()-6));
+		g.drawString(time.getTime(), (getWidth() - 58), (getHeight()-3));
 		g.setColor(Color.WHITE);
 		if (notActive == true){
 			g.setColor(Color.RED);
-			g.drawString("MUSIC is OFF | press 'M' to start", 0, getHeight()-6);
+			g.drawString("MUSIC is OFF | press 'M' to start", 3, getHeight()-3);
 		} else{
 			g.setColor(Color.GREEN);
-			g.drawString("MUSIC is ON | You cannot turn off the music", 0, getHeight()-6);
+			g.drawString("MUSIC is ON | You cannot turn off the music", 3, getHeight()-3);
 			g.setColor(Color.WHITE);
 			setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7, (music.getSongName()[music.getSongNumber()].length() - 4))));
-			g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 8), getHeight() - 20 );
+			if (getNowPlaying().startsWith("T")){
+				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9) + 12, getHeight() - 17);
+			} else {
+				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9) + 8, getHeight() - 17);
+			}
 		}
 		g.dispose();
 		bs.show();

commit e855eb9f3cfa2eda439d8510bf3b85bff21fc245
Merge: 1c6c153 72ae521
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 21 22:42:32 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 90fa6ee05703cef9f4fa457450a3d0417359bed4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 20:24:29 2013 +0100

    Jar Updated

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 98d1c74..7c7a17e 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit e689f556443adcc6a36db227c1bb350f8b0966a9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 22:04:02 2013 +0100

    Added features to Audio playback

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 994e187..8e809bb 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -65,10 +65,12 @@ public class Game extends Canvas implements Runnable {
 	private String nowPlaying;
 	private Font arial = new Font("Arial", Font.BOLD, 14);
 	private boolean notActive = true;
-
+	private boolean noAudioDevice = false;
+	private int trigger = 0;
 	private GameClient socketClient;
 	private GameServer socketServer;
 	
+	
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -218,15 +220,17 @@ public class Game extends Canvas implements Runnable {
 			}
 		}
 		
-		if (input.isPlayMusic() == true && notActive == true){
-			int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
-			if (musicOption == 0){
-				musicThread.start();
-				notActive = false;
-			} else {
-				System.out.println("Canceled");
-				input.setPlayMusic(false);
-			}
+		if (noAudioDevice == false){
+			if (input.isPlayMusic() == true && notActive == true){
+				int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
+				if (musicOption == 0){
+					musicThread.start();
+					notActive = false;
+				} else {
+					System.out.println("Canceled");
+					input.setPlayMusic(false);
+				}
+			}			
 		}
 		
 		if (input.isChangeLevel() == true){
@@ -245,7 +249,14 @@ public class Game extends Canvas implements Runnable {
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight()-3));
 		g.setColor(Color.WHITE);
-		if (notActive == true){
+		if(noAudioDevice == true){
+			g.setColor(Color.RED);
+			g.drawString("MUSIC is OFF | no audio device for playback", 3, getHeight()-3);
+			trigger++;
+			if(trigger == 25){
+				JOptionPane.showMessageDialog(this, "No Audio device found", "Audio Issue", 0);
+			}
+		} else if (notActive == true){
 			g.setColor(Color.RED);
 			g.drawString("MUSIC is OFF | press 'M' to start", 3, getHeight()-3);
 		} else{

commit 8c07849f4bcf4d4a8791f4740166746649e0c194
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 22:23:59 2013 +0100

    Added a carpet tile

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
index 2e54f68..c437ead 100644
Binary files a/res/levels/custom_level.png and b/res/levels/custom_level.png differ
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index d64ca1a..d06a76d 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -6,17 +6,23 @@ import com.redomar.game.level.LevelHandler;
 
 public abstract class Tile {
 
+	//ID SYSTEM
+	//VOID 		0 and 0s
+	//BASIC		1 - 9
+	//SOLID		11 - 19
+	//ANIMATED	21	- 29
 	private static final Tile[] tiles = new Tile[256];
 	private static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,	-1, -1, -1), 0xFF000000);
-	private static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
-	private static final Tile CHISELED_stone = new BasicTile(2, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
-	private static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
-	private static final Tile WATER = new AnimatedTile(4, new int[][] {	{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,	-1), 0xFF0000FF, 1000);
-	private static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(131, 151, 510, 553), 0xFFCCFF33);
-	private static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,	Colours.get(131, 151, 553, 510), 0xFFFFCC33);
-	private static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553, 554, 555), 0xFFFFFF99);
-	private static final Tile CHEST_a = new BasicSolidTile(8, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
-	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
+	private static final Tile STONE = new BasicSolidTile(11, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
+	private static final Tile CHISELED_stone = new BasicTile(1, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
+	private static final Tile GRASS = new BasicTile(2, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
+	private static final Tile WATER = new AnimatedTile(21, new int[][] {	{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,	-1), 0xFF0000FF, 1000);
+	private static final Tile FLOWER_rose = new BasicTile(3, 4, 0, Colours.get(131, 151, 510, 553), 0xFFCCFF33);
+	private static final Tile FLOWER_dandelion = new BasicTile(4, 4, 0,	Colours.get(131, 151, 553, 510), 0xFFFFCC33);
+	private static final Tile SAND = new BasicTile(5, 5, 0, Colours.get(-1, 553, 554, 555), 0xFFFFFF99);
+	private static final Tile CHEST_a = new BasicSolidTile(12, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
+	private static final Tile CHEST_b = new BasicSolidTile(13, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
+	private static final Tile CARPET_red = new BasicTile(6, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
 
 	protected byte id;
 	protected boolean solid;
@@ -101,4 +107,8 @@ public abstract class Tile {
 		return CHEST_b;
 	}
 
+	public static Tile getCarpetRed() {
+		return CARPET_red;
+	}
+
 }

commit a1915f66c4a05720ba7538b981d7707820e6ce10
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 22:40:30 2013 +0100

    testing out travis

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..357ef4c
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,4 @@
+language: java
+jdk:
+  - openjdk7
+  - oraclejdk7
\ No newline at end of file

commit 1314909e55d21c9be2bf6efbfd21f263f54d4c1f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 23:06:34 2013 +0100

    Java ant build

diff --git a/build.xml b/build.xml
new file mode 100644
index 0000000..9bf6f7c
--- /dev/null
+++ b/build.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<project default="create_run_jar" name="Create Runnable Jar for Project JavaGame with Jar-in-Jar Loader">
+    <!--this file was created by Eclipse Runnable JAR Export Wizard-->
+    <!--ANT 1.7 is required                                        -->
+    <target name="create_run_jar">
+        <jar destfile="C:/Users/mohamed/Documents/GitHub/JavaGame/jar/javagame.jar">
+            <manifest>
+                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
+                <attribute name="Rsrc-Main-Class" value="com.redomar.game.Game"/>
+                <attribute name="Class-Path" value="."/>
+                <attribute name="Rsrc-Class-Path" value="./ commons-lang3-3.1.jar jl1.0.1.jar JSplashScreen.jar"/>
+            </manifest>
+            <zipfileset src="jar-in-jar-loader.zip"/>
+            <fileset dir="C:/Users/mohamed/Documents/GitHub/JavaGame/bin"/>
+            <zipfileset dir="C:\Users\mohamed\Documents\GitHub\JavaGame\res\jars" includes="commons-lang3-3.1.jar"/>
+            <zipfileset dir="C:\Users\mohamed\Documents\GitHub\JavaGame\res\jars" includes="jl1.0.1.jar"/>
+            <zipfileset dir="C:\Users\mohamed\Documents\GitHub\JavaGame\res\jars" includes="JSplashScreen.jar"/>
+            <fileset dir="C:/Users/mohamed/Documents/GitHub/JavaGame/res"/>
+        </jar>
+    </target>
+</project>
diff --git a/jar-in-jar-loader.zip b/jar-in-jar-loader.zip
new file mode 100644
index 0000000..6ee1217
Binary files /dev/null and b/jar-in-jar-loader.zip differ
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 7c7a17e..6329855 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 13440e29dda82359f1f9a31527a33e5892261920
Merge: 1314909 8c07849
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 12 23:59:23 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 6e78e9b898059b67fa93ca68cc15c980b708a12b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 13 18:41:31 2013 +0100

    Cleared tile id conflict

diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index d06a76d..627e720 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -6,23 +6,18 @@ import com.redomar.game.level.LevelHandler;
 
 public abstract class Tile {
 
-	//ID SYSTEM
-	//VOID 		0 and 0s
-	//BASIC		1 - 9
-	//SOLID		11 - 19
-	//ANIMATED	21	- 29
 	private static final Tile[] tiles = new Tile[256];
 	private static final Tile VOID = new BasicSolidTile(0, 0, 0, Colours.get(0,	-1, -1, -1), 0xFF000000);
-	private static final Tile STONE = new BasicSolidTile(11, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
-	private static final Tile CHISELED_stone = new BasicTile(1, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
-	private static final Tile GRASS = new BasicTile(2, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
-	private static final Tile WATER = new AnimatedTile(21, new int[][] {	{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,	-1), 0xFF0000FF, 1000);
-	private static final Tile FLOWER_rose = new BasicTile(3, 4, 0, Colours.get(131, 151, 510, 553), 0xFFCCFF33);
-	private static final Tile FLOWER_dandelion = new BasicTile(4, 4, 0,	Colours.get(131, 151, 553, 510), 0xFFFFCC33);
-	private static final Tile SAND = new BasicTile(5, 5, 0, Colours.get(-1, 553, 554, 555), 0xFFFFFF99);
-	private static final Tile CHEST_a = new BasicSolidTile(12, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
-	private static final Tile CHEST_b = new BasicSolidTile(13, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
-	private static final Tile CARPET_red = new BasicTile(6, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
+	private static final Tile STONE = new BasicSolidTile(1, 1, 0, Colours.get(-1, 444, 333, -1), 0xFF555555);
+	private static final Tile CHISELED_stone = new BasicTile(2, 2, 0, Colours.get(-1, 333, 222, -1), 0xFF666666);
+	private static final Tile GRASS = new BasicTile(3, 3, 0, Colours.get(-1, 131, 141, -1), 0xFF00FF00);
+	private static final Tile WATER = new AnimatedTile(4, new int[][] {	{ 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 004, 115,	-1), 0xFF0000FF, 1000);
+	private static final Tile FLOWER_rose = new BasicTile(5, 4, 0, Colours.get(131, 151, 510, 553), 0xFFCCFF33);
+	private static final Tile FLOWER_dandelion = new BasicTile(6, 4, 0,	Colours.get(131, 151, 553, 510), 0xFFFFCC33);
+	private static final Tile SAND = new BasicTile(7, 5, 0, Colours.get(-1, 553, 554, 555), 0xFFFFFF99);
+	private static final Tile CHEST_a = new BasicSolidTile(8, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
+	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
+	private static final Tile CARPET_red = new BasicTile(10, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
 
 	protected byte id;
 	protected boolean solid;

commit 8733a8473e4c774bdfa32b9686f093d6700ce3fd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 13 19:04:33 2013 +0100

    Updating for Alpha 1.5.4

diff --git a/.travis.yml b/.travis.yml
index 357ef4c..f5c99a7 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1 @@
-language: java
-jdk:
-  - openjdk7
-  - oraclejdk7
\ No newline at end of file
+language: java
\ No newline at end of file
diff --git a/README.md b/README.md
index 561b573..b270bea 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.5.3
+JavaGame Alpha v1.5.4
 =====================
 
 #####What is JavaGame?
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 6329855..0a1b4ae 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 9a52caa..df02af2 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -31,7 +31,7 @@ import com.thehowtotutorial.splashscreen.JSplash;
 public class Game extends Canvas implements Runnable {
 
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.5.3 Alpha";
+	private static final String game_Version = "v1.5.4 Alpha";
 
 	// Setting the size and name of the frame/canvas
 	private static final int WIDTH = 160;

commit 8c4af163c7a15666803def7595987c9590d5514b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 15 00:34:36 2013 +0100

    Worked on Font and Menu

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 9a52caa..a399b49 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -4,7 +4,6 @@ import java.awt.BorderLayout;
 import java.awt.Canvas;
 import java.awt.Color;
 import java.awt.Dimension;
-import java.awt.Font;
 import java.awt.Graphics;
 import java.awt.image.BufferStrategy;
 import java.awt.image.BufferedImage;
@@ -21,6 +20,7 @@ import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Music;
 import com.redomar.game.lib.Time;
 import com.redomar.game.net.GameClient;
@@ -62,9 +62,9 @@ public class Game extends Canvas implements Runnable {
 	private Player player;
 	private Music music = new Music();
 	private Time time = new Time();
+	private Font font = new Font();
 	private Thread musicThread = new Thread(music);
 	private String nowPlaying;
-	private Font arial = new Font("Arial", Font.BOLD, 14);
 	private boolean notActive = true;
 	private boolean noAudioDevice = false;
 	private int trigger = 0;
@@ -245,7 +245,7 @@ public class Game extends Canvas implements Runnable {
 //		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
 		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
-		g.setFont(arial);
+		g.setFont(font.getSegoe());
 		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 3, getHeight()-17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight()-3));
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
index e781df0..377e1ec 100644
--- a/src/com/redomar/game/lib/Font.java
+++ b/src/com/redomar/game/lib/Font.java
@@ -3,6 +3,14 @@ package com.redomar.game.lib;
 import com.redomar.game.gfx.Screen;
 
 public class Font {
+	
+	private static java.awt.Font arial;
+	private static java.awt.Font segoe;
+	
+	public Font(){
+		Font.setArial(new java.awt.Font("Arial", java.awt.Font.BOLD, 14));
+		Font.setSegoe(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
+	}
 
 	private static String chars = "" + "ABCDEFGHIJKLMNOPQRSTUVWXYZ      "
 			+ "0123456789.,:;'\"!?$%()-=+/      ";
@@ -20,4 +28,20 @@ public class Font {
 		}
 	}
 
+	public java.awt.Font getArial() {
+		return arial;
+	}
+
+	public static void setArial(java.awt.Font arial) {
+		Font.arial = arial;
+	}
+
+	public java.awt.Font getSegoe() {
+		return segoe;
+	}
+
+	public static void setSegoe(java.awt.Font segoe) {
+		Font.segoe = segoe;
+	}
+
 }
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 3512569..2282f4c 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -1,18 +1,21 @@
 package com.redomar.game.menu;
 
 import java.awt.BorderLayout;
+import java.awt.Canvas;
 import java.awt.Dimension;
 
 import javax.swing.JFrame;
 
-public class DedicatedJFrame {
+public class DedicatedJFrame extends Canvas {
 
+	private static final long serialVersionUID = 1L;
 	private static JFrame frame;
 
 	public DedicatedJFrame(int WIDTH, int HEIGHT, int SCALE, String NAME){
 		setFrame(new JFrame(NAME));
 		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		getFrame().setLayout(new BorderLayout());
+		getFrame().add(this, BorderLayout.CENTER);
 		getFrame().pack();
 		getFrame().setResizable(false);
 		getFrame().setLocationRelativeTo(null);
@@ -31,4 +34,5 @@ public class DedicatedJFrame {
 		DedicatedJFrame.frame = frame;
 	}
 	
+	
 }
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 159fd39..0589068 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -1,7 +1,10 @@
 package com.redomar.game.menu;
 
 import java.awt.Color;
-import java.util.Random;
+import java.awt.Graphics;
+import java.awt.image.BufferStrategy;
+
+import com.redomar.game.lib.Font;
 
 
 
@@ -13,6 +16,7 @@ public class Menu implements Runnable{
 	private static final String NAME = "Menu";
 	
 	private DedicatedJFrame frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+	private Font font = new Font();
 	
 	private boolean running = false;
 	
@@ -27,7 +31,7 @@ public class Menu implements Runnable{
 	
 	public void run() {
 		long lastTime = System.nanoTime();
-		double nsPerTick = 1000000000D / 3D;
+		double nsPerTick = 1000000000D / 30D;
 
 		int ticks = 0;
 		int frames = 0;
@@ -68,22 +72,25 @@ public class Menu implements Runnable{
 	}
 
 	private void render() {
-		frame.getFrame().getContentPane().setBackground(Color.BLACK);
-		
-		Random rand = new Random();
-		
-		float r = rand.nextFloat();
-		float g = rand.nextFloat();
-		float b = rand.nextFloat();
-		
-		Color randomColor = new Color(r, g, b);
-		
-		frame.getFrame().getContentPane().setBackground(randomColor);
+		//frame.getFrame().getContentPane().setBackground(Color.GREEN);
+		BufferStrategy bs = frame.getBufferStrategy();
+		if (bs == null) {
+			frame.createBufferStrategy(3);
+			return;
+		}
+		Graphics g = bs.getDrawGraphics();
+		g.setColor(Color.BLACK);
+		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
+		g.setColor(new Color(0xFFFF9900));
+		g.setFont(font.getArial());
+		g.drawString("Testing Phase...",40,30);
+		bs.show();
+		g.dispose();
 		
 	}
 
-//	public static void main(String[] args) {
-//		new Menu().start();
-//	}
+	public static void main(String[] args) {
+		new Menu().start();
+	}
 	
 }

commit 7cc0add4489bf044150310668304c1c17f37ebed
Merge: 8733a84 8c4af16
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 15 00:39:34 2013 +0100

    Merge branch 'aside'

commit 56023e16907bce380e31685694cc192dd6d488bc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 15 15:41:37 2013 +0100

    Update README.md

diff --git a/README.md b/README.md
index b270bea..784a6d2 100644
--- a/README.md
+++ b/README.md
@@ -7,6 +7,8 @@ JavaGame is a game project that i am working on for an assignment for college.
 #####Why name it JavaGame?
 Well i'm still not sure what exactly i'm going to do with it, and I haven't thought of a suitable name either
 
+#####How to download this repository for eclipse tutorial
+Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pages](http://redomar.github.io/JavaGame/)
 ####How to use this repository
 
 * Fork it.

commit a14d7b3d9450cb622636d157a598ba0553449883
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 16 17:27:57 2013 +0100

    Started on Menu Buttons

diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 0589068..992780c 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -19,6 +19,7 @@ public class Menu implements Runnable{
 	private Font font = new Font();
 	
 	private boolean running = false;
+	private boolean selected = true;
 	
 	public synchronized void start() {
 		running = true;
@@ -83,7 +84,31 @@ public class Menu implements Runnable{
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
 		g.setColor(new Color(0xFFFF9900));
 		g.setFont(font.getArial());
-		g.drawString("Testing Phase...",40,30);
+		//g.drawString("Testing Phase...",40,30);
+		//(LEFT,DOWN,WIDTH,HEIGHT)
+		if (selected == true){
+			//START
+			g.setColor(new Color(0xFFFF8800));
+			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Start", 220, 85);
+			//EXIT
+			g.setColor(new Color(0xFFFF8800));
+			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Exit", 220, 210);
+		} else {
+			//START
+			g.setColor(new Color(0xFFFF8833));
+			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Start", 220, 85);
+			//EXIT
+			g.setColor(new Color(0xFFFF8833));
+			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Exit", 220, 210);
+		}
 		bs.show();
 		g.dispose();
 		

commit 5f5d58e2afedee2efe012ce70b65246c89af5e64
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 19 23:05:56 2013 +0100

    Getting Inputs for the menu ready

diff --git a/src/com/redomar/game/lib/Keys.java b/src/com/redomar/game/lib/Keys.java
new file mode 100644
index 0000000..feb3401
--- /dev/null
+++ b/src/com/redomar/game/lib/Keys.java
@@ -0,0 +1,73 @@
+package com.redomar.game.lib;
+
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+
+import com.redomar.game.Game;
+
+public class Keys implements KeyListener {
+	public Keys(Game game) {
+		game.addKeyListener(this);
+	}
+
+	public class Key {
+		private int numTimesPressed = 0;
+		private boolean pressed = false;
+
+		public int getNumTimesPressed() {
+			return numTimesPressed;
+		}
+
+		public boolean isPressed() {
+			return pressed;
+		}
+
+		public void toggle(boolean isPressed) {
+			pressed = isPressed;
+			if (isPressed) {
+				numTimesPressed++;
+			}
+		}
+	}
+
+	private Key up = new Key();
+	private Key down = new Key();
+
+	public void keyPressed(KeyEvent arg0) {
+		
+	}
+
+	public void keyReleased(KeyEvent arg0) {
+		
+	}
+
+	public void keyTyped(KeyEvent arg0) {
+		
+	}
+	
+	public void toggleKey(int keyCode, boolean isPressed) {
+		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
+			getUp().toggle(isPressed);
+		}
+		if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
+			getDown().toggle(isPressed);
+		}
+	}
+
+	public Key getUp() {
+		return up;
+	}
+
+	public void setUp(Key up) {
+		this.up = up;
+	}
+
+	public Key getDown() {
+		return down;
+	}
+
+	public void setDown(Key down) {
+		this.down = down;
+	}
+
+}
diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
new file mode 100644
index 0000000..424bd88
--- /dev/null
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -0,0 +1,37 @@
+package com.redomar.game.lib;
+
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+import java.awt.event.MouseMotionListener;
+
+public class Mouse implements MouseListener, MouseMotionListener{
+
+	public void mouseDragged(MouseEvent e) {
+		System.out.println("Dragged");
+	}
+
+	public void mouseMoved(MouseEvent e) {
+		System.out.println("Moved");
+	}
+
+	public void mouseClicked(MouseEvent e) {
+		System.out.println("Clicked");
+	}
+
+	public void mouseEntered(MouseEvent e) {
+		System.out.println("Enter");
+	}
+
+	public void mouseExited(MouseEvent e) {
+		System.out.println("Exit");
+	}
+
+	public void mousePressed(MouseEvent e) {
+		System.out.println("Press");
+	}
+
+	public void mouseReleased(MouseEvent e) {
+		System.out.println("Release");
+	}
+
+}

commit c0993f71970c87d8e4e1c213207b91924c19d8c0
Merge: 56023e1 5f5d58e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Sep 19 23:39:07 2013 +0100

    Merge branch 'aside'

commit 85b780acb31a841ab12305a915f6debac1883c5c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 18:51:42 2013 +0100

    Added a 'dummy' NPC

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index a399b49..924fbad 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -15,6 +15,7 @@ import javax.swing.UIManager;
 
 import org.apache.commons.lang3.text.WordUtils;
 
+import com.redomar.game.entities.Dummy;
 import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
@@ -60,6 +61,7 @@ public class Game extends Canvas implements Runnable {
 	private WindowHandler window;
 	private LevelHandler level;
 	private Player player;
+	private Dummy dummy;
 	private Music music = new Music();
 	private Time time = new Time();
 	private Font font = new Font();
@@ -120,6 +122,8 @@ public class Game extends Canvas implements Runnable {
 		setLevel(new LevelHandler(Map_str));
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				Jdata_UserName, null, -1));
+		dummy = new Dummy(getLevel(), "h", 100, 90, 1);
+		level.addEntity(dummy);
 		level.addEntity(player);
 	}
 
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
new file mode 100644
index 0000000..b0b5faf
--- /dev/null
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -0,0 +1,81 @@
+package com.redomar.game.entities;
+
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public class Dummy extends Mob{
+	
+	private int colour = Colours.get(-1, 111, 240, 310);
+	private int tickCount = 0;
+	
+	public Dummy(LevelHandler level, String name, int x, int y, int speed) {
+		super(level, "h", x, y, 1);
+	}
+
+	public boolean hasCollided(int xa, int ya) {
+		return false;
+	}
+	
+	public void tick() {
+		
+	}
+
+	public void render(Screen screen) {
+		int xTile = 0;
+		int yTile = 28;
+		int walkingSpeed = 4;
+		int flipTop = (numSteps >> walkingSpeed) & 1;
+		int flipBottom = (numSteps >> walkingSpeed) & 1;
+
+		if (movingDir == 1) {
+			xTile += 2;
+		} else if (movingDir > 1) {
+			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
+			flipTop = (movingDir - 1) % 2;
+		}
+
+		int modifier = 8 * scale;
+		int xOffset = x - modifier / 2;
+		int yOffset = y - modifier / 2 - 4;
+
+		if (isSwimming) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, 310);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 255, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 225, 115, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 115, -1, 225);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 225, 115);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
+
+		screen.render((xOffset + (modifier * flipTop)), yOffset,
+				(xTile + yTile * 32), colour, flipTop, scale);
+		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
+				((xTile + 1) + yTile * 32), colour, flipTop, scale);
+		if (!isSwimming) {
+			screen.render((xOffset + (modifier * flipBottom)),
+					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
+					flipBottom, scale);
+			screen.render((xOffset + modifier - (modifier * flipBottom)),
+					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
+					colour, flipBottom, scale);
+			colour = Colours.get(-1, 111, 054, 543);
+		}
+	}
+
+}
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index c559358..662eb62 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -84,6 +84,26 @@ public class Screen {
 		}
 
 	}
+	
+	public void renderMob(int xPos, int yPos, SpriteSheet sprite, int flip){
+		xPos -= xOffset;
+		yPos -= yOffset;
+		
+		for (int y = 0; y < 8; y++){
+			int ya = y + yPos;
+			int ys = y;
+			if(flip == 2 || flip == 3) ys = 7 - y;
+			for (int x = 0; y < 8; x++){
+				int xa = x + xPos;
+				int xs = y;
+				if(flip == 1 || flip == 3) xs = 7 - x;
+				if(xa <- 7 || xa >= width || ya < 0 || ya >= height) break;
+				if(xa < 0) xa = 0;
+				int col = sprite.pixels[xs + ys * 8];
+				if(col != 0x00000000) pixels[xa + ya * width] = col;
+			}
+		}
+	}
 
 	public void setOffset(int xOffset, int yOffset) {
 		this.xOffset = xOffset;

commit 817a5acba5a973111dba7005148e16da2c58dda2
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 19:04:58 2013 +0100

    Updated sprite for NPC

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index ce60195..f61ba26 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index b0b5faf..c917967 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -22,7 +22,7 @@ public class Dummy extends Mob{
 	}
 
 	public void render(Screen screen) {
-		int xTile = 0;
+		int xTile = 8;
 		int yTile = 28;
 		int walkingSpeed = 4;
 		int flipTop = (numSteps >> walkingSpeed) & 1;

commit 77b68096562a997c87a3a312ef03011eac15d5b0
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 19:50:40 2013 +0100

    Added walking and collision to the NPC

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index c917967..7737516 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -14,10 +14,77 @@ public class Dummy extends Mob{
 	}
 
 	public boolean hasCollided(int xa, int ya) {
+		int xMin = 0;
+		int xMax = 7;
+		int yMin = 3;
+		int yMax = 7;
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMin)) {
+				return true;
+			}
+		}
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMax)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMin, y)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMax, y)) {
+				return true;
+			}
+		}
+
 		return false;
 	}
 	
 	public void tick() {
+		int xa = 0;
+		int ya = 0;
+
+//		if (input != null) {
+//			if (input.getUp().isPressed()) {
+//				ya--;
+//			}
+//			if (input.getDown().isPressed()) {
+//				ya++;
+//			}
+//			if (input.getLeft().isPressed()) {
+//				xa--;
+//			}
+//			if (input.getRight().isPressed()) {
+//				xa++;
+//			}
+//		}
+		
+		if (xa != 0 || ya != 0) {
+			move(xa, ya);
+			isMoving = true;
+			
+//			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y, this.numSteps, this.isMoving, this.movingDir);
+//			packet.writeData(Game.getGame().getSocketClient());
+			
+		} else {
+			isMoving = false;
+		}
+
+		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 4) {
+			isSwimming = true;
+		}
+
+		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
+			isSwimming = false;
+		}
+
+		tickCount++;
 		
 	}
 
@@ -43,7 +110,7 @@ public class Dummy extends Mob{
 			int waterColour = 0;
 			yOffset += 4;
 
-			colour = Colours.get(-1, 111, -1, 310);
+			colour = Colours.get(-1, 111, -1, 543);
 
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, 255, -1);
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index 662eb62..c559358 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -84,26 +84,6 @@ public class Screen {
 		}
 
 	}
-	
-	public void renderMob(int xPos, int yPos, SpriteSheet sprite, int flip){
-		xPos -= xOffset;
-		yPos -= yOffset;
-		
-		for (int y = 0; y < 8; y++){
-			int ya = y + yPos;
-			int ys = y;
-			if(flip == 2 || flip == 3) ys = 7 - y;
-			for (int x = 0; y < 8; x++){
-				int xa = x + xPos;
-				int xs = y;
-				if(flip == 1 || flip == 3) xs = 7 - x;
-				if(xa <- 7 || xa >= width || ya < 0 || ya >= height) break;
-				if(xa < 0) xa = 0;
-				int col = sprite.pixels[xs + ys * 8];
-				if(col != 0x00000000) pixels[xa + ya * width] = col;
-			}
-		}
-	}
 
 	public void setOffset(int xOffset, int yOffset) {
 		this.xOffset = xOffset;

commit ced0627f1c4fd0afb32f3f31248c3092c8ab6811
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 20:15:16 2013 +0100

    Getting ready for NPC merge

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index a399b49..8c34aaa 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -105,7 +105,7 @@ public class Game extends Canvas implements Runnable {
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
 		setWindow(new WindowHandler(this));
-		setMap("/levels/custom_level.png");
+		setMap("/levels/custom_level.png");// the map
 		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
 
 		if (socketServer != null) {

commit 2792e496e862c56a0a7b59163e02cab89b8c00af
Merge: ced0627 77b6809
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 20:17:17 2013 +0100

    Merge remote-tracking branch 'origin/npc-dev' into aside

commit 65440b9298853e500dddca47ce502a439f5fd43b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 20 23:49:22 2013 +0100

    Added basic AI to the dummy NPC

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 924fbad..04296c3 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -122,7 +122,7 @@ public class Game extends Canvas implements Runnable {
 		setLevel(new LevelHandler(Map_str));
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				Jdata_UserName, null, -1));
-		dummy = new Dummy(getLevel(), "h", 100, 90, 1);
+		dummy = new Dummy(getLevel(), "h", 215, 215, 1);
 		level.addEntity(dummy);
 		level.addEntity(player);
 	}
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 7737516..a5b5ea1 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -8,6 +8,9 @@ public class Dummy extends Mob{
 	
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
+	private int tick = 0;
+	private int xa = 0;
+	private int ya = 0;
 	
 	public Dummy(LevelHandler level, String name, int x, int y, int speed) {
 		super(level, "h", x, y, 1);
@@ -47,23 +50,15 @@ public class Dummy extends Mob{
 	}
 	
 	public void tick() {
-		int xa = 0;
-		int ya = 0;
-
-//		if (input != null) {
-//			if (input.getUp().isPressed()) {
-//				ya--;
-//			}
-//			if (input.getDown().isPressed()) {
-//				ya++;
-//			}
-//			if (input.getLeft().isPressed()) {
-//				xa--;
-//			}
-//			if (input.getRight().isPressed()) {
-//				xa++;
-//			}
-//		}
+		tick++;
+		if(tick % (random.nextInt(50) +30) == 0){
+			xa = random.nextInt(3) -1;
+			ya = random.nextInt(3) -1;
+			if(random.nextInt(4) == 0){
+				xa = 0;
+				ya = 0;
+			}
+		}
 		
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 5a2cd3a..f711c2d 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -1,11 +1,14 @@
 package com.redomar.game.entities;
 
+import java.util.Random;
+
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.level.tiles.Tile;
 
 public abstract class Mob extends Entity {
 
 	protected String name;
+	protected Random random = new Random();
 	protected int speed;
 	protected int numSteps = 0;
 	protected boolean isMoving;

commit 3b00d3f13706c2d2fc10f860c8a574725ce59aed
Merge: 2792e49 65440b9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 00:29:14 2013 +0100

    Merge remote-tracking branch 'origin/npc-dev' into aside

commit a129bcbe40b21b4a4d5c6032b89ac8ca67471d6c
Merge: c0993f7 3b00d3f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 00:30:55 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 083f24c1d7cd1e72264a5a7a26cca21e9171b937
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 14:14:59 2013 +0100

    added Player-NPC interaction
    
    also changed where NPC colours are rendered

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 04296c3..2a55070 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -60,7 +60,7 @@ public class Game extends Canvas implements Runnable {
 	private InputHandler input;
 	private WindowHandler window;
 	private LevelHandler level;
-	private Player player;
+	private static Player player;
 	private Dummy dummy;
 	private Music music = new Music();
 	private Time time = new Time();
@@ -122,7 +122,7 @@ public class Game extends Canvas implements Runnable {
 		setLevel(new LevelHandler(Map_str));
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				Jdata_UserName, null, -1));
-		dummy = new Dummy(getLevel(), "h", 215, 215, 1);
+		dummy = new Dummy(getLevel(), "h", 215, 215, 500, 543);
 		level.addEntity(dummy);
 		level.addEntity(player);
 	}
@@ -339,12 +339,12 @@ public class Game extends Canvas implements Runnable {
 		this.socketClient = socketClient;
 	}
 
-	public Player getPlayer() {
+	public static Player getPlayer() {
 		return player;
 	}
 
 	public void setPlayer(Player player) {
-		this.player = player;
+		Game.player = player;
 	}
 
 	public LevelHandler getLevel() {
diff --git a/src/com/redomar/game/WindowHandler.java b/src/com/redomar/game/WindowHandler.java
index 3c9f534..9c89196 100644
--- a/src/com/redomar/game/WindowHandler.java
+++ b/src/com/redomar/game/WindowHandler.java
@@ -26,7 +26,7 @@ public class WindowHandler implements WindowListener{
 
 	@Override
 	public void windowClosing(WindowEvent event) {
-		Packet01Disconnect packet = new Packet01Disconnect(this.game.getPlayer().getUsername());
+		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
 		packet.writeData(this.game.getSocketClient());
 	}
 
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index a5b5ea1..13c3562 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -1,19 +1,26 @@
 package com.redomar.game.entities;
 
+import javax.swing.JOptionPane;
+
+import com.redomar.game.Game;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
 
 public class Dummy extends Mob{
 	
-	private int colour = Colours.get(-1, 111, 240, 310);
+	private int colour, shirtCol, faceCol; //= Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private int tick = 0;
 	private int xa = 0;
 	private int ya = 0;
+	private int xes = 0;
 	
-	public Dummy(LevelHandler level, String name, int x, int y, int speed) {
+	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol, int faceCol) {
 		super(level, "h", x, y, 1);
+		this.faceCol = faceCol;
+		this.shirtCol = shirtCol;
+		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
 	}
 
 	public boolean hasCollided(int xa, int ya) {
@@ -60,6 +67,11 @@ public class Dummy extends Mob{
 			}
 		}
 		
+		if(Game.getPlayer().x == x && Game.getPlayer().y == y && xes == 0){
+			JOptionPane.showMessageDialog(Game.getGame(), "Zombie Eat You @"+x+" "+y, "Zombie", 1);
+			xes++;
+		}
+		
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);
 			isMoving = true;
@@ -105,7 +117,7 @@ public class Dummy extends Mob{
 			int waterColour = 0;
 			yOffset += 4;
 
-			colour = Colours.get(-1, 111, -1, 543);
+			colour = Colours.get(-1, 111, -1, faceCol);
 
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, 255, -1);
@@ -136,7 +148,7 @@ public class Dummy extends Mob{
 			screen.render((xOffset + modifier - (modifier * flipBottom)),
 					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
 					colour, flipBottom, scale);
-			colour = Colours.get(-1, 111, 054, 543);
+			colour = Colours.get(-1, 111, shirtCol, faceCol);
 		}
 	}
 

commit ace4e7cc7993c4aa37c921217e7cb5e4e3bb9cda
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 16:25:35 2013 +0100

    Re-enabled teleportation and added a portal

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
index c437ead..43ff8e5 100644
Binary files a/res/levels/custom_level.png and b/res/levels/custom_level.png differ
diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index f61ba26..0412e02 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 2a55070..bb6cb26 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -43,6 +43,8 @@ public class Game extends Canvas implements Runnable {
 	private static int Jdata_Host;
 	private static String Jdata_UserName = "";
 	private static String Jdata_IP = "127.0.0.1";
+	private static boolean changeLevel = false;
+	private static int map = 0;
 
 	private JFrame frame;
 
@@ -108,6 +110,7 @@ public class Game extends Canvas implements Runnable {
 		input = new InputHandler(this);
 		setWindow(new WindowHandler(this));
 		setMap("/levels/custom_level.png");
+		setMap(1);
 		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
 
 		if (socketServer != null) {
@@ -238,11 +241,22 @@ public class Game extends Canvas implements Runnable {
 			}			
 		}
 		
-		if (input.isChangeLevel() == true){
-			JOptionPane.showMessageDialog(this, "Switching Levels is currently disabled");
+		if (input.isChangeLevel() == true && getTickCount() % 60 == 0){
+			Game.setChangeLevel(true);
 			input.setChangeLevel(false);
 		}
 		
+		if (changeLevel == true){
+			if(getMap() == 1){
+				setMap("/levels/water_level.png");	
+				setMap(2);
+			}else if(getMap() == 2){
+				setMap("/levels/custom_level.png");
+				setMap(1);
+			}
+			changeLevel = false;
+		}
+		
 		Graphics g = bs.getDrawGraphics();
 		g.drawRect(0, 0, getWidth(), getHeight());
 		g.drawImage(image, 0, 0, getWidth(), getHeight()-30, null);
@@ -387,4 +401,20 @@ public class Game extends Canvas implements Runnable {
 		Game.game = game;
 	}
 
+	public static boolean isChangeLevel() {
+		return changeLevel;
+	}
+
+	public static void setChangeLevel(boolean changeLevel) {
+		Game.changeLevel = changeLevel;
+	}
+
+	public static int getMap() {
+		return map;
+	}
+
+	public static void setMap(int map) {
+		Game.map = map;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index b370bee..7963cfc 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -73,7 +73,9 @@ public class InputHandler implements KeyListener {
 //				Game.getGame().setMap("/levels/custom_level.png");
 //				map--;
 //			}
-			this.setChangeLevel(true);
+			if(Game.getMap() == 2){
+				this.setChangeLevel(true);
+			}
 		}
 	}
 
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index f711c2d..0e7300c 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -15,6 +15,7 @@ public abstract class Mob extends Entity {
 	protected int movingDir = 1;
 	protected int scale = 1;
 	protected boolean isSwimming = false;
+	protected boolean changeLevels = false;
 
 	public Mob(LevelHandler level, String name, int x, int y, int speed) {
 		super(level);
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 5d8ee9b..ddbbf22 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -64,6 +64,10 @@ public class Player extends Mob {
 		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
 			isSwimming = false;
 		}
+		
+		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 11){
+			changeLevels = true;
+		}
 
 		tickCount++;
 	}
@@ -85,6 +89,10 @@ public class Player extends Mob {
 		int modifier = 8 * scale;
 		int xOffset = x - modifier / 2;
 		int yOffset = y - modifier / 2 - 4;
+		
+		if (changeLevels){
+			Game.setChangeLevel(true);
+		}
 
 		if (isSwimming) {
 			int waterColour = 0;
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 627e720..29cfbba 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -18,6 +18,7 @@ public abstract class Tile {
 	private static final Tile CHEST_a = new BasicSolidTile(8, 0, 1, Colours.get(333, 111, 420, 000), 0xFFFF0001);
 	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
 	private static final Tile CARPET_red = new BasicTile(10, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
+	private static final Tile PORTAL = new AnimatedTile(11, new int[][] { { 3,  5 },  { 4, 5 }, { 5, 5 }, { 6, 5 }, { 7, 5 }, { 8, 5 }, { 9, 5 }, { 10, 5 } },  Colours.get(-1, 005, 305, -1), 0xFF00EAFF, 100);
 
 	protected byte id;
 	protected boolean solid;
@@ -106,4 +107,8 @@ public abstract class Tile {
 		return CARPET_red;
 	}
 
+	public static Tile getPortal() {
+		return PORTAL;
+	}
+
 }

commit 12663d9b13eafb3167202f46b77d904e56bdc8c0
Merge: 3b00d3f ace4e7c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 16:32:56 2013 +0100

    Merge branch 'aside'

commit d91f7c58ec42ffbb1484115ff6bbf43c79655d07
Merge: a129bcb 12663d9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Sep 21 16:34:18 2013 +0100

    Merge branch 'aside'

commit 16fe974be8d17998ddc450255055d611c2db380a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 27 17:35:18 2013 +0100

    Simply changed the X and Y coords (of enities) to protected

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index bb6cb26..c98c4c1 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -111,7 +111,7 @@ public class Game extends Canvas implements Runnable {
 		setWindow(new WindowHandler(this));
 		setMap("/levels/custom_level.png");
 		setMap(1);
-		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.x, player.y);
+		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.getX(), player.getY());
 
 		if (socketServer != null) {
 			socketServer.addConnection((PlayerMP) getPlayer(), loginPacket);
@@ -205,8 +205,8 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		int xOffset = getPlayer().x - (screen.getWidth() / 2);
-		int yOffset = getPlayer().y - (screen.getHeight() / 2);
+		int xOffset = getPlayer().getX() - (screen.getWidth() / 2);
+		int yOffset = getPlayer().getY() - (screen.getHeight() / 2);
 
 		getLevel().renderTiles(screen, xOffset, yOffset);
 
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 13c3562..e1d6475 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -67,8 +67,8 @@ public class Dummy extends Mob{
 			}
 		}
 		
-		if(Game.getPlayer().x == x && Game.getPlayer().y == y && xes == 0){
-			JOptionPane.showMessageDialog(Game.getGame(), "Zombie Eat You @"+x+" "+y, "Zombie", 1);
+		if(Game.getPlayer().getX() == getX() && Game.getPlayer().getY() == getY() && xes == 0){
+			JOptionPane.showMessageDialog(Game.getGame(), "Zombie Eat You @"+getX()+" "+getY(), "Zombie", 1);
 			xes++;
 		}
 		
@@ -83,11 +83,11 @@ public class Dummy extends Mob{
 			isMoving = false;
 		}
 
-		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 4) {
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
 
-		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
+		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
 
@@ -110,8 +110,8 @@ public class Dummy extends Mob{
 		}
 
 		int modifier = 8 * scale;
-		int xOffset = x - modifier / 2;
-		int yOffset = y - modifier / 2 - 4;
+		int xOffset = getX() - modifier / 2;
+		int yOffset = getY() - modifier / 2 - 4;
 
 		if (isSwimming) {
 			int waterColour = 0;
diff --git a/src/com/redomar/game/entities/Entity.java b/src/com/redomar/game/entities/Entity.java
index 380210f..4d88f72 100644
--- a/src/com/redomar/game/entities/Entity.java
+++ b/src/com/redomar/game/entities/Entity.java
@@ -5,7 +5,7 @@ import com.redomar.game.level.LevelHandler;
 
 public abstract class Entity {
 
-	public int x, y;
+	protected int x, y;
 	protected LevelHandler level;
 
 	public Entity(LevelHandler level) {
@@ -19,4 +19,20 @@ public abstract class Entity {
 	public abstract void tick();
 
 	public abstract void render(Screen screen);
+
+	public int getX() {
+		return x;
+	}
+
+	public void setX(int x) {
+		this.x = x;
+	}
+
+	public int getY() {
+		return y;
+	}
+
+	public void setY(int y) {
+		this.y = y;
+	}
 }
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 0e7300c..6e7e19e 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -20,8 +20,8 @@ public abstract class Mob extends Entity {
 	public Mob(LevelHandler level, String name, int x, int y, int speed) {
 		super(level);
 		this.name = name;
-		this.x = x;
-		this.y = y;
+		this.setX(x);
+		this.setY(y);
 		this.speed = speed;
 	}
 
@@ -46,8 +46,8 @@ public abstract class Mob extends Entity {
 			if (xa > 0) {
 				movingDir = 3;
 			}
-			x += xa * speed;
-			y += ya * speed;
+			setX(getX() + xa * speed);
+			setY(getY() + ya * speed);
 		}
 	}
 
@@ -59,9 +59,9 @@ public abstract class Mob extends Entity {
 			return false;
 		}
 
-		Tile lastTile = level.getTile((this.x + x) >> 3, (this.y + y) >> 3);
-		Tile newtTile = level.getTile((this.x + x + xa) >> 3,
-				(this.y + y + ya) >> 3);
+		Tile lastTile = level.getTile((this.getX() + x) >> 3, (this.getY() + y) >> 3);
+		Tile newtTile = level.getTile((this.getX() + x + xa) >> 3,
+				(this.getY() + y + ya) >> 3);
 
 		if (!lastTile.equals(newtTile) && newtTile.isSolid()) {
 			return true;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index ddbbf22..3df21a7 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -50,22 +50,22 @@ public class Player extends Mob {
 			move(xa, ya);
 			isMoving = true;
 			
-			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y, this.numSteps, this.isMoving, this.movingDir);
+			Packet02Move packet = new Packet02Move(this.getUsername(), this.getX(), this.getY(), this.numSteps, this.isMoving, this.movingDir);
 			packet.writeData(Game.getGame().getSocketClient());
 			
 		} else {
 			isMoving = false;
 		}
 
-		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 4) {
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
 
-		if (isSwimming && level.getTile(this.x >> 3, this.y >> 3).getId() != 4) {
+		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
 		
-		if (level.getTile(this.x >> 3, this.y >> 3).getId() == 11){
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11){
 			changeLevels = true;
 		}
 
@@ -87,8 +87,8 @@ public class Player extends Mob {
 		}
 
 		int modifier = 8 * scale;
-		int xOffset = x - modifier / 2;
-		int yOffset = y - modifier / 2 - 4;
+		int xOffset = getX() - modifier / 2;
+		int yOffset = getY() - modifier / 2 - 4;
 		
 		if (changeLevels){
 			Game.setChangeLevel(true);
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 126b4a8..1838eb3 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -175,8 +175,8 @@ public class LevelHandler {
 	public void movePlayer(String username, int x, int y, int numSteps, boolean isMoving, int movingDir){
 		int index = getPlayerMPIndex(username);
 		PlayerMP player = (PlayerMP)this.getEntities().get(index);
-		player.x = x;
-		player.y = y;
+		player.setX(x);
+		player.setY(y);
 		player.setNumSteps(numSteps);
 		player.setMoving(isMoving);
 		player.setMovingDir(movingDir);
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index d5062d4..94490a2 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -87,8 +87,8 @@ public class GameServer extends Thread {
 		if(getPlayerMP(packet.getUsername()) != null){
 			int index = getPlayerMPIndex(packet.getUsername());
 			PlayerMP player = this.connectedPlayers.get(index);
-			player.x = packet.getX();
-			player.y = packet.getY();
+			player.setX(packet.getX());
+			player.setY(packet.getY());
 			player.setNumSteps(packet.getNumSteps());
 			player.setMoving(packet.isMoving());
 			player.setMovingDir(packet.getMovingDir());
@@ -112,7 +112,7 @@ public class GameServer extends Thread {
 			} else {
 				sendData(packet.getData(), p.ipAddess, p.port);
 
-				packet = new Packet00Login(p.getUsername(), p.x, p.y);
+				packet = new Packet00Login(p.getUsername(), p.getX(), p.getY());
 				sendData(packet.getData(), player.ipAddess, player.port);
 			}
 		}

commit 308a9742e293653b8d332b68d24f75680fd2e4db
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 27 17:41:43 2013 +0100

    Re-ordered some code

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index e1d6475..f2238be 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -22,39 +22,6 @@ public class Dummy extends Mob{
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
 	}
-
-	public boolean hasCollided(int xa, int ya) {
-		int xMin = 0;
-		int xMax = 7;
-		int yMin = 3;
-		int yMax = 7;
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMin)) {
-				return true;
-			}
-		}
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMax)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMin, y)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMax, y)) {
-				return true;
-			}
-		}
-
-		return false;
-	}
 	
 	public void tick() {
 		tick++;
@@ -152,4 +119,36 @@ public class Dummy extends Mob{
 		}
 	}
 
+	public boolean hasCollided(int xa, int ya) {
+		int xMin = 0;
+		int xMax = 7;
+		int yMin = 3;
+		int yMax = 7;
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMin)) {
+				return true;
+			}
+		}
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMax)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMin, y)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMax, y)) {
+				return true;
+			}
+		}
+
+		return false;
+	}
 }

commit 7658cbb509e496ec498eeeb024796ce5e0b84195
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Sep 27 18:53:53 2013 +0100

    Updated some code structuring

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index f2238be..28e253e 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -1,7 +1,5 @@
 package com.redomar.game.entities;
 
-import javax.swing.JOptionPane;
-
 import com.redomar.game.Game;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
@@ -11,10 +9,8 @@ public class Dummy extends Mob{
 	
 	private int colour, shirtCol, faceCol; //= Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
-	private int tick = 0;
 	private int xa = 0;
 	private int ya = 0;
-	private int xes = 0;
 	
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol, int faceCol) {
 		super(level, "h", x, y, 1);
@@ -24,31 +20,8 @@ public class Dummy extends Mob{
 	}
 	
 	public void tick() {
-		tick++;
-		if(tick % (random.nextInt(50) +30) == 0){
-			xa = random.nextInt(3) -1;
-			ya = random.nextInt(3) -1;
-			if(random.nextInt(4) == 0){
-				xa = 0;
-				ya = 0;
-			}
-		}
 		
-		if(Game.getPlayer().getX() == getX() && Game.getPlayer().getY() == getY() && xes == 0){
-			JOptionPane.showMessageDialog(Game.getGame(), "Zombie Eat You @"+getX()+" "+getY(), "Zombie", 1);
-			xes++;
-		}
-		
-		if (xa != 0 || ya != 0) {
-			move(xa, ya);
-			isMoving = true;
-			
-//			Packet02Move packet = new Packet02Move(this.getUsername(), this.x, this.y, this.numSteps, this.isMoving, this.movingDir);
-//			packet.writeData(Game.getGame().getSocketClient());
-			
-		} else {
-			isMoving = false;
-		}
+		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game.getPlayer().getY(), xa, ya, this);
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 6e7e19e..0cc6083 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -16,6 +16,7 @@ public abstract class Mob extends Entity {
 	protected int scale = 1;
 	protected boolean isSwimming = false;
 	protected boolean changeLevels = false;
+	protected int ticker;
 
 	public Mob(LevelHandler level, String name, int x, int y, int speed) {
 		super(level);
@@ -69,6 +70,25 @@ public abstract class Mob extends Entity {
 
 		return false;
 	}
+	
+	protected void followMovementAI(int x, int y, int px, int py, int xa, int ya, Mob mob){
+		ya = 0;
+		xa = 0;
+		if(px > x) xa++;
+		if(px < x) xa--;
+		if(py > y) ya++;
+		if(py < y) ya--;
+		moveMob(xa, ya, mob);
+	}
+	
+	protected void moveMob(int xa, int ya, Mob mob){
+		if (xa != 0 || ya != 0) {
+			mob.move(xa, ya);
+			mob.isMoving = true;
+		} else {
+			mob.isMoving = false;
+		}
+	}
 
 	public String getName() {
 		return name;

commit d078742cb71ed176729823a2d9d88318f978dcde
Merge: 12663d9 7658cbb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Oct 8 12:00:28 2013 +0100

    Merge remote-tracking branch 'origin/npc-dev' into aside

commit 610ac581fa5249a616e226aa0a8d364b5a5c55bc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Oct 8 12:03:33 2013 +0100

    updated jar file

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 6329855..fb7df0d 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 7f748d2179f4206b8fc99ccd7168f1014a7e458f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Oct 8 12:06:37 2013 +0100

    getting ready for v1.6 merge

diff --git a/README.md b/README.md
index 784a6d2..7a60e36 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.5.4
+JavaGame Alpha v1.6
 =====================
 
 #####What is JavaGame?
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4148cb4..d3bda05 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -32,7 +32,7 @@ import com.thehowtotutorial.splashscreen.JSplash;
 public class Game extends Canvas implements Runnable {
 
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.5.4 Alpha";
+	private static final String game_Version = "v1.6 Alpha";
 
 	// Setting the size and name of the frame/canvas
 	private static final int WIDTH = 160;

commit a90cdf485d7796c84e7639a705b21118458bcf25
Merge: 7f748d2 610ac58
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Oct 8 12:15:23 2013 +0100

    merge with aside

commit 6bd061f36beda93a976eee1f4961cc830167bcad
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Oct 8 12:22:47 2013 +0100

    quick jar update

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 0a1b4ae..9070a6b 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 8b53e9afd613217326a3933f65bbe2692e304e3a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 17:31:15 2013 +0100

    Added Magma/Lava

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
index 43ff8e5..fba42c3 100644
Binary files a/res/levels/custom_level.png and b/res/levels/custom_level.png differ
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 0cc6083..a6df3b7 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -15,6 +15,7 @@ public abstract class Mob extends Entity {
 	protected int movingDir = 1;
 	protected int scale = 1;
 	protected boolean isSwimming = false;
+	protected boolean isMagma = false;
 	protected boolean changeLevels = false;
 	protected int ticker;
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 3df21a7..d3e0b56 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -60,7 +60,7 @@ public class Player extends Mob {
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
-
+		
 		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
@@ -69,6 +69,14 @@ public class Player extends Mob {
 			changeLevels = true;
 		}
 
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
+			isMagma = true;
+		}
+		
+		if (isMagma && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12){
+			isMagma = false;
+		}
+		
 		tickCount++;
 	}
 
@@ -117,12 +125,36 @@ public class Player extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
+		
+		if (isMagma) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, 310);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 541, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 521, 510, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 510, -1, 521);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 521, 510);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset,
 				(xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
 				((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if (!isSwimming) {
+		if (!isSwimming && !isMagma) {
 			screen.render((xOffset + (modifier * flipBottom)),
 					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
 					flipBottom, scale);
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 29cfbba..ccb7e0c 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -19,6 +19,7 @@ public abstract class Tile {
 	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
 	private static final Tile CARPET_red = new BasicTile(10, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
 	private static final Tile PORTAL = new AnimatedTile(11, new int[][] { { 3,  5 },  { 4, 5 }, { 5, 5 }, { 6, 5 }, { 7, 5 }, { 8, 5 }, { 9, 5 }, { 10, 5 } },  Colours.get(-1, 005, 305, -1), 0xFF00EAFF, 100);
+	private static final Tile MAGMA = new AnimatedTile(12, new int [][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 400, 511, -1), 0xFFF00F0F, 1000);
 
 	protected byte id;
 	protected boolean solid;
@@ -111,4 +112,8 @@ public abstract class Tile {
 		return PORTAL;
 	}
 
+	public static Tile getMagma() {
+		return MAGMA;
+	}
+
 }

commit 882a3c7efcb77288770720d5c9cf7a461749522c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 18:03:44 2013 +0100

    NPC spawning and despawning

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index c98c4c1..e808e9a 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -44,6 +44,7 @@ public class Game extends Canvas implements Runnable {
 	private static String Jdata_UserName = "";
 	private static String Jdata_IP = "127.0.0.1";
 	private static boolean changeLevel = false;
+	private static boolean npc = false;
 	private static int map = 0;
 
 	private JFrame frame;
@@ -125,10 +126,21 @@ public class Game extends Canvas implements Runnable {
 		setLevel(new LevelHandler(Map_str));
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				Jdata_UserName, null, -1));
-		dummy = new Dummy(getLevel(), "h", 215, 215, 500, 543);
-		level.addEntity(dummy);
 		level.addEntity(player);
 	}
+	
+	public static void npcSpawn(){
+		if(isNpc() == true){
+			game.dummy = new Dummy(game.getLevel(), "h", 215, 215, 500, 543);
+			game.level.addEntity(game.dummy);
+		}
+	}
+	
+	public static void npcKill(){
+		if(isNpc() == false){
+			game.level.removeEntity(game.dummy);
+		}
+	}
 
 	public synchronized void start() {
 		running = true;
@@ -417,4 +429,12 @@ public class Game extends Canvas implements Runnable {
 		Game.map = map;
 	}
 
+	public static boolean isNpc() {
+		return npc;
+	}
+
+	public static void setNpc(boolean npc) {
+		Game.npc = npc;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 7963cfc..62fb2a9 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -35,6 +35,7 @@ public class InputHandler implements KeyListener {
 	private Key right = new Key();
 	private boolean PlayMusic = false;
 	private boolean ChangeLevel = false;
+	private boolean npc = false;
 	private int map;
 
 	public void keyPressed(KeyEvent e) {
@@ -77,6 +78,22 @@ public class InputHandler implements KeyListener {
 				this.setChangeLevel(true);
 			}
 		}
+		if (keyCode == KeyEvent.VK_N){
+			if(this.isNpc() == false){
+				Game.setNpc(true);
+				this.setNpc(true);
+				Game.npcSpawn();
+				System.out.println("[GAME] Dummy has been spawned");
+			}
+		}
+		if (keyCode == KeyEvent.VK_K){
+			if(this.isNpc() == true){
+				Game.setNpc(false);
+				this.setNpc(false);
+				Game.npcKill();
+				System.out.println("[GAME] Dummy has been despawned");
+			}
+		}
 	}
 
 	public int getMap() {
@@ -103,6 +120,14 @@ public class InputHandler implements KeyListener {
 		ChangeLevel = changeLevel;
 	}
 
+	public boolean isNpc() {
+		return npc;
+	}
+
+	public void setNpc(boolean npc) {
+		this.npc = npc;
+	}
+
 	public Key getUp() {
 		return up;
 	}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 1838eb3..e517f83 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -150,6 +150,10 @@ public class LevelHandler {
 		this.getEntities().add(entity);
 	}
 
+	public void removeEntity(Entity entity) {
+		this.getEntities().remove(entity);
+	}
+	
 	public void removeEntity(String username) {
 		int index = 0;
 		for(Entity e : getEntities()){

commit b1cd4e8a0b9352a515d21084f23e2cf3b75c72fb
Merge: 8b53e9a 882a3c7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 18:20:22 2013 +0100

    Merge remote-tracking branch 'origin/npc-dev' into aside

commit 700d33094ea89a16e1f75b4ad579a98b99af69d1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 18:58:37 2013 +0100

    Optimized Input variables

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e808e9a..4c9cffd 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -63,7 +63,7 @@ public class Game extends Canvas implements Runnable {
 	private InputHandler input;
 	private WindowHandler window;
 	private LevelHandler level;
-	private static Player player;
+	private Player player;
 	private Dummy dummy;
 	private Music music = new Music();
 	private Time time = new Time();
@@ -131,14 +131,14 @@ public class Game extends Canvas implements Runnable {
 	
 	public static void npcSpawn(){
 		if(isNpc() == true){
-			game.dummy = new Dummy(game.getLevel(), "h", 215, 215, 500, 543);
-			game.level.addEntity(game.dummy);
+			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 215, 500, 543));
+			game.level.addEntity(Game.getDummy());
 		}
 	}
 	
 	public static void npcKill(){
 		if(isNpc() == false){
-			game.level.removeEntity(game.dummy);
+			game.level.removeEntity(Game.getDummy());
 		}
 	}
 
@@ -247,15 +247,15 @@ public class Game extends Canvas implements Runnable {
 					musicThread.start();
 					notActive = false;
 				} else {
-					System.out.println("Canceled");
+					System.out.println("[GAME] Canceled music option");
 					input.setPlayMusic(false);
 				}
 			}			
 		}
 		
-		if (input.isChangeLevel() == true && getTickCount() % 60 == 0){
+		if (isChangeLevel() == true && getTickCount() % 60 == 0){
 			Game.setChangeLevel(true);
-			input.setChangeLevel(false);
+			setChangeLevel(false);
 		}
 		
 		if (changeLevel == true){
@@ -366,15 +366,15 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static Player getPlayer() {
-		return player;
+		return game.player;
 	}
 
 	public void setPlayer(Player player) {
-		Game.player = player;
+		game.player = player;
 	}
 
-	public LevelHandler getLevel() {
-		return level;
+	public static LevelHandler getLevel() {
+		return game.level;
 	}
 
 	public void setLevel(LevelHandler level) {
@@ -437,4 +437,12 @@ public class Game extends Canvas implements Runnable {
 		Game.npc = npc;
 	}
 
+	public static Dummy getDummy() {
+		return game.dummy;
+	}
+
+	public void setDummy(Dummy dummy) {
+		this.dummy = dummy;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 62fb2a9..b993d74 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -34,8 +34,6 @@ public class InputHandler implements KeyListener {
 	private Key left = new Key();
 	private Key right = new Key();
 	private boolean PlayMusic = false;
-	private boolean ChangeLevel = false;
-	private boolean npc = false;
 	private int map;
 
 	public void keyPressed(KeyEvent e) {
@@ -75,21 +73,21 @@ public class InputHandler implements KeyListener {
 //				map--;
 //			}
 			if(Game.getMap() == 2){
-				this.setChangeLevel(true);
+				Game.setChangeLevel(true);
+				Game.getLevel().removeEntity(Game.getDummy());
+				Game.setNpc(false);
 			}
 		}
 		if (keyCode == KeyEvent.VK_N){
-			if(this.isNpc() == false){
+			if(Game.isNpc() == false){
 				Game.setNpc(true);
-				this.setNpc(true);
 				Game.npcSpawn();
 				System.out.println("[GAME] Dummy has been spawned");
 			}
 		}
 		if (keyCode == KeyEvent.VK_K){
-			if(this.isNpc() == true){
+			if(Game.isNpc() == true){
 				Game.setNpc(false);
-				this.setNpc(false);
 				Game.npcKill();
 				System.out.println("[GAME] Dummy has been despawned");
 			}
@@ -112,22 +110,6 @@ public class InputHandler implements KeyListener {
 		PlayMusic = playMusic;
 	}
 
-	public boolean isChangeLevel() {
-		return ChangeLevel;
-	}
-
-	public void setChangeLevel(boolean changeLevel) {
-		ChangeLevel = changeLevel;
-	}
-
-	public boolean isNpc() {
-		return npc;
-	}
-
-	public void setNpc(boolean npc) {
-		this.npc = npc;
-	}
-
 	public Key getUp() {
 		return up;
 	}

commit e2048b9ab01aa582dc4b48403c306fe022c92a7a
Merge: 6bd061f 700d330
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 18:59:49 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit d0ec10cf6126da6e3464ed1aa79c59ae510dda77
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 15:32:14 2013 +0100

    Server and Client update

diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index c012dc2..286ad84 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -22,7 +22,7 @@ public class GameClient extends Thread {
 	private Game game;
 
 	public GameClient(Game game, String ipAddress) {
-		this.game = game;
+		this.setGame(game);
 		try {
 			this.socket = new DatagramSocket();
 			this.ipAddress = InetAddress.getByName(ipAddress);
@@ -65,7 +65,7 @@ public class GameClient extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet01Disconnect) packet).getUsername()
 					+ " has disconnected...");
-			game.getLevel().removeEntity(
+			Game.getLevel().removeEntity(
 					((Packet01Disconnect) packet).getUsername());
 			break;
 		case MOVE:
@@ -78,13 +78,13 @@ public class GameClient extends Thread {
 	private void handleLogin(Packet00Login packet, InetAddress address, int port) {
 		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
 				+ packet.getUsername() + " has joined...");
-		PlayerMP player = new PlayerMP(game.getLevel(), packet.getX(),
+		PlayerMP player = new PlayerMP(Game.getLevel(), packet.getX(),
 				packet.getY(), packet.getUsername(), address, port);
-		game.getLevel().addEntity(player);
+		Game.getLevel().addEntity(player);
 	}
 
 	private void handleMove(Packet02Move packet) {
-		this.game.getLevel().movePlayer(packet.getUsername(), packet.getX(),
+		Game.getLevel().movePlayer(packet.getUsername(), packet.getX(),
 				packet.getY(), packet.getNumSteps(), packet.isMoving(),
 				packet.getMovingDir());
 	}
@@ -99,4 +99,12 @@ public class GameClient extends Thread {
 		}
 	}
 
+	public Game getGame() {
+		return game;
+	}
+
+	public void setGame(Game game) {
+		this.game = game;
+	}
+
 }
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 94490a2..e15912c 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -23,7 +23,7 @@ public class GameServer extends Thread {
 	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
 
 	public GameServer(Game game) {
-		this.game = game;
+		this.setGame(game);
 		try {
 			this.socket = new DatagramSocket(1331);
 		} catch (SocketException e) {
@@ -66,7 +66,7 @@ public class GameServer extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has connected...");
-			PlayerMP player = new PlayerMP(game.getLevel(), 10, 10,
+			PlayerMP player = new PlayerMP(Game.getLevel(), 10, 10,
 					((Packet00Login) packet).getUsername(), address, port);
 			this.addConnection(player, (Packet00Login) packet);
 			break;
@@ -162,4 +162,12 @@ public class GameServer extends Thread {
 			sendData(data, p.ipAddess, p.port);
 		}
 	}
+
+	public Game getGame() {
+		return game;
+	}
+
+	public void setGame(Game game) {
+		this.game = game;
+	}
 }

commit c471a2e3f4f39c3ddb6f2a8e810d773a4b735185
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 17:31:15 2013 +0100

    Added Magma/Lava

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
index 43ff8e5..fba42c3 100644
Binary files a/res/levels/custom_level.png and b/res/levels/custom_level.png differ
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 0cc6083..a6df3b7 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -15,6 +15,7 @@ public abstract class Mob extends Entity {
 	protected int movingDir = 1;
 	protected int scale = 1;
 	protected boolean isSwimming = false;
+	protected boolean isMagma = false;
 	protected boolean changeLevels = false;
 	protected int ticker;
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 3df21a7..d3e0b56 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -60,7 +60,7 @@ public class Player extends Mob {
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
-
+		
 		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
@@ -69,6 +69,14 @@ public class Player extends Mob {
 			changeLevels = true;
 		}
 
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
+			isMagma = true;
+		}
+		
+		if (isMagma && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12){
+			isMagma = false;
+		}
+		
 		tickCount++;
 	}
 
@@ -117,12 +125,36 @@ public class Player extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
+		
+		if (isMagma) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, 310);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 541, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 521, 510, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 510, -1, 521);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 521, 510);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset,
 				(xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
 				((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if (!isSwimming) {
+		if (!isSwimming && !isMagma) {
 			screen.render((xOffset + (modifier * flipBottom)),
 					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
 					flipBottom, scale);
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index 29cfbba..ccb7e0c 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -19,6 +19,7 @@ public abstract class Tile {
 	private static final Tile CHEST_b = new BasicSolidTile(9, 1, 1, Colours.get(333, 111, 420, 000), 0xFFFF0002);
 	private static final Tile CARPET_red = new BasicTile(10, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
 	private static final Tile PORTAL = new AnimatedTile(11, new int[][] { { 3,  5 },  { 4, 5 }, { 5, 5 }, { 6, 5 }, { 7, 5 }, { 8, 5 }, { 9, 5 }, { 10, 5 } },  Colours.get(-1, 005, 305, -1), 0xFF00EAFF, 100);
+	private static final Tile MAGMA = new AnimatedTile(12, new int [][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 400, 511, -1), 0xFFF00F0F, 1000);
 
 	protected byte id;
 	protected boolean solid;
@@ -111,4 +112,8 @@ public abstract class Tile {
 		return PORTAL;
 	}
 
+	public static Tile getMagma() {
+		return MAGMA;
+	}
+
 }

commit 33fd2d9f5e5bda3c3b55678903c0dd4126e38551
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 13 18:58:37 2013 +0100

    Optimized Input variables

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e808e9a..4c9cffd 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -63,7 +63,7 @@ public class Game extends Canvas implements Runnable {
 	private InputHandler input;
 	private WindowHandler window;
 	private LevelHandler level;
-	private static Player player;
+	private Player player;
 	private Dummy dummy;
 	private Music music = new Music();
 	private Time time = new Time();
@@ -131,14 +131,14 @@ public class Game extends Canvas implements Runnable {
 	
 	public static void npcSpawn(){
 		if(isNpc() == true){
-			game.dummy = new Dummy(game.getLevel(), "h", 215, 215, 500, 543);
-			game.level.addEntity(game.dummy);
+			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 215, 500, 543));
+			game.level.addEntity(Game.getDummy());
 		}
 	}
 	
 	public static void npcKill(){
 		if(isNpc() == false){
-			game.level.removeEntity(game.dummy);
+			game.level.removeEntity(Game.getDummy());
 		}
 	}
 
@@ -247,15 +247,15 @@ public class Game extends Canvas implements Runnable {
 					musicThread.start();
 					notActive = false;
 				} else {
-					System.out.println("Canceled");
+					System.out.println("[GAME] Canceled music option");
 					input.setPlayMusic(false);
 				}
 			}			
 		}
 		
-		if (input.isChangeLevel() == true && getTickCount() % 60 == 0){
+		if (isChangeLevel() == true && getTickCount() % 60 == 0){
 			Game.setChangeLevel(true);
-			input.setChangeLevel(false);
+			setChangeLevel(false);
 		}
 		
 		if (changeLevel == true){
@@ -366,15 +366,15 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static Player getPlayer() {
-		return player;
+		return game.player;
 	}
 
 	public void setPlayer(Player player) {
-		Game.player = player;
+		game.player = player;
 	}
 
-	public LevelHandler getLevel() {
-		return level;
+	public static LevelHandler getLevel() {
+		return game.level;
 	}
 
 	public void setLevel(LevelHandler level) {
@@ -437,4 +437,12 @@ public class Game extends Canvas implements Runnable {
 		Game.npc = npc;
 	}
 
+	public static Dummy getDummy() {
+		return game.dummy;
+	}
+
+	public void setDummy(Dummy dummy) {
+		this.dummy = dummy;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 62fb2a9..b993d74 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -34,8 +34,6 @@ public class InputHandler implements KeyListener {
 	private Key left = new Key();
 	private Key right = new Key();
 	private boolean PlayMusic = false;
-	private boolean ChangeLevel = false;
-	private boolean npc = false;
 	private int map;
 
 	public void keyPressed(KeyEvent e) {
@@ -75,21 +73,21 @@ public class InputHandler implements KeyListener {
 //				map--;
 //			}
 			if(Game.getMap() == 2){
-				this.setChangeLevel(true);
+				Game.setChangeLevel(true);
+				Game.getLevel().removeEntity(Game.getDummy());
+				Game.setNpc(false);
 			}
 		}
 		if (keyCode == KeyEvent.VK_N){
-			if(this.isNpc() == false){
+			if(Game.isNpc() == false){
 				Game.setNpc(true);
-				this.setNpc(true);
 				Game.npcSpawn();
 				System.out.println("[GAME] Dummy has been spawned");
 			}
 		}
 		if (keyCode == KeyEvent.VK_K){
-			if(this.isNpc() == true){
+			if(Game.isNpc() == true){
 				Game.setNpc(false);
-				this.setNpc(false);
 				Game.npcKill();
 				System.out.println("[GAME] Dummy has been despawned");
 			}
@@ -112,22 +110,6 @@ public class InputHandler implements KeyListener {
 		PlayMusic = playMusic;
 	}
 
-	public boolean isChangeLevel() {
-		return ChangeLevel;
-	}
-
-	public void setChangeLevel(boolean changeLevel) {
-		ChangeLevel = changeLevel;
-	}
-
-	public boolean isNpc() {
-		return npc;
-	}
-
-	public void setNpc(boolean npc) {
-		this.npc = npc;
-	}
-
 	public Key getUp() {
 		return up;
 	}

commit 5a115cef5384ee9c36878a2b842bfa2f1ba69b2b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 15:32:14 2013 +0100

    Server and Client update

diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index c012dc2..286ad84 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -22,7 +22,7 @@ public class GameClient extends Thread {
 	private Game game;
 
 	public GameClient(Game game, String ipAddress) {
-		this.game = game;
+		this.setGame(game);
 		try {
 			this.socket = new DatagramSocket();
 			this.ipAddress = InetAddress.getByName(ipAddress);
@@ -65,7 +65,7 @@ public class GameClient extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet01Disconnect) packet).getUsername()
 					+ " has disconnected...");
-			game.getLevel().removeEntity(
+			Game.getLevel().removeEntity(
 					((Packet01Disconnect) packet).getUsername());
 			break;
 		case MOVE:
@@ -78,13 +78,13 @@ public class GameClient extends Thread {
 	private void handleLogin(Packet00Login packet, InetAddress address, int port) {
 		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
 				+ packet.getUsername() + " has joined...");
-		PlayerMP player = new PlayerMP(game.getLevel(), packet.getX(),
+		PlayerMP player = new PlayerMP(Game.getLevel(), packet.getX(),
 				packet.getY(), packet.getUsername(), address, port);
-		game.getLevel().addEntity(player);
+		Game.getLevel().addEntity(player);
 	}
 
 	private void handleMove(Packet02Move packet) {
-		this.game.getLevel().movePlayer(packet.getUsername(), packet.getX(),
+		Game.getLevel().movePlayer(packet.getUsername(), packet.getX(),
 				packet.getY(), packet.getNumSteps(), packet.isMoving(),
 				packet.getMovingDir());
 	}
@@ -99,4 +99,12 @@ public class GameClient extends Thread {
 		}
 	}
 
+	public Game getGame() {
+		return game;
+	}
+
+	public void setGame(Game game) {
+		this.game = game;
+	}
+
 }
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 94490a2..e15912c 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -23,7 +23,7 @@ public class GameServer extends Thread {
 	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
 
 	public GameServer(Game game) {
-		this.game = game;
+		this.setGame(game);
 		try {
 			this.socket = new DatagramSocket(1331);
 		} catch (SocketException e) {
@@ -66,7 +66,7 @@ public class GameServer extends Thread {
 			System.out.println("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has connected...");
-			PlayerMP player = new PlayerMP(game.getLevel(), 10, 10,
+			PlayerMP player = new PlayerMP(Game.getLevel(), 10, 10,
 					((Packet00Login) packet).getUsername(), address, port);
 			this.addConnection(player, (Packet00Login) packet);
 			break;
@@ -162,4 +162,12 @@ public class GameServer extends Thread {
 			sendData(data, p.ipAddess, p.port);
 		}
 	}
+
+	public Game getGame() {
+		return game;
+	}
+
+	public void setGame(Game game) {
+		this.game = game;
+	}
 }

commit df76618c2a089bd4a2e812be5202cbbd959c0b58
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 15:46:10 2013 +0100

    NPCs can now dive in lava

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4c9cffd..9559104 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -131,7 +131,7 @@ public class Game extends Canvas implements Runnable {
 	
 	public static void npcSpawn(){
 		if(isNpc() == true){
-			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 215, 500, 543));
+			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 185, 500, 543));
 			game.level.addEntity(Game.getDummy());
 		}
 	}
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 28e253e..dd5d673 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -31,6 +31,14 @@ public class Dummy extends Mob{
 			isSwimming = false;
 		}
 
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
+			isMagma = true;
+		}
+		
+		if (isMagma && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12){
+			isMagma = false;
+		}
+
 		tickCount++;
 		
 	}
@@ -76,12 +84,36 @@ public class Dummy extends Mob{
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
+		
+		if (isMagma) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, faceCol);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 541, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 521, 510, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 510, -1, 521);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 521, 510);
+			}
+			
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset,
 				(xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
 				((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if (!isSwimming) {
+		if (!isSwimming && !isMagma) {
 			screen.render((xOffset + (modifier * flipBottom)),
 					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
 					flipBottom, scale);

commit a8c6ec6ec8262b810cb329c2c065207c1c489281
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 15:59:18 2013 +0100

    Given some threads names

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4c9cffd..37ac295 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -68,7 +68,7 @@ public class Game extends Canvas implements Runnable {
 	private Music music = new Music();
 	private Time time = new Time();
 	private Font font = new Font();
-	private Thread musicThread = new Thread(music);
+	private Thread musicThread = new Thread(music, "MUSIC");
 	private String nowPlaying;
 	private boolean notActive = true;
 	private boolean noAudioDevice = false;
@@ -144,7 +144,7 @@ public class Game extends Canvas implements Runnable {
 
 	public synchronized void start() {
 		running = true;
-		new Thread(this).start();
+		new Thread(this, "GAME").start();
 		
 		if (Jdata_Host == 0) {
 			socketServer = new GameServer(this);

commit ce515974d4a436b5d950db08f6b932da32ea55be
Merge: a8c6ec6 df76618
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 16:02:27 2013 +0100

    Merge remote-tracking branch 'origin/npc-dev' into aside

commit 75bf8a9727e199d46b17701a89f7c4f808bc6875
Merge: e2048b9 ce51597
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 16:03:28 2013 +0100

    Merge remote-tracking branch 'origin/aside'

commit 771fdd2d6a641c295c202e4b9588e5acf97a4eec
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 19:05:26 2013 +0100

    Updated Menu

diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 992780c..206e21c 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -23,7 +23,7 @@ public class Menu implements Runnable{
 	
 	public synchronized void start() {
 		running = true;
-		new Thread(this).start();
+		new Thread(this, "MENU").start();
 	}
 
 	public synchronized void stop() {
@@ -82,9 +82,15 @@ public class Menu implements Runnable{
 		Graphics g = bs.getDrawGraphics();
 		g.setColor(Color.BLACK);
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
+		g.setColor(new Color(0xFF660000));
+		g.fillRect(12, 12, (WIDTH*3)-30, (HEIGHT*3)-53);
 		g.setColor(new Color(0xFFFF9900));
 		g.setFont(font.getArial());
-		//g.drawString("Testing Phase...",40,30);
+		g.drawString("Testing Phase...",35,30);
+		g.drawLine(10, (HEIGHT*3)-40, 10, 10);
+		g.drawLine(10, 10, (WIDTH*3)-17, 10);
+		g.drawLine((WIDTH*3)-17, 10, (WIDTH*3)-17, (HEIGHT*3)-40);
+		g.drawLine(10, (HEIGHT*3)-40, (WIDTH*3)-17, (HEIGHT*3)-40);
 		//(LEFT,DOWN,WIDTH,HEIGHT)
 		if (selected == true){
 			//START

commit aff44143e0f10bad246f56fe4f034e14da18e5e8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 16 21:48:56 2013 +0100

    Edited README

diff --git a/README.md b/README.md
index 7a60e36..2c20f85 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
 JavaGame Alpha v1.6
 =====================
 
+[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
+
 #####What is JavaGame?
 JavaGame is a game project that i am working on for an assignment for college.
 

commit ac384b89690deec78031d44891319aed54509051
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Oct 17 20:57:34 2013 +0100

    Started mouse intergration work with the menu

diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
index 424bd88..6dd7b24 100644
--- a/src/com/redomar/game/lib/Mouse.java
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -4,34 +4,54 @@ import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
 
+import com.redomar.game.menu.Menu;
+
 public class Mouse implements MouseListener, MouseMotionListener{
+	
 
 	public void mouseDragged(MouseEvent e) {
-		System.out.println("Dragged");
+		
 	}
 
 	public void mouseMoved(MouseEvent e) {
-		System.out.println("Moved");
+		if (e.getX() > 35 && e.getX() < 440){
+			//START is being selected
+			if(e.getY() > 35 && e.getY() < 125){
+				Menu.selectedStart = true;
+			}else{
+				Menu.selectedStart = false;
+			}
+			//EXIT is being selected
+			if(e.getY() > 160 && e.getY() < 250){
+				Menu.selectedExit = true;
+			}else{
+				Menu.selectedExit = false;
+			}
+		}else{
+			Menu.selectedStart = false;
+			Menu.selectedExit = false;
+		}
+		
 	}
 
 	public void mouseClicked(MouseEvent e) {
-		System.out.println("Clicked");
+		
 	}
 
 	public void mouseEntered(MouseEvent e) {
-		System.out.println("Enter");
+		
 	}
 
 	public void mouseExited(MouseEvent e) {
-		System.out.println("Exit");
+		
 	}
 
 	public void mousePressed(MouseEvent e) {
-		System.out.println("Press");
+		
 	}
 
 	public void mouseReleased(MouseEvent e) {
-		System.out.println("Release");
+		
 	}
 
 }
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 206e21c..fa24615 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -2,9 +2,12 @@ package com.redomar.game.menu;
 
 import java.awt.Color;
 import java.awt.Graphics;
+import java.awt.event.MouseListener;
+import java.awt.event.MouseMotionListener;
 import java.awt.image.BufferStrategy;
 
 import com.redomar.game.lib.Font;
+import com.redomar.game.lib.Mouse;
 
 
 
@@ -19,7 +22,12 @@ public class Menu implements Runnable{
 	private Font font = new Font();
 	
 	private boolean running = false;
-	private boolean selected = true;
+	
+	public static boolean selectedStart = false;
+	public static boolean selectedExit = false;
+	
+	private Color selected = new Color(0xFFFF8800);
+	private Color deSelected = new Color(0xFFCC5500);
 	
 	public synchronized void start() {
 		running = true;
@@ -79,6 +87,8 @@ public class Menu implements Runnable{
 			frame.createBufferStrategy(3);
 			return;
 		}
+		MouseListener Mouse = new Mouse();
+		frame.addMouseMotionListener((MouseMotionListener) Mouse);
 		Graphics g = bs.getDrawGraphics();
 		g.setColor(Color.BLACK);
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
@@ -92,25 +102,36 @@ public class Menu implements Runnable{
 		g.drawLine((WIDTH*3)-17, 10, (WIDTH*3)-17, (HEIGHT*3)-40);
 		g.drawLine(10, (HEIGHT*3)-40, (WIDTH*3)-17, (HEIGHT*3)-40);
 		//(LEFT,DOWN,WIDTH,HEIGHT)
-		if (selected == true){
+		if (selectedStart == true){
+			//START
+			g.setColor(selected);
+			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Start", 220, 85);
+			//EXIT
+			g.setColor(deSelected);
+			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.setColor(Color.BLACK);
+			g.drawString("Exit", 220, 210);
+		} else if (selectedExit == true){
 			//START
-			g.setColor(new Color(0xFFFF8800));
+			g.setColor(deSelected);
 			g.fillRect(35, 35, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 85);
 			//EXIT
-			g.setColor(new Color(0xFFFF8800));
+			g.setColor(selected);
 			g.fillRect(35, 160, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 210);
-		} else {
+		}else{
 			//START
-			g.setColor(new Color(0xFFFF8833));
+			g.setColor(deSelected);
 			g.fillRect(35, 35, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 85);
 			//EXIT
-			g.setColor(new Color(0xFFFF8833));
+			g.setColor(deSelected);
 			g.fillRect(35, 160, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 210);

commit 8375d350d5abf1f60b015ab883f6d322a78bf0a8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Oct 17 21:43:20 2013 +0100

    Completed Menu

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 37ac295..e4d2968 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -24,6 +24,7 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Music;
 import com.redomar.game.lib.Time;
+import com.redomar.game.menu.Menu;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
@@ -306,9 +307,14 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static void main(String[] args) {
+		Menu.main(null);
+	}
+	
+	public static void play(){
 		try {
 			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, game_Version, null, Color.RED, Color.ORANGE);
 			splash.toFront();
+			splash.requestFocus();
 			splash.splashOn();
 			splash.setProgress(10, "Initializing Game");
 			Thread.sleep(250);
@@ -346,7 +352,6 @@ public class Game extends Canvas implements Runnable {
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
-		
 	}
 
 	public JFrame getFrame() {
diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
index 6dd7b24..4fc3c59 100644
--- a/src/com/redomar/game/lib/Mouse.java
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -4,10 +4,10 @@ import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
 
+import com.redomar.game.Game;
 import com.redomar.game.menu.Menu;
 
 public class Mouse implements MouseListener, MouseMotionListener{
-	
 
 	public void mouseDragged(MouseEvent e) {
 		
@@ -17,25 +17,41 @@ public class Mouse implements MouseListener, MouseMotionListener{
 		if (e.getX() > 35 && e.getX() < 440){
 			//START is being selected
 			if(e.getY() > 35 && e.getY() < 125){
-				Menu.selectedStart = true;
+				Menu.setSelectedStart(true);
 			}else{
-				Menu.selectedStart = false;
+				Menu.setSelectedStart(false);
 			}
 			//EXIT is being selected
 			if(e.getY() > 160 && e.getY() < 250){
-				Menu.selectedExit = true;
+				Menu.setSelectedExit(true);
 			}else{
-				Menu.selectedExit = false;
+				Menu.setSelectedExit(false);
 			}
 		}else{
-			Menu.selectedStart = false;
-			Menu.selectedExit = false;
+			Menu.setSelectedStart(false);
+			Menu.setSelectedExit(false);
 		}
 		
 	}
 
 	public void mouseClicked(MouseEvent e) {
-		
+		if(Menu.isRunning()){
+			if (e.getX() > 35 && e.getX() < 440){
+				//START game
+				if(e.getY() > 35 && e.getY() < 125){
+					Menu.setRunning(false);
+					Menu.getFrame().setVisible(false);
+					Menu.getFrame().stopFrame();
+					Game.play();
+				}
+				//EXIT game
+				if(e.getY() > 160 && e.getY() < 250){
+					Menu.setRunning(false);
+					Menu.getFrame().setVisible(false);
+					Menu.getFrame().stopFrame();
+				}
+			}			
+		}
 	}
 
 	public void mouseEntered(MouseEvent e) {
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 2282f4c..0ee0697 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -34,5 +34,9 @@ public class DedicatedJFrame extends Canvas {
 		DedicatedJFrame.frame = frame;
 	}
 	
+	public void stopFrame(){
+		getFrame().dispose();
+	}
+	
 	
 }
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index fa24615..9afa884 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -18,13 +18,14 @@ public class Menu implements Runnable{
 	private static final int SCALE = 3;
 	private static final String NAME = "Menu";
 	
-	private DedicatedJFrame frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
-	private Font font = new Font();
-	
-	private boolean running = false;
+	private static boolean running = false;
+	private static boolean selectedStart = false;
+	private static boolean selectedExit = false;
+	private static boolean gameOver = false;
 	
-	public static boolean selectedStart = false;
-	public static boolean selectedExit = false;
+	private static DedicatedJFrame frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+	private Font font = new Font();
+	private MouseListener Mouse = new Mouse();
 	
 	private Color selected = new Color(0xFFFF8800);
 	private Color deSelected = new Color(0xFFCC5500);
@@ -34,7 +35,7 @@ public class Menu implements Runnable{
 		new Thread(this, "MENU").start();
 	}
 
-	public synchronized void stop() {
+	public static synchronized void stop() {
 		running = false;
 	}
 	
@@ -82,13 +83,13 @@ public class Menu implements Runnable{
 
 	private void render() {
 		//frame.getFrame().getContentPane().setBackground(Color.GREEN);
+		frame.addMouseMotionListener((MouseMotionListener) Mouse);
+		frame.addMouseListener(Mouse);
 		BufferStrategy bs = frame.getBufferStrategy();
 		if (bs == null) {
 			frame.createBufferStrategy(3);
 			return;
 		}
-		MouseListener Mouse = new Mouse();
-		frame.addMouseMotionListener((MouseMotionListener) Mouse);
 		Graphics g = bs.getDrawGraphics();
 		g.setColor(Color.BLACK);
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
@@ -96,42 +97,46 @@ public class Menu implements Runnable{
 		g.fillRect(12, 12, (WIDTH*3)-30, (HEIGHT*3)-53);
 		g.setColor(new Color(0xFFFF9900));
 		g.setFont(font.getArial());
-		g.drawString("Testing Phase...",35,30);
+		if(isGameOver()){
+			g.drawString("GAME OVER... What will you do now?",35,30);			
+		}else{
+			g.drawString("Welcome to JavaGame",35,30);
+		}
 		g.drawLine(10, (HEIGHT*3)-40, 10, 10);
 		g.drawLine(10, 10, (WIDTH*3)-17, 10);
 		g.drawLine((WIDTH*3)-17, 10, (WIDTH*3)-17, (HEIGHT*3)-40);
 		g.drawLine(10, (HEIGHT*3)-40, (WIDTH*3)-17, (HEIGHT*3)-40);
 		//(LEFT,DOWN,WIDTH,HEIGHT)
-		if (selectedStart == true){
+		if (isSelectedStart() == true){
 			//START
-			g.setColor(selected);
+			g.setColor(getSelected());
 			g.fillRect(35, 35, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 85);
 			//EXIT
-			g.setColor(deSelected);
+			g.setColor(getDeSelected());
 			g.fillRect(35, 160, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 210);
-		} else if (selectedExit == true){
+		} else if (isSelectedExit() == true){
 			//START
-			g.setColor(deSelected);
+			g.setColor(getDeSelected());
 			g.fillRect(35, 35, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 85);
 			//EXIT
-			g.setColor(selected);
+			g.setColor(getSelected());
 			g.fillRect(35, 160, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 210);
 		}else{
 			//START
-			g.setColor(deSelected);
+			g.setColor(getDeSelected());
 			g.fillRect(35, 35, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 85);
 			//EXIT
-			g.setColor(deSelected);
+			g.setColor(getDeSelected());
 			g.fillRect(35, 160, (frame.getWidth()-70), 90);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 210);
@@ -144,5 +149,69 @@ public class Menu implements Runnable{
 	public static void main(String[] args) {
 		new Menu().start();
 	}
+
+	public static DedicatedJFrame getFrame() {
+		return Menu.frame;
+	}
+
+	public static void setFrame(DedicatedJFrame frame) {
+		Menu.frame = frame;
+	}
+
+	public static boolean isRunning() {
+		return running;
+	}
+
+	public static void setRunning(boolean running) {
+		Menu.running = running;
+	}
+
+	public static boolean isSelectedStart() {
+		return selectedStart;
+	}
+
+	public static void setSelectedStart(boolean selectedStart) {
+		Menu.selectedStart = selectedStart;
+	}
+
+	public static boolean isSelectedExit() {
+		return selectedExit;
+	}
+
+	public static void setSelectedExit(boolean selectedExit) {
+		Menu.selectedExit = selectedExit;
+	}
+
+	public Color getSelected() {
+		return selected;
+	}
+
+	public void setSelected(Color selected) {
+		this.selected = selected;
+	}
+
+	public Color getDeSelected() {
+		return deSelected;
+	}
+
+	public void setDeSelected(Color deSelected) {
+		this.deSelected = deSelected;
+	}
+
+	public static int getWidth() {
+		return WIDTH;
+	}
+
+	public static int getHeight() {
+		return HEIGHT;
+	}
+
+	public static boolean isGameOver() {
+		return gameOver;
+	}
+
+	public static void setGameOver(boolean gameOver) {
+		Menu.gameOver = gameOver;
+	}
 	
 }

commit 7082d7f8184bac5e74992ab24e9afe36332c4ff5
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Oct 18 19:51:39 2013 +0100

    Working on a general sysout class

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e4d2968..0aa3f77 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -28,6 +28,7 @@ import com.redomar.game.menu.Menu;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
+import com.redomar.game.script.Printing;
 import com.thehowtotutorial.splashscreen.JSplash;
 
 public class Game extends Canvas implements Runnable {
@@ -41,6 +42,7 @@ public class Game extends Canvas implements Runnable {
 	private static final int SCALE = 3;
 	private static final String NAME = "Game";
 	private static Game game;
+	private static Time time = new Time();
 	private static int Jdata_Host;
 	private static String Jdata_UserName = "";
 	private static String Jdata_IP = "127.0.0.1";
@@ -67,7 +69,6 @@ public class Game extends Canvas implements Runnable {
 	private Player player;
 	private Dummy dummy;
 	private Music music = new Music();
-	private Time time = new Time();
 	private Font font = new Font();
 	private Thread musicThread = new Thread(music, "MUSIC");
 	private String nowPlaying;
@@ -76,6 +77,7 @@ public class Game extends Canvas implements Runnable {
 	private int trigger = 0;
 	private GameClient socketClient;
 	private GameServer socketServer;
+	private Printing print = new Printing();
 	
 	
 	public Game() {
@@ -248,7 +250,8 @@ public class Game extends Canvas implements Runnable {
 					musicThread.start();
 					notActive = false;
 				} else {
-					System.out.println("[GAME] Canceled music option");
+					//System.out.println("[GAME] Canceled music option");
+					print.print(" Canceled music option", 1);
 					input.setPlayMusic(false);
 				}
 			}			
@@ -386,6 +389,14 @@ public class Game extends Canvas implements Runnable {
 		this.level = level;
 	}
 
+	public static Time getTime() {
+		return Game.time;
+	}
+
+	public void setTime(Time time) {
+		Game.time = time;
+	}
+
 	public WindowHandler getWindow() {
 		return window;
 	}
diff --git a/src/com/redomar/game/lib/Time.java b/src/com/redomar/game/lib/Time.java
index 76cd3ef..7b413b4 100644
--- a/src/com/redomar/game/lib/Time.java
+++ b/src/com/redomar/game/lib/Time.java
@@ -9,7 +9,7 @@ public class Time {
 		
 	}
 	
-	public String getTime(){
+	public synchronized String getTime(){
 		Calendar cal = Calendar.getInstance();
     	cal.getTime();
     	SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
new file mode 100644
index 0000000..c116798
--- /dev/null
+++ b/src/com/redomar/game/script/Printing.java
@@ -0,0 +1,55 @@
+package com.redomar.game.script;
+
+import com.redomar.game.lib.Time;
+
+public class Printing {
+
+	private int type = 0;
+	private Time time = new Time();
+	private String message;
+	private String typeName = "[System]";
+	
+	public Printing(){
+		
+	}
+	
+	public void print(String message, int type){
+		setType(type);
+		setMessage(message);
+		System.out.println("["+time.getTime()+"]"+type()+getMessage());		
+	}
+	
+	private String type(){
+		if (getType() == 1){
+			this.typeName = "[GAME]";
+		}else if(getType() == 2){
+			this.typeName = "[MUSIC]";
+		}
+		
+		return this.typeName;
+	}
+
+	public int getType() {
+		return type;
+	}
+
+	public void setType(int type) {
+		this.type = type;
+	}
+
+	public String getTypeName() {
+		return typeName;
+	}
+
+	public void setTypeName(String typeName) {
+		this.typeName = typeName;
+	}
+
+	public String getMessage() {
+		return message;
+	}
+
+	public void setMessage(String message) {
+		this.message = message;
+	}
+}

commit 6b30cadf11ba4411346c5615050a518c0aee0a48
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Oct 18 19:57:01 2013 +0100

    Disabled new Menu (more work needed)

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 0aa3f77..8de6671 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -24,7 +24,6 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Music;
 import com.redomar.game.lib.Time;
-import com.redomar.game.menu.Menu;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
@@ -310,7 +309,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static void main(String[] args) {
-		Menu.main(null);
+		play();
 	}
 	
 	public static void play(){

commit d1f392f5a94e99e5e734c6d482a7d247ee82539c
Merge: aff4414 6b30cad
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Oct 18 20:09:00 2013 +0100

    Merge remote-tracking branch 'origin/updater'

commit 4bed898f42cb433c925dd36f95f661b001c3be45
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Oct 18 20:30:02 2013 +0100

    Alpha 1.6.1

diff --git a/README.md b/README.md
index 2c20f85..8dafb12 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.6
+JavaGame Alpha v1.6.1
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 8e0cecb..d15c049 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -33,7 +33,7 @@ import com.thehowtotutorial.splashscreen.JSplash;
 public class Game extends Canvas implements Runnable {
 
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.6 Alpha";
+	private static final String game_Version = "v1.6.1 Alpha";
 
 	// Setting the size and name of the frame/canvas
 	private static final int WIDTH = 160;

commit f537015ba0e9d692ea9b478a9e85beac77effdb7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Oct 19 19:58:03 2013 +0100

    Enabled Menu

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 0aa3f77..21a91ab 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -11,7 +11,6 @@ import java.awt.image.DataBufferInt;
 
 import javax.swing.JFrame;
 import javax.swing.JOptionPane;
-import javax.swing.UIManager;
 
 import org.apache.commons.lang3.text.WordUtils;
 
@@ -29,14 +28,12 @@ import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.script.Printing;
-import com.thehowtotutorial.splashscreen.JSplash;
 
-public class Game extends Canvas implements Runnable {
 
-	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.5.3 Alpha";
+public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
+	private static final long serialVersionUID = 1L;
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
@@ -128,7 +125,7 @@ public class Game extends Canvas implements Runnable {
 	public void setMap(String Map_str) {
 		setLevel(new LevelHandler(Map_str));
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
-				Jdata_UserName, null, -1));
+				getJdata_UserName(), null, -1));
 		level.addEntity(player);
 	}
 	
@@ -149,12 +146,12 @@ public class Game extends Canvas implements Runnable {
 		running = true;
 		new Thread(this, "GAME").start();
 		
-		if (Jdata_Host == 0) {
+		if (getJdata_Host() == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
 		}
 
-		setSocketClient(new GameClient(this, Jdata_IP));
+		setSocketClient(new GameClient(this, getJdata_IP()));
 		getSocketClient().start();
 	}
 
@@ -310,51 +307,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static void main(String[] args) {
-		Menu.main(null);
-	}
-	
-	public static void play(){
-		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, game_Version, null, Color.RED, Color.ORANGE);
-			splash.toFront();
-			splash.requestFocus();
-			splash.splashOn();
-			splash.setProgress(10, "Initializing Game");
-			Thread.sleep(250);
-			splash.setProgress(25, "Loading Classes");
-			Thread.sleep(125);
-			splash.setProgress(35, "Applying Configurations");
-			Thread.sleep(125);
-			splash.setProgress(40, "Loading Sprites");
-			Thread.sleep(250);
-			splash.setProgress(50, "Loading Textures");
-			Thread.sleep(125);
-			splash.setProgress(60, "Loading Map");
-			Thread.sleep(500);
-			splash.setProgress(80, "Configuring Map");
-			Thread.sleep(125);
-			splash.setProgress(90, "Pulling InputPanes");
-			Thread.sleep(250);
-			splash.setProgress(92, "Aquring data: Multiplayer");
-			Thread.sleep(125);
-			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-			Jdata_Host = JOptionPane.showConfirmDialog(getGame(), "Do you want to be the HOST?");
-			if (Jdata_Host == 1){
-				Jdata_IP = JOptionPane.showInputDialog(getGame(), "Enter the name \nleave blank for local");
-			}
-			Thread.sleep(125);
-			splash.setProgress(95, "Aquring data: Username");
-			Thread.sleep(125);
-			splash.setProgress(96, "Initalizing as Server:Host");
-			Jdata_UserName = JOptionPane.showInputDialog(getGame(), "Enter a name");
-			splash.setProgress(97, "Connecting as" + Jdata_UserName);
-			Thread.sleep(250);
-			splash.splashOff();
-			new Game().start();
-//			new Menu().start();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
+		new Menu().start();
 	}
 
 	public JFrame getFrame() {
@@ -461,4 +414,28 @@ public class Game extends Canvas implements Runnable {
 		this.dummy = dummy;
 	}
 
+	public static String getJdata_IP() {
+		return Jdata_IP;
+	}
+
+	public static void setJdata_IP(String jdata_IP) {
+		Jdata_IP = jdata_IP;
+	}
+
+	public static int getJdata_Host() {
+		return Jdata_Host;
+	}
+
+	public static void setJdata_Host(int jdata_Host) {
+		Jdata_Host = jdata_Host;
+	}
+
+	public static String getJdata_UserName() {
+		return Jdata_UserName;
+	}
+
+	public static void setJdata_UserName(String jdata_UserName) {
+		Jdata_UserName = jdata_UserName;
+	}
+
 }
diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
index 4fc3c59..cf18d09 100644
--- a/src/com/redomar/game/lib/Mouse.java
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -42,7 +42,7 @@ public class Mouse implements MouseListener, MouseMotionListener{
 					Menu.setRunning(false);
 					Menu.getFrame().setVisible(false);
 					Menu.getFrame().stopFrame();
-					Game.play();
+					new Game().start();
 				}
 				//EXIT game
 				if(e.getY() > 160 && e.getY() < 250){
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 9afa884..0b51079 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -6,13 +6,19 @@ import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
 import java.awt.image.BufferStrategy;
 
+import javax.swing.JOptionPane;
+import javax.swing.UIManager;
+
+import com.redomar.game.Game;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Mouse;
+import com.thehowtotutorial.splashscreen.JSplash;
 
 
 
 public class Menu implements Runnable{
 
+	private static final String game_Version = "v1.5.3 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
@@ -23,7 +29,7 @@ public class Menu implements Runnable{
 	private static boolean selectedExit = false;
 	private static boolean gameOver = false;
 	
-	private static DedicatedJFrame frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+	private static DedicatedJFrame frame;// = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
 	private Font font = new Font();
 	private MouseListener Mouse = new Mouse();
 	
@@ -32,6 +38,7 @@ public class Menu implements Runnable{
 	
 	public synchronized void start() {
 		running = true;
+		play();
 		new Thread(this, "MENU").start();
 	}
 
@@ -149,7 +156,49 @@ public class Menu implements Runnable{
 	public static void main(String[] args) {
 		new Menu().start();
 	}
-
+	
+	public static void play(){
+		try {
+			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, game_Version, null, Color.RED, Color.ORANGE);
+			splash.toFront();
+			splash.requestFocus();
+			splash.splashOn();
+			splash.setProgress(10, "Initializing Game");
+			Thread.sleep(250);
+			splash.setProgress(25, "Loading Classes");
+			Thread.sleep(125);
+			splash.setProgress(35, "Applying Configurations");
+			Thread.sleep(125);
+			splash.setProgress(40, "Loading Sprites");
+			Thread.sleep(250);
+			splash.setProgress(50, "Loading Textures");
+			Thread.sleep(125);
+			splash.setProgress(60, "Loading Map");
+			Thread.sleep(500);
+			splash.setProgress(80, "Configuring Map");
+			Thread.sleep(125);
+			splash.setProgress(90, "Pulling InputPanes");
+			Thread.sleep(250);
+			splash.setProgress(92, "Aquring data: Multiplayer");
+			Thread.sleep(125);
+			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
+			Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(), "Do you want to be the HOST?"));
+			if (Game.getJdata_Host() == 1){
+				Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(), "Enter the name \nleave blank for local"));
+			}
+			Thread.sleep(125);
+			splash.setProgress(95, "Aquring data: Username");
+			Thread.sleep(125);
+			splash.setProgress(96, "Initalizing as Server:Host");
+			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(), "Enter a name"));
+			splash.setProgress(97, "Connecting as" + Game.getJdata_UserName());
+			Thread.sleep(250);
+			splash.splashOff();
+			frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
 	public static DedicatedJFrame getFrame() {
 		return Menu.frame;
 	}

commit 34b08165ddc04ef9fc917c6105fdd0f0953ea16d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Oct 19 20:38:31 2013 +0100

    Centered Menu

diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
index cf18d09..9582bf3 100644
--- a/src/com/redomar/game/lib/Mouse.java
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -14,15 +14,15 @@ public class Mouse implements MouseListener, MouseMotionListener{
 	}
 
 	public void mouseMoved(MouseEvent e) {
-		if (e.getX() > 35 && e.getX() < 440){
+		if (e.getX() > 35 && e.getX() < 455){
 			//START is being selected
-			if(e.getY() > 35 && e.getY() < 125){
+			if(e.getY() > 38 && e.getY() < 150){
 				Menu.setSelectedStart(true);
 			}else{
 				Menu.setSelectedStart(false);
 			}
 			//EXIT is being selected
-			if(e.getY() > 160 && e.getY() < 250){
+			if(e.getY() > 170 && e.getY() < 280){
 				Menu.setSelectedExit(true);
 			}else{
 				Menu.setSelectedExit(false);
@@ -36,16 +36,16 @@ public class Mouse implements MouseListener, MouseMotionListener{
 
 	public void mouseClicked(MouseEvent e) {
 		if(Menu.isRunning()){
-			if (e.getX() > 35 && e.getX() < 440){
+			if (e.getX() > 35 && e.getX() < 455){
 				//START game
-				if(e.getY() > 35 && e.getY() < 125){
+				if(e.getY() > 38 && e.getY() < 150){
 					Menu.setRunning(false);
 					Menu.getFrame().setVisible(false);
 					Menu.getFrame().stopFrame();
 					new Game().start();
 				}
 				//EXIT game
-				if(e.getY() > 160 && e.getY() < 250){
+				if(e.getY() > 170 && e.getY() < 280){
 					Menu.setRunning(false);
 					Menu.getFrame().setVisible(false);
 					Menu.getFrame().stopFrame();
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 0ee0697..4c96820 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -12,6 +12,10 @@ public class DedicatedJFrame extends Canvas {
 	private static JFrame frame;
 
 	public DedicatedJFrame(int WIDTH, int HEIGHT, int SCALE, String NAME){
+		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
+		
 		setFrame(new JFrame(NAME));
 		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		getFrame().setLayout(new BorderLayout());
@@ -20,10 +24,6 @@ public class DedicatedJFrame extends Canvas {
 		getFrame().setResizable(false);
 		getFrame().setLocationRelativeTo(null);
 		getFrame().setVisible(true);
-		
-		getFrame().setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
-		getFrame().setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
-		getFrame().setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 	}
 	
 	public JFrame getFrame() {
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 0b51079..bcd544a 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -101,7 +101,7 @@ public class Menu implements Runnable{
 		g.setColor(Color.BLACK);
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
 		g.setColor(new Color(0xFF660000));
-		g.fillRect(12, 12, (WIDTH*3)-30, (HEIGHT*3)-53);
+		g.fillRect(10, 10, (WIDTH*3)-10, (HEIGHT*3)-10);
 		g.setColor(new Color(0xFFFF9900));
 		g.setFont(font.getArial());
 		if(isGameOver()){
@@ -109,44 +109,44 @@ public class Menu implements Runnable{
 		}else{
 			g.drawString("Welcome to JavaGame",35,30);
 		}
-		g.drawLine(10, (HEIGHT*3)-40, 10, 10);
-		g.drawLine(10, 10, (WIDTH*3)-17, 10);
-		g.drawLine((WIDTH*3)-17, 10, (WIDTH*3)-17, (HEIGHT*3)-40);
-		g.drawLine(10, (HEIGHT*3)-40, (WIDTH*3)-17, (HEIGHT*3)-40);
+		g.drawLine(10, (HEIGHT*3), 10, 10);
+		g.drawLine(10, 10, (WIDTH*3), 10);
+		g.drawLine((WIDTH*3), 10, (WIDTH*3), (HEIGHT*3));
+		g.drawLine(10, (HEIGHT*3), (WIDTH*3), (HEIGHT*3));
 		//(LEFT,DOWN,WIDTH,HEIGHT)
 		if (isSelectedStart() == true){
 			//START
 			g.setColor(getSelected());
-			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.fillRect(35, 40, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 85);
+			g.drawString("Start", 220, 95);
 			//EXIT
 			g.setColor(getDeSelected());
-			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.fillRect(35, 170, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 210);
+			g.drawString("Exit", 220, 220);
 		} else if (isSelectedExit() == true){
 			//START
 			g.setColor(getDeSelected());
-			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.fillRect(35, 40, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 85);
+			g.drawString("Start", 220, 95);
 			//EXIT
 			g.setColor(getSelected());
-			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.fillRect(35, 170, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 210);
+			g.drawString("Exit", 220, 220);
 		}else{
 			//START
 			g.setColor(getDeSelected());
-			g.fillRect(35, 35, (frame.getWidth()-70), 90);
+			g.fillRect(35, 40, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 85);
+			g.drawString("Start", 220, 95);
 			//EXIT
 			g.setColor(getDeSelected());
-			g.fillRect(35, 160, (frame.getWidth()-70), 90);
+			g.fillRect(35, 170, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 210);
+			g.drawString("Exit", 220, 220);
 		}
 		bs.show();
 		g.dispose();

commit 937e26f02e2920691bdfa0fce5cab6fac522cd9a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Oct 20 17:16:34 2013 +0100

    Optimized rendering buttons

diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index bcd544a..00c97b3 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -114,43 +114,45 @@ public class Menu implements Runnable{
 		g.drawLine((WIDTH*3), 10, (WIDTH*3), (HEIGHT*3));
 		g.drawLine(10, (HEIGHT*3), (WIDTH*3), (HEIGHT*3));
 		//(LEFT,DOWN,WIDTH,HEIGHT)
-		if (isSelectedStart() == true){
-			//START
-			g.setColor(getSelected());
-			g.fillRect(35, 40, (frame.getWidth()-70), 110);
-			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 95);
-			//EXIT
-			g.setColor(getDeSelected());
-			g.fillRect(35, 170, (frame.getWidth()-70), 110);
-			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 220);
-		} else if (isSelectedExit() == true){
-			//START
+		paintButtons(isSelectedStart(), isSelectedExit(), g);
+		bs.show();
+		g.dispose();
+		
+	}
+	
+	private void paintButtons(boolean start, boolean exit, Graphics g){
+		//START
+		if(!start){
+			g.setColor(new Color(0xFFBB4400));
+			g.fillRect(35, 40, (frame.getWidth()-67), 113);
 			g.setColor(getDeSelected());
 			g.fillRect(35, 40, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 95);
-			//EXIT
-			g.setColor(getSelected());
-			g.fillRect(35, 170, (frame.getWidth()-70), 110);
-			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 220);
+			g.drawString("Start", 220, 95);			
 		}else{
-			//START
-			g.setColor(getDeSelected());
+			g.setColor(new Color(0xFFDD6600));
+			g.fillRect(35, 40, (frame.getWidth()-67), 113);
+			g.setColor(getSelected());
 			g.fillRect(35, 40, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 95);
-			//EXIT
+		}
+		//EXIT
+		if(!exit){
+			g.setColor(new Color(0xFFBB4400));
+			g.fillRect(35, 170, (frame.getWidth()-67), 113);
 			g.setColor(getDeSelected());
 			g.fillRect(35, 170, (frame.getWidth()-70), 110);
 			g.setColor(Color.BLACK);
+			g.drawString("Exit", 220, 220);			
+		}else{
+			g.setColor(new Color(0xFFDD6600));
+			g.fillRect(35, 170, (frame.getWidth()-67), 113);
+			g.setColor(getSelected());
+			g.fillRect(35, 170, (frame.getWidth()-70), 110);
+			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 220);
 		}
-		bs.show();
-		g.dispose();
-		
 	}
 
 	public static void main(String[] args) {
@@ -199,6 +201,7 @@ public class Menu implements Runnable{
 			e.printStackTrace();
 		}
 	}
+	
 	public static DedicatedJFrame getFrame() {
 		return Menu.frame;
 	}

commit 35b1706a20a0196451d22d9e63013a6c5fb6703f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Oct 21 18:34:41 2013 +0100

    Starting on mob speeds

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index a6df3b7..e574836 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -9,7 +9,7 @@ public abstract class Mob extends Entity {
 
 	protected String name;
 	protected Random random = new Random();
-	protected int speed;
+	protected double speed;
 	protected int numSteps = 0;
 	protected boolean isMoving;
 	protected int movingDir = 1;
@@ -19,7 +19,7 @@ public abstract class Mob extends Entity {
 	protected boolean changeLevels = false;
 	protected int ticker;
 
-	public Mob(LevelHandler level, String name, int x, int y, int speed) {
+	public Mob(LevelHandler level, String name, int x, int y, double speed) {
 		super(level);
 		this.name = name;
 		this.setX(x);
@@ -48,8 +48,8 @@ public abstract class Mob extends Entity {
 			if (xa > 0) {
 				movingDir = 3;
 			}
-			setX(getX() + xa * speed);
-			setY(getY() + ya * speed);
+			setX(getX() + xa * (int)speed);
+			setY(getY() + ya * (int)speed);
 		}
 	}
 

commit e6128735f833a7872ef81f707435604e6f6cf89c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 30 18:29:49 2013 +0000

    Updated Menu and the runnable Jar

diff --git a/jar/javagame.jar b/jar/javagame.jar
index fb7df0d..700cf01 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 00c97b3..f0b41d1 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -9,6 +9,8 @@ import java.awt.image.BufferStrategy;
 import javax.swing.JOptionPane;
 import javax.swing.UIManager;
 
+import org.apache.commons.lang3.text.WordUtils;
+
 import com.redomar.game.Game;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Mouse;
@@ -107,7 +109,8 @@ public class Menu implements Runnable{
 		if(isGameOver()){
 			g.drawString("GAME OVER... What will you do now?",35,30);			
 		}else{
-			g.drawString("Welcome to JavaGame",35,30);
+			String name = (Game.getJdata_UserName().length() >= 1) ? WordUtils.capitalizeFully(Game.getJdata_UserName()).toString() : "Player"; 
+			g.drawString("Welcome to JavaGame "+name,35,30);
 		}
 		g.drawLine(10, (HEIGHT*3), 10, 10);
 		g.drawLine(10, 10, (WIDTH*3), 10);
@@ -154,10 +157,6 @@ public class Menu implements Runnable{
 			g.drawString("Exit", 220, 220);
 		}
 	}
-
-	public static void main(String[] args) {
-		new Menu().start();
-	}
 	
 	public static void play(){
 		try {

commit 39c7340a7c45957927b256a9982684a52eef3397
Merge: 4bed898 e612873
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Oct 30 18:58:24 2013 +0000

    Merger with aside
    
    fix a few bugs during merge

commit 752ec7a873ce87bdc9951e30c1d2c43f84a8554c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Nov 17 15:37:36 2013 +0000

    updated Readme

diff --git a/README.md b/README.md
index 8dafb12..20b09f9 100644
--- a/README.md
+++ b/README.md
@@ -4,7 +4,7 @@ JavaGame Alpha v1.6.1
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
 
 #####What is JavaGame?
-JavaGame is a game project that i am working on for an assignment for college.
+JavaGame is a game project that have been working on since May. I have added many features to the game, but now I am running out of ideas.
 
 #####Why name it JavaGame?
 Well i'm still not sure what exactly i'm going to do with it, and I haven't thought of a suitable name either
@@ -24,4 +24,4 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
   * Make the changes in the /src folder
 * Commit your changes (```git commit -am "Change Title"```)
 * Push to the branch (```git push origin my_branch```)
-* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
+* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
\ No newline at end of file

commit 4f043ce1a53715087b99b13880f052794f3b3a88
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Nov 17 16:36:41 2013 +0000

    Added 2 new dirt tiles

diff --git a/res/levels/custom_level.png b/res/levels/custom_level.png
index fba42c3..dc38e12 100644
Binary files a/res/levels/custom_level.png and b/res/levels/custom_level.png differ
diff --git a/src/com/redomar/game/level/tiles/Tile.java b/src/com/redomar/game/level/tiles/Tile.java
index ccb7e0c..0804e1b 100644
--- a/src/com/redomar/game/level/tiles/Tile.java
+++ b/src/com/redomar/game/level/tiles/Tile.java
@@ -20,6 +20,8 @@ public abstract class Tile {
 	private static final Tile CARPET_red = new BasicTile(10, 5, 0, Colours.get(-1, 311, 411, 311), 0xFFAA3636);
 	private static final Tile PORTAL = new AnimatedTile(11, new int[][] { { 3,  5 },  { 4, 5 }, { 5, 5 }, { 6, 5 }, { 7, 5 }, { 8, 5 }, { 9, 5 }, { 10, 5 } },  Colours.get(-1, 005, 305, -1), 0xFF00EAFF, 100);
 	private static final Tile MAGMA = new AnimatedTile(12, new int [][] { { 0, 5 }, { 1, 5 }, { 2, 5 }, { 1, 5 } }, Colours.get(-1, 400, 511, -1), 0xFFF00F0F, 1000);
+	private static final Tile DIRT = new BasicTile(13, 3, 0, Colours.get(0, 210, 321, -1), 0xFF442200);
+	private static final Tile DIRT_WET = new AnimatedTile(14, new int[][] { { 1, 5 }, { 2, 5 } }, Colours.get(-1, 211, 322, -1), 0xFF663300, 1500);
 
 	protected byte id;
 	protected boolean solid;
@@ -116,4 +118,12 @@ public abstract class Tile {
 		return MAGMA;
 	}
 
+	public static Tile getDirt() {
+		return DIRT;
+	}
+
+	public static Tile getDirtWet() {
+		return DIRT_WET;
+	}
+
 }

commit 2c8a5fd207b1182d74a81c7b93ee85f5d0b00425
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Nov 18 21:05:15 2013 +0000

    Updated code structure
    
    formatted the code structure to get align code and to get rid of extra
    empty lines

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 52de468..f83f880 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -29,9 +29,8 @@ import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.script.Printing;
 
-
 public class Game extends Canvas implements Runnable {
-	
+
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
 	private static final String game_Version = "v1.6.1 Alpha";
@@ -59,7 +58,8 @@ public class Game extends Canvas implements Runnable {
 			.getData();
 	private int[] colours = new int[6 * 6 * 6];
 
-	private BufferedImage image2 = new BufferedImage(WIDTH, HEIGHT - 30, BufferedImage.TYPE_INT_RGB);
+	private BufferedImage image2 = new BufferedImage(WIDTH, HEIGHT - 30,
+			BufferedImage.TYPE_INT_RGB);
 	private Screen screen;
 	private InputHandler input;
 	private WindowHandler window;
@@ -76,8 +76,7 @@ public class Game extends Canvas implements Runnable {
 	private GameClient socketClient;
 	private GameServer socketServer;
 	private Printing print = new Printing();
-	
-	
+
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -113,7 +112,8 @@ public class Game extends Canvas implements Runnable {
 		setWindow(new WindowHandler(this));
 		setMap("/levels/custom_level.png");
 		setMap(1);
-		Packet00Login loginPacket = new Packet00Login(player.getUsername(), player.getX(), player.getY());
+		Packet00Login loginPacket = new Packet00Login(player.getUsername(),
+				player.getX(), player.getY());
 
 		if (socketServer != null) {
 			socketServer.addConnection((PlayerMP) getPlayer(), loginPacket);
@@ -129,16 +129,16 @@ public class Game extends Canvas implements Runnable {
 				getJdata_UserName(), null, -1));
 		level.addEntity(player);
 	}
-	
-	public static void npcSpawn(){
-		if(isNpc() == true){
+
+	public static void npcSpawn() {
+		if (isNpc() == true) {
 			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 215, 500, 543));
 			game.level.addEntity(Game.getDummy());
 		}
 	}
-	
-	public static void npcKill(){
-		if(isNpc() == false){
+
+	public static void npcKill() {
+		if (isNpc() == false) {
 			game.level.removeEntity(Game.getDummy());
 		}
 	}
@@ -146,7 +146,7 @@ public class Game extends Canvas implements Runnable {
 	public synchronized void start() {
 		running = true;
 		new Thread(this, "GAME").start();
-		
+
 		if (getJdata_Host() == 0) {
 			socketServer = new GameServer(this);
 			socketServer.start();
@@ -240,67 +240,80 @@ public class Game extends Canvas implements Runnable {
 				}
 			}
 		}
-		
-		if (noAudioDevice == false){
-			if (input.isPlayMusic() == true && notActive == true){
-				int musicOption = JOptionPane.showConfirmDialog(this, "You are about to turn on music and can be VERY loud", "Music Options", 2, 2);
-				if (musicOption == 0){
+
+		if (noAudioDevice == false) {
+			if (input.isPlayMusic() == true && notActive == true) {
+				int musicOption = JOptionPane.showConfirmDialog(this,
+						"You are about to turn on music and can be VERY loud",
+						"Music Options", 2, 2);
+				if (musicOption == 0) {
 					musicThread.start();
 					notActive = false;
 				} else {
-					//System.out.println("[GAME] Canceled music option");
+					// System.out.println("[GAME] Canceled music option");
 					print.print(" Canceled music option", 1);
 					input.setPlayMusic(false);
 				}
-			}			
+			}
 		}
-		
-		if (isChangeLevel() == true && getTickCount() % 60 == 0){
+
+		if (isChangeLevel() == true && getTickCount() % 60 == 0) {
 			Game.setChangeLevel(true);
 			setChangeLevel(false);
 		}
-		
-		if (changeLevel == true){
-			if(getMap() == 1){
-				setMap("/levels/water_level.png");	
+
+		if (changeLevel == true) {
+			if (getMap() == 1) {
+				setMap("/levels/water_level.png");
 				setMap(2);
-			}else if(getMap() == 2){
+			} else if (getMap() == 2) {
 				setMap("/levels/custom_level.png");
 				setMap(1);
 			}
 			changeLevel = false;
 		}
-		
+
 		Graphics g = bs.getDrawGraphics();
 		g.drawRect(0, 0, getWidth(), getHeight());
-		g.drawImage(image, 0, 0, getWidth(), getHeight()-30, null);
-//		Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
-		g.drawImage(image2, 0, getHeight()-30, getWidth(), getHeight(), null);
+		g.drawImage(image, 0, 0, getWidth(), getHeight() - 30, null);
+		// Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
+		g.drawImage(image2, 0, getHeight() - 30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
 		g.setFont(font.getSegoe());
-		g.drawString("Welcome "+WordUtils.capitalizeFully(player.getSantizedUsername()), 3, getHeight()-17);
+		g.drawString(
+				"Welcome "
+						+ WordUtils.capitalizeFully(player
+								.getSantizedUsername()), 3, getHeight() - 17);
 		g.setColor(Color.YELLOW);
-		g.drawString(time.getTime(), (getWidth() - 58), (getHeight()-3));
+		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
 		g.setColor(Color.WHITE);
-		if(noAudioDevice == true){
+		if (noAudioDevice == true) {
 			g.setColor(Color.RED);
-			g.drawString("MUSIC is OFF | no audio device for playback", 3, getHeight()-3);
+			g.drawString("MUSIC is OFF | no audio device for playback", 3,
+					getHeight() - 3);
 			trigger++;
-			if(trigger == 25){
-				JOptionPane.showMessageDialog(this, "No Audio device found", "Audio Issue", 0);
+			if (trigger == 25) {
+				JOptionPane.showMessageDialog(this, "No Audio device found",
+						"Audio Issue", 0);
 			}
-		} else if (notActive == true){
+		} else if (notActive == true) {
 			g.setColor(Color.RED);
-			g.drawString("MUSIC is OFF | press 'M' to start", 3, getHeight()-3);
-		} else{
+			g.drawString("MUSIC is OFF | press 'M' to start", 3,
+					getHeight() - 3);
+		} else {
 			g.setColor(Color.GREEN);
-			g.drawString("MUSIC is ON | You cannot turn off the music", 3, getHeight()-3);
+			g.drawString("MUSIC is ON | You cannot turn off the music", 3,
+					getHeight() - 3);
 			g.setColor(Color.WHITE);
-			setNowPlaying(WordUtils.capitalize(music.getSongName()[music.getSongNumber()].substring(7, (music.getSongName()[music.getSongNumber()].length() - 4))));
-			if (getNowPlaying().startsWith("T")){
-				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9) + 12, getHeight() - 17);
+			setNowPlaying(WordUtils.capitalize(music.getSongName()[music
+					.getSongNumber()].substring(7,
+					(music.getSongName()[music.getSongNumber()].length() - 4))));
+			if (getNowPlaying().startsWith("T")) {
+				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9)
+						+ 12, getHeight() - 17);
 			} else {
-				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9) + 8, getHeight() - 17);
+				g.drawString(nowPlaying, getWidth() - (nowPlaying.length() * 9)
+						+ 8, getHeight() - 17);
 			}
 		}
 		g.dispose();
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index b993d74..e37b955 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -61,32 +61,32 @@ public class InputHandler implements KeyListener {
 		if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
 			getRight().toggle(isPressed);
 		}
-		if (keyCode == KeyEvent.VK_M){
+		if (keyCode == KeyEvent.VK_M) {
 			this.setPlayMusic(true);
 		}
-		if (keyCode == KeyEvent.VK_Z){
-//			if (map == 0){
-//				Game.getGame().setMap("/levels/water_level.png");
-//				map++;
-//			} else{
-//				Game.getGame().setMap("/levels/custom_level.png");
-//				map--;
-//			}
-			if(Game.getMap() == 2){
+		if (keyCode == KeyEvent.VK_Z) {
+			// if (map == 0){
+			// Game.getGame().setMap("/levels/water_level.png");
+			// map++;
+			// } else{
+			// Game.getGame().setMap("/levels/custom_level.png");
+			// map--;
+			// }
+			if (Game.getMap() == 2) {
 				Game.setChangeLevel(true);
 				Game.getLevel().removeEntity(Game.getDummy());
 				Game.setNpc(false);
 			}
 		}
-		if (keyCode == KeyEvent.VK_N){
-			if(Game.isNpc() == false){
+		if (keyCode == KeyEvent.VK_N) {
+			if (Game.isNpc() == false) {
 				Game.setNpc(true);
 				Game.npcSpawn();
 				System.out.println("[GAME] Dummy has been spawned");
 			}
 		}
-		if (keyCode == KeyEvent.VK_K){
-			if(Game.isNpc() == true){
+		if (keyCode == KeyEvent.VK_K) {
+			if (Game.isNpc() == true) {
 				Game.setNpc(false);
 				Game.npcKill();
 				System.out.println("[GAME] Dummy has been despawned");
diff --git a/src/com/redomar/game/WindowHandler.java b/src/com/redomar/game/WindowHandler.java
index 9c89196..2cc7e4a 100644
--- a/src/com/redomar/game/WindowHandler.java
+++ b/src/com/redomar/game/WindowHandler.java
@@ -5,49 +5,50 @@ import java.awt.event.WindowListener;
 
 import com.redomar.game.net.packets.Packet01Disconnect;
 
-public class WindowHandler implements WindowListener{
+public class WindowHandler implements WindowListener {
 
 	private final Game game;
-	
-	public WindowHandler(Game game){
+
+	public WindowHandler(Game game) {
 		this.game = game;
 		this.game.getFrame().addWindowListener(this);
 	}
-	
+
 	@Override
 	public void windowActivated(WindowEvent event) {
-		
+
 	}
 
 	@Override
 	public void windowClosed(WindowEvent event) {
-		
+
 	}
 
 	@Override
 	public void windowClosing(WindowEvent event) {
-		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
+		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer()
+				.getUsername());
 		packet.writeData(this.game.getSocketClient());
 	}
 
 	@Override
 	public void windowDeactivated(WindowEvent event) {
-		
+
 	}
 
 	@Override
 	public void windowDeiconified(WindowEvent event) {
-		
+
 	}
 
 	@Override
 	public void windowIconified(WindowEvent event) {
-		
+
 	}
 
 	@Override
 	public void windowOpened(WindowEvent event) {
-		
+
 	}
 
 }
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index dd5d673..c48e8f3 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -5,42 +5,46 @@ import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
 
-public class Dummy extends Mob{
-	
-	private int colour, shirtCol, faceCol; //= Colours.get(-1, 111, 240, 310);
+public class Dummy extends Mob {
+
+	private int colour, shirtCol, faceCol; // = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private int xa = 0;
 	private int ya = 0;
-	
-	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol, int faceCol) {
+
+	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
+			int faceCol) {
 		super(level, "h", x, y, 1);
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
 	}
-	
+
 	public void tick() {
-		
-		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game.getPlayer().getY(), xa, ya, this);
+
+		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
+				.getPlayer().getY(), xa, ya, this);
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
 
-		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
+		if (isSwimming
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
 			isMagma = true;
 		}
-		
-		if (isMagma && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12){
+
+		if (isMagma
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
 			isMagma = false;
 		}
 
 		tickCount++;
-		
+
 	}
 
 	public void render(Screen screen) {
@@ -84,7 +88,7 @@ public class Dummy extends Mob{
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
-		
+
 		if (isMagma) {
 			int waterColour = 0;
 			yOffset += 4;
@@ -102,7 +106,7 @@ public class Dummy extends Mob{
 				yOffset--;
 				waterColour = Colours.get(-1, -1, 521, 510);
 			}
-			
+
 			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x00, 1);
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index e574836..7c5d7e6 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -48,8 +48,8 @@ public abstract class Mob extends Entity {
 			if (xa > 0) {
 				movingDir = 3;
 			}
-			setX(getX() + xa * (int)speed);
-			setY(getY() + ya * (int)speed);
+			setX(getX() + xa * (int) speed);
+			setY(getY() + ya * (int) speed);
 		}
 	}
 
@@ -61,9 +61,10 @@ public abstract class Mob extends Entity {
 			return false;
 		}
 
-		Tile lastTile = level.getTile((this.getX() + x) >> 3, (this.getY() + y) >> 3);
-		Tile newtTile = level.getTile((this.getX() + x + xa) >> 3,
-				(this.getY() + y + ya) >> 3);
+		Tile lastTile = level.getTile((this.getX() + x) >> 3,
+				(this.getY() + y) >> 3);
+		Tile newtTile = level.getTile((this.getX() + x + xa) >> 3, (this.getY()
+				+ y + ya) >> 3);
 
 		if (!lastTile.equals(newtTile) && newtTile.isSolid()) {
 			return true;
@@ -71,18 +72,23 @@ public abstract class Mob extends Entity {
 
 		return false;
 	}
-	
-	protected void followMovementAI(int x, int y, int px, int py, int xa, int ya, Mob mob){
+
+	protected void followMovementAI(int x, int y, int px, int py, int xa,
+			int ya, Mob mob) {
 		ya = 0;
 		xa = 0;
-		if(px > x) xa++;
-		if(px < x) xa--;
-		if(py > y) ya++;
-		if(py < y) ya--;
+		if (px > x)
+			xa++;
+		if (px < x)
+			xa--;
+		if (py > y)
+			ya++;
+		if (py < y)
+			ya--;
 		moveMob(xa, ya, mob);
 	}
-	
-	protected void moveMob(int xa, int ya, Mob mob){
+
+	protected void moveMob(int xa, int ya, Mob mob) {
 		if (xa != 0 || ya != 0) {
 			mob.move(xa, ya);
 			mob.isMoving = true;
@@ -106,5 +112,5 @@ public abstract class Mob extends Entity {
 	public void setMovingDir(int movingDir) {
 		this.movingDir = movingDir;
 	}
-	
+
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index d3e0b56..8478cc0 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -13,13 +13,13 @@ public class Player extends Mob {
 
 	private InputHandler input;
 	private static Name customeName = new Name();
-	
+
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private String userName;
 
 	public static String guestPlayerName = customeName.setName("Player ");
-	
+
 	public Player(LevelHandler level, int x, int y, InputHandler input,
 			String userName) {
 		super(level, "Player", x, y, 1);
@@ -49,10 +49,12 @@ public class Player extends Mob {
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);
 			isMoving = true;
-			
-			Packet02Move packet = new Packet02Move(this.getUsername(), this.getX(), this.getY(), this.numSteps, this.isMoving, this.movingDir);
+
+			Packet02Move packet = new Packet02Move(this.getUsername(),
+					this.getX(), this.getY(), this.numSteps, this.isMoving,
+					this.movingDir);
 			packet.writeData(Game.getGame().getSocketClient());
-			
+
 		} else {
 			isMoving = false;
 		}
@@ -60,23 +62,25 @@ public class Player extends Mob {
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
 			isSwimming = true;
 		}
-		
-		if (isSwimming && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
+
+		if (isSwimming
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
 			isSwimming = false;
 		}
-		
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11){
+
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11) {
 			changeLevels = true;
 		}
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
 			isMagma = true;
 		}
-		
-		if (isMagma && level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12){
+
+		if (isMagma
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
 			isMagma = false;
 		}
-		
+
 		tickCount++;
 	}
 
@@ -97,8 +101,8 @@ public class Player extends Mob {
 		int modifier = 8 * scale;
 		int xOffset = getX() - modifier / 2;
 		int yOffset = getY() - modifier / 2 - 4;
-		
-		if (changeLevels){
+
+		if (changeLevels) {
 			Game.setChangeLevel(true);
 		}
 
@@ -125,7 +129,7 @@ public class Player extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
-		
+
 		if (isMagma) {
 			int waterColour = 0;
 			yOffset += 4;
@@ -206,7 +210,7 @@ public class Player extends Mob {
 	}
 
 	public String getUsername() {
-		if(this.userName.isEmpty()){
+		if (this.userName.isEmpty()) {
 			return guestPlayerName;
 		}
 		return this.userName;
@@ -215,13 +219,13 @@ public class Player extends Mob {
 	public void setUsername(String name) {
 		this.userName = name;
 	}
-	
+
 	public String getSantizedUsername() {
-		if(this.getUsername() == null || this.userName.isEmpty()){
+		if (this.getUsername() == null || this.userName.isEmpty()) {
 			setUsername(guestPlayerName);
 			return guestPlayerName;
-		}
-		else return this.getUsername();
+		} else
+			return this.getUsername();
 	}
 
 }
diff --git a/src/com/redomar/game/gfx/Screen.java b/src/com/redomar/game/gfx/Screen.java
index c559358..23e9ec4 100644
--- a/src/com/redomar/game/gfx/Screen.java
+++ b/src/com/redomar/game/gfx/Screen.java
@@ -64,13 +64,15 @@ public class Screen {
 
 					for (int yScale = 0; yScale < scale; yScale++) {
 
-						if (yPixel + yScale < 0 | yPixel + yScale >= getHeight()) {
+						if (yPixel + yScale < 0
+								| yPixel + yScale >= getHeight()) {
 							continue;
 						}
 
 						for (int xScale = 0; xScale < scale; xScale++) {
 
-							if (xPixel + xScale < 0 | xPixel + xScale >= getWidth()) {
+							if (xPixel + xScale < 0
+									| xPixel + xScale >= getWidth()) {
 								continue;
 							}
 
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index e517f83..e076839 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -91,8 +91,8 @@ public class LevelHandler {
 			}
 		}
 	}
-	
-	public synchronized List<Entity>getEntities(){
+
+	public synchronized List<Entity> getEntities() {
 		return this.entities;
 	}
 
@@ -153,32 +153,35 @@ public class LevelHandler {
 	public void removeEntity(Entity entity) {
 		this.getEntities().remove(entity);
 	}
-	
+
 	public void removeEntity(String username) {
 		int index = 0;
-		for(Entity e : getEntities()){
-			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
+		for (Entity e : getEntities()) {
+			if (e instanceof PlayerMP
+					&& ((PlayerMP) e).getUsername().equalsIgnoreCase(username)) {
 				break;
 			}
 			index++;
 		}
 		this.getEntities().remove(index);
 	}
-	
-	private int getPlayerMPIndex(String username){
+
+	private int getPlayerMPIndex(String username) {
 		int index = 0;
-		for(Entity e : getEntities()){
-			if(e instanceof PlayerMP && ((PlayerMP)e).getUsername().equalsIgnoreCase(username)){
+		for (Entity e : getEntities()) {
+			if (e instanceof PlayerMP
+					&& ((PlayerMP) e).getUsername().equalsIgnoreCase(username)) {
 				break;
 			}
 			index++;
 		}
 		return index;
 	}
-	
-	public void movePlayer(String username, int x, int y, int numSteps, boolean isMoving, int movingDir){
+
+	public void movePlayer(String username, int x, int y, int numSteps,
+			boolean isMoving, int movingDir) {
 		int index = getPlayerMPIndex(username);
-		PlayerMP player = (PlayerMP)this.getEntities().get(index);
+		PlayerMP player = (PlayerMP) this.getEntities().get(index);
 		player.setX(x);
 		player.setY(y);
 		player.setNumSteps(numSteps);
diff --git a/src/com/redomar/game/lib/Font.java b/src/com/redomar/game/lib/Font.java
index 377e1ec..538c177 100644
--- a/src/com/redomar/game/lib/Font.java
+++ b/src/com/redomar/game/lib/Font.java
@@ -3,11 +3,11 @@ package com.redomar.game.lib;
 import com.redomar.game.gfx.Screen;
 
 public class Font {
-	
+
 	private static java.awt.Font arial;
 	private static java.awt.Font segoe;
-	
-	public Font(){
+
+	public Font() {
 		Font.setArial(new java.awt.Font("Arial", java.awt.Font.BOLD, 14));
 		Font.setSegoe(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
 	}
diff --git a/src/com/redomar/game/lib/Keys.java b/src/com/redomar/game/lib/Keys.java
index feb3401..e99620f 100644
--- a/src/com/redomar/game/lib/Keys.java
+++ b/src/com/redomar/game/lib/Keys.java
@@ -34,17 +34,17 @@ public class Keys implements KeyListener {
 	private Key down = new Key();
 
 	public void keyPressed(KeyEvent arg0) {
-		
+
 	}
 
 	public void keyReleased(KeyEvent arg0) {
-		
+
 	}
 
 	public void keyTyped(KeyEvent arg0) {
-		
+
 	}
-	
+
 	public void toggleKey(int keyCode, boolean isPressed) {
 		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
 			getUp().toggle(isPressed);
diff --git a/src/com/redomar/game/lib/Mouse.java b/src/com/redomar/game/lib/Mouse.java
index 9582bf3..6a334bd 100644
--- a/src/com/redomar/game/lib/Mouse.java
+++ b/src/com/redomar/game/lib/Mouse.java
@@ -7,67 +7,67 @@ import java.awt.event.MouseMotionListener;
 import com.redomar.game.Game;
 import com.redomar.game.menu.Menu;
 
-public class Mouse implements MouseListener, MouseMotionListener{
+public class Mouse implements MouseListener, MouseMotionListener {
 
 	public void mouseDragged(MouseEvent e) {
-		
+
 	}
 
 	public void mouseMoved(MouseEvent e) {
-		if (e.getX() > 35 && e.getX() < 455){
-			//START is being selected
-			if(e.getY() > 38 && e.getY() < 150){
+		if (e.getX() > 35 && e.getX() < 455) {
+			// START is being selected
+			if (e.getY() > 38 && e.getY() < 150) {
 				Menu.setSelectedStart(true);
-			}else{
+			} else {
 				Menu.setSelectedStart(false);
 			}
-			//EXIT is being selected
-			if(e.getY() > 170 && e.getY() < 280){
+			// EXIT is being selected
+			if (e.getY() > 170 && e.getY() < 280) {
 				Menu.setSelectedExit(true);
-			}else{
+			} else {
 				Menu.setSelectedExit(false);
 			}
-		}else{
+		} else {
 			Menu.setSelectedStart(false);
 			Menu.setSelectedExit(false);
 		}
-		
+
 	}
 
 	public void mouseClicked(MouseEvent e) {
-		if(Menu.isRunning()){
-			if (e.getX() > 35 && e.getX() < 455){
-				//START game
-				if(e.getY() > 38 && e.getY() < 150){
+		if (Menu.isRunning()) {
+			if (e.getX() > 35 && e.getX() < 455) {
+				// START game
+				if (e.getY() > 38 && e.getY() < 150) {
 					Menu.setRunning(false);
 					Menu.getFrame().setVisible(false);
 					Menu.getFrame().stopFrame();
 					new Game().start();
 				}
-				//EXIT game
-				if(e.getY() > 170 && e.getY() < 280){
+				// EXIT game
+				if (e.getY() > 170 && e.getY() < 280) {
 					Menu.setRunning(false);
 					Menu.getFrame().setVisible(false);
 					Menu.getFrame().stopFrame();
 				}
-			}			
+			}
 		}
 	}
 
 	public void mouseEntered(MouseEvent e) {
-		
+
 	}
 
 	public void mouseExited(MouseEvent e) {
-		
+
 	}
 
 	public void mousePressed(MouseEvent e) {
-		
+
 	}
 
 	public void mouseReleased(MouseEvent e) {
-		
+
 	}
 
 }
diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index 7ccd263..2fe4b6b 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -8,35 +8,36 @@ import com.redomar.game.Game;
 
 import javazoom.jl.player.Player;
 
-public class Music implements Runnable{
+public class Music implements Runnable {
 
 	private InputStream file;
 	private Player musicPlayer;
-	private static String songName[] = {"/music/yoshi song.mp3", "/music/Towards The End.mp3", "/music/Towards The End.mp3"};
+	private static String songName[] = { "/music/yoshi song.mp3",
+			"/music/Towards The End.mp3", "/music/Towards The End.mp3" };
 	private static int songNumber;
-	
+
 	private static Random rand = new Random();
-	
-	public Music(InputStream url){
-		this.file =  url;
+
+	public Music(InputStream url) {
+		this.file = url;
 	}
-	
+
 	public Music() {
 		Music.songNumber = rand.nextInt(3);
 	}
 
-	public void Play(){
+	public void Play() {
 		try {
-            BufferedInputStream buffered = new BufferedInputStream(file);  
-            musicPlayer = new Player(buffered);  
-            musicPlayer.play();
+			BufferedInputStream buffered = new BufferedInputStream(file);
+			musicPlayer = new Player(buffered);
+			musicPlayer.play();
 		} catch (Exception e) {
-			System.out.println("Problem playing file " + file);  
-            System.out.println(e);
+			System.out.println("Problem playing file " + file);
+			System.out.println(e);
 		}
 	}
-	
-	public synchronized void start(){
+
+	public synchronized void start() {
 		this.run();
 	}
 
@@ -45,19 +46,25 @@ public class Music implements Runnable{
 		try {
 			Thread.sleep(300);
 			initSongNumber();
-			//System.out.println("[MUSIC] loading song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
-			Music music = new Music(Game.class.getResourceAsStream(songName[songNumber]));
-			//Thread.sleep(100);
-			System.out.println("[MUSIC] playing song: " + songName[songNumber].substring(7, (songName[songNumber].length() - 4)));
+			// System.out.println("[MUSIC] loading song: " +
+			// songName[songNumber].substring(7, (songName[songNumber].length()
+			// - 4)));
+			Music music = new Music(
+					Game.class.getResourceAsStream(songName[songNumber]));
+			// Thread.sleep(100);
+			System.out.println("[MUSIC] playing song: "
+					+ songName[songNumber].substring(7,
+							(songName[songNumber].length() - 4)));
 			music.Play();
 			this.run();
 		} catch (InterruptedException e) {
-			System.out.println("[ERROR][MUSIC] Could not stop, nothing currenly playing");
+			System.out
+					.println("[ERROR][MUSIC] Could not stop, nothing currenly playing");
 		}
 	}
-	
+
 	public void stop() {
-		
+
 	}
 
 	private void initSongNumber() {
diff --git a/src/com/redomar/game/lib/Name.java b/src/com/redomar/game/lib/Name.java
index 4db21f4..e499a78 100644
--- a/src/com/redomar/game/lib/Name.java
+++ b/src/com/redomar/game/lib/Name.java
@@ -6,14 +6,14 @@ public class Name {
 
 	private Random rand = new Random();
 	private static int name_ID;
-	
-	public Name(){
+
+	public Name() {
 		setRand(rand);
 	}
-	
-	public String setName(String name){
-		
-		String finalName = name+getName_ID();
+
+	public String setName(String name) {
+
+		String finalName = name + getName_ID();
 		return finalName;
 	}
 
diff --git a/src/com/redomar/game/lib/Time.java b/src/com/redomar/game/lib/Time.java
index 7b413b4..aa248ee 100644
--- a/src/com/redomar/game/lib/Time.java
+++ b/src/com/redomar/game/lib/Time.java
@@ -5,14 +5,14 @@ import java.util.Calendar;
 
 public class Time {
 
-	public Time(){
-		
+	public Time() {
+
 	}
-	
-	public synchronized String getTime(){
+
+	public synchronized String getTime() {
 		Calendar cal = Calendar.getInstance();
-    	cal.getTime();
-    	SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
-    	return( sdf.format(cal.getTime()) );
+		cal.getTime();
+		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
+		return (sdf.format(cal.getTime()));
 	}
 }
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 4c96820..a6cf75a 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -11,11 +11,11 @@ public class DedicatedJFrame extends Canvas {
 	private static final long serialVersionUID = 1L;
 	private static JFrame frame;
 
-	public DedicatedJFrame(int WIDTH, int HEIGHT, int SCALE, String NAME){
+	public DedicatedJFrame(int WIDTH, int HEIGHT, int SCALE, String NAME) {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
-		
+
 		setFrame(new JFrame(NAME));
 		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		getFrame().setLayout(new BorderLayout());
@@ -25,7 +25,7 @@ public class DedicatedJFrame extends Canvas {
 		getFrame().setLocationRelativeTo(null);
 		getFrame().setVisible(true);
 	}
-	
+
 	public JFrame getFrame() {
 		return frame;
 	}
@@ -33,10 +33,9 @@ public class DedicatedJFrame extends Canvas {
 	public void setFrame(JFrame frame) {
 		DedicatedJFrame.frame = frame;
 	}
-	
-	public void stopFrame(){
+
+	public void stopFrame() {
 		getFrame().dispose();
 	}
-	
-	
+
 }
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index a569cb7..2330a48 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -16,28 +16,26 @@ import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Mouse;
 import com.thehowtotutorial.splashscreen.JSplash;
 
+public class Menu implements Runnable {
 
-
-public class Menu implements Runnable{
-
-	
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
 	private static final String NAME = "Menu";
-	
+
 	private static boolean running = false;
 	private static boolean selectedStart = false;
 	private static boolean selectedExit = false;
 	private static boolean gameOver = false;
-	
-	private static DedicatedJFrame frame;// = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+
+	private static DedicatedJFrame frame;// = new DedicatedJFrame(WIDTH, HEIGHT,
+											// SCALE, NAME);
 	private Font font = new Font();
 	private MouseListener Mouse = new Mouse();
-	
+
 	private Color selected = new Color(0xFFFF8800);
 	private Color deSelected = new Color(0xFFCC5500);
-	
+
 	public synchronized void start() {
 		running = true;
 		play();
@@ -47,7 +45,7 @@ public class Menu implements Runnable{
 	public static synchronized void stop() {
 		running = false;
 	}
-	
+
 	public void run() {
 		long lastTime = System.nanoTime();
 		double nsPerTick = 1000000000D / 30D;
@@ -83,7 +81,8 @@ public class Menu implements Runnable{
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				frame.getFrame().setTitle("Frames: " + frames + " Ticks: " + ticks);
+				frame.getFrame().setTitle(
+						"Frames: " + frames + " Ticks: " + ticks);
 				frames = 0;
 				ticks = 0;
 			}
@@ -91,7 +90,7 @@ public class Menu implements Runnable{
 	}
 
 	private void render() {
-		//frame.getFrame().getContentPane().setBackground(Color.GREEN);
+		// frame.getFrame().getContentPane().setBackground(Color.GREEN);
 		frame.addMouseMotionListener((MouseMotionListener) Mouse);
 		frame.addMouseListener(Mouse);
 		BufferStrategy bs = frame.getBufferStrategy();
@@ -103,64 +102,66 @@ public class Menu implements Runnable{
 		g.setColor(Color.BLACK);
 		g.fillRect(0, 0, frame.getWidth(), frame.getHeight());
 		g.setColor(new Color(0xFF660000));
-		g.fillRect(10, 10, (WIDTH*3)-10, (HEIGHT*3)-10);
+		g.fillRect(10, 10, (WIDTH * 3) - 10, (HEIGHT * 3) - 10);
 		g.setColor(new Color(0xFFFF9900));
 		g.setFont(font.getArial());
-		if(isGameOver()){
-			g.drawString("GAME OVER... What will you do now?",35,30);			
-		}else{
-			String name = (Game.getJdata_UserName().length() >= 1) ? WordUtils.capitalizeFully(Game.getJdata_UserName()).toString() : "Player"; 
-			g.drawString("Welcome to JavaGame "+name,35,30);
+		if (isGameOver()) {
+			g.drawString("GAME OVER... What will you do now?", 35, 30);
+		} else {
+			String name = (Game.getJdata_UserName().length() >= 1) ? WordUtils.capitalizeFully(Game.getJdata_UserName()).toString() : "Player";
+			g.drawString("Welcome to JavaGame " + name, 35, 30);
 		}
-		g.drawLine(10, (HEIGHT*3), 10, 10);
-		g.drawLine(10, 10, (WIDTH*3), 10);
-		g.drawLine((WIDTH*3), 10, (WIDTH*3), (HEIGHT*3));
-		g.drawLine(10, (HEIGHT*3), (WIDTH*3), (HEIGHT*3));
-		//(LEFT,DOWN,WIDTH,HEIGHT)
+		g.drawLine(10, (HEIGHT * 3), 10, 10);
+		g.drawLine(10, 10, (WIDTH * 3), 10);
+		g.drawLine((WIDTH * 3), 10, (WIDTH * 3), (HEIGHT * 3));
+		g.drawLine(10, (HEIGHT * 3), (WIDTH * 3), (HEIGHT * 3));
+		// (LEFT,DOWN,WIDTH,HEIGHT)
 		paintButtons(isSelectedStart(), isSelectedExit(), g);
 		bs.show();
 		g.dispose();
-		
+
 	}
-	
-	private void paintButtons(boolean start, boolean exit, Graphics g){
-		//START
-		if(!start){
+
+	private void paintButtons(boolean start, boolean exit, Graphics g) {
+		// START
+		if (!start) {
 			g.setColor(new Color(0xFFBB4400));
-			g.fillRect(35, 40, (frame.getWidth()-67), 113);
+			g.fillRect(35, 40, (frame.getWidth() - 67), 113);
 			g.setColor(getDeSelected());
-			g.fillRect(35, 40, (frame.getWidth()-70), 110);
+			g.fillRect(35, 40, (frame.getWidth() - 70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Start", 220, 95);			
-		}else{
+			g.drawString("Start", 220, 95);
+		} else {
 			g.setColor(new Color(0xFFDD6600));
-			g.fillRect(35, 40, (frame.getWidth()-67), 113);
+			g.fillRect(35, 40, (frame.getWidth() - 67), 113);
 			g.setColor(getSelected());
-			g.fillRect(35, 40, (frame.getWidth()-70), 110);
+			g.fillRect(35, 40, (frame.getWidth() - 70), 110);
 			g.setColor(Color.BLACK);
 			g.drawString("Start", 220, 95);
 		}
-		//EXIT
-		if(!exit){
+		// EXIT
+		if (!exit) {
 			g.setColor(new Color(0xFFBB4400));
-			g.fillRect(35, 170, (frame.getWidth()-67), 113);
+			g.fillRect(35, 170, (frame.getWidth() - 67), 113);
 			g.setColor(getDeSelected());
-			g.fillRect(35, 170, (frame.getWidth()-70), 110);
+			g.fillRect(35, 170, (frame.getWidth() - 70), 110);
 			g.setColor(Color.BLACK);
-			g.drawString("Exit", 220, 220);			
-		}else{
+			g.drawString("Exit", 220, 220);
+		} else {
 			g.setColor(new Color(0xFFDD6600));
-			g.fillRect(35, 170, (frame.getWidth()-67), 113);
+			g.fillRect(35, 170, (frame.getWidth() - 67), 113);
 			g.setColor(getSelected());
-			g.fillRect(35, 170, (frame.getWidth()-70), 110);
+			g.fillRect(35, 170, (frame.getWidth() - 70), 110);
 			g.setColor(Color.BLACK);
 			g.drawString("Exit", 220, 220);
 		}
 	}
-	
-	public static void play(){
+
+	public static void play() {
 		try {
-			JSplash splash = new JSplash(Game.class.getResource("/splash/splash.png"), true, true, false, Game.getGameVersion(), null, Color.RED, Color.ORANGE);
+			JSplash splash = new JSplash(
+					Game.class.getResource("/splash/splash.png"), true, true,
+					false, Game.getGameVersion(), null, Color.RED, Color.ORANGE);
 			splash.toFront();
 			splash.requestFocus();
 			splash.splashOn();
@@ -183,15 +184,18 @@ public class Menu implements Runnable{
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(125);
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-			Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(), "Do you want to be the HOST?"));
-			if (Game.getJdata_Host() == 1){
-				Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(), "Enter the name \nleave blank for local"));
+			Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(),
+					"Do you want to be the HOST?"));
+			if (Game.getJdata_Host() == 1) {
+				Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(),
+						"Enter the name \nleave blank for local"));
 			}
 			Thread.sleep(125);
 			splash.setProgress(95, "Aquring data: Username");
 			Thread.sleep(125);
 			splash.setProgress(96, "Initalizing as Server:Host");
-			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(), "Enter a name"));
+			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(),
+					"Enter a name"));
 			splash.setProgress(97, "Connecting as" + Game.getJdata_UserName());
 			Thread.sleep(250);
 			splash.splashOff();
@@ -200,7 +204,7 @@ public class Menu implements Runnable{
 			e.printStackTrace();
 		}
 	}
-	
+
 	public static DedicatedJFrame getFrame() {
 		return Menu.frame;
 	}
@@ -264,5 +268,5 @@ public class Menu implements Runnable{
 	public static void setGameOver(boolean gameOver) {
 		Menu.gameOver = gameOver;
 	}
-	
+
 }
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index e15912c..9c7d5c1 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -79,12 +79,12 @@ public class GameServer extends Thread {
 			break;
 		case MOVE:
 			packet = new Packet02Move(data);
-			this.handleMove(((Packet02Move)packet));
+			this.handleMove(((Packet02Move) packet));
 		}
 	}
 
 	private void handleMove(Packet02Move packet) {
-		if(getPlayerMP(packet.getUsername()) != null){
+		if (getPlayerMP(packet.getUsername()) != null) {
 			int index = getPlayerMPIndex(packet.getUsername());
 			PlayerMP player = this.connectedPlayers.get(index);
 			player.setX(packet.getX());
@@ -126,19 +126,19 @@ public class GameServer extends Thread {
 		packet.writeData(this);
 	}
 
-	public PlayerMP getPlayerMP(String username){
-		for(PlayerMP player : this.connectedPlayers){
-			if(player.getUsername().equalsIgnoreCase(username)){
+	public PlayerMP getPlayerMP(String username) {
+		for (PlayerMP player : this.connectedPlayers) {
+			if (player.getUsername().equalsIgnoreCase(username)) {
 				return player;
 			}
 		}
 		return null;
 	}
-	
-	public int getPlayerMPIndex(String username){
+
+	public int getPlayerMPIndex(String username) {
 		int index = 0;
-		for(PlayerMP player : this.connectedPlayers){
-			if(player.getUsername().equalsIgnoreCase(username)){
+		for (PlayerMP player : this.connectedPlayers) {
+			if (player.getUsername().equalsIgnoreCase(username)) {
 				break;
 			} else {
 				index++;
@@ -146,7 +146,7 @@ public class GameServer extends Thread {
 		}
 		return index;
 	}
-	
+
 	public void sendData(byte[] data, InetAddress ipAddress, int port) {
 		DatagramPacket packet = new DatagramPacket(data, data.length,
 				ipAddress, port);
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
index c116798..85f86de 100644
--- a/src/com/redomar/game/script/Printing.java
+++ b/src/com/redomar/game/script/Printing.java
@@ -8,24 +8,24 @@ public class Printing {
 	private Time time = new Time();
 	private String message;
 	private String typeName = "[System]";
-	
-	public Printing(){
-		
+
+	public Printing() {
+
 	}
-	
-	public void print(String message, int type){
+
+	public void print(String message, int type) {
 		setType(type);
 		setMessage(message);
-		System.out.println("["+time.getTime()+"]"+type()+getMessage());		
+		System.out.println("[" + time.getTime() + "]" + type() + getMessage());
 	}
-	
-	private String type(){
-		if (getType() == 1){
+
+	private String type() {
+		if (getType() == 1) {
 			this.typeName = "[GAME]";
-		}else if(getType() == 2){
+		} else if (getType() == 2) {
 			this.typeName = "[MUSIC]";
 		}
-		
+
 		return this.typeName;
 	}
 

commit 19f6f147d4136837499199d948ca80ebdf76720a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Fri Nov 29 23:58:02 2013 +0000

    Added ablility to swim in mud

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 7c5d7e6..11c45b2 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -16,6 +16,7 @@ public abstract class Mob extends Entity {
 	protected int scale = 1;
 	protected boolean isSwimming = false;
 	protected boolean isMagma = false;
+	protected boolean isMuddy = false;
 	protected boolean changeLevels = false;
 	protected int ticker;
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 8478cc0..a2bdae5 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -80,6 +80,15 @@ public class Player extends Mob {
 				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
 			isMagma = false;
 		}
+		
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 14){
+			isMuddy = true;
+		}
+		
+		if(isMuddy
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 14){
+			isMuddy = false;
+		}
 
 		tickCount++;
 	}
@@ -153,12 +162,36 @@ public class Player extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
+		
+		if (isMuddy) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, 310);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 422, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 410, 321, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 321, -1, 410);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 410, 321);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset,
 				(xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
 				((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if (!isSwimming && !isMagma) {
+		if (!isSwimming && !isMagma && !isMuddy) {
 			screen.render((xOffset + (modifier * flipBottom)),
 					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
 					flipBottom, scale);

commit 6d71ff6dd24aa6c09d008de3f6c07a8c2c9cc0bb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 00:07:06 2013 +0000

    Ai can now swim in mud too

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index c48e8f3..eed1a20 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -42,6 +42,15 @@ public class Dummy extends Mob {
 				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
 			isMagma = false;
 		}
+		
+		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 14){
+			isMuddy = true;
+		}
+		
+		if(isMuddy
+				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 14){
+			isMuddy = false;
+		}
 
 		tickCount++;
 
@@ -112,12 +121,36 @@ public class Dummy extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
+		
+		if (isMuddy) {
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, 310);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, 422, -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, 410, 321, -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, 321, -1, 410);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, 410, 321);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
 
 		screen.render((xOffset + (modifier * flipTop)), yOffset,
 				(xTile + yTile * 32), colour, flipTop, scale);
 		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
 				((xTile + 1) + yTile * 32), colour, flipTop, scale);
-		if (!isSwimming && !isMagma) {
+		if (!isSwimming && !isMagma && !isMuddy) {
 			screen.render((xOffset + (modifier * flipBottom)),
 					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
 					flipBottom, scale);

commit 4748e2a71c81e0089b0f8e243618bcf06fc4d62d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 00:51:42 2013 +0000

    Started to make swimming more efficent

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index a2bdae5..889535e 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -2,6 +2,7 @@ package com.redomar.game.entities;
 
 import com.redomar.game.Game;
 import com.redomar.game.InputHandler;
+import com.redomar.game.entities.efx.Swim;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -13,10 +14,12 @@ public class Player extends Mob {
 
 	private InputHandler input;
 	private static Name customeName = new Name();
+	private Swim swim;
 
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private String userName;
+	
 
 	public static String guestPlayerName = customeName.setName("Player ");
 
@@ -58,39 +61,23 @@ public class Player extends Mob {
 		} else {
 			isMoving = false;
 		}
-
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
-			isSwimming = true;
-		}
-
-		if (isSwimming
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
-			isSwimming = false;
-		}
+		
+		Swimming();
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11) {
 			changeLevels = true;
 		}
 
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
-			isMagma = true;
-		}
+		tickCount++;
+	}
 
-		if (isMagma
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
-			isMagma = false;
-		}
-		
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 14){
-			isMuddy = true;
-		}
-		
-		if(isMuddy
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 14){
-			isMuddy = false;
-		}
+	private void Swimming() {
 
-		tickCount++;
+		setSwim(new Swim(level, getX(), getY()));
+
+		isSwimming = getSwim().water(isSwimming);
+		isMagma = getSwim().magma(isMagma);
+		isMuddy = getSwim().mud(isMuddy);
 	}
 
 	public void render(Screen screen) {
@@ -261,4 +248,12 @@ public class Player extends Mob {
 			return this.getUsername();
 	}
 
+	public Swim getSwim() {
+		return swim;
+	}
+
+	public void setSwim(Swim swim) {
+		this.swim = swim;
+	}
+
 }
diff --git a/src/com/redomar/game/entities/efx/Swim.java b/src/com/redomar/game/entities/efx/Swim.java
new file mode 100644
index 0000000..70dd28c
--- /dev/null
+++ b/src/com/redomar/game/entities/efx/Swim.java
@@ -0,0 +1,55 @@
+package com.redomar.game.entities.efx;
+
+import com.redomar.game.level.LevelHandler;
+
+public class Swim {
+	
+	private static LevelHandler level;
+	private int x;
+	private int y;
+
+	public Swim(LevelHandler level, int x, int y){
+		Swim.level = level;
+		this.x = x;
+		this.y = y;
+	}
+	
+	public boolean water(boolean isSwimming){
+		if (level.getTile(x >> 3, y >> 3).getId() == 4) {
+			isSwimming = true;
+		}
+
+		if (isSwimming
+				&& level.getTile(x >> 3, y >> 3).getId() != 4) {
+			isSwimming = false;
+		}
+		return isSwimming;
+	}
+	
+	public boolean magma(boolean isMagma){
+		if (level.getTile(x >> 3, y >> 3).getId() == 12) {
+			isMagma = true;
+		}
+
+		if (isMagma
+				&& level.getTile(x >> 3, y >> 3).getId() != 12) {
+			isMagma = false;
+		}
+		
+		return isMagma;
+	}
+	
+	public boolean mud(boolean isMuddy){
+		if (level.getTile(x >> 3, y >> 3).getId() == 14) {
+			isMuddy = true;
+		}
+
+		if (isMuddy
+				&& level.getTile(x >> 3, y >> 3).getId() != 14) {
+			isMuddy = false;
+		}
+		
+		return isMuddy;
+	}
+	
+}

commit 75b2b4c959416aed74212f3a71b94f3929dc2b72
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 14:20:06 2013 +0000

    updated the jar file

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 9070a6b..c9af617 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit f414d282b69c7a59fe8754e2d69c6b7f4d66e6de
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 14:30:27 2013 +0000

    moddified dummy ai swimming

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index eed1a20..7c662f5 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -1,6 +1,7 @@
 package com.redomar.game.entities;
 
 import com.redomar.game.Game;
+import com.redomar.game.entities.efx.Swim;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -11,6 +12,8 @@ public class Dummy extends Mob {
 	private int tickCount = 0;
 	private int xa = 0;
 	private int ya = 0;
+	
+	private Swim swim; 
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
@@ -24,37 +27,20 @@ public class Dummy extends Mob {
 
 		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
 				.getPlayer().getY(), xa, ya, this);
-
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 4) {
-			isSwimming = true;
-		}
-
-		if (isSwimming
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 4) {
-			isSwimming = false;
-		}
-
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 12) {
-			isMagma = true;
-		}
-
-		if (isMagma
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 12) {
-			isMagma = false;
-		}
 		
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 14){
-			isMuddy = true;
-		}
-		
-		if(isMuddy
-				&& level.getTile(this.getX() >> 3, this.getY() >> 3).getId() != 14){
-			isMuddy = false;
-		}
+		swimming();
 
 		tickCount++;
 
 	}
+	
+	private void swimming(){
+		setSwim(new Swim(level, getX(), getY()));
+		
+		isSwimming = getSwim().water(isSwimming);
+		isMagma = getSwim().magma(isMagma);
+		isMuddy = getSwim().mud(isMuddy);
+	}
 
 	public void render(Screen screen) {
 		int xTile = 8;
@@ -193,4 +179,12 @@ public class Dummy extends Mob {
 
 		return false;
 	}
+
+	public Swim getSwim() {
+		return swim;
+	}
+
+	public void setSwim(Swim swim) {
+		this.swim = swim;
+	}
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 889535e..cb0b874 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -62,7 +62,7 @@ public class Player extends Mob {
 			isMoving = false;
 		}
 		
-		Swimming();
+		swimming();
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11) {
 			changeLevels = true;
@@ -71,7 +71,7 @@ public class Player extends Mob {
 		tickCount++;
 	}
 
-	private void Swimming() {
+	private void swimming() {
 
 		setSwim(new Swim(level, getX(), getY()));
 

commit dbb17d193834c4092c5fffb44f4b6bddbf1a7f1a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 14:57:40 2013 +0000

    made swimming into types for player

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index cb0b874..a72ba44 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -19,6 +19,7 @@ public class Player extends Mob {
 	private int colour = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
 	private String userName;
+	private boolean[] swimType;
 	
 
 	public static String guestPlayerName = customeName.setName("Player ");
@@ -62,7 +63,11 @@ public class Player extends Mob {
 			isMoving = false;
 		}
 		
-		swimming();
+		setSwim(new Swim(level, getX(), getY()));
+		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		isSwimming = swimType[0];
+		isMagma = swimType[1];
+		isMuddy = swimType[2];
 
 		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11) {
 			changeLevels = true;
@@ -71,15 +76,7 @@ public class Player extends Mob {
 		tickCount++;
 	}
 
-	private void swimming() {
-
-		setSwim(new Swim(level, getX(), getY()));
-
-		isSwimming = getSwim().water(isSwimming);
-		isMagma = getSwim().magma(isMagma);
-		isMuddy = getSwim().mud(isMuddy);
-	}
-
+	
 	public void render(Screen screen) {
 		int xTile = 0;
 		int yTile = 28;
diff --git a/src/com/redomar/game/entities/efx/Swim.java b/src/com/redomar/game/entities/efx/Swim.java
index 70dd28c..f404093 100644
--- a/src/com/redomar/game/entities/efx/Swim.java
+++ b/src/com/redomar/game/entities/efx/Swim.java
@@ -52,4 +52,12 @@ public class Swim {
 		return isMuddy;
 	}
 	
+	public boolean[] swimming(boolean isSwimming, boolean isMagma, boolean isMuddy) {
+		boolean[] swimminhType;
+		swimminhType = new boolean[3];
+		swimminhType [0] = water(isSwimming);
+		swimminhType [1] = magma(isMagma);
+		swimminhType [2] = mud(isMuddy);
+		return swimminhType;
+	}
 }

commit fe03100f08d930e9c5a95cb0a270356b4563b62f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 15:03:12 2013 +0000

    made swimming into types for ai

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 7c662f5..3b460a4 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -12,8 +12,9 @@ public class Dummy extends Mob {
 	private int tickCount = 0;
 	private int xa = 0;
 	private int ya = 0;
+	private boolean[] swimType;
 	
-	private Swim swim; 
+	private Swim swim;
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
@@ -28,19 +29,15 @@ public class Dummy extends Mob {
 		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
 				.getPlayer().getY(), xa, ya, this);
 		
-		swimming();
+		setSwim(new Swim(level, getX(), getY()));
+		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		isSwimming = swimType[0];
+		isMagma = swimType[1];
+		isMuddy = swimType[2];
 
 		tickCount++;
 
 	}
-	
-	private void swimming(){
-		setSwim(new Swim(level, getX(), getY()));
-		
-		isSwimming = getSwim().water(isSwimming);
-		isMagma = getSwim().magma(isMagma);
-		isMuddy = getSwim().mud(isMuddy);
-	}
 
 	public void render(Screen screen) {
 		int xTile = 8;

commit 875778c38315ae35a02ce411c0fd49047f2224cb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 15:10:38 2013 +0000

    formated and fix a face colour bug

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 3b460a4..a1aef91 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -13,7 +13,7 @@ public class Dummy extends Mob {
 	private int xa = 0;
 	private int ya = 0;
 	private boolean[] swimType;
-	
+
 	private Swim swim;
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
@@ -28,7 +28,7 @@ public class Dummy extends Mob {
 
 		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
 				.getPlayer().getY(), xa, ya, this);
-		
+
 		setSwim(new Swim(level, getX(), getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
@@ -104,12 +104,12 @@ public class Dummy extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
-		
+
 		if (isMuddy) {
 			int waterColour = 0;
 			yOffset += 4;
 
-			colour = Colours.get(-1, 111, -1, 310);
+			colour = Colours.get(-1, 111, -1, faceCol);
 
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, 422, -1);
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index a72ba44..123b33c 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -20,7 +20,6 @@ public class Player extends Mob {
 	private int tickCount = 0;
 	private String userName;
 	private boolean[] swimType;
-	
 
 	public static String guestPlayerName = customeName.setName("Player ");
 
@@ -62,7 +61,7 @@ public class Player extends Mob {
 		} else {
 			isMoving = false;
 		}
-		
+
 		setSwim(new Swim(level, getX(), getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
@@ -76,7 +75,6 @@ public class Player extends Mob {
 		tickCount++;
 	}
 
-	
 	public void render(Screen screen) {
 		int xTile = 0;
 		int yTile = 28;
@@ -146,7 +144,7 @@ public class Player extends Mob {
 			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
 					0x01, 1);
 		}
-		
+
 		if (isMuddy) {
 			int waterColour = 0;
 			yOffset += 4;
diff --git a/src/com/redomar/game/entities/efx/Swim.java b/src/com/redomar/game/entities/efx/Swim.java
index f404093..2fae89e 100644
--- a/src/com/redomar/game/entities/efx/Swim.java
+++ b/src/com/redomar/game/entities/efx/Swim.java
@@ -3,61 +3,58 @@ package com.redomar.game.entities.efx;
 import com.redomar.game.level.LevelHandler;
 
 public class Swim {
-	
+
 	private static LevelHandler level;
 	private int x;
 	private int y;
 
-	public Swim(LevelHandler level, int x, int y){
+	public Swim(LevelHandler level, int x, int y) {
 		Swim.level = level;
 		this.x = x;
 		this.y = y;
 	}
-	
-	public boolean water(boolean isSwimming){
+
+	public boolean water(boolean isSwimming) {
 		if (level.getTile(x >> 3, y >> 3).getId() == 4) {
 			isSwimming = true;
 		}
 
-		if (isSwimming
-				&& level.getTile(x >> 3, y >> 3).getId() != 4) {
+		if (isSwimming && level.getTile(x >> 3, y >> 3).getId() != 4) {
 			isSwimming = false;
 		}
 		return isSwimming;
 	}
-	
-	public boolean magma(boolean isMagma){
+
+	public boolean magma(boolean isMagma) {
 		if (level.getTile(x >> 3, y >> 3).getId() == 12) {
 			isMagma = true;
 		}
 
-		if (isMagma
-				&& level.getTile(x >> 3, y >> 3).getId() != 12) {
+		if (isMagma && level.getTile(x >> 3, y >> 3).getId() != 12) {
 			isMagma = false;
 		}
-		
+
 		return isMagma;
 	}
-	
-	public boolean mud(boolean isMuddy){
+
+	public boolean mud(boolean isMuddy) {
 		if (level.getTile(x >> 3, y >> 3).getId() == 14) {
 			isMuddy = true;
 		}
 
-		if (isMuddy
-				&& level.getTile(x >> 3, y >> 3).getId() != 14) {
+		if (isMuddy && level.getTile(x >> 3, y >> 3).getId() != 14) {
 			isMuddy = false;
 		}
-		
+
 		return isMuddy;
 	}
-	
+
 	public boolean[] swimming(boolean isSwimming, boolean isMagma, boolean isMuddy) {
 		boolean[] swimminhType;
 		swimminhType = new boolean[3];
-		swimminhType [0] = water(isSwimming);
-		swimminhType [1] = magma(isMagma);
-		swimminhType [2] = mud(isMuddy);
+		swimminhType[0] = water(isSwimming);
+		swimminhType[1] = magma(isMagma);
+		swimminhType[2] = mud(isMuddy);
 		return swimminhType;
 	}
 }

commit 21416a8dab4f02a0e77067dae519e206e000c114
Merge: 75b2b4c 875778c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 15:13:16 2013 +0000

    Merge remote-tracking branch 'origin/aside'

commit 5f3b33f411c1fa16e85acf0037714cc04c82d6db
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Nov 30 15:32:35 2013 +0000

    Updated for 1.6.2

diff --git a/README.md b/README.md
index 20b09f9..0f24b1e 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.6.1
+JavaGame Alpha v1.6.2
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
diff --git a/jar/javagame.jar b/jar/javagame.jar
index c9af617..2ad4a1f 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index f83f880..3927f8f 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -33,7 +33,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.6.1 Alpha";
+	private static final String game_Version = "v1.6.2 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;

commit d2b58ec37c164a89d03fb172e9ab89e8ad64cad8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 7 23:04:14 2013 +0000

    Improved code efficentiancy for player swimming types

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 123b33c..d476e4b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -20,6 +20,7 @@ public class Player extends Mob {
 	private int tickCount = 0;
 	private String userName;
 	private boolean[] swimType;
+	private int[] swimColour;
 
 	public static String guestPlayerName = customeName.setName("Player ");
 
@@ -97,70 +98,24 @@ public class Player extends Mob {
 			Game.setChangeLevel(true);
 		}
 
-		if (isSwimming) {
+		if(isSwimming || isMagma || isMuddy){
+			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			
 			int waterColour = 0;
 			yOffset += 4;
 
 			colour = Colours.get(-1, 111, -1, 310);
 
 			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 255, -1);
+				waterColour = Colours.get(-1, -1, swimColour[0], -1);
 			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
 				yOffset--;
-				waterColour = Colours.get(-1, 225, 115, -1);
+				waterColour = Colours.get(-1, swimColour[1], swimColour[2], -1);
 			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 115, -1, 225);
+				waterColour = Colours.get(-1, swimColour[2], -1, swimColour[1]);
 			} else {
 				yOffset--;
-				waterColour = Colours.get(-1, -1, 225, 115);
-			}
-
-			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x00, 1);
-			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x01, 1);
-		}
-
-		if (isMagma) {
-			int waterColour = 0;
-			yOffset += 4;
-
-			colour = Colours.get(-1, 111, -1, 310);
-
-			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 541, -1);
-			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
-				yOffset--;
-				waterColour = Colours.get(-1, 521, 510, -1);
-			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 510, -1, 521);
-			} else {
-				yOffset--;
-				waterColour = Colours.get(-1, -1, 521, 510);
-			}
-
-			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x00, 1);
-			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x01, 1);
-		}
-
-		if (isMuddy) {
-			int waterColour = 0;
-			yOffset += 4;
-
-			colour = Colours.get(-1, 111, -1, 310);
-
-			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 422, -1);
-			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
-				yOffset--;
-				waterColour = Colours.get(-1, 410, 321, -1);
-			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 321, -1, 410);
-			} else {
-				yOffset--;
-				waterColour = Colours.get(-1, -1, 410, 321);
+				waterColour = Colours.get(-1, -1, swimColour[1], swimColour[2]);
 			}
 
 			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
diff --git a/src/com/redomar/game/entities/efx/Swim.java b/src/com/redomar/game/entities/efx/Swim.java
index 2fae89e..e0c46c5 100644
--- a/src/com/redomar/game/entities/efx/Swim.java
+++ b/src/com/redomar/game/entities/efx/Swim.java
@@ -7,12 +7,33 @@ public class Swim {
 	private static LevelHandler level;
 	private int x;
 	private int y;
+	private int[] swimCols = new int[3];
 
 	public Swim(LevelHandler level, int x, int y) {
 		Swim.level = level;
 		this.x = x;
 		this.y = y;
 	}
+	
+	public int[] waveCols(boolean isSwimming, boolean isMagma, boolean isMuddy){
+		
+		if(isSwimming){
+			swimCols[0] = 255;
+			swimCols[1] = 255;
+			swimCols[2] = 115;
+		}
+		if(isMagma){		
+			swimCols[0] = 541;
+			swimCols[1] = 521;
+			swimCols[2] = 510;
+		}
+		if(isMuddy){		
+			swimCols[0] = 422;
+			swimCols[1] = 410;
+			swimCols[2] = 321;
+		}
+		return swimCols;
+	}
 
 	public boolean water(boolean isSwimming) {
 		if (level.getTile(x >> 3, y >> 3).getId() == 4) {

commit c8187f8fc1bf2bef999cbfabebd46cf2bc38b895
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 7 23:12:23 2013 +0000

    Improved code efficentiancy for dummy AI swimming types

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index a1aef91..e570f5e 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -13,6 +13,7 @@ public class Dummy extends Mob {
 	private int xa = 0;
 	private int ya = 0;
 	private boolean[] swimType;
+	private int[] swimColour;
 
 	private Swim swim;
 
@@ -57,70 +58,24 @@ public class Dummy extends Mob {
 		int xOffset = getX() - modifier / 2;
 		int yOffset = getY() - modifier / 2 - 4;
 
-		if (isSwimming) {
+		if (isSwimming || isMagma || isMuddy) {
+			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			
 			int waterColour = 0;
 			yOffset += 4;
 
 			colour = Colours.get(-1, 111, -1, faceCol);
 
 			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 255, -1);
+				waterColour = Colours.get(-1, -1, swimColour[0], -1);
 			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
 				yOffset--;
-				waterColour = Colours.get(-1, 225, 115, -1);
+				waterColour = Colours.get(-1, swimColour[1], swimColour[2], -1);
 			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 115, -1, 225);
+				waterColour = Colours.get(-1, swimColour[2], -1, swimColour[1]);
 			} else {
 				yOffset--;
-				waterColour = Colours.get(-1, -1, 225, 115);
-			}
-
-			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x00, 1);
-			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x01, 1);
-		}
-
-		if (isMagma) {
-			int waterColour = 0;
-			yOffset += 4;
-
-			colour = Colours.get(-1, 111, -1, faceCol);
-
-			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 541, -1);
-			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
-				yOffset--;
-				waterColour = Colours.get(-1, 521, 510, -1);
-			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 510, -1, 521);
-			} else {
-				yOffset--;
-				waterColour = Colours.get(-1, -1, 521, 510);
-			}
-
-			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x00, 1);
-			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
-					0x01, 1);
-		}
-
-		if (isMuddy) {
-			int waterColour = 0;
-			yOffset += 4;
-
-			colour = Colours.get(-1, 111, -1, faceCol);
-
-			if (tickCount % 60 < 15) {
-				waterColour = Colours.get(-1, -1, 422, -1);
-			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
-				yOffset--;
-				waterColour = Colours.get(-1, 410, 321, -1);
-			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
-				waterColour = Colours.get(-1, 321, -1, 410);
-			} else {
-				yOffset--;
-				waterColour = Colours.get(-1, -1, 410, 321);
+				waterColour = Colours.get(-1, -1, swimColour[1], swimColour[2]);
 			}
 
 			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,

commit cb3599e152b15bd9a4868c890d9b9588784f3802
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Dec 8 21:18:42 2013 +0000

    Started work on Selecting charater race

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index f83f880..cf80dff 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -46,6 +46,9 @@ public class Game extends Canvas implements Runnable {
 	private static boolean changeLevel = false;
 	private static boolean npc = false;
 	private static int map = 0;
+	private static int shirtCol;
+	private static int faceCol;
+	private static boolean[] alternateCols = new boolean[2];
 
 	private JFrame frame;
 
@@ -125,8 +128,20 @@ public class Game extends Canvas implements Runnable {
 
 	public void setMap(String Map_str) {
 		setLevel(new LevelHandler(Map_str));
+		if(alternateCols[0]){
+			Game.setShirtCol(240);
+		}
+		if(!alternateCols[0]){
+			Game.setShirtCol(111);
+		}
+		if(alternateCols[1]){
+			Game.setFaceCol(310);
+		}
+		if(!alternateCols[1]){
+			Game.setFaceCol(444);
+		}
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
-				getJdata_UserName(), null, -1));
+				getJdata_UserName(), null, -1, shirtCol, faceCol));
 		level.addEntity(player);
 	}
 
@@ -456,4 +471,36 @@ public class Game extends Canvas implements Runnable {
 		return game_Version;
 	}
 
+	public static int getShirtCol() {
+		return shirtCol;
+	}
+
+	public static void setShirtCol(int shirtCol) {
+		Game.shirtCol = shirtCol;
+	}
+
+	public static int getFaceCol() {
+		return faceCol;
+	}
+
+	public static void setFaceCol(int faceCol) {
+		Game.faceCol = faceCol;
+	}
+
+	public static boolean[] getAlternateCols() {
+		return alternateCols;
+	}
+
+	public static void setAlternateCols(boolean[] alternateCols) {
+		Game.alternateCols = alternateCols;
+	}
+	
+	public static void setAternateColsR(boolean alternateCols){
+		Game.alternateCols[1] = alternateCols;
+	}
+	
+	public static void setAternateColsS(boolean alternateCols){
+		Game.alternateCols[0] = alternateCols;
+	}
+
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index d476e4b..5e728b6 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -16,7 +16,7 @@ public class Player extends Mob {
 	private static Name customeName = new Name();
 	private Swim swim;
 
-	private int colour = Colours.get(-1, 111, 240, 310);
+	private int colour, shirtCol, faceCol;
 	private int tickCount = 0;
 	private String userName;
 	private boolean[] swimType;
@@ -25,10 +25,13 @@ public class Player extends Mob {
 	public static String guestPlayerName = customeName.setName("Player ");
 
 	public Player(LevelHandler level, int x, int y, InputHandler input,
-			String userName) {
+			String userName,  int shirtCol,	int faceCol) {
 		super(level, "Player", x, y, 1);
 		this.input = input;
 		this.userName = userName;
+		this.faceCol = faceCol;
+		this.shirtCol = shirtCol;
+		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
 	}
 
 	public void tick() {
@@ -104,7 +107,7 @@ public class Player extends Mob {
 			int waterColour = 0;
 			yOffset += 4;
 
-			colour = Colours.get(-1, 111, -1, 310);
+			colour = Colours.get(-1, 111, -1, faceCol);
 
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, swimColour[0], -1);
@@ -135,7 +138,7 @@ public class Player extends Mob {
 			screen.render((xOffset + modifier - (modifier * flipBottom)),
 					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
 					colour, flipBottom, scale);
-			colour = Colours.get(-1, 111, 240, 310);
+			colour = Colours.get(-1, 111, shirtCol, faceCol);
 			;
 		}
 
diff --git a/src/com/redomar/game/entities/PlayerMP.java b/src/com/redomar/game/entities/PlayerMP.java
index a0f6eb0..f45142b 100644
--- a/src/com/redomar/game/entities/PlayerMP.java
+++ b/src/com/redomar/game/entities/PlayerMP.java
@@ -11,15 +11,15 @@ public class PlayerMP extends Player {
 	public int port;
 
 	public PlayerMP(LevelHandler level, int x, int y, InputHandler input,
-			String userName, InetAddress ipAddress, int port) {
-		super(level, x, y, input, userName);
+			String userName, InetAddress ipAddress, int port, int shirtCol, int faceCol) {
+		super(level, x, y, input, userName, shirtCol, faceCol);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
 
 	public PlayerMP(LevelHandler level, int x, int y, String userName,
-			InetAddress ipAddress, int port) {
-		super(level, x, y, null, userName);
+			InetAddress ipAddress, int port, int shirtCol, int faceCol) {
+		super(level, x, y, null, userName, shirtCol, faceCol);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 2330a48..c8c4994 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -191,11 +191,34 @@ public class Menu implements Runnable {
 						"Enter the name \nleave blank for local"));
 			}
 			Thread.sleep(125);
-			splash.setProgress(95, "Aquring data: Username");
+			splash.setProgress(94, "Aquring data: Username");
 			Thread.sleep(125);
-			splash.setProgress(96, "Initalizing as Server:Host");
+			splash.setProgress(95, "Initalizing as Server:Host");
 			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(),
 					"Enter a name"));
+			Thread.sleep(250);
+			splash.setProgress(96, "Collecting Player Data");
+			Object[] options = { "African", "Caucasian"};
+			int n = JOptionPane.showOptionDialog(frame,
+					"Choose a race for the charater to be",
+					"Choose a race", JOptionPane.YES_NO_OPTION,
+					JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
+			if(n == 0){
+				Game.setAternateColsR(true);
+			}else{
+				Game.setAternateColsR(false);
+			}
+			Thread.sleep(250);
+			Object[] options1 = { "Orange", "Black"};
+			int n1 = JOptionPane.showOptionDialog(frame,
+					"Which Colour do you want the shirt to be?",
+					"Choose a shirt Colour", JOptionPane.YES_NO_OPTION,
+					JOptionPane.QUESTION_MESSAGE, null, options1, options1[0]);
+			if(n1 == 0){
+				Game.setAternateColsS(true);
+			}else{
+				Game.setAternateColsS(false);
+			}
 			splash.setProgress(97, "Connecting as" + Game.getJdata_UserName());
 			Thread.sleep(250);
 			splash.splashOff();
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 286ad84..e385b4a 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -79,7 +79,7 @@ public class GameClient extends Thread {
 		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
 				+ packet.getUsername() + " has joined...");
 		PlayerMP player = new PlayerMP(Game.getLevel(), packet.getX(),
-				packet.getY(), packet.getUsername(), address, port);
+				packet.getY(), packet.getUsername(), address, port, Game.getShirtCol(), Game.getFaceCol());
 		Game.getLevel().addEntity(player);
 	}
 
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 9c7d5c1..74c3761 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -67,7 +67,7 @@ public class GameServer extends Thread {
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has connected...");
 			PlayerMP player = new PlayerMP(Game.getLevel(), 10, 10,
-					((Packet00Login) packet).getUsername(), address, port);
+					((Packet00Login) packet).getUsername(), address, port, Game.getShirtCol(), Game.getFaceCol());
 			this.addConnection(player, (Packet00Login) packet);
 			break;
 		case DISCONNECT:

commit 4416665557fc216830d027530aed7d271cb88d1f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Dec 18 23:20:33 2013 +0000

    Added arrow key input to the menu

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index f83f880..3a83af1 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -47,9 +47,9 @@ public class Game extends Canvas implements Runnable {
 	private static boolean npc = false;
 	private static int map = 0;
 
-	private JFrame frame;
+	private static JFrame frame;
 
-	private boolean running = false;
+	private static boolean running = false;
 	private int tickCount = 0;
 
 	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT,
@@ -144,7 +144,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public synchronized void start() {
-		running = true;
+		Game.setRunning(true);
 		new Thread(this, "GAME").start();
 
 		if (getJdata_Host() == 0) {
@@ -157,7 +157,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public synchronized void stop() {
-		running = false;
+		Game.setRunning(false);
 	}
 
 	public void run() {
@@ -172,7 +172,7 @@ public class Game extends Canvas implements Runnable {
 
 		init();
 
-		while (running) {
+		while (Game.isRunning()) {
 			long now = System.nanoTime();
 			delta += (now - lastTime) / nsPerTick;
 			lastTime = now;
@@ -329,7 +329,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public void setFrame(JFrame frame) {
-		this.frame = frame;
+		Game.frame = frame;
 	}
 
 	public GameClient getSocketClient() {
@@ -396,6 +396,14 @@ public class Game extends Canvas implements Runnable {
 		Game.game = game;
 	}
 
+	public static boolean isRunning() {
+		return running;
+	}
+
+	public static void setRunning(boolean running) {
+		Game.running = running;
+	}
+
 	public static boolean isChangeLevel() {
 		return changeLevel;
 	}
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 2330a48..cff1ccd 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -2,6 +2,7 @@ package com.redomar.game.menu;
 
 import java.awt.Color;
 import java.awt.Graphics;
+import java.awt.event.KeyListener;
 import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
 import java.awt.image.BufferStrategy;
@@ -32,6 +33,7 @@ public class Menu implements Runnable {
 											// SCALE, NAME);
 	private Font font = new Font();
 	private MouseListener Mouse = new Mouse();
+	private KeyListener Key = new MenuInput();
 
 	private Color selected = new Color(0xFFFF8800);
 	private Color deSelected = new Color(0xFFCC5500);
@@ -93,6 +95,7 @@ public class Menu implements Runnable {
 		// frame.getFrame().getContentPane().setBackground(Color.GREEN);
 		frame.addMouseMotionListener((MouseMotionListener) Mouse);
 		frame.addMouseListener(Mouse);
+		frame.addKeyListener(Key);
 		BufferStrategy bs = frame.getBufferStrategy();
 		if (bs == null) {
 			frame.createBufferStrategy(3);
diff --git a/src/com/redomar/game/menu/MenuInput.java b/src/com/redomar/game/menu/MenuInput.java
new file mode 100644
index 0000000..ebc46a1
--- /dev/null
+++ b/src/com/redomar/game/menu/MenuInput.java
@@ -0,0 +1,60 @@
+package com.redomar.game.menu;
+
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+
+import com.redomar.game.Game;
+
+public class MenuInput implements KeyListener {
+	
+	private boolean ticket = false;
+
+	public void keyPressed(KeyEvent e) {
+		toggleKey(e.getKeyCode());
+	}
+
+	public void keyReleased(KeyEvent e) {
+		toggleKey(e.getKeyCode());
+	}
+
+	public void keyTyped(KeyEvent e) {
+
+	}
+
+	private void toggleKey(int keyCode) {
+		
+		if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_W) {
+			Menu.setSelectedStart(true);
+			Menu.setSelectedExit(false);
+		}
+		
+		if (keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_S) {
+			Menu.setSelectedExit(true);
+			Menu.setSelectedStart(false);
+		}
+		
+		if(!ticket){
+			if (keyCode == KeyEvent.VK_ENTER) {
+				if (Menu.isSelectedStart()) {
+					this.ticket = true;
+					Menu.setRunning(false);
+					Menu.getFrame().setVisible(false);
+					Menu.getFrame().stopFrame();
+					new Game().start();
+				}
+
+				if (Menu.isSelectedExit()) {
+					this.ticket = true;
+					Menu.setRunning(false);
+					Menu.getFrame().setVisible(false);
+					Menu.getFrame().stopFrame();
+				}
+			}
+		}
+		
+		if (keyCode == KeyEvent.VK_ESCAPE) {
+			System.exit(1);
+		}
+	}
+
+}

commit bae705cbe93d856216a03ffd708a53c953db9a52
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 21:12:28 2013 +0000

    Added Quit key and assigned it to 'Q'

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 3a83af1..04d1954 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -284,6 +284,8 @@ public class Game extends Canvas implements Runnable {
 				"Welcome "
 						+ WordUtils.capitalizeFully(player
 								.getSantizedUsername()), 3, getHeight() - 17);
+		g.setColor(Color.ORANGE);
+		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
 		g.setColor(Color.WHITE);
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index e37b955..bf08541 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -3,9 +3,14 @@ package com.redomar.game;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
+import com.redomar.game.net.packets.Packet01Disconnect;
+
 public class InputHandler implements KeyListener {
+	
+	private final Game game;
 
 	public InputHandler(Game game) {
+		this.game = game;
 		game.addKeyListener(this);
 	}
 
@@ -92,6 +97,11 @@ public class InputHandler implements KeyListener {
 				System.out.println("[GAME] Dummy has been despawned");
 			}
 		}
+		if (keyCode == KeyEvent.VK_Q){
+			Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
+			packet.writeData(this.game.getSocketClient());
+			System.exit(1);
+		}
 	}
 
 	public int getMap() {

commit e4d86224d5b1b1759c10f3a08750d0be59298420
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 21:48:11 2013 +0000

    Modified console printing for the client side

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 04d1954..8ee6f6e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -27,6 +27,7 @@ import com.redomar.game.menu.Menu;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
+import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
 public class Game extends Canvas implements Runnable {
@@ -251,7 +252,7 @@ public class Game extends Canvas implements Runnable {
 					notActive = false;
 				} else {
 					// System.out.println("[GAME] Canceled music option");
-					print.print(" Canceled music option", 1);
+					print.print(" Canceled music option", PrintTypes.GAME);
 					input.setPlayMusic(false);
 				}
 			}
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 286ad84..69ffb4b 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -14,12 +14,14 @@ import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet01Disconnect;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 import com.redomar.game.net.packets.Packet02Move;
+import com.redomar.game.script.*;
 
 public class GameClient extends Thread {
 
 	private InetAddress ipAddress;
 	private DatagramSocket socket;
 	private Game game;
+	private Printing print = new Printing();
 
 	public GameClient(Game game, String ipAddress) {
 		this.setGame(game);
@@ -62,9 +64,9 @@ public class GameClient extends Thread {
 			break;
 		case DISCONNECT:
 			packet = new Packet01Disconnect(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port
+			print.print("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet01Disconnect) packet).getUsername()
-					+ " has disconnected...");
+					+ " has disconnected...", PrintTypes.NETWORK);
 			Game.getLevel().removeEntity(
 					((Packet01Disconnect) packet).getUsername());
 			break;
@@ -76,8 +78,8 @@ public class GameClient extends Thread {
 	}
 
 	private void handleLogin(Packet00Login packet, InetAddress address, int port) {
-		System.out.println("[" + address.getHostAddress() + ":" + port + "] "
-				+ packet.getUsername() + " has joined...");
+		print.print("[" + address.getHostAddress() + ":" + port + "] "
+				+ packet.getUsername() + " has joined...", PrintTypes.NETWORK);
 		PlayerMP player = new PlayerMP(Game.getLevel(), packet.getX(),
 				packet.getY(), packet.getUsername(), address, port);
 		Game.getLevel().addEntity(player);
diff --git a/src/com/redomar/game/script/PrintTypes.java b/src/com/redomar/game/script/PrintTypes.java
new file mode 100644
index 0000000..7eb2395
--- /dev/null
+++ b/src/com/redomar/game/script/PrintTypes.java
@@ -0,0 +1,10 @@
+package com.redomar.game.script;
+
+public enum PrintTypes {
+
+	GAME,
+	MUSIC,
+	ERROR,
+	NETWORK,
+	SERVER;
+}
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
index 85f86de..51eca0b 100644
--- a/src/com/redomar/game/script/Printing.java
+++ b/src/com/redomar/game/script/Printing.java
@@ -1,48 +1,28 @@
 package com.redomar.game.script;
 
 import com.redomar.game.lib.Time;
+import com.redomar.game.script.PrintTypes;
 
 public class Printing {
 
-	private int type = 0;
+	private PrintTypes type;
 	private Time time = new Time();
 	private String message;
-	private String typeName = "[System]";
 
 	public Printing() {
 
 	}
 
-	public void print(String message, int type) {
-		setType(type);
-		setMessage(message);
-		System.out.println("[" + time.getTime() + "]" + type() + getMessage());
-	}
-
-	private String type() {
-		if (getType() == 1) {
-			this.typeName = "[GAME]";
-		} else if (getType() == 2) {
-			this.typeName = "[MUSIC]";
-		}
-
-		return this.typeName;
-	}
-
-	public int getType() {
-		return type;
-	}
-
-	public void setType(int type) {
+	public void print(String message, PrintTypes type) {
 		this.type = type;
+		setMessage(message);
+		printOut();		
 	}
-
-	public String getTypeName() {
-		return typeName;
-	}
-
-	public void setTypeName(String typeName) {
-		this.typeName = typeName;
+	
+	private void printOut(){
+		String msgTime = "[" + time.getTime() + "]";
+		String msgType = "[" + type.toString() + "]";
+		System.out.println(msgType + msgTime + getMessage());
 	}
 
 	public String getMessage() {

commit 4769bd33ad0a6e61dbe1df405e6f99133768f8a0
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 22:01:30 2013 +0000

    Updated printing method for the server and music

diff --git a/src/com/redomar/game/lib/Music.java b/src/com/redomar/game/lib/Music.java
index 2fe4b6b..fbf7848 100644
--- a/src/com/redomar/game/lib/Music.java
+++ b/src/com/redomar/game/lib/Music.java
@@ -5,6 +5,7 @@ import java.io.InputStream;
 import java.util.Random;
 
 import com.redomar.game.Game;
+import com.redomar.game.script.*;
 
 import javazoom.jl.player.Player;
 
@@ -15,6 +16,7 @@ public class Music implements Runnable {
 	private static String songName[] = { "/music/yoshi song.mp3",
 			"/music/Towards The End.mp3", "/music/Towards The End.mp3" };
 	private static int songNumber;
+	private Printing print = new Printing();
 
 	private static Random rand = new Random();
 
@@ -32,8 +34,8 @@ public class Music implements Runnable {
 			musicPlayer = new Player(buffered);
 			musicPlayer.play();
 		} catch (Exception e) {
-			System.out.println("Problem playing file " + file);
-			System.out.println(e);
+			print.print(" Problem playing file " + file, PrintTypes.ERROR);
+			print.print(e.toString(), PrintTypes.ERROR);
 		}
 	}
 
@@ -52,14 +54,13 @@ public class Music implements Runnable {
 			Music music = new Music(
 					Game.class.getResourceAsStream(songName[songNumber]));
 			// Thread.sleep(100);
-			System.out.println("[MUSIC] playing song: "
+			print.print(" Playing song: "
 					+ songName[songNumber].substring(7,
-							(songName[songNumber].length() - 4)));
+							(songName[songNumber].length() - 4)), PrintTypes.MUSIC);
 			music.Play();
 			this.run();
 		} catch (InterruptedException e) {
-			System.out
-					.println("[ERROR][MUSIC] Could not stop, nothing currenly playing");
+			print.print(" Could not stop, nothing currenly playing", PrintTypes.ERROR);
 		}
 	}
 
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 9c7d5c1..4ffcee8 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -15,12 +15,14 @@ import com.redomar.game.net.packets.Packet00Login;
 import com.redomar.game.net.packets.Packet.PacketTypes;
 import com.redomar.game.net.packets.Packet01Disconnect;
 import com.redomar.game.net.packets.Packet02Move;
+import com.redomar.game.script.*;
 
 public class GameServer extends Thread {
 
 	private DatagramSocket socket;
 	private Game game;
 	private List<PlayerMP> connectedPlayers = new ArrayList<PlayerMP>();
+	private Printing print = new Printing();
 
 	public GameServer(Game game) {
 		this.setGame(game);
@@ -63,18 +65,18 @@ public class GameServer extends Thread {
 			break;
 		case LOGIN:
 			packet = new Packet00Login(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port
+			print.print("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet00Login) packet).getUsername()
-					+ " has connected...");
+					+ " has connected...", PrintTypes.SERVER);
 			PlayerMP player = new PlayerMP(Game.getLevel(), 10, 10,
 					((Packet00Login) packet).getUsername(), address, port);
 			this.addConnection(player, (Packet00Login) packet);
 			break;
 		case DISCONNECT:
 			packet = new Packet01Disconnect(data);
-			System.out.println("[" + address.getHostAddress() + ":" + port
+			print.print("[" + address.getHostAddress() + ":" + port
 					+ "] " + ((Packet01Disconnect) packet).getUsername()
-					+ " has disconnected...");
+					+ " has disconnected...", PrintTypes.SERVER);
 			this.removeConnection((Packet01Disconnect) packet);
 			break;
 		case MOVE:

commit b50121874d5f4cb91918dbfc2d21bfe0ad005b29
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 22:19:44 2013 +0000

    Updated the Quit button to quit more effiecently

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 8ee6f6e..040a586 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -74,7 +74,7 @@ public class Game extends Canvas implements Runnable {
 	private boolean notActive = true;
 	private boolean noAudioDevice = false;
 	private int trigger = 0;
-	private GameClient socketClient;
+	private static GameClient socketClient;
 	private GameServer socketServer;
 	private Printing print = new Printing();
 
@@ -327,20 +327,20 @@ public class Game extends Canvas implements Runnable {
 		new Menu().start();
 	}
 
-	public JFrame getFrame() {
-		return frame;
+	public static JFrame getFrame() {
+		return Game.frame;
 	}
 
-	public void setFrame(JFrame frame) {
+	public static void setFrame(JFrame frame) {
 		Game.frame = frame;
 	}
 
-	public GameClient getSocketClient() {
+	public static GameClient getSocketClient() {
 		return socketClient;
 	}
 
 	public void setSocketClient(GameClient socketClient) {
-		this.socketClient = socketClient;
+		Game.socketClient = socketClient;
 	}
 
 	public static Player getPlayer() {
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index bf08541..e3b316d 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -3,14 +3,9 @@ package com.redomar.game;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
-import com.redomar.game.net.packets.Packet01Disconnect;
-
 public class InputHandler implements KeyListener {
-	
-	private final Game game;
 
 	public InputHandler(Game game) {
-		this.game = game;
 		game.addKeyListener(this);
 	}
 
@@ -98,8 +93,9 @@ public class InputHandler implements KeyListener {
 			}
 		}
 		if (keyCode == KeyEvent.VK_Q){
-			Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
-			packet.writeData(this.game.getSocketClient());
+			Game.getLevel().removeEntity(Game.getPlayer().getSantizedUsername());
+			Game.setRunning(false);
+			Game.getFrame().dispose();
 			System.exit(1);
 		}
 	}
diff --git a/src/com/redomar/game/WindowHandler.java b/src/com/redomar/game/WindowHandler.java
index 2cc7e4a..b5263fa 100644
--- a/src/com/redomar/game/WindowHandler.java
+++ b/src/com/redomar/game/WindowHandler.java
@@ -7,11 +7,12 @@ import com.redomar.game.net.packets.Packet01Disconnect;
 
 public class WindowHandler implements WindowListener {
 
+	@SuppressWarnings("unused")
 	private final Game game;
 
 	public WindowHandler(Game game) {
 		this.game = game;
-		this.game.getFrame().addWindowListener(this);
+		Game.getFrame().addWindowListener(this);
 	}
 
 	@Override
@@ -28,7 +29,7 @@ public class WindowHandler implements WindowListener {
 	public void windowClosing(WindowEvent event) {
 		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer()
 				.getUsername());
-		packet.writeData(this.game.getSocketClient());
+		packet.writeData(Game.getSocketClient());
 	}
 
 	@Override
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index d476e4b..a022119 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -57,7 +57,8 @@ public class Player extends Mob {
 			Packet02Move packet = new Packet02Move(this.getUsername(),
 					this.getX(), this.getY(), this.numSteps, this.isMoving,
 					this.movingDir);
-			packet.writeData(Game.getGame().getSocketClient());
+			Game.getGame();
+			packet.writeData(Game.getSocketClient());
 
 		} else {
 			isMoving = false;
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index e076839..791fedc 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -9,10 +9,12 @@ import java.util.logging.Level;
 
 import javax.imageio.ImageIO;
 
+import com.redomar.game.Game;
 import com.redomar.game.entities.Entity;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
+import com.redomar.game.net.packets.Packet01Disconnect;
 
 public class LevelHandler {
 
@@ -164,6 +166,8 @@ public class LevelHandler {
 			index++;
 		}
 		this.getEntities().remove(index);
+		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
+		packet.writeData(Game.getSocketClient());
 	}
 
 	private int getPlayerMPIndex(String username) {

commit 78adad522a6b649cbe54b1c0002b0de6183cb1c9
Merge: 5f3b33f b501218
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 22:32:25 2013 +0000

    Merge remote-tracking branch 'origin/aside'

commit bc453640844f2b8802541f1a5b2b5a143e841001
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Dec 21 22:49:39 2013 +0000

    Updated for 1.6.3

diff --git a/README.md b/README.md
index 0f24b1e..7309989 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.6.2
+JavaGame Alpha v1.6.3
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 2ad4a1f..e4ad8ad 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index af99a25..16df7fe 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -34,7 +34,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.6.2 Alpha";
+	private static final String game_Version = "v1.6.3 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;

commit ada20bd58a13b6b12c253f7a7a5d19756df9bcc2
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Jan 13 21:23:47 2014 +0000

    Updated printing method for spawning a NPC

diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index e3b316d..64e9b3b 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -3,6 +3,9 @@ package com.redomar.game;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
+import com.redomar.game.script.PrintTypes;
+import com.redomar.game.script.Printing;
+
 public class InputHandler implements KeyListener {
 
 	public InputHandler(Game game) {
@@ -33,6 +36,7 @@ public class InputHandler implements KeyListener {
 	private Key down = new Key();
 	private Key left = new Key();
 	private Key right = new Key();
+	private Printing print = new Printing();
 	private boolean PlayMusic = false;
 	private int map;
 
@@ -82,14 +86,14 @@ public class InputHandler implements KeyListener {
 			if (Game.isNpc() == false) {
 				Game.setNpc(true);
 				Game.npcSpawn();
-				System.out.println("[GAME] Dummy has been spawned");
+				print.print("Dummy has been spawned", PrintTypes.GAME);
 			}
 		}
 		if (keyCode == KeyEvent.VK_K) {
 			if (Game.isNpc() == true) {
 				Game.setNpc(false);
 				Game.npcKill();
-				System.out.println("[GAME] Dummy has been despawned");
+				print.print("Dummy has been despawned", PrintTypes.GAME);
 			}
 		}
 		if (keyCode == KeyEvent.VK_Q){

commit 9005260151906d52f12c7a14eba9a81d8de4c3c1
Author: Bitdeli Chef <chef@bitdeli.com>
Date:   Wed Jan 29 22:17:13 2014 +0000

    Add a Bitdeli badge to README

diff --git a/README.md b/README.md
index 7309989..4a69d44 100644
--- a/README.md
+++ b/README.md
@@ -24,4 +24,7 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
   * Make the changes in the /src folder
 * Commit your changes (```git commit -am "Change Title"```)
 * Push to the branch (```git push origin my_branch```)
-* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
\ No newline at end of file
+* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
+
+[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
+

commit 01d98b65a8da25e0aad422f32cc69014dce24592
Merge: bc45364 9005260
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jan 29 14:16:31 2014 -0800

    Merge pull request #2 from bitdeli-chef/master
    
    Add a Bitdeli Badge to README

commit 1bbafc7f8226447d8153a600f9cb821c9cf04dd7
Merge: 01d98b6 ada20bd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jan 29 23:23:04 2014 +0000

    Merge branch 'aside'

commit 076782480ca676cc70456289b1c46a4dcee3e812
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Feb 17 20:46:04 2014 +0000

    Added animation when the player stops
    
    fixed a small bug that showed a small pixle of the players hand while the player moves in swimming state
    Added sprites for player standing still

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 0412e02..85f9fda 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index a022119..47cb72c 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -86,6 +86,11 @@ public class Player extends Mob {
 
 		if (movingDir == 1) {
 			xTile += 2;
+			if (!isMoving || swim.isActive(swimType)){
+				yTile -= 2;
+			}
+		} else if (movingDir == 0 && !isMoving || movingDir == 0 && swim.isActive(swimType)) {
+			yTile -= 2;
 		} else if (movingDir > 1) {
 			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
 			flipTop = (movingDir - 1) % 2;
diff --git a/src/com/redomar/game/entities/efx/Swim.java b/src/com/redomar/game/entities/efx/Swim.java
index e0c46c5..65f70bf 100644
--- a/src/com/redomar/game/entities/efx/Swim.java
+++ b/src/com/redomar/game/entities/efx/Swim.java
@@ -78,4 +78,16 @@ public class Swim {
 		swimminhType[2] = mud(isMuddy);
 		return swimminhType;
 	}
+	
+	public boolean isActive(boolean[] swimmingType){
+		if(swimmingType[0] == true){
+			return true;
+		}else if(swimmingType[1] == true){
+			return true;
+		}else if(swimmingType[2] == true){
+			return true;
+		} else {			
+			return false;
+		}
+	}
 }

commit ccd7d0dfc45901122942b6a844b25b3f991b5d01
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 00:42:38 2014 +0000

    Animated NPC when they are standing still
    
    Added standing still sprites for NPC

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 85f9fda..6173e9a 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index e570f5e..4d439e8 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -49,6 +49,11 @@ public class Dummy extends Mob {
 
 		if (movingDir == 1) {
 			xTile += 2;
+			if (!isMoving || swim.isActive(swimType)){
+				yTile -= 2;
+			}
+		} else if (movingDir == 0 && !isMoving || movingDir == 0 && swim.isActive(swimType)) {
+			yTile -= 2;
 		} else if (movingDir > 1) {
 			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
 			flipTop = (movingDir - 1) % 2;

commit 818fa8d27669edc870d751692778734c1a6ec7dd
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 01:00:40 2014 +0000

    Updated Jar file

diff --git a/jar/javagame.jar b/jar/javagame.jar
index e4ad8ad..07d8187 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 98ef4ada4cbe74503bea7f433d7eea9346cbb932
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Dec 8 21:18:42 2013 +0000

    Started work on Selecting charater race

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 16df7fe..454e9d3 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -47,6 +47,9 @@ public class Game extends Canvas implements Runnable {
 	private static boolean changeLevel = false;
 	private static boolean npc = false;
 	private static int map = 0;
+	private static int shirtCol;
+	private static int faceCol;
+	private static boolean[] alternateCols = new boolean[2];
 
 	private static JFrame frame;
 
@@ -126,8 +129,20 @@ public class Game extends Canvas implements Runnable {
 
 	public void setMap(String Map_str) {
 		setLevel(new LevelHandler(Map_str));
+		if(alternateCols[0]){
+			Game.setShirtCol(240);
+		}
+		if(!alternateCols[0]){
+			Game.setShirtCol(111);
+		}
+		if(alternateCols[1]){
+			Game.setFaceCol(310);
+		}
+		if(!alternateCols[1]){
+			Game.setFaceCol(444);
+		}
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
-				getJdata_UserName(), null, -1));
+				getJdata_UserName(), null, -1, shirtCol, faceCol));
 		level.addEntity(player);
 	}
 
@@ -467,4 +482,36 @@ public class Game extends Canvas implements Runnable {
 		return game_Version;
 	}
 
+	public static int getShirtCol() {
+		return shirtCol;
+	}
+
+	public static void setShirtCol(int shirtCol) {
+		Game.shirtCol = shirtCol;
+	}
+
+	public static int getFaceCol() {
+		return faceCol;
+	}
+
+	public static void setFaceCol(int faceCol) {
+		Game.faceCol = faceCol;
+	}
+
+	public static boolean[] getAlternateCols() {
+		return alternateCols;
+	}
+
+	public static void setAlternateCols(boolean[] alternateCols) {
+		Game.alternateCols = alternateCols;
+	}
+	
+	public static void setAternateColsR(boolean alternateCols){
+		Game.alternateCols[1] = alternateCols;
+	}
+	
+	public static void setAternateColsS(boolean alternateCols){
+		Game.alternateCols[0] = alternateCols;
+	}
+
 }
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 47cb72c..f2ddf2c 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -16,7 +16,7 @@ public class Player extends Mob {
 	private static Name customeName = new Name();
 	private Swim swim;
 
-	private int colour = Colours.get(-1, 111, 240, 310);
+	private int colour, shirtCol, faceCol;
 	private int tickCount = 0;
 	private String userName;
 	private boolean[] swimType;
@@ -25,10 +25,13 @@ public class Player extends Mob {
 	public static String guestPlayerName = customeName.setName("Player ");
 
 	public Player(LevelHandler level, int x, int y, InputHandler input,
-			String userName) {
+			String userName,  int shirtCol,	int faceCol) {
 		super(level, "Player", x, y, 1);
 		this.input = input;
 		this.userName = userName;
+		this.faceCol = faceCol;
+		this.shirtCol = shirtCol;
+		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
 	}
 
 	public void tick() {
@@ -110,7 +113,7 @@ public class Player extends Mob {
 			int waterColour = 0;
 			yOffset += 4;
 
-			colour = Colours.get(-1, 111, -1, 310);
+			colour = Colours.get(-1, 111, -1, faceCol);
 
 			if (tickCount % 60 < 15) {
 				waterColour = Colours.get(-1, -1, swimColour[0], -1);
@@ -141,7 +144,7 @@ public class Player extends Mob {
 			screen.render((xOffset + modifier - (modifier * flipBottom)),
 					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
 					colour, flipBottom, scale);
-			colour = Colours.get(-1, 111, 240, 310);
+			colour = Colours.get(-1, 111, shirtCol, faceCol);
 			;
 		}
 
diff --git a/src/com/redomar/game/entities/PlayerMP.java b/src/com/redomar/game/entities/PlayerMP.java
index a0f6eb0..f45142b 100644
--- a/src/com/redomar/game/entities/PlayerMP.java
+++ b/src/com/redomar/game/entities/PlayerMP.java
@@ -11,15 +11,15 @@ public class PlayerMP extends Player {
 	public int port;
 
 	public PlayerMP(LevelHandler level, int x, int y, InputHandler input,
-			String userName, InetAddress ipAddress, int port) {
-		super(level, x, y, input, userName);
+			String userName, InetAddress ipAddress, int port, int shirtCol, int faceCol) {
+		super(level, x, y, input, userName, shirtCol, faceCol);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
 
 	public PlayerMP(LevelHandler level, int x, int y, String userName,
-			InetAddress ipAddress, int port) {
-		super(level, x, y, null, userName);
+			InetAddress ipAddress, int port, int shirtCol, int faceCol) {
+		super(level, x, y, null, userName, shirtCol, faceCol);
 		this.ipAddess = ipAddress;
 		this.port = port;
 	}
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index cff1ccd..002758c 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -194,11 +194,34 @@ public class Menu implements Runnable {
 						"Enter the name \nleave blank for local"));
 			}
 			Thread.sleep(125);
-			splash.setProgress(95, "Aquring data: Username");
+			splash.setProgress(94, "Aquring data: Username");
 			Thread.sleep(125);
-			splash.setProgress(96, "Initalizing as Server:Host");
+			splash.setProgress(95, "Initalizing as Server:Host");
 			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(),
 					"Enter a name"));
+			Thread.sleep(250);
+			splash.setProgress(96, "Collecting Player Data");
+			Object[] options = { "African", "Caucasian"};
+			int n = JOptionPane.showOptionDialog(frame,
+					"Choose a race for the charater to be",
+					"Choose a race", JOptionPane.YES_NO_OPTION,
+					JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
+			if(n == 0){
+				Game.setAternateColsR(true);
+			}else{
+				Game.setAternateColsR(false);
+			}
+			Thread.sleep(250);
+			Object[] options1 = { "Orange", "Black"};
+			int n1 = JOptionPane.showOptionDialog(frame,
+					"Which Colour do you want the shirt to be?",
+					"Choose a shirt Colour", JOptionPane.YES_NO_OPTION,
+					JOptionPane.QUESTION_MESSAGE, null, options1, options1[0]);
+			if(n1 == 0){
+				Game.setAternateColsS(true);
+			}else{
+				Game.setAternateColsS(false);
+			}
 			splash.setProgress(97, "Connecting as" + Game.getJdata_UserName());
 			Thread.sleep(250);
 			splash.splashOff();
diff --git a/src/com/redomar/game/net/GameClient.java b/src/com/redomar/game/net/GameClient.java
index 69ffb4b..be15718 100644
--- a/src/com/redomar/game/net/GameClient.java
+++ b/src/com/redomar/game/net/GameClient.java
@@ -81,7 +81,7 @@ public class GameClient extends Thread {
 		print.print("[" + address.getHostAddress() + ":" + port + "] "
 				+ packet.getUsername() + " has joined...", PrintTypes.NETWORK);
 		PlayerMP player = new PlayerMP(Game.getLevel(), packet.getX(),
-				packet.getY(), packet.getUsername(), address, port);
+				packet.getY(), packet.getUsername(), address, port, Game.getShirtCol(), Game.getFaceCol());
 		Game.getLevel().addEntity(player);
 	}
 
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 4ffcee8..5449306 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -69,7 +69,7 @@ public class GameServer extends Thread {
 					+ "] " + ((Packet00Login) packet).getUsername()
 					+ " has connected...", PrintTypes.SERVER);
 			PlayerMP player = new PlayerMP(Game.getLevel(), 10, 10,
-					((Packet00Login) packet).getUsername(), address, port);
+					((Packet00Login) packet).getUsername(), address, port, Game.getShirtCol(), Game.getFaceCol());
 			this.addConnection(player, (Packet00Login) packet);
 			break;
 		case DISCONNECT:

commit 067a8c9ba3c3a60d9e0253e3e9d7f307d24daf04
Merge: 98ef4ad cb3599e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 01:37:23 2014 +0000

    Merge branch 'alt' of github.com:redomar/JavaGame into alt

commit d4ee04994083eab4297f73e1fa9fb393b98a2401
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 01:38:56 2014 +0000

    Changed cacuasian face colour of the player to a more subtle tone

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 454e9d3..269905d 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -139,7 +139,7 @@ public class Game extends Canvas implements Runnable {
 			Game.setFaceCol(310);
 		}
 		if(!alternateCols[1]){
-			Game.setFaceCol(444);
+			Game.setFaceCol(543);
 		}
 		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
 				getJdata_UserName(), null, -1, shirtCol, faceCol));

commit 3223c13bcda4045d24075388790e7a7514d7b06d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 02:02:53 2014 +0000

    Updating for Alpha 1.6.4

diff --git a/README.md b/README.md
index 4a69d44..42ac116 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.6.3
+JavaGame Alpha v1.6.4
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 16df7fe..5a26aa0 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -34,7 +34,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.6.3 Alpha";
+	private static final String game_Version = "v1.6.4 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;

commit 13c02ee6fda8172b720040dedfd4b065483e53d2
Merge: 3223c13 d4ee049
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 02:03:34 2014 +0000

    Merge branch 'alt'

commit 2580b96e1fe42a36e2050e2651c56c96cfb432c7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Feb 18 02:06:58 2014 +0000

    Updated Jar to the latest build

diff --git a/jar/javagame.jar b/jar/javagame.jar
index 07d8187..2f756e9 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 8ce077b6231c8260375a9873b6387b598c2072b9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Feb 20 18:06:08 2014 +0000

    Started work on Inventory and Items

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index f2ddf2c..65a30d6 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -9,6 +9,7 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Name;
 import com.redomar.game.net.packets.Packet02Move;
+import com.redomar.game.objects.Inventory;
 
 public class Player extends Mob {
 
@@ -86,6 +87,8 @@ public class Player extends Mob {
 		int walkingSpeed = 4;
 		int flipTop = (numSteps >> walkingSpeed) & 1;
 		int flipBottom = (numSteps >> walkingSpeed) & 1;
+		
+		Inventory.activate();
 
 		if (movingDir == 1) {
 			xTile += 2;
diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
new file mode 100644
index 0000000..0952b6d
--- /dev/null
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -0,0 +1,22 @@
+package com.redomar.game.objects;
+
+import com.redomar.game.Game;
+
+public class Inventory {
+
+	public static int x;
+	public static int y;
+	public static boolean open = false;
+	
+	public static void activate() {
+		x = Game.getPlayer().getX();
+		y = Game.getPlayer().getY();
+		
+		if(Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8){
+			if(!open){
+				System.out.println("Open");
+				open = true;
+			}
+		}
+	}
+}

commit 24408b4f9ef40f284e7b13cf79cbfb495cb0c1cb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Feb 20 18:39:06 2014 +0000

    Added a few Items
    Added some items; Stick, Torch, Sword, and an Apple

diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index 0952b6d..98f2556 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -14,9 +14,21 @@ public class Inventory {
 		
 		if(Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8){
 			if(!open){
-				System.out.println("Open");
+				System.out.println("Opened\nInside this Bag their is:"+inside());
 				open = true;
 			}
+		}else{
+			if(open){
+				open = false;
+			}
+		}
+	}
+	
+	private static String inside(){
+		String items = " ";
+		for (Items item : Items.values()) {
+			items = items + item.toString() + ", ";
 		}
+		return items;
 	}
 }
diff --git a/src/com/redomar/game/objects/Items.java b/src/com/redomar/game/objects/Items.java
new file mode 100644
index 0000000..f7b5fc8
--- /dev/null
+++ b/src/com/redomar/game/objects/Items.java
@@ -0,0 +1,9 @@
+package com.redomar.game.objects;
+
+public enum Items {
+
+	Stick,
+	Torch,
+	Sword,
+	Apple;
+}

commit c60f29305436f4360f41a9d64114e36fedc65199
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Feb 23 23:08:52 2014 +0000

    Making a window for the inventory
    Added a new Window for inventory when a player moves next to a chest.
    Modified other files for the window to work properly
    May have a few issues/bugs

diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index a6cf75a..70b1479 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -17,7 +17,7 @@ public class DedicatedJFrame extends Canvas {
 		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 
 		setFrame(new JFrame(NAME));
-		getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		//getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		getFrame().setLayout(new BorderLayout());
 		getFrame().add(this, BorderLayout.CENTER);
 		getFrame().pack();
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 002758c..ee81592 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -7,6 +7,7 @@ import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
 import java.awt.image.BufferStrategy;
 
+import javax.swing.JFrame;
 import javax.swing.JOptionPane;
 import javax.swing.UIManager;
 
@@ -226,6 +227,8 @@ public class Menu implements Runnable {
 			Thread.sleep(250);
 			splash.splashOff();
 			frame = new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME);
+			frame.getFrame();
+			frame.getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index 98f2556..f1957cd 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -7,6 +7,7 @@ public class Inventory {
 	public static int x;
 	public static int y;
 	public static boolean open = false;
+	private static InventoryWindow inv_window = new InventoryWindow();
 	
 	public static void activate() {
 		x = Game.getPlayer().getX();
@@ -16,10 +17,15 @@ public class Inventory {
 			if(!open){
 				System.out.println("Opened\nInside this Bag their is:"+inside());
 				open = true;
+				Game.getPlayer().setMoving(false);
+				inv_window.start();
 			}
 		}else{
 			if(open){
 				open = false;
+				inv_window.stop();
+				inv_window.getFrame().setVisible(false);
+				inv_window.getFrame().stopFrame();
 			}
 		}
 	}
diff --git a/src/com/redomar/game/objects/InventoryWindow.java b/src/com/redomar/game/objects/InventoryWindow.java
new file mode 100644
index 0000000..b60debd
--- /dev/null
+++ b/src/com/redomar/game/objects/InventoryWindow.java
@@ -0,0 +1,96 @@
+package com.redomar.game.objects;
+
+import java.awt.Color;
+import java.awt.Graphics;
+import java.awt.image.BufferStrategy;
+
+import com.redomar.game.menu.DedicatedJFrame;
+
+public class InventoryWindow implements Runnable{
+
+	private static final int WIDTH = 160;
+	private static final int HEIGHT = (WIDTH / 3 * 2);
+	private static final int SCALE = 2;
+	private static final String NAME = "Inventory";
+	
+	private static boolean running = false;
+	
+	private static DedicatedJFrame frame;
+
+	public synchronized void start(){
+		running = true;
+		setFrame(new DedicatedJFrame(WIDTH, HEIGHT, SCALE, NAME));
+		new Thread(this, NAME).start();
+	}
+	
+	public synchronized void stop(){
+		running = false;
+	}
+	
+	public void run() {
+		long lastTime = System.nanoTime();
+		double nsPerTick = 1000000000D / 30D;
+
+		int ticks = 0;
+		int frames = 0;
+
+		long lastTimer = System.currentTimeMillis();
+		double delta = 0;
+
+		while (running) {
+			long now = System.nanoTime();
+			delta += (now - lastTime) / nsPerTick;
+			lastTime = now;
+			boolean shouldRender = false;
+
+			while (delta >= 1) {
+				ticks++;
+				delta -= 1;
+				shouldRender = true;
+			}
+
+			try {
+				Thread.sleep(2);
+			} catch (InterruptedException e) {
+				e.printStackTrace();
+			}
+
+			if (shouldRender) {
+				frames++;
+				render();
+			}
+
+			if (System.currentTimeMillis() - lastTimer >= 1000) {
+				lastTimer += 1000;
+				getFrame().getFrame().setTitle(
+						"Frames: " + frames + " Ticks: " + ticks);
+				frames = 0;
+				ticks = 0;
+			}
+		}
+	}
+	
+	private void render() {
+		BufferStrategy bs = getFrame().getBufferStrategy();
+		if(bs == null){
+			getFrame().createBufferStrategy(3);
+			return;
+		}
+		
+		Graphics g = bs.getDrawGraphics();
+		g.setColor(Color.BLACK);
+		g.fillRect(0, 0, WIDTH*SCALE+10, HEIGHT*SCALE+10);
+		g.setColor(Color.WHITE);
+		g.drawString(NAME, 50, 50);
+		bs.show();
+		g.dispose();
+	}
+
+	public DedicatedJFrame getFrame() {
+		return frame;
+	}
+
+	public static void setFrame(DedicatedJFrame frame) {
+		InventoryWindow.frame = frame;
+	}
+}

commit 18af6b0bf743f62e47865488326a75525ff98931
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Feb 23 23:29:33 2014 +0000

    Tried to limit player movement while inventory is open
    Trying to find a way to implement in which the player does not keep moving while the inventory window is still open

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index ad0c284..de778a0 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -65,7 +65,7 @@ public class Game extends Canvas implements Runnable {
 	private BufferedImage image2 = new BufferedImage(WIDTH, HEIGHT - 30,
 			BufferedImage.TYPE_INT_RGB);
 	private Screen screen;
-	private InputHandler input;
+	private static InputHandler input;
 	private WindowHandler window;
 	private LevelHandler level;
 	private Player player;
@@ -514,4 +514,12 @@ public class Game extends Canvas implements Runnable {
 		Game.alternateCols[0] = alternateCols;
 	}
 
+	public static InputHandler getInput() {
+		return input;
+	}
+
+	public void setInput(InputHandler input) {
+		Game.input = input;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 64e9b3b..aefee0c 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -39,6 +39,7 @@ public class InputHandler implements KeyListener {
 	private Printing print = new Printing();
 	private boolean PlayMusic = false;
 	private int map;
+	private boolean untoggle = false;
 
 	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
@@ -53,17 +54,24 @@ public class InputHandler implements KeyListener {
 	}
 
 	public void toggleKey(int keyCode, boolean isPressed) {
-		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
-			getUp().toggle(isPressed);
-		}
-		if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
-			getDown().toggle(isPressed);
-		}
-		if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
-			getLeft().toggle(isPressed);
-		}
-		if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
-			getRight().toggle(isPressed);
+		if(untoggle == false){
+			if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
+				getUp().toggle(isPressed);
+			}
+			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
+				getDown().toggle(isPressed);
+			}
+			if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
+				getLeft().toggle(isPressed);
+			}
+			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
+				getRight().toggle(isPressed);
+			}
+		}else{
+			getUp().toggle(false);
+			getDown().toggle(false);
+			getLeft().toggle(false);
+			getRight().toggle(false);
 		}
 		if (keyCode == KeyEvent.VK_M) {
 			this.setPlayMusic(true);
@@ -103,6 +111,11 @@ public class InputHandler implements KeyListener {
 			System.exit(1);
 		}
 	}
+	
+	public void untoggle(boolean toggle){
+		this.untoggle = toggle;
+	}
+	
 
 	public int getMap() {
 		return map;
@@ -152,4 +165,12 @@ public class InputHandler implements KeyListener {
 		this.right = right;
 	}
 
+	public boolean isUntoggle() {
+		return untoggle;
+	}
+
+	public void setUntoggle(boolean untoggle) {
+		this.untoggle = untoggle;
+	}
+
 }
diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index f1957cd..38100b5 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -18,11 +18,13 @@ public class Inventory {
 				System.out.println("Opened\nInside this Bag their is:"+inside());
 				open = true;
 				Game.getPlayer().setMoving(false);
+				//Game.getInput().untoggle(true);
 				inv_window.start();
 			}
 		}else{
 			if(open){
 				open = false;
+				//Game.getInput().untoggle(false);
 				inv_window.stop();
 				inv_window.getFrame().setVisible(false);
 				inv_window.getFrame().stopFrame();

commit 2f241a98e43162553c66dbc2091958ccb10ac44b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 15 17:14:52 2014 +0000

    Improved the way the player stops
    Restuctured they code that stops the player while inventory window opens
    Player still animated while stopped - imporvement needed

diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 70b1479..4e28633 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -29,6 +29,10 @@ public class DedicatedJFrame extends Canvas {
 	public JFrame getFrame() {
 		return frame;
 	}
+	
+	public static JFrame getFrameStatic(){
+		return frame;
+	}
 
 	public void setFrame(JFrame frame) {
 		DedicatedJFrame.frame = frame;
diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index 38100b5..5a6a7f9 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -7,32 +7,49 @@ public class Inventory {
 	public static int x;
 	public static int y;
 	public static boolean open = false;
+	public static boolean closing;
+	public static boolean reset;
 	private static InventoryWindow inv_window = new InventoryWindow();
-	
+
 	public static void activate() {
 		x = Game.getPlayer().getX();
 		y = Game.getPlayer().getY();
-		
-		if(Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8){
-			if(!open){
-				System.out.println("Opened\nInside this Bag their is:"+inside());
-				open = true;
-				Game.getPlayer().setMoving(false);
-				//Game.getInput().untoggle(true);
-				inv_window.start();
+
+		if (Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8) {
+			if (!reset) {
+				if (!open) {
+					if (!closing) {
+						System.out.println("Opened\nInside this Bag their is:"
+								+ inside());
+						open = true;
+						Game.getPlayer().setMoving(false);
+						Game.getInput().untoggle(true);
+						inv_window.start();
+					}
+				} else {
+					if (closing) {
+						Game.getPlayer().setMoving(true);
+						Game.getInput().untoggle(false);
+						inv_window.stop();
+						inv_window.getFrame().setVisible(false);
+						inv_window.getFrame().stopFrame();
+						if (Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8) {
+							reset = true;
+							System.out.println("rest");
+						}
+					}
+				}
 			}
-		}else{
-			if(open){
+		} else {
+			if (open == true || reset == true || closing == true) {
+				reset = false;
 				open = false;
-				//Game.getInput().untoggle(false);
-				inv_window.stop();
-				inv_window.getFrame().setVisible(false);
-				inv_window.getFrame().stopFrame();
+				closing = false;
 			}
 		}
 	}
-	
-	private static String inside(){
+
+	private static String inside() {
 		String items = " ";
 		for (Items item : Items.values()) {
 			items = items + item.toString() + ", ";
diff --git a/src/com/redomar/game/objects/InventoryHandler.java b/src/com/redomar/game/objects/InventoryHandler.java
new file mode 100644
index 0000000..7ee22ca
--- /dev/null
+++ b/src/com/redomar/game/objects/InventoryHandler.java
@@ -0,0 +1,53 @@
+package com.redomar.game.objects;
+
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+
+import com.redomar.game.menu.DedicatedJFrame;
+
+public class InventoryHandler implements WindowListener {
+	
+	@SuppressWarnings("unused")
+	private DedicatedJFrame frame;
+	
+	public InventoryHandler(DedicatedJFrame frame) {
+		this.frame = frame;
+		DedicatedJFrame.getFrameStatic().addWindowListener(this);
+	}
+
+	@Override
+	public void windowActivated(WindowEvent e) {
+		
+	}
+
+	@Override
+	public void windowClosed(WindowEvent e) {
+		
+	}
+
+	public void windowClosing(WindowEvent e) {
+		Inventory.closing = true;
+		System.out.println("CLOSING");
+	}
+
+	@Override
+	public void windowDeactivated(WindowEvent e) {
+		
+	}
+
+	@Override
+	public void windowDeiconified(WindowEvent e) {
+		
+	}
+
+	@Override
+	public void windowIconified(WindowEvent e) {
+		
+	}
+
+	@Override
+	public void windowOpened(WindowEvent e) {
+		
+	}
+
+}
diff --git a/src/com/redomar/game/objects/InventoryWindow.java b/src/com/redomar/game/objects/InventoryWindow.java
index b60debd..617f127 100644
--- a/src/com/redomar/game/objects/InventoryWindow.java
+++ b/src/com/redomar/game/objects/InventoryWindow.java
@@ -16,6 +16,7 @@ public class InventoryWindow implements Runnable{
 	private static boolean running = false;
 	
 	private static DedicatedJFrame frame;
+	private static InventoryHandler window;
 
 	public synchronized void start(){
 		running = true;
@@ -36,6 +37,8 @@ public class InventoryWindow implements Runnable{
 
 		long lastTimer = System.currentTimeMillis();
 		double delta = 0;
+		
+		setWindow(new InventoryHandler(getFrame()));
 
 		while (running) {
 			long now = System.nanoTime();
@@ -93,4 +96,12 @@ public class InventoryWindow implements Runnable{
 	public static void setFrame(DedicatedJFrame frame) {
 		InventoryWindow.frame = frame;
 	}
+
+	public static InventoryHandler getWindow() {
+		return window;
+	}
+
+	public static void setWindow(InventoryHandler inventoryHandler) {
+		InventoryWindow.window = inventoryHandler;
+	}
 }

commit 6452d6f16abf7b83274d58708bfc2f0ac2814e47
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 15 17:52:50 2014 +0000

    Improved player walking animation when stopped
    When player stops while faceing left or right the feet return to standing still postion

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 11c45b2..e92fa1e 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -36,6 +36,13 @@ public abstract class Mob extends Entity {
 			return;
 		}
 		numSteps++;
+		
+		//Moving Directions
+		//0 = Facing UP
+		//1 = Facing Down
+		//2 = Facing Left
+		//3 = Facing Right
+		
 		if (!hasCollided(xa, ya)) {
 			if (ya < 0) {
 				movingDir = 0;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 65a30d6..37120f7 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -100,6 +100,9 @@ public class Player extends Mob {
 		} else if (movingDir > 1) {
 			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
 			flipTop = (movingDir - 1) % 2;
+			if(!isMoving){
+				xTile = 4;
+			}
 		}
 
 		int modifier = 8 * scale;

commit 21dfb47df6f4f4534697a270f228118d5a7e8aa9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 15 18:48:18 2014 +0000

    Added quick stats at the top corner

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index de778a0..cec5e90 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -50,6 +50,9 @@ public class Game extends Canvas implements Runnable {
 	private static int shirtCol;
 	private static int faceCol;
 	private static boolean[] alternateCols = new boolean[2];
+	private static int fps;
+	private static int tps;
+	private static int steps;
 
 	private static JFrame frame;
 
@@ -215,6 +218,8 @@ public class Game extends Canvas implements Runnable {
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
 				getFrame().setTitle("Frames: " + frames + " Ticks: " + ticks);
+				fps = frames;
+				tps = ticks;
 				frames = 0;
 				ticks = 0;
 			}
@@ -304,6 +309,7 @@ public class Game extends Canvas implements Runnable {
 		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
+		status(g, true);
 		g.setColor(Color.WHITE);
 		if (noAudioDevice == true) {
 			g.setColor(Color.RED);
@@ -338,6 +344,19 @@ public class Game extends Canvas implements Runnable {
 		bs.show();
 	}
 
+	private void status(Graphics g, boolean TerminalMode) {
+		if (TerminalMode == true){
+			g.setColor(Color.GREEN);
+			g.drawString("JavaGame Stats", 0, 10);
+			g.drawString("FPS/TPS: " + fps + "/" + tps, 0, 25);
+			if ((player.getNumSteps() & 15) == 15) {
+				steps += 1;
+			}
+			g.drawString("Foot Steps: " + steps, 0, 40);
+			g.drawString("NPC: " + WordUtils.capitalize(String.valueOf(isNpc())) , 0, 55);
+		}
+	}
+
 	public static void main(String[] args) {
 		new Menu().start();
 	}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 11c45b2..9cb2cf5 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -106,6 +106,10 @@ public abstract class Mob extends Entity {
 		this.numSteps = numSteps;
 	}
 
+	public int getNumSteps() {
+		return numSteps;
+	}
+
 	public void setMoving(boolean isMoving) {
 		this.isMoving = isMoving;
 	}

commit e3346c0e5d30031a2f008e97d2712f477f26e49f
Merge: 21dfb47 6452d6f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 15 18:49:37 2014 +0000

    Merge branch 'npc-dev' into aside

commit bf18da9a6137cd664f68ecec69c6fb43d30816f6
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 15 19:02:57 2014 +0000

    Renamed the game title

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index ad0c284..93c00de 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -214,7 +214,7 @@ public class Game extends Canvas implements Runnable {
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				getFrame().setTitle("Frames: " + frames + " Ticks: " + ticks);
+				getFrame().setTitle("JavaGame - Version "+WordUtils.capitalize(game_Version).substring(1, game_Version.length()));
 				frames = 0;
 				ticks = 0;
 			}

commit 839d1dc82e782e887d871f0416c1c367f0ae4242
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Mar 16 16:57:00 2014 +0000

    Added a button to show the Dev stats

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index cec5e90..97c6651 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -53,6 +53,7 @@ public class Game extends Canvas implements Runnable {
 	private static int fps;
 	private static int tps;
 	private static int steps;
+	private static boolean[] devMode = new boolean[2];
 
 	private static JFrame frame;
 
@@ -98,6 +99,8 @@ public class Game extends Canvas implements Runnable {
 		getFrame().setLocationRelativeTo(null);
 		getFrame().setVisible(true);
 
+		setDevMode(false);
+		setDevTime(false);
 	}
 
 	public void init() {
@@ -309,7 +312,7 @@ public class Game extends Canvas implements Runnable {
 		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
-		status(g, true);
+		status(g, isDevMode());
 		g.setColor(Color.WHITE);
 		if (noAudioDevice == true) {
 			g.setColor(Color.RED);
@@ -541,4 +544,20 @@ public class Game extends Canvas implements Runnable {
 		Game.input = input;
 	}
 
+	public static boolean isDevMode() {
+		return devMode[0];
+	}
+
+	public static void setDevMode(boolean devMode) {
+		Game.devMode[0] = devMode;
+	}
+
+	public static boolean isDevTime() {
+		return devMode[1];
+	}
+
+	public static void setDevTime(boolean devTime) {
+		Game.devMode[1] = devTime;
+	}
+
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index aefee0c..9acdca1 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -3,6 +3,7 @@ package com.redomar.game;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
+import com.redomar.game.lib.SleepThread;
 import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
@@ -40,7 +41,7 @@ public class InputHandler implements KeyListener {
 	private boolean PlayMusic = false;
 	private int map;
 	private boolean untoggle = false;
-
+	
 	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
 	}
@@ -110,6 +111,14 @@ public class InputHandler implements KeyListener {
 			Game.getFrame().dispose();
 			System.exit(1);
 		}
+
+		if (keyCode == KeyEvent.VK_BACK_QUOTE){
+			if (Game.isDevTime() == false && Game.isDevMode() == false){
+				Game.setDevMode(true);
+				Game.setDevTime(true);
+				new Thread(new SleepThread());
+			}
+		}
 	}
 	
 	public void untoggle(boolean toggle){
diff --git a/src/com/redomar/game/lib/SleepThread.java b/src/com/redomar/game/lib/SleepThread.java
new file mode 100644
index 0000000..409b802
--- /dev/null
+++ b/src/com/redomar/game/lib/SleepThread.java
@@ -0,0 +1,16 @@
+package com.redomar.game.lib;
+
+import com.redomar.game.Game;
+
+public class SleepThread implements Runnable{
+	
+	public void run() {
+		try {
+			Thread.sleep(1500);
+			Game.setDevTime(false);
+			System.out.println("time up");
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
+	}
+}

commit cf255b06206196811bcbec959e4561c3ea14431e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Mar 20 20:52:41 2014 +0000

    Added new methods of getting players distance
    Added a way to get the NPC (dummy) to get to the player if only the player is 10 pixles away.

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 4d439e8..d906683 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -1,5 +1,7 @@
 package com.redomar.game.entities;
 
+import java.util.List;
+
 import com.redomar.game.Game;
 import com.redomar.game.entities.efx.Swim;
 import com.redomar.game.gfx.Colours;
@@ -27,8 +29,11 @@ public class Dummy extends Mob {
 
 	public void tick() {
 
-		followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
-				.getPlayer().getY(), xa, ya, this);
+		List<Player> players = level.getPlayers(this, 10);
+		if (players.size() > 0) {
+			followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
+					.getPlayer().getY(), xa, ya, this);
+		}
 
 		setSwim(new Swim(level, getX(), getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 791fedc..fc2d66b 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -11,6 +11,7 @@ import javax.imageio.ImageIO;
 
 import com.redomar.game.Game;
 import com.redomar.game.entities.Entity;
+import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
@@ -192,5 +193,36 @@ public class LevelHandler {
 		player.setMoving(isMoving);
 		player.setMovingDir(movingDir);
 	}
+	
+	public List<Entity> getEntities(Entity e, int radius){
+		List<Entity> result = new ArrayList<Entity>();
+		int ex = e.getX();
+		int ey = e.getY();
+		for (int i = 0; i < entities.size(); i++) {
+			Entity entity = entities.get(i);
+			int x = entity.getX();
+			int y = entity.getY();
+			
+			int dx = Math.abs(x - ex);
+			int dy = Math.abs(y - ey);
+			
+			double distance = Math.sqrt((dx*2) + (dy*2));
+			if(distance <= radius){
+				result.add(entity);
+			}
+		}
+		return result;
+	}
+	
+	public List<Player> getPlayers(Entity e, int radius){
+		List<Entity> entities = getEntities(e, radius);
+		List<Player> result = new ArrayList<Player>();
+		for (int i = 0; i < entities.size(); i++) {
+			if (entities.get(i) instanceof Player) {
+				result.add((Player) entities.get(i));
+			}
+		}
+		return result;
+	}
 
 }

commit 88ecfe5ea5f42dc3da38787b09714676bb82a69c
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Mar 20 21:29:13 2014 +0000

    Fixed an issue with the facing of the player direction
    Fixed an issue where the player is facing the last way they were before the encount a wall
    Moved around collision code

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index d906683..6e9fb03 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -33,6 +33,8 @@ public class Dummy extends Mob {
 		if (players.size() > 0) {
 			followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
 					.getPlayer().getY(), xa, ya, this);
+		}else{
+			isMoving = false;
 		}
 
 		setSwim(new Swim(level, getX(), getY()));
@@ -62,6 +64,9 @@ public class Dummy extends Mob {
 		} else if (movingDir > 1) {
 			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
 			flipTop = (movingDir - 1) % 2;
+			if(!isMoving){
+				xTile = 4;
+			}
 		}
 
 		int modifier = 8 * scale;
@@ -109,39 +114,6 @@ public class Dummy extends Mob {
 		}
 	}
 
-	public boolean hasCollided(int xa, int ya) {
-		int xMin = 0;
-		int xMax = 7;
-		int yMin = 3;
-		int yMax = 7;
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMin)) {
-				return true;
-			}
-		}
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMax)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMin, y)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMax, y)) {
-				return true;
-			}
-		}
-
-		return false;
-	}
-
 	public Swim getSwim() {
 		return swim;
 	}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index e92fa1e..579d8b3 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -43,25 +43,57 @@ public abstract class Mob extends Entity {
 		//2 = Facing Left
 		//3 = Facing Right
 		
+		if (ya < 0) {
+			movingDir = 0;
+		}
+		if (ya > 0) {
+			movingDir = 1;
+		}
+		if (xa < 0) {
+			movingDir = 2;
+		}
+		if (xa > 0) {
+			movingDir = 3;
+		}
+		
 		if (!hasCollided(xa, ya)) {
-			if (ya < 0) {
-				movingDir = 0;
+			setX(getX() + xa * (int) speed);
+			setY(getY() + ya * (int) speed);
+		}
+	}
+
+	public boolean hasCollided(int xa, int ya){
+		int xMin = 0;
+		int xMax = 7;
+		int yMin = 3;
+		int yMax = 7;
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMin)) {
+				return true;
 			}
-			if (ya > 0) {
-				movingDir = 1;
+		}
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid(xa, ya, x, yMax)) {
+				return true;
 			}
-			if (xa < 0) {
-				movingDir = 2;
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMin, y)) {
+				return true;
 			}
-			if (xa > 0) {
-				movingDir = 3;
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid(xa, ya, xMax, y)) {
+				return true;
 			}
-			setX(getX() + xa * (int) speed);
-			setY(getY() + ya * (int) speed);
 		}
-	}
 
-	public abstract boolean hasCollided(int xa, int ya);
+		return false;
+	}
 
 	protected boolean isSolid(int xa, int ya, int x, int y) {
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 37120f7..7c0965a 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -161,39 +161,6 @@ public class Player extends Mob {
 		}
 	}
 
-	public boolean hasCollided(int xa, int ya) {
-		int xMin = 0;
-		int xMax = 7;
-		int yMin = 3;
-		int yMax = 7;
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMin)) {
-				return true;
-			}
-		}
-
-		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMax)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMin, y)) {
-				return true;
-			}
-		}
-
-		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMax, y)) {
-				return true;
-			}
-		}
-
-		return false;
-	}
-
 	public String getUsername() {
 		if (this.userName.isEmpty()) {
 			return guestPlayerName;

commit 8177ffca268699b7509224ed71e52a855c4ad10f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Mar 20 22:40:36 2014 +0000

    updated colision and player movement code

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 579d8b3..2cc822a 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -56,9 +56,16 @@ public abstract class Mob extends Entity {
 			movingDir = 3;
 		}
 		
-		if (!hasCollided(xa, ya)) {
-			setX(getX() + xa * (int) speed);
-			setY(getY() + ya * (int) speed);
+		for (int x = 0; x < Math.abs(xa); x++) {
+			if (!hasCollided(abs(xa), ya)) {
+				setX(getX() + abs(xa) * (int) speed);
+			}
+		}
+		
+		for (int y = 0; y < Math.abs(ya); y++) {
+			if (!hasCollided(xa, abs(ya))) {
+				setY(getY() + abs(ya) * (int) speed);
+			}
 		}
 	}
 
@@ -94,6 +101,25 @@ public abstract class Mob extends Entity {
 
 		return false;
 	}
+	
+	public boolean hasCollidedAlt(int xa, int ya){
+		boolean solid = false;
+		for (int c = 0; c < 4; c++) {
+			int xt = ((x + xa) - c % 2 * 8) / 8;
+			int yt = ((y + ya) - c / 2 * 8) / 8;
+			int ix = (int) Math.ceil(xt);
+			int iy = (int) Math.ceil(yt);
+			if (c % 2 == 0) ix = (int) Math.floor(xt);
+			if (c / 2 == 0) iy = (int) Math.floor(yt);
+			if(level.getTile(ix, iy).isSolid()) solid = true;
+		}
+		return solid;
+	}
+	
+	private int abs(int i){
+		if (i < 0) return -1;
+		return 1;
+	}
 
 	protected boolean isSolid(int xa, int ya, int x, int y) {
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 7c0965a..d3d3586 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -17,6 +17,8 @@ public class Player extends Mob {
 	private static Name customeName = new Name();
 	private Swim swim;
 
+	private static double speed = 1;
+	
 	private int colour, shirtCol, faceCol;
 	private int tickCount = 0;
 	private String userName;
@@ -27,7 +29,7 @@ public class Player extends Mob {
 
 	public Player(LevelHandler level, int x, int y, InputHandler input,
 			String userName,  int shirtCol,	int faceCol) {
-		super(level, "Player", x, y, 1);
+		super(level, "Player", x, y, speed);
 		this.input = input;
 		this.userName = userName;
 		this.faceCol = faceCol;
@@ -188,4 +190,12 @@ public class Player extends Mob {
 		this.swim = swim;
 	}
 
+	public static double getSpeed() {
+		return speed;
+	}
+
+	public static void setSpeed(double speed) {
+		Player.speed = speed;
+	}
+
 }

commit 9c09924a24bdf06d8cc06d2396f7bf0a7fd354fc
Merge: 839d1dc 8177ffc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Mar 20 22:41:42 2014 +0000

    Merge branch 'npc-dev' into aside

commit d645fba5cac17e2da065f40357014923b882c78e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 22 16:05:48 2014 +0000

    Changed the player postition from int to double
    appened some code back into int

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index de778a0..0d39f48 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -117,7 +117,7 @@ public class Game extends Canvas implements Runnable {
 		setMap("/levels/custom_level.png");
 		setMap(1);
 		Packet00Login loginPacket = new Packet00Login(player.getUsername(),
-				player.getX(), player.getY());
+				(int) player.getX(), (int) player.getY());
 
 		if (socketServer != null) {
 			socketServer.addConnection((PlayerMP) getPlayer(), loginPacket);
@@ -234,8 +234,8 @@ public class Game extends Canvas implements Runnable {
 			return;
 		}
 
-		int xOffset = getPlayer().getX() - (screen.getWidth() / 2);
-		int yOffset = getPlayer().getY() - (screen.getHeight() / 2);
+		int xOffset = (int) getPlayer().getX() - (screen.getWidth() / 2);
+		int yOffset = (int) getPlayer().getY() - (screen.getHeight() / 2);
 
 		getLevel().renderTiles(screen, xOffset, yOffset);
 
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 6e9fb03..20444e4 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -31,13 +31,13 @@ public class Dummy extends Mob {
 
 		List<Player> players = level.getPlayers(this, 10);
 		if (players.size() > 0) {
-			followMovementAI(getX(), getY(), Game.getPlayer().getX(), Game
+			followMovementAI((int) getX(), (int) getY(), (int) Game.getPlayer().getX(), (int) Game
 					.getPlayer().getY(), xa, ya, this);
 		}else{
 			isMoving = false;
 		}
 
-		setSwim(new Swim(level, getX(), getY()));
+		setSwim(new Swim(level, (int) getX(), (int) getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
 		isMagma = swimType[1];
@@ -70,8 +70,8 @@ public class Dummy extends Mob {
 		}
 
 		int modifier = 8 * scale;
-		int xOffset = getX() - modifier / 2;
-		int yOffset = getY() - modifier / 2 - 4;
+		int xOffset = (int) getX() - modifier / 2;
+		int yOffset = (int) getY() - modifier / 2 - 4;
 
 		if (isSwimming || isMagma || isMuddy) {
 			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
diff --git a/src/com/redomar/game/entities/Entity.java b/src/com/redomar/game/entities/Entity.java
index 4d88f72..0898944 100644
--- a/src/com/redomar/game/entities/Entity.java
+++ b/src/com/redomar/game/entities/Entity.java
@@ -5,7 +5,7 @@ import com.redomar.game.level.LevelHandler;
 
 public abstract class Entity {
 
-	protected int x, y;
+	protected double x, y;
 	protected LevelHandler level;
 
 	public Entity(LevelHandler level) {
@@ -20,7 +20,7 @@ public abstract class Entity {
 
 	public abstract void render(Screen screen);
 
-	public int getX() {
+	public double getX() {
 		return x;
 	}
 
@@ -28,7 +28,7 @@ public abstract class Entity {
 		this.x = x;
 	}
 
-	public int getY() {
+	public double getY() {
 		return y;
 	}
 
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 2cc822a..6f66d07 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -58,13 +58,13 @@ public abstract class Mob extends Entity {
 		
 		for (int x = 0; x < Math.abs(xa); x++) {
 			if (!hasCollided(abs(xa), ya)) {
-				setX(getX() + abs(xa) * (int) speed);
+				this.x += abs(xa) * (int) speed;
 			}
 		}
 		
 		for (int y = 0; y < Math.abs(ya); y++) {
 			if (!hasCollided(xa, abs(ya))) {
-				setY(getY() + abs(ya) * (int) speed);
+				this.y += abs(ya) * (int) speed;
 			}
 		}
 	}
@@ -105,8 +105,8 @@ public abstract class Mob extends Entity {
 	public boolean hasCollidedAlt(int xa, int ya){
 		boolean solid = false;
 		for (int c = 0; c < 4; c++) {
-			int xt = ((x + xa) - c % 2 * 8) / 8;
-			int yt = ((y + ya) - c / 2 * 8) / 8;
+			double xt = ((x + xa) - c % 2 * 8) / 8;
+			double yt = ((y + ya) - c / 2 * 8) / 8;
 			int ix = (int) Math.ceil(xt);
 			int iy = (int) Math.ceil(yt);
 			if (c % 2 == 0) ix = (int) Math.floor(xt);
@@ -127,9 +127,9 @@ public abstract class Mob extends Entity {
 			return false;
 		}
 
-		Tile lastTile = level.getTile((this.getX() + x) >> 3,
-				(this.getY() + y) >> 3);
-		Tile newtTile = level.getTile((this.getX() + x + xa) >> 3, (this.getY()
+		Tile lastTile = level.getTile(((int) this.getX() + x) >> 3,
+				((int) this.getY() + y) >> 3);
+		Tile newtTile = level.getTile(((int) this.getX() + x + xa) >> 3, ((int) this.getY()
 				+ y + ya) >> 3);
 
 		if (!lastTile.equals(newtTile) && newtTile.isSolid()) {
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index d3d3586..159bc29 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -61,7 +61,7 @@ public class Player extends Mob {
 			isMoving = true;
 
 			Packet02Move packet = new Packet02Move(this.getUsername(),
-					this.getX(), this.getY(), this.numSteps, this.isMoving,
+					(int) this.getX(), (int) this.getY(), this.numSteps, this.isMoving,
 					this.movingDir);
 			Game.getGame();
 			packet.writeData(Game.getSocketClient());
@@ -70,13 +70,13 @@ public class Player extends Mob {
 			isMoving = false;
 		}
 
-		setSwim(new Swim(level, getX(), getY()));
+		setSwim(new Swim(level, (int) getX(), (int) getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
 		isMagma = swimType[1];
 		isMuddy = swimType[2];
 
-		if (level.getTile(this.getX() >> 3, this.getY() >> 3).getId() == 11) {
+		if (level.getTile((int) this.getX() >> 3, (int) this.getY() >> 3).getId() == 11) {
 			changeLevels = true;
 		}
 
@@ -108,8 +108,8 @@ public class Player extends Mob {
 		}
 
 		int modifier = 8 * scale;
-		int xOffset = getX() - modifier / 2;
-		int yOffset = getY() - modifier / 2 - 4;
+		int xOffset = (int) getX() - modifier / 2;
+		int yOffset = (int) getY() - modifier / 2 - 4;
 
 		if (changeLevels) {
 			Game.setChangeLevel(true);
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index fc2d66b..f8b614f 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -196,12 +196,12 @@ public class LevelHandler {
 	
 	public List<Entity> getEntities(Entity e, int radius){
 		List<Entity> result = new ArrayList<Entity>();
-		int ex = e.getX();
-		int ey = e.getY();
+		int ex = (int) e.getX();
+		int ey = (int) e.getY();
 		for (int i = 0; i < entities.size(); i++) {
 			Entity entity = entities.get(i);
-			int x = entity.getX();
-			int y = entity.getY();
+			int x = (int) entity.getX();
+			int y = (int) entity.getY();
 			
 			int dx = Math.abs(x - ex);
 			int dy = Math.abs(y - ey);
diff --git a/src/com/redomar/game/net/GameServer.java b/src/com/redomar/game/net/GameServer.java
index 5449306..a38bf49 100644
--- a/src/com/redomar/game/net/GameServer.java
+++ b/src/com/redomar/game/net/GameServer.java
@@ -114,7 +114,7 @@ public class GameServer extends Thread {
 			} else {
 				sendData(packet.getData(), p.ipAddess, p.port);
 
-				packet = new Packet00Login(p.getUsername(), p.getX(), p.getY());
+				packet = new Packet00Login(p.getUsername(), (int) p.getX(), (int) p.getY());
 				sendData(packet.getData(), player.ipAddess, player.port);
 			}
 		}
diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index 5a6a7f9..a88a06f 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -12,8 +12,8 @@ public class Inventory {
 	private static InventoryWindow inv_window = new InventoryWindow();
 
 	public static void activate() {
-		x = Game.getPlayer().getX();
-		y = Game.getPlayer().getY();
+		x = (int) Game.getPlayer().getX();
+		y = (int) Game.getPlayer().getY();
 
 		if (Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8) {
 			if (!reset) {

commit fa95a8d28b0e4555a4286674880f7b2d53ea58f2
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Mar 22 17:29:24 2014 +0000

    Slowed down the speed of Dummy(NPC) and Reduced the area in which the NPC follows the player

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 20444e4..73450ee 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -12,16 +12,17 @@ public class Dummy extends Mob {
 
 	private int colour, shirtCol, faceCol; // = Colours.get(-1, 111, 240, 310);
 	private int tickCount = 0;
-	private int xa = 0;
-	private int ya = 0;
+	private double xa = 0;
+	private double ya = 0;
 	private boolean[] swimType;
 	private int[] swimColour;
+	private static double speed = 0.75;
 
 	private Swim swim;
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
-		super(level, "h", x, y, 1);
+		super(level, "h", x, y, speed);
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
@@ -29,10 +30,10 @@ public class Dummy extends Mob {
 
 	public void tick() {
 
-		List<Player> players = level.getPlayers(this, 10);
+		List<Player> players = level.getPlayers(this, 8);
 		if (players.size() > 0) {
 			followMovementAI((int) getX(), (int) getY(), (int) Game.getPlayer().getX(), (int) Game
-					.getPlayer().getY(), xa, ya, this);
+					.getPlayer().getY(), xa, ya, speed, this);
 		}else{
 			isMoving = false;
 		}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 6f66d07..4873413 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -28,7 +28,7 @@ public abstract class Mob extends Entity {
 		this.speed = speed;
 	}
 
-	public void move(int xa, int ya) {
+	public void move(double xa, double ya) {
 		if (xa != 0 && ya != 0) {
 			move(xa, 0);
 			move(0, ya);
@@ -55,46 +55,63 @@ public abstract class Mob extends Entity {
 		if (xa > 0) {
 			movingDir = 3;
 		}
-		
-		for (int x = 0; x < Math.abs(xa); x++) {
-			if (!hasCollided(abs(xa), ya)) {
-				this.x += abs(xa) * (int) speed;
+
+		while (xa != 0){
+			if (Math.abs(xa) > 1){
+				if (!hasCollided(abs(xa), ya)) {
+					this.x += abs(xa);
+				}
+				xa -= abs(xa);
+			} else {
+				if (!hasCollided(abs(xa), ya)) {
+					this.x += xa;
+				}
+				xa = 0;
 			}
 		}
 		
-		for (int y = 0; y < Math.abs(ya); y++) {
-			if (!hasCollided(xa, abs(ya))) {
-				this.y += abs(ya) * (int) speed;
+		while (ya != 0){
+			if (Math.abs(ya) > 1){
+				if (!hasCollided(xa, abs(ya))) {
+					this.y += abs(ya);
+				}
+				ya -= abs(ya);
+			} else {
+				if (!hasCollided(xa, abs(ya))) {
+					this.y += ya;
+				}
+				ya = 0;
 			}
 		}
+		
 	}
 
-	public boolean hasCollided(int xa, int ya){
+	public boolean hasCollided(double xa, double ya){
 		int xMin = 0;
 		int xMax = 7;
 		int yMin = 3;
 		int yMax = 7;
 
 		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMin)) {
+			if (isSolid((int) xa, (int) ya, x, yMin)) {
 				return true;
 			}
 		}
 
 		for (int x = xMin; x < xMax; x++) {
-			if (isSolid(xa, ya, x, yMax)) {
+			if (isSolid((int) xa, (int) ya, x, yMax)) {
 				return true;
 			}
 		}
 
 		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMin, y)) {
+			if (isSolid((int) xa, (int) ya, xMin, y)) {
 				return true;
 			}
 		}
 
 		for (int y = yMin; y < yMax; y++) {
-			if (isSolid(xa, ya, xMax, y)) {
+			if (isSolid((int) xa, (int) ya, xMax, y)) {
 				return true;
 			}
 		}
@@ -116,7 +133,7 @@ public abstract class Mob extends Entity {
 		return solid;
 	}
 	
-	private int abs(int i){
+	private int abs(double i){
 		if (i < 0) return -1;
 		return 1;
 	}
@@ -139,22 +156,22 @@ public abstract class Mob extends Entity {
 		return false;
 	}
 
-	protected void followMovementAI(int x, int y, int px, int py, int xa,
-			int ya, Mob mob) {
+	protected void followMovementAI(int x, int y, int px, int py, double xa,
+			double ya, double speed, Mob mob) {
 		ya = 0;
 		xa = 0;
 		if (px > x)
-			xa++;
+			xa+=speed;
 		if (px < x)
-			xa--;
+			xa-=speed;
 		if (py > y)
-			ya++;
+			ya+=speed;
 		if (py < y)
-			ya--;
+			ya-=speed;
 		moveMob(xa, ya, mob);
 	}
 
-	protected void moveMob(int xa, int ya, Mob mob) {
+	protected void moveMob(double xa, double ya, Mob mob) {
 		if (xa != 0 || ya != 0) {
 			mob.move(xa, ya);
 			mob.isMoving = true;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 159bc29..135b1bc 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -38,21 +38,21 @@ public class Player extends Mob {
 	}
 
 	public void tick() {
-		int xa = 0;
-		int ya = 0;
+		double xa = 0;
+		double ya = 0;
 
 		if (input != null) {
 			if (input.getUp().isPressed()) {
-				ya--;
+				ya -= speed;
 			}
 			if (input.getDown().isPressed()) {
-				ya++;
+				ya += speed;
 			}
 			if (input.getLeft().isPressed()) {
-				xa--;
+				xa -= speed;
 			}
 			if (input.getRight().isPressed()) {
-				xa++;
+				xa += speed;
 			}
 		}
 

commit 2805019c28bc75b9495b489c8d5ac26d372ea1ca
Merge: 9c09924 fa95a8d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:04:48 2014 +0100

    Merged npc-dev with aside
    Slowed down the NPC

commit ecc369319182d920103f925ab5e395cc50a7dff5
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:29:49 2014 +0100

    Disbaled the Inventory window

diff --git a/src/com/redomar/game/objects/Inventory.java b/src/com/redomar/game/objects/Inventory.java
index a88a06f..ad181a5 100644
--- a/src/com/redomar/game/objects/Inventory.java
+++ b/src/com/redomar/game/objects/Inventory.java
@@ -9,6 +9,7 @@ public class Inventory {
 	public static boolean open = false;
 	public static boolean closing;
 	public static boolean reset;
+	public static boolean enabled;
 	private static InventoryWindow inv_window = new InventoryWindow();
 
 	public static void activate() {
@@ -16,7 +17,7 @@ public class Inventory {
 		y = (int) Game.getPlayer().getY();
 
 		if (Game.getLevel().getTile(x >> 3, y >> 3).getId() == 8) {
-			if (!reset) {
+			if (enabled) {
 				if (!open) {
 					if (!closing) {
 						System.out.println("Opened\nInside this Bag their is:"

commit 804b1dbd14438c9f13cb6bcab3da2588e0764b0c
Merge: 2805019 ecc3693
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:31:24 2014 +0100

    Disbaled the Inventory windows
    Disabled the Inventory because it is not ready yet
    Merged hotfix into aside

commit fb2c1b1ad146a3bc3f289ad32ee43e05a2917719
Merge: ecc3693 bf18da9
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:51:43 2014 +0100

    Merge branch 'master' into hotfix
    
    Conflicts:
    	src/com/redomar/game/Game.java

commit b4162b412116000125be648973e664e8b286df6d
Merge: 804b1db fb2c1b1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:54:57 2014 +0100

    Merge branch 'hotfix' into aside

commit e863c6db09504a2a12b86ecfdfae0f602d126a5b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 16:58:00 2014 +0100

    Game version update v1.7 Alpha

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 8b6c250..e7832f4 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -34,7 +34,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.6.4 Alpha";
+	private static final String game_Version = "v1.7 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;

commit 4a0abea09dff6fde66e8b45fec24b34f0c54c332
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 17:04:45 2014 +0100

    Finialized 1.7
    Updated the jar and the Readme

diff --git a/README.md b/README.md
index 42ac116..7e7074d 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.6.4
+JavaGame Alpha v1.7
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 2f756e9..8c7b3c6 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ

commit 921f02e1c92312f906e33a23f77d8e0d43153b1d
Merge: bf18da9 4a0abea
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue Apr 8 17:06:12 2014 +0100

    v1.7 Alpha

commit ed090c335a35ff28ee030706b47fec9dc4abf138
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 18:45:25 2014 +0100

    Multiplayer disabled
    Multiplayer has been disabled due to bugs and unwanted results.
    Will be disabled until further notice

diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index ee81592..2bf615e 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -188,9 +188,11 @@ public class Menu implements Runnable {
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(125);
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-			Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(),
-					"Do you want to be the HOST?"));
-			if (Game.getJdata_Host() == 1) {
+			String multiMsg = "Sorry but multiplayer has been disabled on this version.\nIf you would like multiplayer checkout Alpha 1.6"; 
+			JOptionPane.showMessageDialog(Game.getGame(), multiMsg, "Multiplayer Warning", JOptionPane.WARNING_MESSAGE);
+			//Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(), "Do you want to be the HOST?"));
+			Game.setJdata_Host(1);
+			if (Game.getJdata_Host() != 1) { //Game.getJdata_Host() == 1
 				Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(),
 						"Enter the name \nleave blank for local"));
 			}

commit c5822ec26c990d6f4223720775b46bae405d4737
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 19:18:20 2014 +0100

    Updated the closing speed
    Slowed down the speed in which the game closes when 'Q' is pressed

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index e7832f4..f2c9d8e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -53,7 +53,8 @@ public class Game extends Canvas implements Runnable {
 	private static int fps;
 	private static int tps;
 	private static int steps;
-	private static boolean[] devMode = new boolean[2];
+	private static boolean devMode;
+	private static boolean closingMode;
 
 	private static JFrame frame;
 
@@ -100,7 +101,7 @@ public class Game extends Canvas implements Runnable {
 		getFrame().setVisible(true);
 
 		setDevMode(false);
-		setDevTime(false);
+		setClosing(false);
 	}
 
 	public void init() {
@@ -312,7 +313,7 @@ public class Game extends Canvas implements Runnable {
 		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
-		status(g, isDevMode());
+		status(g, isDevMode(), isClosing());
 		g.setColor(Color.WHITE);
 		if (noAudioDevice == true) {
 			g.setColor(Color.RED);
@@ -347,7 +348,7 @@ public class Game extends Canvas implements Runnable {
 		bs.show();
 	}
 
-	private void status(Graphics g, boolean TerminalMode) {
+	private void status(Graphics g, boolean TerminalMode, boolean TerminalQuit) {
 		if (TerminalMode == true){
 			g.setColor(Color.GREEN);
 			g.drawString("JavaGame Stats", 0, 10);
@@ -358,6 +359,13 @@ public class Game extends Canvas implements Runnable {
 			g.drawString("Foot Steps: " + steps, 0, 40);
 			g.drawString("NPC: " + WordUtils.capitalize(String.valueOf(isNpc())) , 0, 55);
 		}
+		if (TerminalQuit == true){
+			g.setColor(Color.BLACK);
+			g.fillRect(0, 0, getWidth(), getHeight());
+			g.setColor(Color.RED);
+			g.drawString("Shutting down the Game", (getWidth()/2)-70, (getHeight()/2)-8);
+			g.dispose();
+		}
 	}
 
 	public static void main(String[] args) {
@@ -545,19 +553,19 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	public static boolean isDevMode() {
-		return devMode[0];
+		return devMode;
 	}
 
 	public static void setDevMode(boolean devMode) {
-		Game.devMode[0] = devMode;
+		Game.devMode = devMode;
 	}
 
-	public static boolean isDevTime() {
-		return devMode[1];
+	public static boolean isClosing() {
+		return closingMode;
 	}
 
-	public static void setDevTime(boolean devTime) {
-		Game.devMode[1] = devTime;
+	public static void setClosing(boolean closing) {
+		Game.closingMode = closing;
 	}
 
 }
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 9acdca1..186d215 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -106,6 +106,12 @@ public class InputHandler implements KeyListener {
 			}
 		}
 		if (keyCode == KeyEvent.VK_Q){
+			Game.setClosing(true);
+			try {
+				Thread.sleep(1000);
+			} catch (InterruptedException e) {
+				e.printStackTrace();
+			}
 			Game.getLevel().removeEntity(Game.getPlayer().getSantizedUsername());
 			Game.setRunning(false);
 			Game.getFrame().dispose();
@@ -113,9 +119,8 @@ public class InputHandler implements KeyListener {
 		}
 
 		if (keyCode == KeyEvent.VK_BACK_QUOTE){
-			if (Game.isDevTime() == false && Game.isDevMode() == false){
+			if (Game.isClosing() == false && Game.isDevMode() == false){
 				Game.setDevMode(true);
-				Game.setDevTime(true);
 				new Thread(new SleepThread());
 			}
 		}
diff --git a/src/com/redomar/game/lib/SleepThread.java b/src/com/redomar/game/lib/SleepThread.java
index 409b802..92dc7db 100644
--- a/src/com/redomar/game/lib/SleepThread.java
+++ b/src/com/redomar/game/lib/SleepThread.java
@@ -7,7 +7,7 @@ public class SleepThread implements Runnable{
 	public void run() {
 		try {
 			Thread.sleep(1500);
-			Game.setDevTime(false);
+			Game.setClosing(false);
 			System.out.println("time up");
 		} catch (InterruptedException e) {
 			e.printStackTrace();

commit bcb480e0d9a423062cc5f7f54acd21f2ed6074fb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 19:55:57 2014 +0100

    Created vector2i

diff --git a/src/com/redomar/game/lib/utils/Vector2i.java b/src/com/redomar/game/lib/utils/Vector2i.java
new file mode 100644
index 0000000..b800c10
--- /dev/null
+++ b/src/com/redomar/game/lib/utils/Vector2i.java
@@ -0,0 +1,54 @@
+package com.redomar.game.lib.utils;
+
+public class Vector2i {
+	
+	private int x, y;
+	
+	public Vector2i(){
+		set(0, 0);
+	}
+	
+	public Vector2i(int x, int y){
+		set(x, y);
+	}
+	
+	public Vector2i(Vector2i vector){
+		set(vector.x, vector.y);
+	}
+	
+	public Vector2i add(Vector2i vector){
+		this.x += vector.x;
+		this.y += vector.y;
+		return this;
+	}
+	
+	public Vector2i subtract(Vector2i vector){
+		this.x -= vector.x;
+		this.y -= vector.y;
+		return this;
+	}
+	
+	public void set(int x, int y){
+		this.x = x;
+		this.y = y;
+	}
+
+	public int getX() {
+		return x;
+	}
+
+	public Vector2i setX(int x) {
+		this.x = x;
+		return this;
+	}
+
+	public int getY() {
+		return y;
+	}
+
+	public Vector2i setY(int y) {
+		this.y = y;
+		return this;
+	}
+
+}

commit a3334b1231369b8bb509dab99ad0726b20d5e14a
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 21:58:59 2014 +0100

    A* Search Algorithm pathfinding
    Wrote the A* Search Algorithm, not yet implemented

diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index f8b614f..512bc7b 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -4,6 +4,8 @@ import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.logging.Level;
 
@@ -15,6 +17,7 @@ import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
+import com.redomar.game.lib.utils.Vector2i;
 import com.redomar.game.net.packets.Packet01Disconnect;
 
 public class LevelHandler {
@@ -26,6 +29,16 @@ public class LevelHandler {
 	private String imagePath;
 	private BufferedImage image;
 
+	private Comparator<Node> nodeSorter = new Comparator<Node>() {
+
+		public int compare(Node n0, Node n1) {
+			if(n1.fCost < n0.fCost) return +1;
+			if(n1.fCost > n0.fCost) return -1;
+			return 0;
+		}
+		
+	};
+	
 	public LevelHandler(String imagePath) {
 
 		if (imagePath != null) {
@@ -194,6 +207,60 @@ public class LevelHandler {
 		player.setMovingDir(movingDir);
 	}
 	
+	public List<Node> findPath(Vector2i start, Vector2i goal){
+		List<Node> openList = new ArrayList<Node>();
+		List<Node> closedList = new ArrayList<Node>();
+		Node current = new Node(start, null, 0, getDistance(start, goal));
+		openList.add(current);
+		while(openList.size() > 0){
+			Collections.sort(openList, nodeSorter);
+			current = openList.get(0);
+			if(current.tile.equals(goal)){
+				List<Node> path = new ArrayList<Node>();
+				while (current.parent != null) {
+					path.add(current);
+					current = current.parent;
+				}
+				openList.clear();
+				closedList.clear();
+				return path;
+			}
+			openList.remove(current);
+			closedList.add(current);
+			for(int i = 0; i < 9; i++){
+				if(i == 4) continue;
+				int x = current.tile.getX();
+				int y = current.tile.getY();
+				int xi = (i % 3) - 1;
+				int yi = (i / 3) - 1;
+				Tile at = getTile(x + xi,y + yi);
+				if(at == null) continue;
+				if(at.isSolid()) continue;
+				Vector2i a = new Vector2i(x + xi, y + yi);
+				double gCost = current.gCost + getDistance(current.tile, a);
+				double hCost = getDistance(a, goal);
+				Node node = new Node(a, current, gCost, hCost);
+				if(isVectorInList(closedList, a) && gCost >= node.gCost) continue;
+				if(!isVectorInList(openList, a) || gCost < node.gCost) openList.add(node);
+			}
+		}
+		closedList.clear();
+		return null;
+	}
+	
+	private boolean isVectorInList(List<Node> list, Vector2i vector){
+		for(Node n : list){
+			if(n.tile.equals(vector)) return true;
+		}
+		return false;
+	}
+	
+	private double getDistance(Vector2i tile, Vector2i goal){
+		double dx = tile.getX() - goal.getX();
+		double dy = tile.getY() - goal.getY();
+		return Math.sqrt(dx * dx + dy * dy);
+	}
+	
 	public List<Entity> getEntities(Entity e, int radius){
 		List<Entity> result = new ArrayList<Entity>();
 		int ex = (int) e.getX();
diff --git a/src/com/redomar/game/level/Node.java b/src/com/redomar/game/level/Node.java
new file mode 100644
index 0000000..bd1d4a6
--- /dev/null
+++ b/src/com/redomar/game/level/Node.java
@@ -0,0 +1,19 @@
+package com.redomar.game.level;
+
+import com.redomar.game.lib.utils.Vector2i;
+
+public class Node {
+	
+	public Vector2i tile;
+	public Node parent;
+	public double fCost, gCost, hCost;
+	
+	public Node(Vector2i tile, Node parent, double gCost, double hCost){
+		this.tile = tile;
+		this.parent = parent;
+		this.gCost = gCost;
+		this.hCost = hCost;
+		this.fCost = (this.gCost + this.hCost);
+	}
+
+}
diff --git a/src/com/redomar/game/lib/utils/Vector2i.java b/src/com/redomar/game/lib/utils/Vector2i.java
index b800c10..5d08a0b 100644
--- a/src/com/redomar/game/lib/utils/Vector2i.java
+++ b/src/com/redomar/game/lib/utils/Vector2i.java
@@ -28,6 +28,13 @@ public class Vector2i {
 		return this;
 	}
 	
+	public boolean equals(Object object){
+		if (!(object instanceof Vector2i)) return false;
+		Vector2i vector = (Vector2i) object;
+		if(vector.getX() == this.getX() && vector.getY() == this.getY()) return true;
+		return false;
+	}
+	
 	public void set(int x, int y){
 		this.x = x;
 		this.y = y;

commit 33b04cf35613edf67b34c1b0f329b1a252699498
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 23:23:13 2014 +0100

    Implemented A* Search Algorithm to NPC

diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 73450ee..4803cb2 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -7,6 +7,7 @@ import com.redomar.game.entities.efx.Swim;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.level.Node;
 
 public class Dummy extends Mob {
 
@@ -17,6 +18,8 @@ public class Dummy extends Mob {
 	private boolean[] swimType;
 	private int[] swimColour;
 	private static double speed = 0.75;
+	private List<Node> path = null;
+	private int time = 0;
 
 	private Swim swim;
 
@@ -30,13 +33,10 @@ public class Dummy extends Mob {
 
 	public void tick() {
 
-		List<Player> players = level.getPlayers(this, 8);
-		if (players.size() > 0) {
-			followMovementAI((int) getX(), (int) getY(), (int) Game.getPlayer().getX(), (int) Game
-					.getPlayer().getY(), xa, ya, speed, this);
-		}else{
-			isMoving = false;
-		}
+		//List<Player> players = level.getPlayers(this, 8);
+		aStarMovementAI((int) getX(), (int) getY(), (int) Game.getPlayer().getX(), (int) Game
+					.getPlayer().getY(), xa, ya, speed, this, path, time);
+		
 
 		setSwim(new Swim(level, (int) getX(), (int) getY()));
 		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
@@ -49,6 +49,7 @@ public class Dummy extends Mob {
 	}
 
 	public void render(Screen screen) {
+		time++;
 		int xTile = 8;
 		int yTile = 28;
 		int walkingSpeed = 4;
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 74c1949..8575812 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -1,9 +1,12 @@
 package com.redomar.game.entities;
 
+import java.util.List;
 import java.util.Random;
 
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.level.Node;
 import com.redomar.game.level.tiles.Tile;
+import com.redomar.game.lib.utils.Vector2i;
 
 public abstract class Mob extends Entity {
 
@@ -155,6 +158,25 @@ public abstract class Mob extends Entity {
 
 		return false;
 	}
+	
+	protected void aStarMovementAI(int x, int y, int px, int py, double xa,
+			double ya, double speed, Mob mob, List<Node> path, int time){
+		xa = 0;
+		ya = 0;
+		Vector2i start = new Vector2i(x >> 3, y >> 3);
+		Vector2i goal = new Vector2i(px >> 3, py >> 3);
+		path = level.findPath(start, goal);
+		if(path != null) {
+			if(path.size() > 0){
+				Vector2i vector = path.get(path.size() - 1).tile;
+				if(x < vector.getX() << 3) xa++;
+				if(x > vector.getX() << 3) xa--;
+				if(y < vector.getY() << 3) ya++;
+				if(y > vector.getY() << 3) ya--;
+			}
+		}
+		moveMob(xa, ya, mob);
+	}
 
 	protected void followMovementAI(int x, int y, int px, int py, double xa,
 			double ya, double speed, Mob mob) {

commit 5d7933bf3bc779ffca4a4debfc738cce294ca10d
Merge: c5822ec 33b04cf
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Apr 12 23:26:06 2014 +0100

    A* Search Algorithm

commit 416b7d5254234eaba0c989f9a0ecebe84598d7ac
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Apr 21 15:21:36 2014 +0100

    Fixed a bug
    fixed a bug where the game would crash if the player was next to the wall
    modifed the mod speeds

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 8575812..bcfc12c 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -90,9 +90,9 @@ public abstract class Mob extends Entity {
 	}
 
 	public boolean hasCollided(double xa, double ya){
-		int xMin = 0;
-		int xMax = 7;
-		int yMin = 3;
+		int xMin = -2;
+		int xMax = 8;
+		int yMin = 0;
 		int yMax = 7;
 
 		for (int x = xMin; x < xMax; x++) {
@@ -169,13 +169,13 @@ public abstract class Mob extends Entity {
 		if(path != null) {
 			if(path.size() > 0){
 				Vector2i vector = path.get(path.size() - 1).tile;
-				if(x < vector.getX() << 3) xa++;
-				if(x > vector.getX() << 3) xa--;
-				if(y < vector.getY() << 3) ya++;
-				if(y > vector.getY() << 3) ya--;
+				if(x < vector.getX() << 3) xa =+ speed;
+				if(x > vector.getX() << 3) xa =- speed;
+				if(y < vector.getY() << 3) ya =+ speed;
+				if(y > vector.getY() << 3) ya =- speed;
+				moveMob(xa, ya, mob);
 			}
 		}
-		moveMob(xa, ya, mob);
 	}
 
 	protected void followMovementAI(int x, int y, int px, int py, double xa,

commit fa55aa8f7f6a6f202aed5c0339a1234b5a3e26ed
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 5 18:05:38 2014 +0100

    Changed collisions for mobs
    Seperated mob and player collision, now they have there own individual collision boundries
    Modified A* search algorithm so mobs can go diagonal freely
    Started expirimenting with javadocs

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index f2c9d8e..94d0093 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -86,6 +86,10 @@ public class Game extends Canvas implements Runnable {
 	private GameServer socketServer;
 	private Printing print = new Printing();
 
+	/**
+	 * @author Redomar
+	 * @version Alpha 1.7
+	 */
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index 4803cb2..cde6c76 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -20,12 +20,13 @@ public class Dummy extends Mob {
 	private static double speed = 0.75;
 	private List<Node> path = null;
 	private int time = 0;
+	private static int[] collisionBoders = {0, 7, 0, 7};
 
 	private Swim swim;
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
-		super(level, "h", x, y, speed);
+		super(level, "h", x, y, speed, collisionBoders);
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index bcfc12c..3c34871 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -22,13 +22,21 @@ public abstract class Mob extends Entity {
 	protected boolean isMuddy = false;
 	protected boolean changeLevels = false;
 	protected int ticker;
-
-	public Mob(LevelHandler level, String name, int x, int y, double speed) {
+	/**
+	 * [0] Contains the <strong>xMin</strong><br>
+	 * [1] Contains the <strong>xMax</strong><br>
+	 * [2] Contains the <strong>yMin</strong><br>
+	 * [3] Contains the <strong>yMax
+	 */
+	protected int[] collisionBoders = new int[4];
+
+	public Mob(LevelHandler level, String name, int x, int y, double speed, int[] collisionBoders) {
 		super(level);
 		this.name = name;
 		this.setX(x);
 		this.setY(y);
 		this.speed = speed;
+		this.collisionBoders = collisionBoders;
 	}
 
 	public void move(double xa, double ya) {
@@ -90,10 +98,10 @@ public abstract class Mob extends Entity {
 	}
 
 	public boolean hasCollided(double xa, double ya){
-		int xMin = -2;
-		int xMax = 8;
-		int yMin = 0;
-		int yMax = 7;
+		int xMin = collisionBoders[0];
+		int xMax = collisionBoders[1];
+		int yMin = collisionBoders[2];
+		int yMax = collisionBoders[3];
 
 		for (int x = xMin; x < xMax; x++) {
 			if (isSolid((int) xa, (int) ya, x, yMin)) {
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 135b1bc..a476aa9 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -24,12 +24,13 @@ public class Player extends Mob {
 	private String userName;
 	private boolean[] swimType;
 	private int[] swimColour;
+	private static int[] collisionBoders = {-2, 8, 0, 7};
 
 	public static String guestPlayerName = customeName.setName("Player ");
 
 	public Player(LevelHandler level, int x, int y, InputHandler input,
 			String userName,  int shirtCol,	int faceCol) {
-		super(level, "Player", x, y, speed);
+		super(level, "Player", x, y, speed, collisionBoders);
 		this.input = input;
 		this.userName = userName;
 		this.faceCol = faceCol;
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 512bc7b..843cc11 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -237,7 +237,7 @@ public class LevelHandler {
 				if(at == null) continue;
 				if(at.isSolid()) continue;
 				Vector2i a = new Vector2i(x + xi, y + yi);
-				double gCost = current.gCost + getDistance(current.tile, a);
+				double gCost = current.gCost + (getDistance(current.tile, a) == 1 ? 1 : 0.95);
 				double hCost = getDistance(a, goal);
 				Node node = new Node(a, current, gCost, hCost);
 				if(isVectorInList(closedList, a) && gCost >= node.gCost) continue;

commit f80d4d362646e244cd45f13dedcae0b26b7e7ee5
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 5 18:44:46 2014 +0100

    Fixed an issue with player names
    When you press cancel in the select username window then the game would crash
    Slightly formated some code.

diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 2bf615e..be6724b 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -112,7 +112,9 @@ public class Menu implements Runnable {
 		if (isGameOver()) {
 			g.drawString("GAME OVER... What will you do now?", 35, 30);
 		} else {
-			String name = (Game.getJdata_UserName().length() >= 1) ? WordUtils.capitalizeFully(Game.getJdata_UserName()).toString() : "Player";
+			String name = (Game.getJdata_UserName().length() >= 1) ? WordUtils
+					.capitalizeFully(Game.getJdata_UserName()).toString()
+					: "Player";
 			g.drawString("Welcome to JavaGame " + name, 35, 30);
 		}
 		g.drawLine(10, (HEIGHT * 3), 10, 10);
@@ -188,41 +190,44 @@ public class Menu implements Runnable {
 			splash.setProgress(92, "Aquring data: Multiplayer");
 			Thread.sleep(125);
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-			String multiMsg = "Sorry but multiplayer has been disabled on this version.\nIf you would like multiplayer checkout Alpha 1.6"; 
-			JOptionPane.showMessageDialog(Game.getGame(), multiMsg, "Multiplayer Warning", JOptionPane.WARNING_MESSAGE);
-			//Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(), "Do you want to be the HOST?"));
+			String multiMsg = "Sorry but multiplayer has been disabled on this version.\nIf you would like multiplayer checkout Alpha 1.6";
+			JOptionPane.showMessageDialog(Game.getGame(), multiMsg,
+					"Multiplayer Warning", JOptionPane.WARNING_MESSAGE);
+			// Game.setJdata_Host(JOptionPane.showConfirmDialog(Game.getGame(),
+			// "Do you want to be the HOST?"));
 			Game.setJdata_Host(1);
-			if (Game.getJdata_Host() != 1) { //Game.getJdata_Host() == 1
+			if (Game.getJdata_Host() != 1) { // Game.getJdata_Host() == 1
 				Game.setJdata_IP(JOptionPane.showInputDialog(Game.getGame(),
 						"Enter the name \nleave blank for local"));
 			}
 			Thread.sleep(125);
 			splash.setProgress(94, "Aquring data: Username");
+			String s = JOptionPane.showInputDialog(Game.getGame(),
+					"Enter a name");
+			if (s != null) {
+				Game.setJdata_UserName(s);
+			}
 			Thread.sleep(125);
-			splash.setProgress(95, "Initalizing as Server:Host");
-			Game.setJdata_UserName(JOptionPane.showInputDialog(Game.getGame(),
-					"Enter a name"));
-			Thread.sleep(250);
 			splash.setProgress(96, "Collecting Player Data");
-			Object[] options = { "African", "Caucasian"};
+			Object[] options = { "African", "Caucasian" };
 			int n = JOptionPane.showOptionDialog(frame,
-					"Choose a race for the charater to be",
-					"Choose a race", JOptionPane.YES_NO_OPTION,
-					JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
-			if(n == 0){
+					"Choose a race for the charater to be", "Choose a race",
+					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
+					null, options, options[0]);
+			if (n == 0) {
 				Game.setAternateColsR(true);
-			}else{
+			} else {
 				Game.setAternateColsR(false);
 			}
 			Thread.sleep(250);
-			Object[] options1 = { "Orange", "Black"};
+			Object[] options1 = { "Orange", "Black" };
 			int n1 = JOptionPane.showOptionDialog(frame,
 					"Which Colour do you want the shirt to be?",
 					"Choose a shirt Colour", JOptionPane.YES_NO_OPTION,
 					JOptionPane.QUESTION_MESSAGE, null, options1, options1[0]);
-			if(n1 == 0){
+			if (n1 == 0) {
 				Game.setAternateColsS(true);
-			}else{
+			} else {
 				Game.setAternateColsS(false);
 			}
 			splash.setProgress(97, "Connecting as" + Game.getJdata_UserName());

commit 34073ce02b85af9fb5dd39b802764139be290237
Merge: 5d7933b f80d4d3
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 5 18:48:10 2014 +0100

    Merge branch 'feature' into aside

commit c9109470b34f612d8b01f03947b8eaa6aebc2da7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 6 12:47:16 2014 +0100

    v1.7.1 Alpha - A* Search

diff --git a/README.md b/README.md
index 7e7074d..2d140d6 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1,19 @@
-JavaGame Alpha v1.7
+JavaGame Alpha v1.7.1 - 1 Year anniversary
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
 
 #####What is JavaGame?
-JavaGame is a game project that have been working on since May. I have added many features to the game, but now I am running out of ideas.
+JavaGame is a game project that have been working on since May 2013. I have added many features to the game over the last year and I plan on adding even more features. This game is purely for my own sake to practice my skills in Java.
 
 #####Why name it JavaGame?
-Well i'm still not sure what exactly i'm going to do with it, and I haven't thought of a suitable name either
+Well i'm still not sure what exactly i'm going to do with it, and I haven't thought of a suitable name either. I hope to change the name in the near future
+
+#####Play the Game
+* For latest version get 
+   * [v1.7.1](https://github.com/redomar/JavaGame/releases/tag/v1.7.1)
+* For multiplayer enabled get 
+   * [v1.5.4](https://github.com/redomar/JavaGame/releases/tag/v1.5.4)
 
 #####How to download this repository for eclipse tutorial
 Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pages](http://redomar.github.io/JavaGame/)
@@ -22,9 +28,8 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
   * Click Add Class Folder
   * Check the /res folder and hit finish
   * Make the changes in the /src folder
-* Commit your changes (```git commit -am "Change Title"```)
+* Commit your changes (```git commit -m "Change Title"```)
 * Push to the branch (```git push origin my_branch```)
 * Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
 
-[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
-
+[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
\ No newline at end of file
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 8c7b3c6..f18c4c2 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 94d0093..bb79537 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -34,7 +34,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.7 Alpha";
+	private static final String game_Version = "v1.7.1 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
@@ -88,7 +88,7 @@ public class Game extends Canvas implements Runnable {
 
 	/**
 	 * @author Redomar
-	 * @version Alpha 1.7
+	 * @version Alpha 1.7.1
 	 */
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));

commit c202a792a675a8d1ef3399ff42aecb1ae697b65e
Merge: 921f02e c910947
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 6 12:53:02 2014 +0100

    v1.7.1 Alpha - A* Search

commit 9b807f704c5347ef97ff71b83f30cc7eead885bc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 6 13:42:37 2014 +0100

    Fixed wording mistake

diff --git a/README.md b/README.md
index 2d140d6..72d94e3 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.7.1 - 1 Year anniversary
+JavaGame Alpha v1.7.1 - 1 Year Anniversary
 =====================
 
 [![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)

commit bc16a682b92520e46cdcbf11a40608bad7748b24
Merge: c202a79 9b807f7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 6 13:43:30 2014 +0100

    Merge branch 'hotfix'

commit c0217fa07f09982ea141aa9f06fea210cc560bc1
Merge: c910947 9b807f7
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 6 13:44:01 2014 +0100

    Merge branch 'hotfix' into aside

commit 76b913eff8e24efc3a6b087ef886750110b71857
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Tue May 13 17:19:28 2014 +0100

    Fixed some input problems
    Found an error where the game crashes if you spawn a NPC while the player is moving

diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 186d215..93a6924 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -4,6 +4,7 @@ import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
 import com.redomar.game.lib.SleepThread;
+import com.redomar.game.script.PopUp;
 import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
@@ -31,6 +32,11 @@ public class InputHandler implements KeyListener {
 				numTimesPressed++;
 			}
 		}
+		
+		public void off(){
+			pressed = false;
+			numTimesPressed = 0;
+		}
 	}
 
 	private Key up = new Key();
@@ -40,7 +46,8 @@ public class InputHandler implements KeyListener {
 	private Printing print = new Printing();
 	private boolean PlayMusic = false;
 	private int map;
-	private boolean untoggle = false;
+	private boolean ignoreInput = false;
+	private PopUp popup = new PopUp();
 	
 	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
@@ -55,7 +62,7 @@ public class InputHandler implements KeyListener {
 	}
 
 	public void toggleKey(int keyCode, boolean isPressed) {
-		if(untoggle == false){
+		if(isIgnoreInput() == false){
 			if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
 				getUp().toggle(isPressed);
 			}
@@ -68,7 +75,8 @@ public class InputHandler implements KeyListener {
 			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
 				getRight().toggle(isPressed);
 			}
-		}else{
+		}
+		if(isIgnoreInput() == true){
 			getUp().toggle(false);
 			getDown().toggle(false);
 			getLeft().toggle(false);
@@ -92,6 +100,14 @@ public class InputHandler implements KeyListener {
 			}
 		}
 		if (keyCode == KeyEvent.VK_N) {
+			if (Game.getPlayer().isMoving()){
+				setIgnoreInput(true);
+				int n = popup.Warn("Stop moving before spawing dummy AI");
+				if(n == 0){
+					setIgnoreInput(false);
+				}
+				return;
+			}
 			if (Game.isNpc() == false) {
 				Game.setNpc(true);
 				Game.npcSpawn();
@@ -127,7 +143,7 @@ public class InputHandler implements KeyListener {
 	}
 	
 	public void untoggle(boolean toggle){
-		this.untoggle = toggle;
+		this.ignoreInput = toggle;
 	}
 	
 
@@ -179,12 +195,12 @@ public class InputHandler implements KeyListener {
 		this.right = right;
 	}
 
-	public boolean isUntoggle() {
-		return untoggle;
+	public boolean isIgnoreInput() {
+		return ignoreInput;
 	}
 
-	public void setUntoggle(boolean untoggle) {
-		this.untoggle = untoggle;
+	public void setIgnoreInput(boolean ignoreInput) {
+		this.ignoreInput = ignoreInput;
 	}
 
 }
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 3c34871..029e69b 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -225,6 +225,10 @@ public abstract class Mob extends Entity {
 	public void setMoving(boolean isMoving) {
 		this.isMoving = isMoving;
 	}
+	
+	public boolean isMoving(){
+		return this.isMoving;
+	}
 
 	public void setMovingDir(int movingDir) {
 		this.movingDir = movingDir;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index a476aa9..66e9482 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -43,16 +43,16 @@ public class Player extends Mob {
 		double ya = 0;
 
 		if (input != null) {
-			if (input.getUp().isPressed()) {
+			if (input.getUp().isPressed() && input.isIgnoreInput() == false) {
 				ya -= speed;
 			}
-			if (input.getDown().isPressed()) {
+			if (input.getDown().isPressed() && input.isIgnoreInput() == false) {
 				ya += speed;
 			}
-			if (input.getLeft().isPressed()) {
+			if (input.getLeft().isPressed() && input.isIgnoreInput() == false) {
 				xa -= speed;
 			}
-			if (input.getRight().isPressed()) {
+			if (input.getRight().isPressed() && input.isIgnoreInput() == false) {
 				xa += speed;
 			}
 		}
diff --git a/src/com/redomar/game/script/PopUp.java b/src/com/redomar/game/script/PopUp.java
new file mode 100644
index 0000000..7d402f6
--- /dev/null
+++ b/src/com/redomar/game/script/PopUp.java
@@ -0,0 +1,21 @@
+package com.redomar.game.script;
+
+import javax.swing.JFrame;
+import javax.swing.JOptionPane;
+
+import com.redomar.game.Game;
+
+public class PopUp{
+	
+	private JFrame frame;
+	
+	public PopUp(){
+		frame = Game.getFrame();
+	}
+	
+	public int Warn(String msg){
+		Object[] options = {"Continue"};
+		return JOptionPane.showOptionDialog(frame, msg, "Notice", JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE,
+				null, options, options[0]);
+	}
+}

commit fb07e5de7ce09360faad8ce704489b333964a4af
Merge: c0217fa 76b913e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon May 19 12:39:14 2014 +0100

    Merge branch 'feature' into aside

commit d68125201d51aedc1c542f31e8223c37d4bf9f83
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Jun 21 16:31:45 2014 +0100

    Added new sprites for gun wielding and bullets

diff --git a/res/sprite_sheet.png b/res/sprite_sheet.png
index 6173e9a..fa82e7f 100644
Binary files a/res/sprite_sheet.png and b/res/sprite_sheet.png differ

commit 3f37b8e756530714998605906e7d6e3db459e297
Author: posmicanomaly <eqkakg@gmail.com>
Date:   Mon Jun 23 12:40:35 2014 -0400

    Improved userName Centering above player's sprite.

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index a476aa9..4fe4810 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -157,10 +157,19 @@ public class Player extends Mob {
 			;
 		}
 
-		if (userName != null) {
-			Font.render(userName, screen, xOffset
-					- ((userName.length() - 1) / 2 * 8), yOffset - 10,
+		if (userName != null) {	
+			/*
+			 * Improved userName centering above player's sprite.
+			 * Using player's own x value cast to int with an adjusted formula
+			 * -posmicanomaly
+			 */
+			int fontCharSize = 8;
+			Font.render(userName, 
+					screen, 
+					(int)x - ((userName.length() /2) * fontCharSize),
+					yOffset - 10,
 					Colours.get(-1, -1, -1, 555), 1);
+			
 		}
 	}
 

commit 4e2a1d87bc0e740af1c67e1f94008a0ef176b38a
Merge: bc16a68 3f37b8e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Jun 23 19:35:44 2014 +0100

    Merge pull request #3 from posmicanomaly/master
    
    Improved userName Centering above player's sprite.

commit a334c35de63888f655c25572533b07e7b48d66d4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Jul 10 02:04:48 2014 +0100

    Added mouse handler (controller) into the game
    Added a mouse handler which will be used for projectiles for the future

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index bb79537..290142b 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -71,6 +71,7 @@ public class Game extends Canvas implements Runnable {
 			BufferedImage.TYPE_INT_RGB);
 	private Screen screen;
 	private static InputHandler input;
+	private static MouseHandler mouse;
 	private WindowHandler window;
 	private LevelHandler level;
 	private Player player;
@@ -124,6 +125,7 @@ public class Game extends Canvas implements Runnable {
 
 		screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png"));
 		input = new InputHandler(this);
+		setMouse(new MouseHandler(this));
 		setWindow(new WindowHandler(this));
 		setMap("/levels/custom_level.png");
 		setMap(1);
@@ -305,6 +307,7 @@ public class Game extends Canvas implements Runnable {
 		Graphics g = bs.getDrawGraphics();
 		g.drawRect(0, 0, getWidth(), getHeight());
 		g.drawImage(image, 0, 0, getWidth(), getHeight() - 30, null);
+		status(g, isDevMode(), isClosing());
 		// Font.render("Hi", screen, 0, 0, Colours.get(-1, -1, -1, 555), 1);
 		g.drawImage(image2, 0, getHeight() - 30, getWidth(), getHeight(), null);
 		g.setColor(Color.WHITE);
@@ -317,7 +320,6 @@ public class Game extends Canvas implements Runnable {
 		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
-		status(g, isDevMode(), isClosing());
 		g.setColor(Color.WHITE);
 		if (noAudioDevice == true) {
 			g.setColor(Color.RED);
@@ -354,7 +356,7 @@ public class Game extends Canvas implements Runnable {
 
 	private void status(Graphics g, boolean TerminalMode, boolean TerminalQuit) {
 		if (TerminalMode == true){
-			g.setColor(Color.GREEN);
+			g.setColor(Color.CYAN);
 			g.drawString("JavaGame Stats", 0, 10);
 			g.drawString("FPS/TPS: " + fps + "/" + tps, 0, 25);
 			if ((player.getNumSteps() & 15) == 15) {
@@ -362,6 +364,10 @@ public class Game extends Canvas implements Runnable {
 			}
 			g.drawString("Foot Steps: " + steps, 0, 40);
 			g.drawString("NPC: " + WordUtils.capitalize(String.valueOf(isNpc())) , 0, 55);
+			g.drawString("Mouse: " + getMouse().getX() + "x |" + getMouse().getY() + "y", 0, 70);
+			if(getMouse().getButton() != -1) g.drawString("Button: " + getMouse().getButton(), 0, 85);
+			g.setColor(Color.CYAN);
+			g.fillRect(getMouse().getX()-12, getMouse().getY()-12, 24, 24);
 		}
 		if (TerminalQuit == true){
 			g.setColor(Color.BLACK);
@@ -556,6 +562,14 @@ public class Game extends Canvas implements Runnable {
 		Game.input = input;
 	}
 
+	public static MouseHandler getMouse() {
+		return mouse;
+	}
+
+	public static void setMouse(MouseHandler mouse) {
+		Game.mouse = mouse;
+	}
+
 	public static boolean isDevMode() {
 		return devMode;
 	}
diff --git a/src/com/redomar/game/MouseHandler.java b/src/com/redomar/game/MouseHandler.java
new file mode 100644
index 0000000..4bcba74
--- /dev/null
+++ b/src/com/redomar/game/MouseHandler.java
@@ -0,0 +1,59 @@
+package com.redomar.game;
+
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+import java.awt.event.MouseMotionListener;
+
+public class MouseHandler implements MouseListener, MouseMotionListener{
+	
+	private static int mouseX = -1;
+	private static int mouseY = -1;
+	private static int mouseB = -1;
+	
+	public MouseHandler(Game game){
+		game.addMouseListener(this);
+		game.addMouseMotionListener(this);
+	}
+
+	public int getX() {
+		return mouseX;
+	}
+
+	public int getY() {
+		return mouseY;
+	}
+
+	public int getButton() {
+		return mouseB;
+	}
+
+	public void mouseDragged(MouseEvent e) {
+		
+	}
+
+	public void mouseMoved(MouseEvent e) {
+		mouseX = e.getX();
+		mouseY = e.getY();
+	}
+
+	public void mouseClicked(MouseEvent e) {
+		
+	}
+	
+	public void mousePressed(MouseEvent e) {
+		mouseB = e.getButton();
+	}
+
+	public void mouseReleased(MouseEvent e) {
+		mouseB = -1;
+	}
+
+	public void mouseEntered(MouseEvent e) {
+		
+	}
+
+	public void mouseExited(MouseEvent e) {
+		
+	}
+	
+}

commit a622bceb06bc750c34d1dd34be1c15f5565c67cb
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Jul 20 16:49:18 2014 +0100

    Added angles for projectiles
    
    Calculated the angle the mouse is from the player on screen.

diff --git a/src/com/redomar/game/MouseHandler.java b/src/com/redomar/game/MouseHandler.java
index 4bcba74..8e5e4b3 100644
--- a/src/com/redomar/game/MouseHandler.java
+++ b/src/com/redomar/game/MouseHandler.java
@@ -28,7 +28,8 @@ public class MouseHandler implements MouseListener, MouseMotionListener{
 	}
 
 	public void mouseDragged(MouseEvent e) {
-		
+		mouseX = e.getX();
+		mouseY = e.getY();
 	}
 
 	public void mouseMoved(MouseEvent e) {
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 029e69b..b590df1 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -7,6 +7,8 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.level.Node;
 import com.redomar.game.level.tiles.Tile;
 import com.redomar.game.lib.utils.Vector2i;
+import com.redomar.game.script.PrintTypes;
+import com.redomar.game.script.Printing;
 
 public abstract class Mob extends Entity {
 
@@ -209,6 +211,12 @@ public abstract class Mob extends Entity {
 			mob.isMoving = false;
 		}
 	}
+	
+	protected void shoot(double x, double y, double dir){
+		Printing print = new Printing();
+		dir = dir * (180 /Math.PI); 
+		print.print("Angle: "+ dir, PrintTypes.GAME);
+	}
 
 	public String getName() {
 		return name;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 66e9482..03f448b 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -56,6 +56,13 @@ public class Player extends Mob {
 				xa += speed;
 			}
 		}
+		
+		if (Game.getMouse().getButton() == 1){
+			double dx = Game.getMouse().getX() - 480/2;
+			double dy = Game.getMouse().getY() - 320/2;
+			double dir = Math.atan2(dy, dx);
+			shoot(x, y, dir);
+		}
 
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);

commit d6a48c191761ade1af3e4c32ecf657500ebb8831
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jul 30 16:49:40 2014 +0100

    Added new projectile small bullets
    
    Now can be fired.
    No collision detection.

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 290142b..c07fc7e 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -262,6 +262,7 @@ public class Game extends Canvas implements Runnable {
 		 */
 
 		getLevel().renderEntities(screen);
+		getLevel().renderProjectileEntities(screen);
 
 		for (int y = 0; y < screen.getHeight(); y++) {
 			for (int x = 0; x < screen.getWidth(); x++) {
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index b590df1..152b238 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -1,14 +1,15 @@
 package com.redomar.game.entities;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
+import com.redomar.game.entities.projectiles.Projectile;
+import com.redomar.game.entities.projectiles.Small;
 import com.redomar.game.level.LevelHandler;
 import com.redomar.game.level.Node;
 import com.redomar.game.level.tiles.Tile;
 import com.redomar.game.lib.utils.Vector2i;
-import com.redomar.game.script.PrintTypes;
-import com.redomar.game.script.Printing;
 
 public abstract class Mob extends Entity {
 
@@ -31,6 +32,8 @@ public abstract class Mob extends Entity {
 	 * [3] Contains the <strong>yMax
 	 */
 	protected int[] collisionBoders = new int[4];
+	
+	protected List<Projectile> projectiles = new ArrayList<Projectile>();
 
 	public Mob(LevelHandler level, String name, int x, int y, double speed, int[] collisionBoders) {
 		super(level);
@@ -213,9 +216,12 @@ public abstract class Mob extends Entity {
 	}
 	
 	protected void shoot(double x, double y, double dir){
-		Printing print = new Printing();
-		dir = dir * (180 /Math.PI); 
-		print.print("Angle: "+ dir, PrintTypes.GAME);
+//		dir = dir * (180 /Math.PI); 
+//		Printing print = new Printing();
+//		print.print("Angle: "+ dir, PrintTypes.GAME);
+		Projectile p = new Small(level, (int) x,(int) y, dir);
+		projectiles.add(p);
+		level.addProjectileEntities(p);
 	}
 
 	public String getName() {
diff --git a/src/com/redomar/game/entities/projectiles/Projectile.java b/src/com/redomar/game/entities/projectiles/Projectile.java
new file mode 100644
index 0000000..6a870a0
--- /dev/null
+++ b/src/com/redomar/game/entities/projectiles/Projectile.java
@@ -0,0 +1,24 @@
+package com.redomar.game.entities.projectiles;
+
+import com.redomar.game.entities.Entity;
+import com.redomar.game.level.LevelHandler;
+
+public abstract class Projectile extends Entity{
+
+	protected final double xOrigin, yOrigin;
+	protected double angle;
+	protected double nx, ny;
+	protected double speed, rate, range, damage;
+	
+	public Projectile(LevelHandler level, int x, int y, double dir) {
+		super(level);
+		xOrigin = x;
+		yOrigin = y;
+		angle = dir;
+		this.x = x;
+		this.y = y;
+	}
+
+	protected abstract void move();
+	
+}
diff --git a/src/com/redomar/game/entities/projectiles/Small.java b/src/com/redomar/game/entities/projectiles/Small.java
new file mode 100644
index 0000000..331408d
--- /dev/null
+++ b/src/com/redomar/game/entities/projectiles/Small.java
@@ -0,0 +1,33 @@
+package com.redomar.game.entities.projectiles;
+
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public class Small extends Projectile{
+
+	public Small(LevelHandler level, int x, int y, double dir) {
+		super(level, x, y, dir);
+		range = 200;
+		damage = 20;
+		rate = 15;
+		speed = 4;
+		
+		nx = speed * Math.cos(angle);
+		ny = speed * Math.sin(angle);
+	}
+
+	public void tick() {
+		move();
+	}
+	
+	protected void move(){
+		x += nx;
+		y += ny;
+	}
+
+	public void render(Screen screen) {
+		screen.render((int)x,(int)y, 8 * 32, Colours.get(-1, 222, 333, 555), 0x00, 1);
+	}
+
+}
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 843cc11..4f8bd8a 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -26,6 +26,7 @@ public class LevelHandler {
 	private int width;
 	private int height;
 	private List<Entity> entities = new ArrayList<Entity>();
+	private List<Entity> entities_p = new ArrayList<Entity>();
 	private String imagePath;
 	private BufferedImage image;
 
@@ -111,12 +112,20 @@ public class LevelHandler {
 	public synchronized List<Entity> getEntities() {
 		return this.entities;
 	}
+	
+	public synchronized List<Entity> getProjectileEntities() {
+		return this.entities_p;
+	}
 
 	public void tick() {
 		for (Entity e : getEntities()) {
 			e.tick();
 		}
-
+		
+		for (Entity e : getProjectileEntities()) {
+			e.tick();
+		}
+		
 		for (Tile t : Tile.getTiles()) {
 			if (t == null) {
 				break;
@@ -154,6 +163,12 @@ public class LevelHandler {
 			e.render(screen);
 		}
 	}
+	
+	public void renderProjectileEntities(Screen screen){
+		for (Entity e : getProjectileEntities()){
+			e.render(screen);
+		}
+	}
 
 	public Tile getTile(int x, int y) {
 		if (0 > x || x >= width || 0 > y || y >= height) {
@@ -165,10 +180,18 @@ public class LevelHandler {
 	public void addEntity(Entity entity) {
 		this.getEntities().add(entity);
 	}
+	
+	public void addProjectileEntities(Entity entity) {
+		this.getProjectileEntities().add(entity);
+	}
 
 	public void removeEntity(Entity entity) {
 		this.getEntities().remove(entity);
 	}
+	
+	public void removeProjectileEntities(Entity entity) {
+		this.getProjectileEntities().remove(entity);
+	}
 
 	public void removeEntity(String username) {
 		int index = 0;

commit 4318696bd56fcdadc524e2fcdb756aeb298cc574
Merge: fb07e5d d6a48c1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jul 30 17:01:45 2014 +0100

    Initial stage of shooting

commit 419571b09c8cbb35c91dd3c2e7d1797e8a5b8767
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jul 30 18:11:14 2014 +0100

    Added projectile range
    
    moved the projectile origin to the left arm of the the player

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 152b238..ef552a7 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -29,7 +29,7 @@ public abstract class Mob extends Entity {
 	 * [0] Contains the <strong>xMin</strong><br>
 	 * [1] Contains the <strong>xMax</strong><br>
 	 * [2] Contains the <strong>yMin</strong><br>
-	 * [3] Contains the <strong>yMax
+	 * [3] Contains the <strong>yMax</strong>
 	 */
 	protected int[] collisionBoders = new int[4];
 	
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 03f448b..89d243c 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -3,6 +3,7 @@ package com.redomar.game.entities;
 import com.redomar.game.Game;
 import com.redomar.game.InputHandler;
 import com.redomar.game.entities.efx.Swim;
+import com.redomar.game.entities.projectiles.Projectile;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -63,6 +64,14 @@ public class Player extends Mob {
 			double dir = Math.atan2(dy, dx);
 			shoot(x, y, dir);
 		}
+		
+		for (int i = 0; i < projectiles.size(); i++) {
+			Projectile p = projectiles.get(i);
+			if(p.isRemoved()){
+				projectiles.remove(i);
+				Game.getLevel().removeProjectileEntities(p);
+			}
+		}
 
 		if (xa != 0 || ya != 0) {
 			move(xa, ya);
diff --git a/src/com/redomar/game/entities/projectiles/Projectile.java b/src/com/redomar/game/entities/projectiles/Projectile.java
index 6a870a0..99f9ce6 100644
--- a/src/com/redomar/game/entities/projectiles/Projectile.java
+++ b/src/com/redomar/game/entities/projectiles/Projectile.java
@@ -1,5 +1,7 @@
 package com.redomar.game.entities.projectiles;
 
+import java.util.Random;
+
 import com.redomar.game.entities.Entity;
 import com.redomar.game.level.LevelHandler;
 
@@ -8,7 +10,10 @@ public abstract class Projectile extends Entity{
 	protected final double xOrigin, yOrigin;
 	protected double angle;
 	protected double nx, ny;
-	protected double speed, rate, range, damage;
+	protected double speed, rate, range, damage, distance;
+	protected Random life = new Random();
+	
+	private boolean removed = false;
 	
 	public Projectile(LevelHandler level, int x, int y, double dir) {
 		super(level);
@@ -21,4 +26,16 @@ public abstract class Projectile extends Entity{
 
 	protected abstract void move();
 	
+	public void remove(){
+		setRemoved(true);
+	}
+
+	public boolean isRemoved() {
+		return removed;
+	}
+
+	public void setRemoved(boolean removed) {
+		this.removed = removed;
+	}
+	
 }
diff --git a/src/com/redomar/game/entities/projectiles/Small.java b/src/com/redomar/game/entities/projectiles/Small.java
index 331408d..3f69e1e 100644
--- a/src/com/redomar/game/entities/projectiles/Small.java
+++ b/src/com/redomar/game/entities/projectiles/Small.java
@@ -8,7 +8,7 @@ public class Small extends Projectile{
 
 	public Small(LevelHandler level, int x, int y, double dir) {
 		super(level, x, y, dir);
-		range = 200;
+		range = life.nextInt(25) + 50;
 		damage = 20;
 		rate = 15;
 		speed = 4;
@@ -24,10 +24,14 @@ public class Small extends Projectile{
 	protected void move(){
 		x += nx;
 		y += ny;
+		
+		double distance = Math.sqrt(Math.abs((xOrigin - x)*(xOrigin - x)+(yOrigin - y)*(yOrigin - y)));
+		this.distance = distance;
+		if(this.distance > range) remove();
 	}
 
 	public void render(Screen screen) {
-		screen.render((int)x,(int)y, 8 * 32, Colours.get(-1, 222, 333, 555), 0x00, 1);
+		screen.render((int)x + 6,(int)y, 8 * 32, Colours.get(-1, 222, 333, 555), 0x00, 1);
 	}
 
 }

commit 26a10292adf3c1fe5b8aff06347ad9bc8b28b061
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jul 30 18:49:22 2014 +0100

    Added projectile firing rate
    
    Moved back the origin of the projectile to the centre.

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 89d243c..c1b3c0a 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -4,6 +4,7 @@ import com.redomar.game.Game;
 import com.redomar.game.InputHandler;
 import com.redomar.game.entities.efx.Swim;
 import com.redomar.game.entities.projectiles.Projectile;
+import com.redomar.game.entities.projectiles.Small;
 import com.redomar.game.gfx.Colours;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
@@ -26,6 +27,7 @@ public class Player extends Mob {
 	private boolean[] swimType;
 	private int[] swimColour;
 	private static int[] collisionBoders = {-2, 8, 0, 7};
+	private int fireRate = 0;
 
 	public static String guestPlayerName = customeName.setName("Player ");
 
@@ -37,6 +39,7 @@ public class Player extends Mob {
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
+		fireRate = Small.FIRE_RATE;
 	}
 
 	public void tick() {
@@ -58,11 +61,14 @@ public class Player extends Mob {
 			}
 		}
 		
-		if (Game.getMouse().getButton() == 1){
+		if(fireRate > 0) fireRate--;
+		
+		if (Game.getMouse().getButton() == 1 && fireRate <= 0){
 			double dx = Game.getMouse().getX() - 480/2;
 			double dy = Game.getMouse().getY() - 320/2;
 			double dir = Math.atan2(dy, dx);
 			shoot(x, y, dir);
+			fireRate = Small.FIRE_RATE;
 		}
 		
 		for (int i = 0; i < projectiles.size(); i++) {
diff --git a/src/com/redomar/game/entities/projectiles/Projectile.java b/src/com/redomar/game/entities/projectiles/Projectile.java
index 99f9ce6..f4c7cf1 100644
--- a/src/com/redomar/game/entities/projectiles/Projectile.java
+++ b/src/com/redomar/game/entities/projectiles/Projectile.java
@@ -10,7 +10,7 @@ public abstract class Projectile extends Entity{
 	protected final double xOrigin, yOrigin;
 	protected double angle;
 	protected double nx, ny;
-	protected double speed, rate, range, damage, distance;
+	protected double speed, range, damage, distance;
 	protected Random life = new Random();
 	
 	private boolean removed = false;
diff --git a/src/com/redomar/game/entities/projectiles/Small.java b/src/com/redomar/game/entities/projectiles/Small.java
index 3f69e1e..1d89d41 100644
--- a/src/com/redomar/game/entities/projectiles/Small.java
+++ b/src/com/redomar/game/entities/projectiles/Small.java
@@ -5,13 +5,14 @@ import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.LevelHandler;
 
 public class Small extends Projectile{
+	
+	public static final int FIRE_RATE = 12;
 
 	public Small(LevelHandler level, int x, int y, double dir) {
 		super(level, x, y, dir);
-		range = life.nextInt(25) + 50;
+		range = 50 + life.nextInt(5);
 		damage = 20;
-		rate = 15;
-		speed = 4;
+		speed = 3;
 		
 		nx = speed * Math.cos(angle);
 		ny = speed * Math.sin(angle);
@@ -31,7 +32,7 @@ public class Small extends Projectile{
 	}
 
 	public void render(Screen screen) {
-		screen.render((int)x + 6,(int)y, 8 * 32, Colours.get(-1, 222, 333, 555), 0x00, 1);
+		screen.render((int)x,(int)y, 8 * 32, Colours.get(-1, 222, 333, 555), 0x00, 1);
 	}
 
 }

commit de61c817dd152dbe0d78e7345fa2e2b5919877d1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Jul 30 21:02:22 2014 +0100

    Added projectile collision
    
    Disabled firing while swimming
    Slowed down bullet speed.

diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index c1b3c0a..f21bd8d 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -64,11 +64,13 @@ public class Player extends Mob {
 		if(fireRate > 0) fireRate--;
 		
 		if (Game.getMouse().getButton() == 1 && fireRate <= 0){
-			double dx = Game.getMouse().getX() - 480/2;
-			double dy = Game.getMouse().getY() - 320/2;
-			double dir = Math.atan2(dy, dx);
-			shoot(x, y, dir);
-			fireRate = Small.FIRE_RATE;
+			if(!swim.isActive(swimType)){
+				double dx = Game.getMouse().getX() - 480/2;
+				double dy = Game.getMouse().getY() - 320/2;
+				double dir = Math.atan2(dy, dx);
+				shoot(x, y, dir);
+				fireRate = Small.FIRE_RATE;
+			}
 		}
 		
 		for (int i = 0; i < projectiles.size(); i++) {
diff --git a/src/com/redomar/game/entities/projectiles/Projectile.java b/src/com/redomar/game/entities/projectiles/Projectile.java
index f4c7cf1..94b5d2c 100644
--- a/src/com/redomar/game/entities/projectiles/Projectile.java
+++ b/src/com/redomar/game/entities/projectiles/Projectile.java
@@ -4,6 +4,7 @@ import java.util.Random;
 
 import com.redomar.game.entities.Entity;
 import com.redomar.game.level.LevelHandler;
+import com.redomar.game.level.tiles.Tile;
 
 public abstract class Projectile extends Entity{
 
@@ -26,6 +27,56 @@ public abstract class Projectile extends Entity{
 
 	protected abstract void move();
 	
+	public boolean tileCollision(double xa, double ya, int nx, int ny){
+		int xMin = 0;
+		int xMax = 7;
+		int yMin = 0;
+		int yMax = 7;
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid((int) xa, (int) ya, x, yMin, nx, ny)) {
+				return true;
+			}
+		}
+
+		for (int x = xMin; x < xMax; x++) {
+			if (isSolid((int) xa, (int) ya, x, yMax, nx, ny)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid((int) xa, (int) ya, xMin, y, nx, ny)) {
+				return true;
+			}
+		}
+
+		for (int y = yMin; y < yMax; y++) {
+			if (isSolid((int) xa, (int) ya, xMax, y, nx, ny)) {
+				return true;
+			}
+		}
+
+		return false;
+	}
+	
+	private boolean isSolid(int xa, int ya, int x, int y, int nx, int ny) {
+		if (level == null) {
+			return false;
+		}
+
+		Tile lastTile = level.getTile((nx + x) >> 3,
+				(ny + y) >> 3);
+		Tile newtTile = level.getTile((nx + x + xa) >> 3, (ny
+				+ y + ya) >> 3);
+
+		if (!lastTile.equals(newtTile) && newtTile.isSolid()) {
+			return true;
+		}
+
+		return false;
+	}
+
 	public void remove(){
 		setRemoved(true);
 	}
diff --git a/src/com/redomar/game/entities/projectiles/Small.java b/src/com/redomar/game/entities/projectiles/Small.java
index 1d89d41..c3193a0 100644
--- a/src/com/redomar/game/entities/projectiles/Small.java
+++ b/src/com/redomar/game/entities/projectiles/Small.java
@@ -6,19 +6,20 @@ import com.redomar.game.level.LevelHandler;
 
 public class Small extends Projectile{
 	
-	public static final int FIRE_RATE = 12;
+	public static final int FIRE_RATE = 7;
 
 	public Small(LevelHandler level, int x, int y, double dir) {
 		super(level, x, y, dir);
-		range = 50 + life.nextInt(5);
+		range = 125 - life.nextInt(30);
 		damage = 20;
-		speed = 3;
+		speed = 2;
 		
 		nx = speed * Math.cos(angle);
 		ny = speed * Math.sin(angle);
 	}
 
 	public void tick() {
+		if (tileCollision(x, y,(int) nx,(int) ny)) remove();
 		move();
 	}
 	

commit 004129b21cb89ba74b3f1db4588b844e0eaa8697
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Aug 7 03:25:07 2014 +0100

    Added new NPC Vendor
    
    Added a new NPC who is a vendor or trader
    Added a new random movement AI for vendor
    Changed the spawn position of dummy closer to the player spawn

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index c07fc7e..da6b052 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -17,6 +17,7 @@ import org.apache.commons.lang3.text.WordUtils;
 import com.redomar.game.entities.Dummy;
 import com.redomar.game.entities.Player;
 import com.redomar.game.entities.PlayerMP;
+import com.redomar.game.entities.Vendor;
 import com.redomar.game.gfx.Screen;
 import com.redomar.game.gfx.SpriteSheet;
 import com.redomar.game.level.LevelHandler;
@@ -76,6 +77,7 @@ public class Game extends Canvas implements Runnable {
 	private LevelHandler level;
 	private Player player;
 	private Dummy dummy;
+	private Vendor vendor;
 	private Music music = new Music();
 	private Font font = new Font();
 	private Thread musicThread = new Thread(music, "MUSIC");
@@ -138,6 +140,9 @@ public class Game extends Canvas implements Runnable {
 
 		// socketClient.sendData("ping".getBytes());
 		loginPacket.writeData(getSocketClient());
+		
+		game.setVendor(new Vendor(getLevel(), "g", 215, 215, 304, 543));
+		getLevel().addEntity(getVendor());
 	}
 
 	public void setMap(String Map_str) {
@@ -161,7 +166,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void npcSpawn() {
 		if (isNpc() == true) {
-			game.setDummy(new Dummy(Game.getLevel(), "h", 215, 215, 500, 543));
+			game.setDummy(new Dummy(Game.getLevel(), "h", 100, 150, 500, 543));
 			game.level.addEntity(Game.getDummy());
 		}
 	}
@@ -298,9 +303,11 @@ public class Game extends Canvas implements Runnable {
 			if (getMap() == 1) {
 				setMap("/levels/water_level.png");
 				setMap(2);
+				getLevel().removeEntity(getVendor());
 			} else if (getMap() == 2) {
 				setMap("/levels/custom_level.png");
 				setMap(1);
+				getLevel().addEntity(getVendor());
 			}
 			changeLevel = false;
 		}
@@ -495,6 +502,14 @@ public class Game extends Canvas implements Runnable {
 		this.dummy = dummy;
 	}
 
+	public Vendor getVendor() {
+		return vendor;
+	}
+
+	public void setVendor(Vendor vendor) {
+		this.vendor = vendor;
+	}
+
 	public static String getJdata_IP() {
 		return Jdata_IP;
 	}
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index ef552a7..4b8ef20 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -205,6 +205,25 @@ public abstract class Mob extends Entity {
 			ya-=speed;
 		moveMob(xa, ya, mob);
 	}
+	
+	protected double[] randomMovementAI(double x, double y, double xa, double ya, int tick) {
+		if (tick % (random.nextInt(50) + 30) == 0) {
+			xa = random.nextInt(3) - 1;
+			ya = random.nextInt(3) - 1;
+			if (random.nextInt(4) == 0) {
+				xa = 0;
+				ya = 0;
+			}
+		}
+		if(x <= 180){
+			xa = 1;
+			ya = -1;
+		}
+		double move[] = new double[2];
+		move[0] = xa;
+		move[1] = ya;
+		return move;
+	}
 
 	protected void moveMob(double xa, double ya, Mob mob) {
 		if (xa != 0 || ya != 0) {
diff --git a/src/com/redomar/game/entities/Vendor.java b/src/com/redomar/game/entities/Vendor.java
new file mode 100644
index 0000000..2699bc8
--- /dev/null
+++ b/src/com/redomar/game/entities/Vendor.java
@@ -0,0 +1,147 @@
+package com.redomar.game.entities;
+
+import java.util.List;
+
+import com.redomar.game.entities.efx.Swim;
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+import com.redomar.game.level.Node;
+
+public class Vendor extends Mob {
+
+	private int colour, shirtCol, faceCol; // = Colours.get(-1, 111, 240, 310);
+	private int tickCount = 0;
+	private int tick = 0;
+	private double xa = 0;
+	private double ya = 0;
+	private double[] movement;
+	private boolean[] swimType;
+	private int[] swimColour;
+	private static double speed = 0.75;
+	private List<Node> path = null;
+	private int time = 0;
+	private static int[] collisionBoders = {0, 7, 0, 7};
+
+	private Swim swim;
+
+	public Vendor(LevelHandler level, String name, int x, int y, int shirtCol,
+			int faceCol) {
+		super(level, "h", x, y, speed, collisionBoders);
+		this.faceCol = faceCol;
+		this.shirtCol = shirtCol;
+		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
+	}
+
+	public void tick() {
+		
+		tick++;
+		movement = randomMovementAI(x, y, xa, ya, tick);
+		
+		this.xa = movement[0];
+		this.ya = movement[1];
+		
+		moveMob(xa, ya, this);
+		
+		setSwim(new Swim(level, (int) getX(), (int) getY()));
+		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		isSwimming = swimType[0];
+		isMagma = swimType[1];
+		isMuddy = swimType[2];
+
+		tickCount++;
+
+	}
+
+	public void render(Screen screen) {
+		setTime(getTime() + 1);
+		int xTile = 8;
+		int yTile = 28;
+		int walkingSpeed = 4;
+		int flipTop = (numSteps >> walkingSpeed) & 1;
+		int flipBottom = (numSteps >> walkingSpeed) & 1;
+
+		if (movingDir == 1) {
+			xTile += 2;
+			if (!isMoving || swim.isActive(swimType)){
+				yTile -= 2;
+			}
+		} else if (movingDir == 0 && !isMoving || movingDir == 0 && swim.isActive(swimType)) {
+			yTile -= 2;
+		} else if (movingDir > 1) {
+			xTile += 4 + ((numSteps >> walkingSpeed) & 1) * 2;
+			flipTop = (movingDir - 1) % 2;
+			if(!isMoving){
+				xTile = 4;
+			}
+		}
+
+		int modifier = 8 * scale;
+		int xOffset = (int) getX() - modifier / 2;
+		int yOffset = (int) getY() - modifier / 2 - 4;
+
+		if (isSwimming || isMagma || isMuddy) {
+			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			
+			int waterColour = 0;
+			yOffset += 4;
+
+			colour = Colours.get(-1, 111, -1, faceCol);
+
+			if (tickCount % 60 < 15) {
+				waterColour = Colours.get(-1, -1, swimColour[0], -1);
+			} else if (15 <= tickCount % 60 && tickCount % 60 < 30) {
+				yOffset--;
+				waterColour = Colours.get(-1, swimColour[1], swimColour[2], -1);
+			} else if (30 <= tickCount % 60 && tickCount % 60 < 45) {
+				waterColour = Colours.get(-1, swimColour[2], -1, swimColour[1]);
+			} else {
+				yOffset--;
+				waterColour = Colours.get(-1, -1, swimColour[1], swimColour[2]);
+			}
+
+			screen.render(xOffset, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x00, 1);
+			screen.render(xOffset + 8, yOffset + 3, 31 + 31 * 32, waterColour,
+					0x01, 1);
+		}
+
+		screen.render((xOffset + (modifier * flipTop)), yOffset,
+				(xTile + yTile * 32), colour, flipTop, scale);
+		screen.render((xOffset + modifier - (modifier * flipTop)), yOffset,
+				((xTile + 1) + yTile * 32), colour, flipTop, scale);
+		if (!isSwimming && !isMagma && !isMuddy) {
+			screen.render((xOffset + (modifier * flipBottom)),
+					(yOffset + modifier), (xTile + (yTile + 1) * 32), colour,
+					flipBottom, scale);
+			screen.render((xOffset + modifier - (modifier * flipBottom)),
+					(yOffset + modifier), ((xTile + 1) + (yTile + 1) * 32),
+					colour, flipBottom, scale);
+			colour = Colours.get(-1, 111, shirtCol, faceCol);
+		}
+	}
+
+	public Swim getSwim() {
+		return swim;
+	}
+
+	public void setSwim(Swim swim) {
+		this.swim = swim;
+	}
+
+	public List<Node> getPath() {
+		return path;
+	}
+
+	public void setPath(List<Node> path) {
+		this.path = path;
+	}
+
+	public int getTime() {
+		return time;
+	}
+
+	public void setTime(int time) {
+		this.time = time;
+	}
+}

commit 8323f7b8965a67d794240767932c2341822fb3ff
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Aug 7 03:59:54 2014 +0100

    Improvements: entities and console printing
    
    Properly named NPC's so that can be printed
    Improved removing entities when leaving levels and prints to console as
    message.
    Improved console printing.

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index da6b052..11e85c4 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -141,7 +141,7 @@ public class Game extends Canvas implements Runnable {
 		// socketClient.sendData("ping".getBytes());
 		loginPacket.writeData(getSocketClient());
 		
-		game.setVendor(new Vendor(getLevel(), "g", 215, 215, 304, 543));
+		game.setVendor(new Vendor(getLevel(), "Vendor", 215, 215, 304, 543));
 		getLevel().addEntity(getVendor());
 	}
 
@@ -166,7 +166,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void npcSpawn() {
 		if (isNpc() == true) {
-			game.setDummy(new Dummy(Game.getLevel(), "h", 100, 150, 500, 543));
+			game.setDummy(new Dummy(Game.getLevel(), "Dummy", 100, 150, 500, 543));
 			game.level.addEntity(Game.getDummy());
 		}
 	}
@@ -300,14 +300,17 @@ public class Game extends Canvas implements Runnable {
 		}
 
 		if (changeLevel == true) {
+			print.print("Teleported into new world", PrintTypes.GAME);
 			if (getMap() == 1) {
 				setMap("/levels/water_level.png");
-				setMap(2);
+				getLevel().removeEntity(getDummy()); setNpc(false);
 				getLevel().removeEntity(getVendor());
+				setMap(2);
 			} else if (getMap() == 2) {
 				setMap("/levels/custom_level.png");
-				setMap(1);
+				getLevel().removeEntity(getDummy()); setNpc(false);
 				getLevel().addEntity(getVendor());
+				setMap(1);
 			}
 			changeLevel = false;
 		}
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 93a6924..213b39d 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -95,7 +95,6 @@ public class InputHandler implements KeyListener {
 			// }
 			if (Game.getMap() == 2) {
 				Game.setChangeLevel(true);
-				Game.getLevel().removeEntity(Game.getDummy());
 				Game.setNpc(false);
 			}
 		}
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index cde6c76..c0f7270 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -26,7 +26,7 @@ public class Dummy extends Mob {
 
 	public Dummy(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
-		super(level, "h", x, y, speed, collisionBoders);
+		super(level, name, x, y, speed, collisionBoders);
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
diff --git a/src/com/redomar/game/entities/Entity.java b/src/com/redomar/game/entities/Entity.java
index 0898944..c423d44 100644
--- a/src/com/redomar/game/entities/Entity.java
+++ b/src/com/redomar/game/entities/Entity.java
@@ -6,6 +6,7 @@ import com.redomar.game.level.LevelHandler;
 public abstract class Entity {
 
 	protected double x, y;
+	protected String name;
 	protected LevelHandler level;
 
 	public Entity(LevelHandler level) {
@@ -35,4 +36,12 @@ public abstract class Entity {
 	public void setY(int y) {
 		this.y = y;
 	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
 }
diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index 4b8ef20..f0ee614 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -13,7 +13,6 @@ import com.redomar.game.lib.utils.Vector2i;
 
 public abstract class Mob extends Entity {
 
-	protected String name;
 	protected Random random = new Random();
 	protected double speed;
 	protected int numSteps = 0;
diff --git a/src/com/redomar/game/entities/Vendor.java b/src/com/redomar/game/entities/Vendor.java
index 2699bc8..7641ce7 100644
--- a/src/com/redomar/game/entities/Vendor.java
+++ b/src/com/redomar/game/entities/Vendor.java
@@ -27,7 +27,7 @@ public class Vendor extends Mob {
 
 	public Vendor(LevelHandler level, String name, int x, int y, int shirtCol,
 			int faceCol) {
-		super(level, "h", x, y, speed, collisionBoders);
+		super(level, name, x, y, speed, collisionBoders);
 		this.faceCol = faceCol;
 		this.shirtCol = shirtCol;
 		this.colour = Colours.get(-1, 111, shirtCol, faceCol);
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 4f8bd8a..d1dce7c 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -19,6 +19,8 @@ import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
 import com.redomar.game.lib.utils.Vector2i;
 import com.redomar.game.net.packets.Packet01Disconnect;
+import com.redomar.game.script.PrintTypes;
+import com.redomar.game.script.Printing;
 
 public class LevelHandler {
 
@@ -29,6 +31,7 @@ public class LevelHandler {
 	private List<Entity> entities_p = new ArrayList<Entity>();
 	private String imagePath;
 	private BufferedImage image;
+	private Printing print;
 
 	private Comparator<Node> nodeSorter = new Comparator<Node>() {
 
@@ -51,6 +54,8 @@ public class LevelHandler {
 			this.height = 64;
 			this.generateLevel();
 		}
+		
+		print = new Printing();
 	}
 
 	private void loadLevelFromFile() {
@@ -179,6 +184,12 @@ public class LevelHandler {
 
 	public void addEntity(Entity entity) {
 		this.getEntities().add(entity);
+		print.print("Added "+entity.getName()+" Entity", PrintTypes.LEVEL);
+		try {
+			Thread.sleep(100);
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
 	}
 	
 	public void addProjectileEntities(Entity entity) {
@@ -187,6 +198,12 @@ public class LevelHandler {
 
 	public void removeEntity(Entity entity) {
 		this.getEntities().remove(entity);
+		print.print("Removed "+entity.getName()+" Entity", PrintTypes.LEVEL);
+		try {
+			Thread.sleep(100);
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
 	}
 	
 	public void removeProjectileEntities(Entity entity) {
diff --git a/src/com/redomar/game/script/PrintTypes.java b/src/com/redomar/game/script/PrintTypes.java
index 7eb2395..640c8f4 100644
--- a/src/com/redomar/game/script/PrintTypes.java
+++ b/src/com/redomar/game/script/PrintTypes.java
@@ -3,6 +3,7 @@ package com.redomar.game.script;
 public enum PrintTypes {
 
 	GAME,
+	LEVEL,
 	MUSIC,
 	ERROR,
 	NETWORK,
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
index 51eca0b..389cb29 100644
--- a/src/com/redomar/game/script/Printing.java
+++ b/src/com/redomar/game/script/Printing.java
@@ -8,6 +8,7 @@ public class Printing {
 	private PrintTypes type;
 	private Time time = new Time();
 	private String message;
+	private boolean redMode = false;
 
 	public Printing() {
 
@@ -16,13 +17,18 @@ public class Printing {
 	public void print(String message, PrintTypes type) {
 		this.type = type;
 		setMessage(message);
+		readMessageType(type);
 		printOut();		
 	}
 	
 	private void printOut(){
 		String msgTime = "[" + time.getTime() + "]";
 		String msgType = "[" + type.toString() + "]";
-		System.out.println(msgType + msgTime + getMessage());
+		if(redMode == true){
+			System.err.println(msgType + msgTime + getMessage());
+		}else{
+			System.out.println(msgType + msgTime + getMessage());
+		}
 	}
 
 	public String getMessage() {
@@ -32,4 +38,12 @@ public class Printing {
 	public void setMessage(String message) {
 		this.message = message;
 	}
+	
+	private void readMessageType(PrintTypes type){
+		if(type == PrintTypes.LEVEL){
+			this.redMode = true;
+		} else {
+			this.redMode = false;
+		}
+	}
 }

commit e8030c943841cde4bda28879a0a3451308ae57f4
Merge: 4318696 8323f7b
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Thu Aug 7 04:06:12 2014 +0100

    Mid-stage of shooting projectiles
    Imporvements on entities

commit 768967364c491d528ccbd07492bc38852e9a7fc0
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Aug 11 19:53:09 2014 +0100

    Added a second projectile
    
    Added a medium projectile to shoot when you right click.
    Changed when messages print in red; Error.

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index f0ee614..e611511 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -4,6 +4,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
+import com.redomar.game.entities.projectiles.Medium;
 import com.redomar.game.entities.projectiles.Projectile;
 import com.redomar.game.entities.projectiles.Small;
 import com.redomar.game.level.LevelHandler;
@@ -233,13 +234,23 @@ public abstract class Mob extends Entity {
 		}
 	}
 	
-	protected void shoot(double x, double y, double dir){
+	protected double shoot(double x, double y, double dir, double buttonId){
 //		dir = dir * (180 /Math.PI); 
 //		Printing print = new Printing();
 //		print.print("Angle: "+ dir, PrintTypes.GAME);
-		Projectile p = new Small(level, (int) x,(int) y, dir);
-		projectiles.add(p);
-		level.addProjectileEntities(p);
+		if(buttonId == 1){
+			Projectile p = new Small(level, (int) x,(int) y, dir);
+			projectiles.add(p);
+			level.addProjectileEntities(p);
+			return 1;
+		} else if(buttonId == 2){
+			Projectile p = new Medium(level, (int) x,(int) y, dir);
+			projectiles.add(p);
+			level.addProjectileEntities(p);
+			return 2;
+		} else {
+			return 0;
+		}
 	}
 
 	public String getName() {
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index f21bd8d..18b5951 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -3,6 +3,7 @@ package com.redomar.game.entities;
 import com.redomar.game.Game;
 import com.redomar.game.InputHandler;
 import com.redomar.game.entities.efx.Swim;
+import com.redomar.game.entities.projectiles.Medium;
 import com.redomar.game.entities.projectiles.Projectile;
 import com.redomar.game.entities.projectiles.Small;
 import com.redomar.game.gfx.Colours;
@@ -63,13 +64,25 @@ public class Player extends Mob {
 		
 		if(fireRate > 0) fireRate--;
 		
-		if (Game.getMouse().getButton() == 1 && fireRate <= 0){
-			if(!swim.isActive(swimType)){
-				double dx = Game.getMouse().getX() - 480/2;
-				double dy = Game.getMouse().getY() - 320/2;
-				double dir = Math.atan2(dy, dx);
-				shoot(x, y, dir);
-				fireRate = Small.FIRE_RATE;
+		if (Game.getMouse().getButton() == 1 || Game.getMouse().getButton() == 3){
+			if(fireRate <= 0){
+				int buttonId;
+				if(Game.getMouse().getButton()== 1){
+					buttonId = 1;
+				}else {
+					buttonId = 2;
+				}
+				if(!swim.isActive(swimType)){
+					double dx = Game.getMouse().getX() - 480/2;
+					double dy = Game.getMouse().getY() - 320/2;
+					double dir = Math.atan2(dy, dx);
+					double shootData = shoot(x, y, dir, buttonId);
+					if(shootData == 1){
+						fireRate = Small.FIRE_RATE;						
+					}else if(shootData == 2){
+						fireRate = Medium.FIRE_RATE;
+					}
+				}				
 			}
 		}
 		
diff --git a/src/com/redomar/game/entities/projectiles/Medium.java b/src/com/redomar/game/entities/projectiles/Medium.java
new file mode 100644
index 0000000..32395b9
--- /dev/null
+++ b/src/com/redomar/game/entities/projectiles/Medium.java
@@ -0,0 +1,39 @@
+package com.redomar.game.entities.projectiles;
+
+import com.redomar.game.gfx.Colours;
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public class Medium extends Projectile{
+	
+	public static final int FIRE_RATE = 20;
+
+	public Medium(LevelHandler level, int x, int y, double dir) {
+		super(level, x, y, dir);
+		range = 60 - life.nextInt(10);
+		damage = 80;
+		speed = 1;
+		
+		nx = speed * Math.cos(angle);
+		ny = speed * Math.sin(angle);
+	}
+	
+	public void tick() {
+		if (tileCollision(x, y,(int) nx,(int) ny)) remove();
+		move();
+	}
+
+	protected void move() {
+		x += nx;
+		y += ny;
+		
+		double distance = Math.sqrt(Math.abs((xOrigin - x)*(xOrigin - x)+(yOrigin - y)*(yOrigin - y)));
+		this.distance = distance;
+		if(this.distance > range) remove();
+	}
+
+	public void render(Screen screen) {
+		screen.render((int)x, (int)y, 7 * 32, Colours.get(-1, 311, 510, 544), 0x00, 1);
+	}
+
+}
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
index 389cb29..a59edb6 100644
--- a/src/com/redomar/game/script/Printing.java
+++ b/src/com/redomar/game/script/Printing.java
@@ -40,7 +40,7 @@ public class Printing {
 	}
 	
 	private void readMessageType(PrintTypes type){
-		if(type == PrintTypes.LEVEL){
+		if(type == PrintTypes.ERROR){
 			this.redMode = true;
 		} else {
 			this.redMode = false;

commit 072486a53db30c555b6575a0919dfef39de34037
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Aug 11 19:58:52 2014 +0100

    Improved shooting projectiles

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index e611511..c1920c5 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -234,7 +234,7 @@ public abstract class Mob extends Entity {
 		}
 	}
 	
-	protected double shoot(double x, double y, double dir, double buttonId){
+	protected void shoot(double x, double y, double dir, double buttonId){
 //		dir = dir * (180 /Math.PI); 
 //		Printing print = new Printing();
 //		print.print("Angle: "+ dir, PrintTypes.GAME);
@@ -242,14 +242,10 @@ public abstract class Mob extends Entity {
 			Projectile p = new Small(level, (int) x,(int) y, dir);
 			projectiles.add(p);
 			level.addProjectileEntities(p);
-			return 1;
-		} else if(buttonId == 2){
+		} else if(buttonId == 3){
 			Projectile p = new Medium(level, (int) x,(int) y, dir);
 			projectiles.add(p);
 			level.addProjectileEntities(p);
-			return 2;
-		} else {
-			return 0;
 		}
 	}
 
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 18b5951..7a435b6 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -66,22 +66,16 @@ public class Player extends Mob {
 		
 		if (Game.getMouse().getButton() == 1 || Game.getMouse().getButton() == 3){
 			if(fireRate <= 0){
-				int buttonId;
 				if(Game.getMouse().getButton()== 1){
-					buttonId = 1;
-				}else {
-					buttonId = 2;
+					fireRate = Small.FIRE_RATE;	
+				}else if(Game.getMouse().getButton() == 3){
+					fireRate = Medium.FIRE_RATE;
 				}
 				if(!swim.isActive(swimType)){
 					double dx = Game.getMouse().getX() - 480/2;
 					double dy = Game.getMouse().getY() - 320/2;
 					double dir = Math.atan2(dy, dx);
-					double shootData = shoot(x, y, dir, buttonId);
-					if(shootData == 1){
-						fireRate = Small.FIRE_RATE;						
-					}else if(shootData == 2){
-						fireRate = Medium.FIRE_RATE;
-					}
+					shoot(x, y, dir, Game.getMouse().getButton());
 				}				
 			}
 		}

commit a97ff9dad00b30d55c8d23033e87ed3f875b9807
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 13 17:48:29 2014 +0100

    Disabled secondry projectile

diff --git a/src/com/redomar/game/entities/Mob.java b/src/com/redomar/game/entities/Mob.java
index c1920c5..eec7b8a 100644
--- a/src/com/redomar/game/entities/Mob.java
+++ b/src/com/redomar/game/entities/Mob.java
@@ -234,7 +234,7 @@ public abstract class Mob extends Entity {
 		}
 	}
 	
-	protected void shoot(double x, double y, double dir, double buttonId){
+	protected void shoot(double x, double y, double dir, double buttonId, boolean secondry){
 //		dir = dir * (180 /Math.PI); 
 //		Printing print = new Printing();
 //		print.print("Angle: "+ dir, PrintTypes.GAME);
@@ -242,7 +242,7 @@ public abstract class Mob extends Entity {
 			Projectile p = new Small(level, (int) x,(int) y, dir);
 			projectiles.add(p);
 			level.addProjectileEntities(p);
-		} else if(buttonId == 3){
+		} else if(buttonId == 3 && secondry == true){
 			Projectile p = new Medium(level, (int) x,(int) y, dir);
 			projectiles.add(p);
 			level.addProjectileEntities(p);
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 7a435b6..9fe5fe0 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -75,7 +75,7 @@ public class Player extends Mob {
 					double dx = Game.getMouse().getX() - 480/2;
 					double dy = Game.getMouse().getY() - 320/2;
 					double dir = Math.atan2(dy, dx);
-					shoot(x, y, dir, Game.getMouse().getButton());
+					shoot(x, y, dir, Game.getMouse().getButton(), false);
 				}				
 			}
 		}

commit 8d328eb598a0b7757a9775c774c8fb09411f6f46
Merge: e8030c9 a97ff9d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 13 17:50:22 2014 +0100

    Concluding projectiles

commit 54811e605bde8ac01a7917f0860b64b61971951f
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 13 18:30:18 2014 +0100

    v1.8 - Projectiles

diff --git a/README.md b/README.md
index 72d94e3..3283c16 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,5 @@
-JavaGame Alpha v1.7.1 - 1 Year Anniversary
-=====================
-
-[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
+JavaGame Alpha v1.8
+===================
 
 #####What is JavaGame?
 JavaGame is a game project that have been working on since May 2013. I have added many features to the game over the last year and I plan on adding even more features. This game is purely for my own sake to practice my skills in Java.
@@ -15,6 +13,12 @@ Well i'm still not sure what exactly i'm going to do with it, and I haven't thou
 * For multiplayer enabled get 
    * [v1.5.4](https://github.com/redomar/JavaGame/releases/tag/v1.5.4)
 
+#####Your version naming is all wrong
+Yes, I recently noticed that there is a standard called Semantic Versioning that I should follow. Currently my project isn't organised as well as I hoped so starting from the Beta I will follow Semantic Versioning schema.
+
+#####Your project is lacking comments
+I don't know why I have not commented my code but now I'm at a stage where I cannot go back to comment the entire project, I should of commented my code from the outset. This is going to be a reminder for me in the future.
+
 #####How to download this repository for eclipse tutorial
 Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pages](http://redomar.github.io/JavaGame/)
 ####How to use this repository
@@ -32,4 +36,5 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
 * Push to the branch (```git push origin my_branch```)
 * Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
 
-[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
\ No newline at end of file
+[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
+[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
\ No newline at end of file
diff --git a/jar/javagame.jar b/jar/javagame.jar
index f18c4c2..1304dcf 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 11e85c4..f8c8b07 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -35,7 +35,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.7.1 Alpha";
+	private static final String game_Version = "v1.8 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
@@ -91,7 +91,7 @@ public class Game extends Canvas implements Runnable {
 
 	/**
 	 * @author Redomar
-	 * @version Alpha 1.7.1
+	 * @version Alpha 1.8
 	 */
 	public Game() {
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));

commit 857e4ae5c79d13b06b2ed7a2d3b781d3c0a30315
Merge: 4e2a1d8 54811e6
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 13 18:32:13 2014 +0100

    v1.8 Alpha - Projectiles

commit 37b69704138ac4742c7c94ecb4342b1bd1f7b2bc
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Wed Aug 13 19:05:47 2014 +0100

    Updated latest version info in README.md

diff --git a/README.md b/README.md
index 3283c16..2094d94 100644
--- a/README.md
+++ b/README.md
@@ -9,7 +9,7 @@ Well i'm still not sure what exactly i'm going to do with it, and I haven't thou
 
 #####Play the Game
 * For latest version get 
-   * [v1.7.1](https://github.com/redomar/JavaGame/releases/tag/v1.7.1)
+   * [v1.8](https://github.com/redomar/JavaGame/releases/tag/v1.8)
 * For multiplayer enabled get 
    * [v1.5.4](https://github.com/redomar/JavaGame/releases/tag/v1.5.4)
 
@@ -37,4 +37,4 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
 * Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
 
 [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
-[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
\ No newline at end of file
+[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)

commit c915b83fd664a076135f7797c9406f98ea186055
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Sat Aug 30 17:38:57 2014 +0200

    Azerty
    
    Added controls for people with azerty based keyboards.

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index f8c8b07..54acef6 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -5,6 +5,7 @@ import java.awt.Canvas;
 import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.Graphics;
+import java.awt.im.InputContext;
 import java.awt.image.BufferStrategy;
 import java.awt.image.BufferedImage;
 import java.awt.image.DataBufferInt;
@@ -56,7 +57,8 @@ public class Game extends Canvas implements Runnable {
 	private static int steps;
 	private static boolean devMode;
 	private static boolean closingMode;
-
+	private static boolean isAzertyCountry;
+	
 	private static JFrame frame;
 
 	private static boolean running = false;
@@ -88,12 +90,14 @@ public class Game extends Canvas implements Runnable {
 	private static GameClient socketClient;
 	private GameServer socketServer;
 	private Printing print = new Printing();
-
+	private static InputContext context;
+	
 	/**
 	 * @author Redomar
 	 * @version Alpha 1.8
 	 */
 	public Game() {
+		context = InputContext.getInstance();
 		setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
@@ -328,7 +332,15 @@ public class Game extends Canvas implements Runnable {
 						+ WordUtils.capitalizeFully(player
 								.getSantizedUsername()), 3, getHeight() - 17);
 		g.setColor(Color.ORANGE);
-		g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
+		
+		if(context.getLocale().getCountry().equals("BE") || context.getLocale().getCountry().equals("FR"))
+		{
+			g.drawString("Press A to quit", (getWidth()/2)-("Press A to quit".length()*3), getHeight() -17);
+		}
+		else
+		{
+			g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
+		}
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
 		g.setColor(Color.WHITE);
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 213b39d..e76cff3 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -2,38 +2,53 @@ package com.redomar.game;
 
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
+import java.awt.im.InputContext;
 
 import com.redomar.game.lib.SleepThread;
 import com.redomar.game.script.PopUp;
 import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
-public class InputHandler implements KeyListener {
-
-	public InputHandler(Game game) {
+public class InputHandler implements KeyListener
+{
+	
+	private boolean isAzertyCountry;
+	
+	public InputHandler(Game game)
+	{
+		InputContext context = InputContext.getInstance();
+		// Important to know wether the keyboard is in Azerty or Qwerty.
+		// Azerty countries used QZSD instead of WASD keys.
+		isAzertyCountry = context.getLocale().getCountry().equals("BE") || context.getLocale().getCountry().equals("FR");
 		game.addKeyListener(this);
 	}
 
-	public class Key {
+	public class Key
+	{
 		private int numTimesPressed = 0;
 		private boolean pressed = false;
 
-		public int getNumTimesPressed() {
+		public int getNumTimesPressed()
+		{
 			return numTimesPressed;
 		}
 
-		public boolean isPressed() {
+		public boolean isPressed()
+		{
 			return pressed;
 		}
 
-		public void toggle(boolean isPressed) {
+		public void toggle(boolean isPressed)
+		{
 			pressed = isPressed;
-			if (isPressed) {
+			if (isPressed)
+			{
 				numTimesPressed++;
 			}
 		}
-		
-		public void off(){
+
+		public void off()
+		{
 			pressed = false;
 			numTimesPressed = 0;
 		}
@@ -48,157 +63,258 @@ public class InputHandler implements KeyListener {
 	private int map;
 	private boolean ignoreInput = false;
 	private PopUp popup = new PopUp();
-	
-	public void keyPressed(KeyEvent e) {
+
+	public void keyPressed(KeyEvent e)
+	{
 		toggleKey(e.getKeyCode(), true);
 	}
 
-	public void keyReleased(KeyEvent e) {
+	public void keyReleased(KeyEvent e)
+	{
 		toggleKey(e.getKeyCode(), false);
 	}
 
-	public void keyTyped(KeyEvent e) {
+	public void keyTyped(KeyEvent e)
+	{
 
 	}
 
-	public void toggleKey(int keyCode, boolean isPressed) {
-		if(isIgnoreInput() == false){
-			if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
-				getUp().toggle(isPressed);
+	public void toggleKey(int keyCode, boolean isPressed)
+	{
+		if (isIgnoreInput() == false)
+		{
+			if(isAzertyCountry)
+			{
+				if (keyCode == KeyEvent.VK_Z || keyCode == KeyEvent.VK_UP)
+				{
+					getUp().toggle(isPressed);
+				}
+				
+				if (keyCode == KeyEvent.VK_Q || keyCode == KeyEvent.VK_LEFT)
+				{
+					getLeft().toggle(isPressed);
+				}
 			}
-			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
-				getDown().toggle(isPressed);
+			else
+			{
+				if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP)
+				{
+					getUp().toggle(isPressed);
+				}
+				
+				if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT)
+				{
+					getLeft().toggle(isPressed);
+				}
 			}
-			if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
-				getLeft().toggle(isPressed);
+
+			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN)
+			{
+				getDown().toggle(isPressed);
 			}
-			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
+
+			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT)
+			{
 				getRight().toggle(isPressed);
 			}
 		}
-		if(isIgnoreInput() == true){
+		if (isIgnoreInput() == true)
+		{
 			getUp().toggle(false);
 			getDown().toggle(false);
 			getLeft().toggle(false);
 			getRight().toggle(false);
 		}
-		if (keyCode == KeyEvent.VK_M) {
+		if (keyCode == KeyEvent.VK_M)
+		{
 			this.setPlayMusic(true);
 		}
-		if (keyCode == KeyEvent.VK_Z) {
-			// if (map == 0){
-			// Game.getGame().setMap("/levels/water_level.png");
-			// map++;
-			// } else{
-			// Game.getGame().setMap("/levels/custom_level.png");
-			// map--;
-			// }
-			if (Game.getMap() == 2) {
-				Game.setChangeLevel(true);
-				Game.setNpc(false);
+		
+		if(isAzertyCountry)
+		{
+			if (keyCode == KeyEvent.VK_W)
+			{
+				// if (map == 0){
+				// Game.getGame().setMap("/levels/water_level.png");
+				// map++;
+				// } else{
+				// Game.getGame().setMap("/levels/custom_level.png");
+				// map--;
+				// }
+				if (Game.getMap() == 2)
+				{
+					Game.setChangeLevel(true);
+					Game.setNpc(false);
+				}
+			}
+		}
+		else
+		{
+			if (keyCode == KeyEvent.VK_Z)
+			{
+				// if (map == 0){
+				// Game.getGame().setMap("/levels/water_level.png");
+				// map++;
+				// } else{
+				// Game.getGame().setMap("/levels/custom_level.png");
+				// map--;
+				// }
+				if (Game.getMap() == 2)
+				{
+					Game.setChangeLevel(true);
+					Game.setNpc(false);
+				}
 			}
 		}
-		if (keyCode == KeyEvent.VK_N) {
-			if (Game.getPlayer().isMoving()){
+		if (keyCode == KeyEvent.VK_N)
+		{
+			if (Game.getPlayer().isMoving())
+			{
 				setIgnoreInput(true);
 				int n = popup.Warn("Stop moving before spawing dummy AI");
-				if(n == 0){
+				if (n == 0)
+				{
 					setIgnoreInput(false);
 				}
 				return;
 			}
-			if (Game.isNpc() == false) {
+			if (Game.isNpc() == false)
+			{
 				Game.setNpc(true);
 				Game.npcSpawn();
 				print.print("Dummy has been spawned", PrintTypes.GAME);
 			}
 		}
-		if (keyCode == KeyEvent.VK_K) {
-			if (Game.isNpc() == true) {
+		if (keyCode == KeyEvent.VK_K)
+		{
+			if (Game.isNpc() == true)
+			{
 				Game.setNpc(false);
 				Game.npcKill();
 				print.print("Dummy has been despawned", PrintTypes.GAME);
 			}
 		}
-		if (keyCode == KeyEvent.VK_Q){
-			Game.setClosing(true);
-			try {
-				Thread.sleep(1000);
-			} catch (InterruptedException e) {
-				e.printStackTrace();
+		if(isAzertyCountry)
+		{
+			if (keyCode == KeyEvent.VK_A)
+			{
+				Game.setClosing(true);
+				try
+				{
+					Thread.sleep(1000);
+				} catch (InterruptedException e)
+				{
+					e.printStackTrace();
+				}
+				Game.getLevel()
+						.removeEntity(Game.getPlayer().getSantizedUsername());
+				Game.setRunning(false);
+				Game.getFrame().dispose();
+				System.exit(1);
+			}
+		}
+		else
+		{
+			if (keyCode == KeyEvent.VK_Q)
+			{
+				Game.setClosing(true);
+				try
+				{
+					Thread.sleep(1000);
+				} catch (InterruptedException e)
+				{
+					e.printStackTrace();
+				}
+				Game.getLevel()
+						.removeEntity(Game.getPlayer().getSantizedUsername());
+				Game.setRunning(false);
+				Game.getFrame().dispose();
+				System.exit(1);
 			}
-			Game.getLevel().removeEntity(Game.getPlayer().getSantizedUsername());
-			Game.setRunning(false);
-			Game.getFrame().dispose();
-			System.exit(1);
 		}
 
-		if (keyCode == KeyEvent.VK_BACK_QUOTE){
-			if (Game.isClosing() == false && Game.isDevMode() == false){
+		if (keyCode == KeyEvent.VK_BACK_QUOTE)
+		{
+			if (Game.isClosing() == false && Game.isDevMode() == false)
+			{
 				Game.setDevMode(true);
 				new Thread(new SleepThread());
 			}
 		}
 	}
-	
-	public void untoggle(boolean toggle){
+
+	public void untoggle(boolean toggle)
+	{
 		this.ignoreInput = toggle;
 	}
-	
 
-	public int getMap() {
+	public int getMap()
+	{
 		return map;
 	}
 
-	public void setMap(int map) {
+	public void setMap(int map)
+	{
 		this.map = map;
 	}
 
-	public boolean isPlayMusic() {
+	public boolean isPlayMusic()
+	{
 		return PlayMusic;
 	}
 
-	public void setPlayMusic(boolean playMusic) {
+	public void setPlayMusic(boolean playMusic)
+	{
 		PlayMusic = playMusic;
 	}
 
-	public Key getUp() {
+	public Key getUp()
+	{
 		return up;
 	}
 
-	public void setUp(Key up) {
+	public void setUp(Key up)
+	{
 		this.up = up;
 	}
 
-	public Key getDown() {
+	public Key getDown()
+	{
 		return down;
 	}
 
-	public void setDown(Key down) {
+	public void setDown(Key down)
+	{
 		this.down = down;
 	}
 
-	public Key getLeft() {
+	public Key getLeft()
+	{
 		return left;
 	}
 
-	public void setLeft(Key left) {
+	public void setLeft(Key left)
+	{
 		this.left = left;
 	}
 
-	public Key getRight() {
+	public Key getRight()
+	{
 		return right;
 	}
 
-	public void setRight(Key right) {
+	public void setRight(Key right)
+	{
 		this.right = right;
 	}
 
-	public boolean isIgnoreInput() {
+	public boolean isIgnoreInput()
+	{
 		return ignoreInput;
 	}
 
-	public void setIgnoreInput(boolean ignoreInput) {
+	public void setIgnoreInput(boolean ignoreInput)
+	{
 		this.ignoreInput = ignoreInput;
 	}
 

commit a2cc3517398b1189a5e6794ef06bb5bb3d54f092
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Sat Aug 30 19:17:43 2014 +0200

    Azerty
    
    Added support for the Azerty keyboard layout used in France and Belgium.
    (Correct code format)

diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index e76cff3..5410af0 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -9,46 +9,39 @@ import com.redomar.game.script.PopUp;
 import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
-public class InputHandler implements KeyListener
-{
-	
+public class InputHandler implements KeyListener {
+
 	private boolean isAzertyCountry;
-	
-	public InputHandler(Game game)
-	{
+
+	public InputHandler(Game game) {
 		InputContext context = InputContext.getInstance();
 		// Important to know wether the keyboard is in Azerty or Qwerty.
 		// Azerty countries used QZSD instead of WASD keys.
-		isAzertyCountry = context.getLocale().getCountry().equals("BE") || context.getLocale().getCountry().equals("FR");
+		isAzertyCountry = context.getLocale().getCountry().equals("BE")
+				|| context.getLocale().getCountry().equals("FR");
 		game.addKeyListener(this);
 	}
 
-	public class Key
-	{
+	public class Key {
 		private int numTimesPressed = 0;
 		private boolean pressed = false;
 
-		public int getNumTimesPressed()
-		{
+		public int getNumTimesPressed() {
 			return numTimesPressed;
 		}
 
-		public boolean isPressed()
-		{
+		public boolean isPressed() {
 			return pressed;
 		}
 
-		public void toggle(boolean isPressed)
-		{
+		public void toggle(boolean isPressed) {
 			pressed = isPressed;
-			if (isPressed)
-			{
+			if (isPressed) {
 				numTimesPressed++;
 			}
 		}
 
-		public void off()
-		{
+		public void off() {
 			pressed = false;
 			numTimesPressed = 0;
 		}
@@ -64,76 +57,58 @@ public class InputHandler implements KeyListener
 	private boolean ignoreInput = false;
 	private PopUp popup = new PopUp();
 
-	public void keyPressed(KeyEvent e)
-	{
+	public void keyPressed(KeyEvent e) {
 		toggleKey(e.getKeyCode(), true);
 	}
 
-	public void keyReleased(KeyEvent e)
-	{
+	public void keyReleased(KeyEvent e) {
 		toggleKey(e.getKeyCode(), false);
 	}
 
-	public void keyTyped(KeyEvent e)
-	{
+	public void keyTyped(KeyEvent e) {
 
 	}
 
-	public void toggleKey(int keyCode, boolean isPressed)
-	{
-		if (isIgnoreInput() == false)
-		{
-			if(isAzertyCountry)
-			{
-				if (keyCode == KeyEvent.VK_Z || keyCode == KeyEvent.VK_UP)
-				{
+	public void toggleKey(int keyCode, boolean isPressed) {
+		if (isIgnoreInput() == false) {
+			if (isAzertyCountry) {
+				if (keyCode == KeyEvent.VK_Z || keyCode == KeyEvent.VK_UP) {
 					getUp().toggle(isPressed);
 				}
-				
-				if (keyCode == KeyEvent.VK_Q || keyCode == KeyEvent.VK_LEFT)
-				{
+
+				if (keyCode == KeyEvent.VK_Q || keyCode == KeyEvent.VK_LEFT) {
 					getLeft().toggle(isPressed);
 				}
-			}
-			else
-			{
-				if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP)
-				{
+			} else {
+				if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
 					getUp().toggle(isPressed);
 				}
-				
-				if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT)
-				{
+
+				if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
 					getLeft().toggle(isPressed);
 				}
 			}
 
-			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN)
-			{
+			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
 				getDown().toggle(isPressed);
 			}
 
-			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT)
-			{
+			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
 				getRight().toggle(isPressed);
 			}
 		}
-		if (isIgnoreInput() == true)
-		{
+		if (isIgnoreInput() == true) {
 			getUp().toggle(false);
 			getDown().toggle(false);
 			getLeft().toggle(false);
 			getRight().toggle(false);
 		}
-		if (keyCode == KeyEvent.VK_M)
-		{
+		if (keyCode == KeyEvent.VK_M) {
 			this.setPlayMusic(true);
 		}
-		
-		if(isAzertyCountry)
-		{
-			if (keyCode == KeyEvent.VK_W)
-			{
+
+		if (isAzertyCountry) {
+			if (keyCode == KeyEvent.VK_W) {
 				// if (map == 0){
 				// Game.getGame().setMap("/levels/water_level.png");
 				// map++;
@@ -141,17 +116,13 @@ public class InputHandler implements KeyListener
 				// Game.getGame().setMap("/levels/custom_level.png");
 				// map--;
 				// }
-				if (Game.getMap() == 2)
-				{
+				if (Game.getMap() == 2) {
 					Game.setChangeLevel(true);
 					Game.setNpc(false);
 				}
 			}
-		}
-		else
-		{
-			if (keyCode == KeyEvent.VK_Z)
-			{
+		} else {
+			if (keyCode == KeyEvent.VK_Z) {
 				// if (map == 0){
 				// Game.getGame().setMap("/levels/water_level.png");
 				// map++;
@@ -159,162 +130,129 @@ public class InputHandler implements KeyListener
 				// Game.getGame().setMap("/levels/custom_level.png");
 				// map--;
 				// }
-				if (Game.getMap() == 2)
-				{
+				if (Game.getMap() == 2) {
 					Game.setChangeLevel(true);
 					Game.setNpc(false);
 				}
 			}
 		}
-		if (keyCode == KeyEvent.VK_N)
-		{
-			if (Game.getPlayer().isMoving())
-			{
+		if (keyCode == KeyEvent.VK_N) {
+			if (Game.getPlayer().isMoving()) {
 				setIgnoreInput(true);
 				int n = popup.Warn("Stop moving before spawing dummy AI");
-				if (n == 0)
-				{
+				if (n == 0) {
 					setIgnoreInput(false);
 				}
 				return;
 			}
-			if (Game.isNpc() == false)
-			{
+			if (Game.isNpc() == false) {
 				Game.setNpc(true);
 				Game.npcSpawn();
 				print.print("Dummy has been spawned", PrintTypes.GAME);
 			}
 		}
-		if (keyCode == KeyEvent.VK_K)
-		{
-			if (Game.isNpc() == true)
-			{
+		if (keyCode == KeyEvent.VK_K) {
+			if (Game.isNpc() == true) {
 				Game.setNpc(false);
 				Game.npcKill();
 				print.print("Dummy has been despawned", PrintTypes.GAME);
 			}
 		}
-		if(isAzertyCountry)
-		{
-			if (keyCode == KeyEvent.VK_A)
-			{
+		if (isAzertyCountry) {
+			if (keyCode == KeyEvent.VK_A) {
 				Game.setClosing(true);
-				try
-				{
+				try {
 					Thread.sleep(1000);
-				} catch (InterruptedException e)
-				{
+				} catch (InterruptedException e) {
 					e.printStackTrace();
 				}
-				Game.getLevel()
-						.removeEntity(Game.getPlayer().getSantizedUsername());
+				Game.getLevel().removeEntity(
+						Game.getPlayer().getSantizedUsername());
 				Game.setRunning(false);
 				Game.getFrame().dispose();
 				System.exit(1);
 			}
-		}
-		else
-		{
-			if (keyCode == KeyEvent.VK_Q)
-			{
+		} else {
+			if (keyCode == KeyEvent.VK_Q) {
 				Game.setClosing(true);
-				try
-				{
+				try {
 					Thread.sleep(1000);
-				} catch (InterruptedException e)
-				{
+				} catch (InterruptedException e) {
 					e.printStackTrace();
 				}
-				Game.getLevel()
-						.removeEntity(Game.getPlayer().getSantizedUsername());
+				Game.getLevel().removeEntity(
+						Game.getPlayer().getSantizedUsername());
 				Game.setRunning(false);
 				Game.getFrame().dispose();
 				System.exit(1);
 			}
 		}
 
-		if (keyCode == KeyEvent.VK_BACK_QUOTE)
-		{
-			if (Game.isClosing() == false && Game.isDevMode() == false)
-			{
+		if (keyCode == KeyEvent.VK_BACK_QUOTE) {
+			if (Game.isClosing() == false && Game.isDevMode() == false) {
 				Game.setDevMode(true);
 				new Thread(new SleepThread());
 			}
 		}
 	}
 
-	public void untoggle(boolean toggle)
-	{
+	public void untoggle(boolean toggle) {
 		this.ignoreInput = toggle;
 	}
 
-	public int getMap()
-	{
+	public int getMap() {
 		return map;
 	}
 
-	public void setMap(int map)
-	{
+	public void setMap(int map) {
 		this.map = map;
 	}
 
-	public boolean isPlayMusic()
-	{
+	public boolean isPlayMusic() {
 		return PlayMusic;
 	}
 
-	public void setPlayMusic(boolean playMusic)
-	{
+	public void setPlayMusic(boolean playMusic) {
 		PlayMusic = playMusic;
 	}
 
-	public Key getUp()
-	{
+	public Key getUp() {
 		return up;
 	}
 
-	public void setUp(Key up)
-	{
+	public void setUp(Key up) {
 		this.up = up;
 	}
 
-	public Key getDown()
-	{
+	public Key getDown() {
 		return down;
 	}
 
-	public void setDown(Key down)
-	{
+	public void setDown(Key down) {
 		this.down = down;
 	}
 
-	public Key getLeft()
-	{
+	public Key getLeft() {
 		return left;
 	}
 
-	public void setLeft(Key left)
-	{
+	public void setLeft(Key left) {
 		this.left = left;
 	}
 
-	public Key getRight()
-	{
+	public Key getRight() {
 		return right;
 	}
 
-	public void setRight(Key right)
-	{
+	public void setRight(Key right) {
 		this.right = right;
 	}
 
-	public boolean isIgnoreInput()
-	{
+	public boolean isIgnoreInput() {
 		return ignoreInput;
 	}
 
-	public void setIgnoreInput(boolean ignoreInput)
-	{
+	public void setIgnoreInput(boolean ignoreInput) {
 		this.ignoreInput = ignoreInput;
 	}
 

commit 885634a6dfbd9502b51e6d47d717b78ea47e8f6f
Merge: 37b6970 a2cc351
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sat Aug 30 18:26:59 2014 +0100

    Merge branch 'DylanMeeus-master'

commit afe00f8fdc2340106c585271584e1bdc03e74a96
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Sun Aug 31 23:25:45 2014 +0200

    NullPointerException fix
    
    Added != null when player walks throughthe teleporter.

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 54acef6..269978c 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -57,7 +57,6 @@ public class Game extends Canvas implements Runnable {
 	private static int steps;
 	private static boolean devMode;
 	private static boolean closingMode;
-	private static boolean isAzertyCountry;
 	
 	private static JFrame frame;
 
@@ -307,7 +306,10 @@ public class Game extends Canvas implements Runnable {
 			print.print("Teleported into new world", PrintTypes.GAME);
 			if (getMap() == 1) {
 				setMap("/levels/water_level.png");
-				getLevel().removeEntity(getDummy()); setNpc(false);
+				if(getDummy()!=null){ // Gave nullPointerException(); upon entering new world.
+					getLevel().removeEntity(getDummy()); 
+					setNpc(false);
+				}
 				getLevel().removeEntity(getVendor());
 				setMap(2);
 			} else if (getMap() == 2) {

commit 48babcebb6eae33240092cc6ee37496125924001
Merge: 885634a afe00f8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 00:02:45 2014 +0100

    Merge branch 'master' of github.com:DylanMeeus/JavaGame into DylanMeeus-master

commit bb898faee198db2ab07b467cb6f9513e6424e0d2
Merge: 885634a 48babce
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 02:14:26 2014 +0100

    Merge branch 'DylanMeeus-master' into bugfix-#5

commit d5155361e77f19003d06bf68ab28449f2cd4b10d
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 02:35:53 2014 +0100

    Fixed NullPointerException for returing to world
    Fixed a bug where the game crashes when you pressed Z without spwaning a dummy NPC

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 269978c..4a0f6bd 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -314,7 +314,10 @@ public class Game extends Canvas implements Runnable {
 				setMap(2);
 			} else if (getMap() == 2) {
 				setMap("/levels/custom_level.png");
-				getLevel().removeEntity(getDummy()); setNpc(false);
+				if(getDummy()!=null){
+					getLevel().removeEntity(getDummy());
+					setNpc(false);
+				}
 				getLevel().addEntity(getVendor());
 				setMap(1);
 			}

commit b078b8b0a477f236ef129fbef5ebeccb51461d0b
Merge: 885634a d515536
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 02:36:37 2014 +0100

    Merge branch 'bugfix-#5'

commit 8797cc8da88ba1b46f7559630ac6bff4e7691714
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Mon Sep 1 16:55:03 2014 +0200

    UML
    
    I have created a UML class diagram using ObjectAID UML, to improve
    clarity on the design. Also corrected two minor typos, and removed an
    unused import.

diff --git a/src/UML.ucls b/src/UML.ucls
new file mode 100644
index 0000000..6c9da34
--- /dev/null
+++ b/src/UML.ucls
@@ -0,0 +1,1119 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<class-diagram version="1.1.6" icons="true" always-add-relationships="false" generalizations="true" realizations="true" 
+  associations="true" dependencies="false" nesting-relationships="true">  
+  <class id="1" language="java" name="com.redomar.game.Game" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/Game.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="1827" width="213" x="2669" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="2" language="java" name="com.redomar.game.InputHandler.Key" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="152" x="3383" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="3" language="java" name="com.redomar.game.WindowHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/WindowHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="221" x="2408" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="4" language="java" name="com.redomar.game.InputHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="495" width="165" x="3383" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="5" language="java" name="com.redomar.game.MouseHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/MouseHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="193" x="2954" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="6" language="java" name="com.redomar.game.entities.PlayerMP" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/PlayerMP.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="365" x="2782" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="7" language="java" name="com.redomar.game.entities.Player" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Player.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="441" width="275" x="3480" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="8" language="java" name="com.redomar.game.entities.Entity" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Entity.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="133" x="3701" y="3609"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="9" language="java" name="com.redomar.game.entities.Mob" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Mob.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="585" width="394" x="4053" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="10" language="java" name="com.redomar.game.entities.Vendor" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Vendor.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="459" width="218" x="3795" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="11" language="java" name="com.redomar.game.entities.Dummy" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Dummy.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="351" width="218" x="4053" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="12" language="java" name="com.redomar.game.entities.efx.Swim" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/efx/Swim.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="243" width="249" x="3764" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="13" language="java" name="com.redomar.game.entities.projectiles.Projectile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Projectile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="387" width="222" x="4334" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="14" language="java" name="com.redomar.game.entities.projectiles.Small" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Small.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="184" x="4452" y="4373"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="15" language="java" name="com.redomar.game.entities.projectiles.Medium" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Medium.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="195" x="4217" y="4373"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="16" language="java" name="com.redomar.game.gfx.Screen" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/Screen.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="405" width="170" x="2198" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="17" language="java" name="com.redomar.game.gfx.Colours" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/Colours.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="117" width="116" x="352" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="18" language="java" name="com.redomar.game.gfx.SpriteSheet" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/SpriteSheet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="121" x="2198" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="19" language="java" name="com.redomar.game.level.Node" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/Node.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="135" width="197" x="4053" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="20" language="java" name="com.redomar.game.level.LevelHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/LevelHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="621" width="238" x="3105" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="21" language="java" name="com.redomar.game.level.tiles.BasicSolidTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/BasicSolidTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="81" width="167" x="1470" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="22" language="java" name="com.redomar.game.level.tiles.AnimatedTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/AnimatedTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="174" x="1256" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="23" language="java" name="com.redomar.game.level.tiles.BasicTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/BasicTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="217" x="1420" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="24" language="java" name="com.redomar.game.level.tiles.Tile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/Tile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="549" width="221" x="1420" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="25" language="java" name="com.redomar.game.lib.Name" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Name.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="136" x="3588" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="26" language="java" name="com.redomar.game.lib.Font" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Font.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="211" x="3229" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="27" language="java" name="com.redomar.game.lib.Mouse" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Mouse.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="193" x="508" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="28" language="java" name="com.redomar.game.lib.Music" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Music.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="138" x="1999" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="29" language="java" name="com.redomar.game.lib.Time" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Time.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="99" width="103" x="1658" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="30" language="java" name="com.redomar.game.lib.Keys" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="165" x="4487" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="31" language="java" name="com.redomar.game.lib.Keys.Key" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="152" x="4487" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="32" language="java" name="com.redomar.game.lib.SleepThread" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/SleepThread.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="99" width="103" x="209" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="33" language="java" name="com.redomar.game.lib.utils.Vector2i" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/utils/Vector2i.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="157" x="4053" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="34" language="java" name="com.redomar.game.menu.Menu" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/Menu.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="693" width="243" x="3770" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="35" language="java" name="com.redomar.game.menu.MenuInput" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/MenuInput.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="165" x="741" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="36" language="java" name="com.redomar.game.menu.DedicatedJFrame" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/DedicatedJFrame.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="187" x="4437" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="37" language="java" name="com.redomar.game.net.GameClient" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/GameClient.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="243" width="261" x="1698" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="38" language="java" name="com.redomar.game.net.GameServer" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/GameServer.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="245" x="2669" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="39" language="java" name="com.redomar.game.net.packets.Packet00Login" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet00Login.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="261" width="165" x="946" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="40" language="java" name="com.redomar.game.net.packets.Packet02Move" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet02Move.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="369" width="229" x="1151" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="41" language="java" name="com.redomar.game.net.packets.Packet" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="189" x="946" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="42" language="java" name="com.redomar.game.net.packets.Packet.PacketTypes" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="156" x="545" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="43" language="java" name="com.redomar.game.net.packets.Packet01Disconnect" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet01Disconnect.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="165" x="741" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="44" language="java" name="com.redomar.game.objects.Inventory" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/Inventory.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="124" x="4692" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="45" language="java" name="com.redomar.game.objects.Items" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/Items.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="-1" width="-1" x="82" y="101"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="46" language="java" name="com.redomar.game.objects.InventoryHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/InventoryHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="221" x="4437" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="47" language="java" name="com.redomar.game.objects.InventoryWindow" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/InventoryWindow.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="194" x="4679" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="48" language="java" name="com.redomar.game.script.PrintTypes" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/PrintTypes.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="133" x="2158" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="49" language="java" name="com.redomar.game.script.PopUp" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/PopUp.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="117" width="117" x="3575" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="50" language="java" name="com.redomar.game.script.Printing" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/Printing.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="196" x="2158" y="3609"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <association id="51">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="52" name="player"/>      
+      <multiplicity id="53" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="7" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="54">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="55" name="down"/>      
+      <multiplicity id="56" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="57">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="58" name="entities_p"/>      
+      <multiplicity id="59" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="8" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="60">    
+    <end type="SOURCE" refId="39"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="61">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="62" name="CHISELED_stone"/>      
+      <multiplicity id="63" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="64">    
+    <end type="SOURCE" refId="44" navigable="false">      
+      <attribute id="65" name="inv_window"/>      
+      <multiplicity id="66" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="47" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="67">    
+    <end type="SOURCE" refId="50" navigable="false">      
+      <attribute id="68" name="time"/>      
+      <multiplicity id="69" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="29" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="70">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="71" name="MAGMA"/>      
+      <multiplicity id="72" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="73">    
+    <end type="SOURCE" refId="23"/>    
+    <end type="TARGET" refId="24"/>  
+  </generalization>  
+  <association id="74">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="75" name="VOID"/>      
+      <multiplicity id="76" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="77">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="78" name="up"/>      
+      <multiplicity id="79" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="80">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="81" name="CHEST_a"/>      
+      <multiplicity id="82" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="83">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="84" name="CHEST_b"/>      
+      <multiplicity id="85" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="86">    
+    <end type="SOURCE" refId="46" navigable="false">      
+      <attribute id="87" name="frame"/>      
+      <multiplicity id="88" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="89">    
+    <end type="SOURCE" refId="14"/>    
+    <end type="TARGET" refId="13"/>  
+  </generalization>  
+  <association id="90">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="91" name="GRASS"/>      
+      <multiplicity id="92" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="93">    
+    <end type="SOURCE" refId="30" navigable="false">      
+      <attribute id="94" name="down"/>      
+      <multiplicity id="95" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="31" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="96">    
+    <end type="SOURCE" refId="30" navigable="false">      
+      <attribute id="97" name="up"/>      
+      <multiplicity id="98" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="31" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="99">    
+    <bendpoint x="2088" y="2413"/>    
+    <bendpoint x="2088" y="2948"/>    
+    <end type="SOURCE" refId="28" navigable="false">      
+      <attribute id="100" name="print"/>      
+      <multiplicity id="101" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="102">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="103" name="font"/>      
+      <multiplicity id="104" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="26" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="105">    
+    <end type="SOURCE" refId="34" navigable="false">      
+      <attribute id="106" name="font"/>      
+      <multiplicity id="107" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="26" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="108">    
+    <bendpoint x="2779" y="2948"/>    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="109" name="print"/>      
+      <multiplicity id="110" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="111">    
+    <end type="SOURCE" refId="11" navigable="false">      
+      <attribute id="112" name="swim"/>      
+      <multiplicity id="113" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="114">    
+    <end type="SOURCE" refId="40"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="115">    
+    <bendpoint x="4301" y="1914"/>    
+    <bendpoint x="4311" y="2413"/>    
+    <end type="SOURCE" refId="34" navigable="false">      
+      <attribute id="116" name="frame"/>      
+      <multiplicity id="117" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="118">    
+    <bendpoint x="3198" y="1914"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="119" name="input"/>      
+      <multiplicity id="120" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="4" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="121">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="122" name="customeName"/>      
+      <multiplicity id="123" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="25" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="124">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="125" name="SAND"/>      
+      <multiplicity id="126" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="127">    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="128" name="game"/>      
+      <multiplicity id="129" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="130">    
+    <bendpoint x="4688" y="2413"/>    
+    <end type="SOURCE" refId="47" navigable="false">      
+      <attribute id="131" name="frame"/>      
+      <multiplicity id="132" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="133">    
+    <end type="SOURCE" refId="12" navigable="false">      
+      <attribute id="134" name="level"/>      
+      <multiplicity id="135" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="136">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="137" name="screen"/>      
+      <multiplicity id="138" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="16" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="139">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="140" name="socketServer"/>      
+      <multiplicity id="141" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="38" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="142">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="143" name="swim"/>      
+      <multiplicity id="144" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="145">    
+    <end type="SOURCE" refId="10"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <generalization id="146">    
+    <end type="SOURCE" refId="15"/>    
+    <end type="TARGET" refId="13"/>  
+  </generalization>  
+  <association id="147">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="148" name="FLOWER_rose"/>      
+      <multiplicity id="149" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="150">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="151" name="game"/>      
+      <multiplicity id="152" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="153">    
+    <bendpoint x="3177" y="1914"/>    
+    <bendpoint x="3177" y="2413"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="154" name="level"/>      
+      <multiplicity id="155" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="156">    
+    <end type="SOURCE" refId="16" navigable="false">      
+      <attribute id="157" name="sheet"/>      
+      <multiplicity id="158" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="18" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="159">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="160" name="tiles"/>      
+      <multiplicity id="161" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="162">    
+    <bendpoint x="1937" y="2413"/>    
+    <bendpoint x="1937" y="2948"/>    
+    <end type="SOURCE" refId="37" navigable="false">      
+      <attribute id="163" name="print"/>      
+      <multiplicity id="164" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="165">    
+    <bendpoint x="4322" y="1914"/>    
+    <bendpoint x="4290" y="2413"/>    
+    <bendpoint x="4290" y="2948"/>    
+    <end type="SOURCE" refId="9"/>    
+    <end type="TARGET" refId="8"/>  
+  </generalization>  
+  <association id="166">    
+    <end type="SOURCE" refId="11" navigable="false">      
+      <attribute id="167" name="path"/>      
+      <multiplicity id="168" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="169">    
+    <end type="SOURCE" refId="30"/>    
+    <end type="TARGET" refId="31"/>  
+  </nesting>  
+  <association id="170">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="171" name="mouse"/>      
+      <multiplicity id="172" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="5" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="173">    
+    <bendpoint x="2167" y="1914"/>    
+    <bendpoint x="2167" y="2413"/>    
+    <bendpoint x="2167" y="2948"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="174" name="print"/>      
+      <multiplicity id="175" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="176">    
+    <end type="SOURCE" refId="19" navigable="false">      
+      <attribute id="177" name="tile"/>      
+      <multiplicity id="178" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="33" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="179">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="180" name="STONE"/>      
+      <multiplicity id="181" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="182">    
+    <end type="SOURCE" refId="10" navigable="false">      
+      <attribute id="183" name="path"/>      
+      <multiplicity id="184" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="185">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="186" name="DIRT"/>      
+      <multiplicity id="187" minimum="0" maximum="1">        
+        <position height="16" width="23" x="1657" y="551"/>      
+      </multiplicity>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="188">    
+    <end type="SOURCE" refId="6"/>    
+    <end type="TARGET" refId="7"/>  
+  </generalization>  
+  <association id="189">    
+    <end type="SOURCE" refId="8" navigable="false">      
+      <attribute id="190" name="level"/>      
+      <multiplicity id="191" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="192">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="193" name="CARPET_red"/>      
+      <multiplicity id="194" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="195">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="196" name="right"/>      
+      <multiplicity id="197" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="198">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="199" name="DIRT_WET"/>      
+      <multiplicity id="200" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="201">    
+    <end type="SOURCE" refId="22"/>    
+    <end type="TARGET" refId="23"/>  
+  </generalization>  
+  <association id="202">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="203" name="left"/>      
+      <multiplicity id="204" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="205">    
+    <end type="SOURCE" refId="4"/>    
+    <end type="TARGET" refId="2"/>  
+  </nesting>  
+  <generalization id="206">    
+    <end type="SOURCE" refId="13"/>    
+    <end type="TARGET" refId="8"/>  
+  </generalization>  
+  <association id="207">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="208" name="WATER"/>      
+      <multiplicity id="209" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="210">    
+    <bendpoint x="4343" y="1914"/>    
+    <bendpoint x="4343" y="2413"/>    
+    <bendpoint x="4343" y="2948"/>    
+    <bendpoint x="4343" y="3609"/>    
+    <end type="SOURCE" refId="9" navigable="false">      
+      <attribute id="211" name="projectiles"/>      
+      <multiplicity id="212" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="13" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="213">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="214" name="dummy"/>      
+      <multiplicity id="215" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="11" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="216">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="217" name="print"/>      
+      <multiplicity id="218" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="219">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="220" name="FLOWER_dandelion"/>      
+      <multiplicity id="221" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="222">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="223" name="entities"/>      
+      <multiplicity id="224" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="8" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="225">    
+    <end type="SOURCE" refId="21"/>    
+    <end type="TARGET" refId="23"/>  
+  </generalization>  
+  <association id="226">    
+    <end type="SOURCE" refId="10" navigable="false">      
+      <attribute id="227" name="swim"/>      
+      <multiplicity id="228" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="229">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="230" name="input"/>      
+      <multiplicity id="231" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="4" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="232">    
+    <bendpoint x="2423" y="2413"/>    
+    <bendpoint x="2423" y="2948"/>    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="233" name="print"/>      
+      <multiplicity id="234" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="235">    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="236" name="connectedPlayers"/>      
+      <multiplicity id="237" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="6" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="238">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="239" name="music"/>      
+      <multiplicity id="240" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="28" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="241">    
+    <end type="SOURCE" refId="7"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <association id="242">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="243" name="socketClient"/>      
+      <multiplicity id="244" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="37" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="245">    
+    <end type="SOURCE" refId="11"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <association id="246">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="247" name="window"/>      
+      <multiplicity id="248" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="3" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="249">    
+    <end type="SOURCE" refId="37" navigable="false">      
+      <attribute id="250" name="game"/>      
+      <multiplicity id="251" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="252">    
+    <bendpoint x="1667" y="1914"/>    
+    <bendpoint x="1667" y="2413"/>    
+    <bendpoint x="1667" y="2948"/>    
+    <bendpoint x="1667" y="3609"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="253" name="time"/>      
+      <multiplicity id="254" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="29" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="255">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="256" name="vendor"/>      
+      <multiplicity id="257" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="10" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="258">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="259" name="popup"/>      
+      <multiplicity id="260" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="49" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="261">    
+    <end type="SOURCE" refId="19" navigable="false">      
+      <attribute id="262" name="parent"/>      
+      <multiplicity id="263" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="264">    
+    <end type="SOURCE" refId="43"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="265">    
+    <end type="SOURCE" refId="3" navigable="false">      
+      <attribute id="266" name="game"/>      
+      <multiplicity id="267" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="268">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="269" name="PORTAL">        
+        <position height="18" width="48" x="1667" y="552"/>      
+      </attribute>      
+      <multiplicity id="270" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="271">    
+    <end type="SOURCE" refId="47" navigable="false">      
+      <attribute id="272" name="window"/>      
+      <multiplicity id="273" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="46" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="274">    
+    <end type="SOURCE" refId="50" navigable="false">      
+      <attribute id="275" name="type"/>      
+      <multiplicity id="276" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="48" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="277">    
+    <end type="SOURCE" refId="41"/>    
+    <end type="TARGET" refId="42"/>  
+  </nesting>  
+  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
+    accessors="true" visibility="true">    
+    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
+    <operations public="true" package="true" protected="true" private="true" static="true"/>  
+  </classifier-display>  
+  <association-display labels="true" multiplicity="true"/>
+</class-diagram>
\ No newline at end of file
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index be6724b..2bca48f 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -187,7 +187,7 @@ public class Menu implements Runnable {
 			Thread.sleep(125);
 			splash.setProgress(90, "Pulling InputPanes");
 			Thread.sleep(250);
-			splash.setProgress(92, "Aquring data: Multiplayer");
+			splash.setProgress(92, "Acquiring data: Multiplayer");
 			Thread.sleep(125);
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
 			String multiMsg = "Sorry but multiplayer has been disabled on this version.\nIf you would like multiplayer checkout Alpha 1.6";
@@ -201,7 +201,7 @@ public class Menu implements Runnable {
 						"Enter the name \nleave blank for local"));
 			}
 			Thread.sleep(125);
-			splash.setProgress(94, "Aquring data: Username");
+			splash.setProgress(94, "Acquiring data: Username");
 			String s = JOptionPane.showInputDialog(Game.getGame(),
 					"Enter a name");
 			if (s != null) {

commit fbb02a416857bc47cc5545656725e143519410d9
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Mon Sep 1 17:16:30 2014 +0200

    UML jpg
    
    Added a .jpg for the UML, so people without objectAid can still view the
    .jpg

diff --git a/uml/UML.jpg b/uml/UML.jpg
new file mode 100644
index 0000000..8d2259b
Binary files /dev/null and b/uml/UML.jpg differ

commit d2cf5af38546b59208eeaa50416409836f1ce1ac
Merge: b078b8b fbb02a4
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 17:08:12 2014 +0100

    Merge branch 'master' of github.com:DylanMeeus/JavaGame into DylanMeeus-master

commit ac0efd069522d39007deb9f98783e8a4a5364167
Merge: b078b8b d2cf5af
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Sep 1 17:12:12 2014 +0100

    Merge branch 'DylanMeeus-master'

commit b08792bfa5331010bdeb259bb93188c11a637ab4
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Tue Sep 2 18:06:26 2014 +0200

    accessor fix 1
    
    Fixing the extensive use of accessors to access class variables.

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 269978c..4899101 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -57,7 +57,7 @@ public class Game extends Canvas implements Runnable {
 	private static int steps;
 	private static boolean devMode;
 	private static boolean closingMode;
-	
+
 	private static JFrame frame;
 
 	private static boolean running = false;
@@ -90,7 +90,7 @@ public class Game extends Canvas implements Runnable {
 	private GameServer socketServer;
 	private Printing print = new Printing();
 	private static InputContext context;
-	
+
 	/**
 	 * @author Redomar
 	 * @version Alpha 1.8
@@ -143,33 +143,34 @@ public class Game extends Canvas implements Runnable {
 
 		// socketClient.sendData("ping".getBytes());
 		loginPacket.writeData(getSocketClient());
-		
-		game.setVendor(new Vendor(getLevel(), "Vendor", 215, 215, 304, 543));
-		getLevel().addEntity(getVendor());
+
+		game.setVendor(new Vendor(level, "Vendor", 215, 215, 304, 543));
+		level.addEntity(getVendor());
 	}
 
 	public void setMap(String Map_str) {
 		setLevel(new LevelHandler(Map_str));
-		if(alternateCols[0]){
+		if (alternateCols[0]) {
 			Game.setShirtCol(240);
 		}
-		if(!alternateCols[0]){
+		if (!alternateCols[0]) {
 			Game.setShirtCol(111);
 		}
-		if(alternateCols[1]){
+		if (alternateCols[1]) {
 			Game.setFaceCol(310);
 		}
-		if(!alternateCols[1]){
+		if (!alternateCols[1]) {
 			Game.setFaceCol(543);
 		}
-		setPlayer(new PlayerMP(getLevel(), 100, 100, input,
+		setPlayer(new PlayerMP(level, 100, 100, input,
 				getJdata_UserName(), null, -1, shirtCol, faceCol));
 		level.addEntity(player);
 	}
 
 	public static void npcSpawn() {
 		if (isNpc() == true) {
-			game.setDummy(new Dummy(Game.getLevel(), "Dummy", 100, 150, 500, 543));
+			game.setDummy(new Dummy(game.getLevel(), "Dummy", 100, 150, 500,
+					543));
 			game.level.addEntity(Game.getDummy());
 		}
 	}
@@ -235,7 +236,10 @@ public class Game extends Canvas implements Runnable {
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				getFrame().setTitle("JavaGame - Version "+WordUtils.capitalize(game_Version).substring(1, game_Version.length()));
+				getFrame().setTitle(
+						"JavaGame - Version "
+								+ WordUtils.capitalize(game_Version).substring(
+										1, game_Version.length()));
 				fps = frames;
 				tps = ticks;
 				frames = 0;
@@ -247,7 +251,7 @@ public class Game extends Canvas implements Runnable {
 
 	public void tick() {
 		setTickCount(getTickCount() + 1);
-		getLevel().tick();
+		level.tick();
 	}
 
 	public void render() {
@@ -260,7 +264,7 @@ public class Game extends Canvas implements Runnable {
 		int xOffset = (int) getPlayer().getX() - (screen.getWidth() / 2);
 		int yOffset = (int) getPlayer().getY() - (screen.getHeight() / 2);
 
-		getLevel().renderTiles(screen, xOffset, yOffset);
+		level.renderTiles(screen, xOffset, yOffset);
 
 		/*
 		 * for (int x = 0; x < level.width; x++) { int colour = Colours.get(-1,
@@ -269,8 +273,8 @@ public class Game extends Canvas implements Runnable {
 		 * colour, 1); }
 		 */
 
-		getLevel().renderEntities(screen);
-		getLevel().renderProjectileEntities(screen);
+		level.renderEntities(screen);
+		level.renderProjectileEntities(screen);
 
 		for (int y = 0; y < screen.getHeight(); y++) {
 			for (int x = 0; x < screen.getWidth(); x++) {
@@ -306,16 +310,18 @@ public class Game extends Canvas implements Runnable {
 			print.print("Teleported into new world", PrintTypes.GAME);
 			if (getMap() == 1) {
 				setMap("/levels/water_level.png");
-				if(getDummy()!=null){ // Gave nullPointerException(); upon entering new world.
-					getLevel().removeEntity(getDummy()); 
+				if (getDummy() != null) { // Gave nullPointerException(); upon
+											// entering new world.
+					level.removeEntity(getDummy());
 					setNpc(false);
 				}
-				getLevel().removeEntity(getVendor());
+				level.removeEntity(getVendor());
 				setMap(2);
 			} else if (getMap() == 2) {
 				setMap("/levels/custom_level.png");
-				getLevel().removeEntity(getDummy()); setNpc(false);
-				getLevel().addEntity(getVendor());
+				level.removeEntity(getDummy());
+				setNpc(false);
+				level.addEntity(getVendor());
 				setMap(1);
 			}
 			changeLevel = false;
@@ -334,14 +340,14 @@ public class Game extends Canvas implements Runnable {
 						+ WordUtils.capitalizeFully(player
 								.getSantizedUsername()), 3, getHeight() - 17);
 		g.setColor(Color.ORANGE);
-		
-		if(context.getLocale().getCountry().equals("BE") || context.getLocale().getCountry().equals("FR"))
-		{
-			g.drawString("Press A to quit", (getWidth()/2)-("Press A to quit".length()*3), getHeight() -17);
-		}
-		else
-		{
-			g.drawString("Press Q to quit", (getWidth()/2)-("Press Q to quit".length()*3), getHeight() -17);
+
+		if (context.getLocale().getCountry().equals("BE")
+				|| context.getLocale().getCountry().equals("FR")) {
+			g.drawString("Press A to quit", (getWidth() / 2)
+					- ("Press A to quit".length() * 3), getHeight() - 17);
+		} else {
+			g.drawString("Press Q to quit", (getWidth() / 2)
+					- ("Press Q to quit".length() * 3), getHeight() - 17);
 		}
 		g.setColor(Color.YELLOW);
 		g.drawString(time.getTime(), (getWidth() - 58), (getHeight() - 3));
@@ -380,7 +386,7 @@ public class Game extends Canvas implements Runnable {
 	}
 
 	private void status(Graphics g, boolean TerminalMode, boolean TerminalQuit) {
-		if (TerminalMode == true){
+		if (TerminalMode == true) {
 			g.setColor(Color.CYAN);
 			g.drawString("JavaGame Stats", 0, 10);
 			g.drawString("FPS/TPS: " + fps + "/" + tps, 0, 25);
@@ -388,25 +394,26 @@ public class Game extends Canvas implements Runnable {
 				steps += 1;
 			}
 			g.drawString("Foot Steps: " + steps, 0, 40);
-			g.drawString("NPC: " + WordUtils.capitalize(String.valueOf(isNpc())) , 0, 55);
-			g.drawString("Mouse: " + getMouse().getX() + "x |" + getMouse().getY() + "y", 0, 70);
-			if(getMouse().getButton() != -1) g.drawString("Button: " + getMouse().getButton(), 0, 85);
+			g.drawString(
+					"NPC: " + WordUtils.capitalize(String.valueOf(isNpc())), 0,
+					55);
+			g.drawString("Mouse: " + getMouse().getX() + "x |"
+					+ getMouse().getY() + "y", 0, 70);
+			if (getMouse().getButton() != -1)
+				g.drawString("Button: " + getMouse().getButton(), 0, 85);
 			g.setColor(Color.CYAN);
-			g.fillRect(getMouse().getX()-12, getMouse().getY()-12, 24, 24);
+			g.fillRect(getMouse().getX() - 12, getMouse().getY() - 12, 24, 24);
 		}
-		if (TerminalQuit == true){
+		if (TerminalQuit == true) {
 			g.setColor(Color.BLACK);
 			g.fillRect(0, 0, getWidth(), getHeight());
 			g.setColor(Color.RED);
-			g.drawString("Shutting down the Game", (getWidth()/2)-70, (getHeight()/2)-8);
+			g.drawString("Shutting down the Game", (getWidth() / 2) - 70,
+					(getHeight() / 2) - 8);
 			g.dispose();
 		}
 	}
 
-	public static void main(String[] args) {
-		new Menu().start();
-	}
-
 	public static JFrame getFrame() {
 		return Game.frame;
 	}
@@ -578,12 +585,12 @@ public class Game extends Canvas implements Runnable {
 	public static void setAlternateCols(boolean[] alternateCols) {
 		Game.alternateCols = alternateCols;
 	}
-	
-	public static void setAternateColsR(boolean alternateCols){
+
+	public static void setAternateColsR(boolean alternateCols) {
 		Game.alternateCols[1] = alternateCols;
 	}
-	
-	public static void setAternateColsS(boolean alternateCols){
+
+	public static void setAternateColsS(boolean alternateCols) {
 		Game.alternateCols[0] = alternateCols;
 	}
 
diff --git a/src/com/redomar/game/InputHandler.java b/src/com/redomar/game/InputHandler.java
index 5410af0..80e661b 100644
--- a/src/com/redomar/game/InputHandler.java
+++ b/src/com/redomar/game/InputHandler.java
@@ -73,35 +73,35 @@ public class InputHandler implements KeyListener {
 		if (isIgnoreInput() == false) {
 			if (isAzertyCountry) {
 				if (keyCode == KeyEvent.VK_Z || keyCode == KeyEvent.VK_UP) {
-					getUp().toggle(isPressed);
+					up.toggle(isPressed);
 				}
 
 				if (keyCode == KeyEvent.VK_Q || keyCode == KeyEvent.VK_LEFT) {
-					getLeft().toggle(isPressed);
+					left.toggle(isPressed);
 				}
 			} else {
 				if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
-					getUp().toggle(isPressed);
+					up.toggle(isPressed);
 				}
 
 				if (keyCode == KeyEvent.VK_A || keyCode == KeyEvent.VK_LEFT) {
-					getLeft().toggle(isPressed);
+					left.toggle(isPressed);
 				}
 			}
 
 			if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
-				getDown().toggle(isPressed);
+				down.toggle(isPressed);
 			}
 
 			if (keyCode == KeyEvent.VK_D || keyCode == KeyEvent.VK_RIGHT) {
-				getRight().toggle(isPressed);
+				right.toggle(isPressed);
 			}
 		}
 		if (isIgnoreInput() == true) {
-			getUp().toggle(false);
-			getDown().toggle(false);
-			getLeft().toggle(false);
-			getRight().toggle(false);
+			up.toggle(false);
+			down.toggle(false);
+			left.toggle(false);
+			right.toggle(false);
 		}
 		if (keyCode == KeyEvent.VK_M) {
 			this.setPlayMusic(true);
diff --git a/src/com/redomar/game/Launcher.java b/src/com/redomar/game/Launcher.java
new file mode 100644
index 0000000..224ac35
--- /dev/null
+++ b/src/com/redomar/game/Launcher.java
@@ -0,0 +1,11 @@
+package com.redomar.game;
+
+import com.redomar.game.menu.Menu;
+
+public class Launcher
+{
+	public static void main(String[] args)
+	{
+		new Menu().start();
+	}
+}
diff --git a/src/com/redomar/game/entities/Dummy.java b/src/com/redomar/game/entities/Dummy.java
index c0f7270..6f164f5 100644
--- a/src/com/redomar/game/entities/Dummy.java
+++ b/src/com/redomar/game/entities/Dummy.java
@@ -40,7 +40,7 @@ public class Dummy extends Mob {
 		
 
 		setSwim(new Swim(level, (int) getX(), (int) getY()));
-		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		swimType = swim.swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
 		isMagma = swimType[1];
 		isMuddy = swimType[2];
@@ -77,7 +77,7 @@ public class Dummy extends Mob {
 		int yOffset = (int) getY() - modifier / 2 - 4;
 
 		if (isSwimming || isMagma || isMuddy) {
-			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			swimColour = swim.waveCols(isSwimming, isMagma, isMuddy);
 			
 			int waterColour = 0;
 			yOffset += 4;
diff --git a/src/com/redomar/game/entities/Player.java b/src/com/redomar/game/entities/Player.java
index 86d1592..dc406ff 100644
--- a/src/com/redomar/game/entities/Player.java
+++ b/src/com/redomar/game/entities/Player.java
@@ -103,7 +103,7 @@ public class Player extends Mob {
 		}
 
 		setSwim(new Swim(level, (int) getX(), (int) getY()));
-		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		swimType = swim.swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
 		isMagma = swimType[1];
 		isMuddy = swimType[2];
@@ -148,7 +148,7 @@ public class Player extends Mob {
 		}
 
 		if(isSwimming || isMagma || isMuddy){
-			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			swimColour = swim.waveCols(isSwimming, isMagma, isMuddy);
 			
 			int waterColour = 0;
 			yOffset += 4;
diff --git a/src/com/redomar/game/entities/Vendor.java b/src/com/redomar/game/entities/Vendor.java
index 7641ce7..bf47887 100644
--- a/src/com/redomar/game/entities/Vendor.java
+++ b/src/com/redomar/game/entities/Vendor.java
@@ -44,7 +44,7 @@ public class Vendor extends Mob {
 		moveMob(xa, ya, this);
 		
 		setSwim(new Swim(level, (int) getX(), (int) getY()));
-		swimType = getSwim().swimming(isSwimming, isMagma, isMuddy);
+		swimType = swim.swimming(isSwimming, isMagma, isMuddy);
 		isSwimming = swimType[0];
 		isMagma = swimType[1];
 		isMuddy = swimType[2];
@@ -54,7 +54,7 @@ public class Vendor extends Mob {
 	}
 
 	public void render(Screen screen) {
-		setTime(getTime() + 1);
+		setTime(time + 1);
 		int xTile = 8;
 		int yTile = 28;
 		int walkingSpeed = 4;
@@ -81,7 +81,7 @@ public class Vendor extends Mob {
 		int yOffset = (int) getY() - modifier / 2 - 4;
 
 		if (isSwimming || isMagma || isMuddy) {
-			swimColour = getSwim().waveCols(isSwimming, isMagma, isMuddy);
+			swimColour = swim.waveCols(isSwimming, isMagma, isMuddy);
 			
 			int waterColour = 0;
 			yOffset += 4;
diff --git a/src/com/redomar/game/gfx/SpriteSheet.java b/src/com/redomar/game/gfx/SpriteSheet.java
index 38f8cc0..f6f34c9 100644
--- a/src/com/redomar/game/gfx/SpriteSheet.java
+++ b/src/com/redomar/game/gfx/SpriteSheet.java
@@ -30,7 +30,7 @@ public class SpriteSheet {
 		this.setWidth(image.getWidth());
 		this.height = image.getHeight();
 
-		pixels = image.getRGB(0, 0, getWidth(), height, null, 0, getWidth());
+		pixels = image.getRGB(0, 0, width, height, null, 0, width);
 
 		for (int i = 0; i < pixels.length; i++) {
 			pixels[i] = (pixels[i] & 0xff) / 64; // removes alpha (transparency)
diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index d1dce7c..7d1d70c 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -123,7 +123,7 @@ public class LevelHandler {
 	}
 
 	public void tick() {
-		for (Entity e : getEntities()) {
+		for (Entity e : entities) {
 			e.tick();
 		}
 		
@@ -164,7 +164,7 @@ public class LevelHandler {
 	}
 
 	public void renderEntities(Screen screen) {
-		for (Entity e : getEntities()) {
+		for (Entity e : entities) {
 			e.render(screen);
 		}
 	}
@@ -183,7 +183,7 @@ public class LevelHandler {
 	}
 
 	public void addEntity(Entity entity) {
-		this.getEntities().add(entity);
+		this.entities.add(entity);
 		print.print("Added "+entity.getName()+" Entity", PrintTypes.LEVEL);
 		try {
 			Thread.sleep(100);
@@ -197,7 +197,7 @@ public class LevelHandler {
 	}
 
 	public void removeEntity(Entity entity) {
-		this.getEntities().remove(entity);
+		this.entities.remove(entity);
 		print.print("Removed "+entity.getName()+" Entity", PrintTypes.LEVEL);
 		try {
 			Thread.sleep(100);
@@ -212,21 +212,21 @@ public class LevelHandler {
 
 	public void removeEntity(String username) {
 		int index = 0;
-		for (Entity e : getEntities()) {
+		for (Entity e : entities) {
 			if (e instanceof PlayerMP
 					&& ((PlayerMP) e).getUsername().equalsIgnoreCase(username)) {
 				break;
 			}
 			index++;
 		}
-		this.getEntities().remove(index);
+		this.entities.remove(index);
 		Packet01Disconnect packet = new Packet01Disconnect(Game.getPlayer().getUsername());
 		packet.writeData(Game.getSocketClient());
 	}
 
 	private int getPlayerMPIndex(String username) {
 		int index = 0;
-		for (Entity e : getEntities()) {
+		for (Entity e : entities) {
 			if (e instanceof PlayerMP
 					&& ((PlayerMP) e).getUsername().equalsIgnoreCase(username)) {
 				break;
@@ -239,7 +239,7 @@ public class LevelHandler {
 	public void movePlayer(String username, int x, int y, int numSteps,
 			boolean isMoving, int movingDir) {
 		int index = getPlayerMPIndex(username);
-		PlayerMP player = (PlayerMP) this.getEntities().get(index);
+		PlayerMP player = (PlayerMP) this.entities.get(index);
 		player.setX(x);
 		player.setY(y);
 		player.setNumSteps(numSteps);
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 2bca48f..8b80b02 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -262,7 +262,7 @@ public class Menu implements Runnable {
 	}
 
 	public static void setSelectedStart(boolean selectedStart) {
-		Menu.selectedStart = selectedStart;
+		selectedStart = selectedStart;
 	}
 
 	public static boolean isSelectedExit() {

commit fa0a3d0b0ffe0f4163c26c5ddfad5bf0c6356d3e
Author: Dylan Meeus <meeusdylan@hotmail.com>
Date:   Wed Sep 3 15:16:19 2014 +0200

    accessor fix 2
    
    continuation of the first accessor fix.

diff --git a/src/com/redomar/game/lib/Keys.java b/src/com/redomar/game/lib/Keys.java
index e99620f..3533e40 100644
--- a/src/com/redomar/game/lib/Keys.java
+++ b/src/com/redomar/game/lib/Keys.java
@@ -47,7 +47,7 @@ public class Keys implements KeyListener {
 
 	public void toggleKey(int keyCode, boolean isPressed) {
 		if (keyCode == KeyEvent.VK_W || keyCode == KeyEvent.VK_UP) {
-			getUp().toggle(isPressed);
+			up.toggle(isPressed);
 		}
 		if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_DOWN) {
 			getDown().toggle(isPressed);
diff --git a/src/com/redomar/game/lib/Name.java b/src/com/redomar/game/lib/Name.java
index e499a78..a216932 100644
--- a/src/com/redomar/game/lib/Name.java
+++ b/src/com/redomar/game/lib/Name.java
@@ -13,7 +13,7 @@ public class Name {
 
 	public String setName(String name) {
 
-		String finalName = name + getName_ID();
+		String finalName = name + name_ID;
 		return finalName;
 	}
 
diff --git a/src/com/redomar/game/menu/DedicatedJFrame.java b/src/com/redomar/game/menu/DedicatedJFrame.java
index 4e28633..2ba5857 100644
--- a/src/com/redomar/game/menu/DedicatedJFrame.java
+++ b/src/com/redomar/game/menu/DedicatedJFrame.java
@@ -17,13 +17,13 @@ public class DedicatedJFrame extends Canvas {
 		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
 
 		setFrame(new JFrame(NAME));
-		//getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		getFrame().setLayout(new BorderLayout());
-		getFrame().add(this, BorderLayout.CENTER);
-		getFrame().pack();
-		getFrame().setResizable(false);
-		getFrame().setLocationRelativeTo(null);
-		getFrame().setVisible(true);
+		//frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		frame.setLayout(new BorderLayout());
+		frame.add(this, BorderLayout.CENTER);
+		frame.pack();
+		frame.setResizable(false);
+		frame.setLocationRelativeTo(null);
+		frame.setVisible(true);
 	}
 
 	public JFrame getFrame() {
@@ -39,7 +39,7 @@ public class DedicatedJFrame extends Canvas {
 	}
 
 	public void stopFrame() {
-		getFrame().dispose();
+		frame.dispose();
 	}
 
 }
diff --git a/src/com/redomar/game/objects/InventoryWindow.java b/src/com/redomar/game/objects/InventoryWindow.java
index 617f127..3a92e8a 100644
--- a/src/com/redomar/game/objects/InventoryWindow.java
+++ b/src/com/redomar/game/objects/InventoryWindow.java
@@ -38,7 +38,7 @@ public class InventoryWindow implements Runnable{
 		long lastTimer = System.currentTimeMillis();
 		double delta = 0;
 		
-		setWindow(new InventoryHandler(getFrame()));
+		setWindow(new InventoryHandler(frame));
 
 		while (running) {
 			long now = System.nanoTime();
@@ -65,7 +65,7 @@ public class InventoryWindow implements Runnable{
 
 			if (System.currentTimeMillis() - lastTimer >= 1000) {
 				lastTimer += 1000;
-				getFrame().getFrame().setTitle(
+				frame.getFrame().setTitle(
 						"Frames: " + frames + " Ticks: " + ticks);
 				frames = 0;
 				ticks = 0;
@@ -74,9 +74,9 @@ public class InventoryWindow implements Runnable{
 	}
 	
 	private void render() {
-		BufferStrategy bs = getFrame().getBufferStrategy();
+		BufferStrategy bs = frame.getBufferStrategy();
 		if(bs == null){
-			getFrame().createBufferStrategy(3);
+			frame.createBufferStrategy(3);
 			return;
 		}
 		
diff --git a/src/com/redomar/game/objects/Items.java b/src/com/redomar/game/objects/Items.java
index f7b5fc8..1726d0f 100644
--- a/src/com/redomar/game/objects/Items.java
+++ b/src/com/redomar/game/objects/Items.java
@@ -1,7 +1,6 @@
 package com.redomar.game.objects;
 
 public enum Items {
-
 	Stick,
 	Torch,
 	Sword,
diff --git a/src/com/redomar/game/script/PrintTypes.java b/src/com/redomar/game/script/PrintTypes.java
index 640c8f4..e192e44 100644
--- a/src/com/redomar/game/script/PrintTypes.java
+++ b/src/com/redomar/game/script/PrintTypes.java
@@ -1,7 +1,6 @@
 package com.redomar.game.script;
 
 public enum PrintTypes {
-
 	GAME,
 	LEVEL,
 	MUSIC,
diff --git a/src/com/redomar/game/script/Printing.java b/src/com/redomar/game/script/Printing.java
index a59edb6..26a5c15 100644
--- a/src/com/redomar/game/script/Printing.java
+++ b/src/com/redomar/game/script/Printing.java
@@ -25,9 +25,9 @@ public class Printing {
 		String msgTime = "[" + time.getTime() + "]";
 		String msgType = "[" + type.toString() + "]";
 		if(redMode == true){
-			System.err.println(msgType + msgTime + getMessage());
+			System.err.println(msgType + msgTime + message);
 		}else{
-			System.out.println(msgType + msgTime + getMessage());
+			System.out.println(msgType + msgTime + message);
 		}
 	}
 

commit 04cadf6a8d145d5798f05484317cdcc9bf884dfc
Merge: ac0efd0 fa0a3d0
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 7 01:00:33 2014 +0100

    Merge branch 'Experimental' of github.com:DylanMeeus/JavaGame into DylanMeeus-Experimental
    
    Conflicts:
    	src/com/redomar/game/Game.java

commit a12e807bfadaedf614f7b464db977adcb420d451
Merge: ac0efd0 04cadf6
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 7 01:02:03 2014 +0100

    Merge branch 'DylanMeeus-Experimental' into aside

commit 727fc242c0ea2d22ae95274aa5b8110515d379e8
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 7 01:21:14 2014 +0100

    Fixed a few warnings
    Removed an unused import
    fixed a few varible mistakes

diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 4899101..03f4380 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -25,7 +25,6 @@ import com.redomar.game.level.LevelHandler;
 import com.redomar.game.lib.Font;
 import com.redomar.game.lib.Music;
 import com.redomar.game.lib.Time;
-import com.redomar.game.menu.Menu;
 import com.redomar.game.net.GameClient;
 import com.redomar.game.net.GameServer;
 import com.redomar.game.net.packets.Packet00Login;
@@ -169,7 +168,7 @@ public class Game extends Canvas implements Runnable {
 
 	public static void npcSpawn() {
 		if (isNpc() == true) {
-			game.setDummy(new Dummy(game.getLevel(), "Dummy", 100, 150, 500,
+			game.setDummy(new Dummy(game.level, "Dummy", 100, 150, 500,
 					543));
 			game.level.addEntity(Game.getDummy());
 		}
diff --git a/src/com/redomar/game/menu/Menu.java b/src/com/redomar/game/menu/Menu.java
index 8b80b02..2bca48f 100644
--- a/src/com/redomar/game/menu/Menu.java
+++ b/src/com/redomar/game/menu/Menu.java
@@ -262,7 +262,7 @@ public class Menu implements Runnable {
 	}
 
 	public static void setSelectedStart(boolean selectedStart) {
-		selectedStart = selectedStart;
+		Menu.selectedStart = selectedStart;
 	}
 
 	public static boolean isSelectedExit() {

commit 26425144f334a2293f1e927d1211d0aba38350a5
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Sun Sep 7 01:30:27 2014 +0100

    Moved the UML file to game directory

diff --git a/src/UML.ucls b/src/UML.ucls
deleted file mode 100644
index 6c9da34..0000000
--- a/src/UML.ucls
+++ /dev/null
@@ -1,1119 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<class-diagram version="1.1.6" icons="true" always-add-relationships="false" generalizations="true" realizations="true" 
-  associations="true" dependencies="false" nesting-relationships="true">  
-  <class id="1" language="java" name="com.redomar.game.Game" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/Game.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="1827" width="213" x="2669" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="2" language="java" name="com.redomar.game.InputHandler.Key" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="189" width="152" x="3383" y="2948"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="3" language="java" name="com.redomar.game.WindowHandler" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/WindowHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="207" width="221" x="2408" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="4" language="java" name="com.redomar.game.InputHandler" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="495" width="165" x="3383" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="5" language="java" name="com.redomar.game.MouseHandler" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/MouseHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="315" width="193" x="2954" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="6" language="java" name="com.redomar.game.entities.PlayerMP" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/PlayerMP.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="153" width="365" x="2782" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="7" language="java" name="com.redomar.game.entities.Player" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/Player.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="441" width="275" x="3480" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="8" language="java" name="com.redomar.game.entities.Entity" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/Entity.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="297" width="133" x="3701" y="3609"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="9" language="java" name="com.redomar.game.entities.Mob" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/Mob.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="585" width="394" x="4053" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="10" language="java" name="com.redomar.game.entities.Vendor" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/Vendor.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="459" width="218" x="3795" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="11" language="java" name="com.redomar.game.entities.Dummy" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/Dummy.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="351" width="218" x="4053" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="12" language="java" name="com.redomar.game.entities.efx.Swim" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/efx/Swim.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="243" width="249" x="3764" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="13" language="java" name="com.redomar.game.entities.projectiles.Projectile" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/projectiles/Projectile.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="387" width="222" x="4334" y="3946"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="14" language="java" name="com.redomar.game.entities.projectiles.Small" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/projectiles/Small.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="153" width="184" x="4452" y="4373"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="15" language="java" name="com.redomar.game.entities.projectiles.Medium" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/entities/projectiles/Medium.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="153" width="195" x="4217" y="4373"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="16" language="java" name="com.redomar.game.gfx.Screen" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/gfx/Screen.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="405" width="170" x="2198" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="17" language="java" name="com.redomar.game.gfx.Colours" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/gfx/Colours.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="117" width="116" x="352" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="18" language="java" name="com.redomar.game.gfx.SpriteSheet" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/gfx/SpriteSheet.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="225" width="121" x="2198" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="19" language="java" name="com.redomar.game.level.Node" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/Node.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="135" width="197" x="4053" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="20" language="java" name="com.redomar.game.level.LevelHandler" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/LevelHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="621" width="238" x="3105" y="2948"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="21" language="java" name="com.redomar.game.level.tiles.BasicSolidTile" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/tiles/BasicSolidTile.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="81" width="167" x="1470" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="22" language="java" name="com.redomar.game.level.tiles.AnimatedTile" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/tiles/AnimatedTile.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="171" width="174" x="1256" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="23" language="java" name="com.redomar.game.level.tiles.BasicTile" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/tiles/BasicTile.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="153" width="217" x="1420" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="24" language="java" name="com.redomar.game.level.tiles.Tile" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/level/tiles/Tile.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="549" width="221" x="1420" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="25" language="java" name="com.redomar.game.lib.Name" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Name.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="171" width="136" x="3588" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="26" language="java" name="com.redomar.game.lib.Font" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Font.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="225" width="211" x="3229" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="27" language="java" name="com.redomar.game.lib.Mouse" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Mouse.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="207" width="193" x="508" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="28" language="java" name="com.redomar.game.lib.Music" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Music.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="315" width="138" x="1999" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="29" language="java" name="com.redomar.game.lib.Time" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Time.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="99" width="103" x="1658" y="3946"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="30" language="java" name="com.redomar.game.lib.Keys" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="225" width="165" x="4487" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="31" language="java" name="com.redomar.game.lib.Keys.Key" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="171" width="152" x="4487" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="32" language="java" name="com.redomar.game.lib.SleepThread" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/SleepThread.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="99" width="103" x="209" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="33" language="java" name="com.redomar.game.lib.utils.Vector2i" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/lib/utils/Vector2i.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="297" width="157" x="4053" y="2948"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="34" language="java" name="com.redomar.game.menu.Menu" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/menu/Menu.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="693" width="243" x="3770" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="35" language="java" name="com.redomar.game.menu.MenuInput" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/menu/MenuInput.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="171" width="165" x="741" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="36" language="java" name="com.redomar.game.menu.DedicatedJFrame" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/menu/DedicatedJFrame.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="189" width="187" x="4437" y="2948"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="37" language="java" name="com.redomar.game.net.GameClient" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/GameClient.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="243" width="261" x="1698" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="38" language="java" name="com.redomar.game.net.GameServer" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/GameServer.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="297" width="245" x="2669" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="39" language="java" name="com.redomar.game.net.packets.Packet00Login" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/packets/Packet00Login.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="261" width="165" x="946" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="40" language="java" name="com.redomar.game.net.packets.Packet02Move" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/packets/Packet02Move.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="369" width="229" x="1151" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="41" language="java" name="com.redomar.game.net.packets.Packet" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="207" width="189" x="946" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <enumeration id="42" language="java" name="com.redomar.game.net.packets.Packet.PacketTypes" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="189" width="156" x="545" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </enumeration>  
-  <class id="43" language="java" name="com.redomar.game.net.packets.Packet01Disconnect" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/net/packets/Packet01Disconnect.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="189" width="165" x="741" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="44" language="java" name="com.redomar.game.objects.Inventory" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/objects/Inventory.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="225" width="124" x="4692" y="37"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <enumeration id="45" language="java" name="com.redomar.game.objects.Items" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/objects/Items.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="-1" width="-1" x="82" y="101"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </enumeration>  
-  <class id="46" language="java" name="com.redomar.game.objects.InventoryHandler" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/objects/InventoryHandler.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="207" width="221" x="4437" y="2413"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="47" language="java" name="com.redomar.game.objects.InventoryWindow" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/objects/InventoryWindow.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="315" width="194" x="4679" y="1914"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <enumeration id="48" language="java" name="com.redomar.game.script.PrintTypes" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/script/PrintTypes.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="189" width="133" x="2158" y="3946"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </enumeration>  
-  <class id="49" language="java" name="com.redomar.game.script.PopUp" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/script/PopUp.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="117" width="117" x="3575" y="2948"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <class id="50" language="java" name="com.redomar.game.script.Printing" project="JavaGame" 
-    file="/JavaGame/src/com/redomar/game/script/Printing.java" binary="false" corner="BOTTOM_RIGHT">    
-    <position height="207" width="196" x="2158" y="3609"/>    
-    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
-      visibility="true">      
-      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
-      <operations public="true" package="true" protected="true" private="true" static="true"/>    
-    </display>  
-  </class>  
-  <association id="51">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="52" name="player"/>      
-      <multiplicity id="53" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="7" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="54">    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="55" name="down"/>      
-      <multiplicity id="56" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="2" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="57">    
-    <end type="SOURCE" refId="20" navigable="false">      
-      <attribute id="58" name="entities_p"/>      
-      <multiplicity id="59" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="8" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="60">    
-    <end type="SOURCE" refId="39"/>    
-    <end type="TARGET" refId="41"/>  
-  </generalization>  
-  <association id="61">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="62" name="CHISELED_stone"/>      
-      <multiplicity id="63" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="64">    
-    <end type="SOURCE" refId="44" navigable="false">      
-      <attribute id="65" name="inv_window"/>      
-      <multiplicity id="66" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="47" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="67">    
-    <end type="SOURCE" refId="50" navigable="false">      
-      <attribute id="68" name="time"/>      
-      <multiplicity id="69" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="29" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="70">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="71" name="MAGMA"/>      
-      <multiplicity id="72" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="73">    
-    <end type="SOURCE" refId="23"/>    
-    <end type="TARGET" refId="24"/>  
-  </generalization>  
-  <association id="74">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="75" name="VOID"/>      
-      <multiplicity id="76" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="77">    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="78" name="up"/>      
-      <multiplicity id="79" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="2" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="80">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="81" name="CHEST_a"/>      
-      <multiplicity id="82" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="83">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="84" name="CHEST_b"/>      
-      <multiplicity id="85" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="86">    
-    <end type="SOURCE" refId="46" navigable="false">      
-      <attribute id="87" name="frame"/>      
-      <multiplicity id="88" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="36" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="89">    
-    <end type="SOURCE" refId="14"/>    
-    <end type="TARGET" refId="13"/>  
-  </generalization>  
-  <association id="90">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="91" name="GRASS"/>      
-      <multiplicity id="92" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="93">    
-    <end type="SOURCE" refId="30" navigable="false">      
-      <attribute id="94" name="down"/>      
-      <multiplicity id="95" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="31" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="96">    
-    <end type="SOURCE" refId="30" navigable="false">      
-      <attribute id="97" name="up"/>      
-      <multiplicity id="98" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="31" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="99">    
-    <bendpoint x="2088" y="2413"/>    
-    <bendpoint x="2088" y="2948"/>    
-    <end type="SOURCE" refId="28" navigable="false">      
-      <attribute id="100" name="print"/>      
-      <multiplicity id="101" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="102">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="103" name="font"/>      
-      <multiplicity id="104" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="26" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="105">    
-    <end type="SOURCE" refId="34" navigable="false">      
-      <attribute id="106" name="font"/>      
-      <multiplicity id="107" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="26" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="108">    
-    <bendpoint x="2779" y="2948"/>    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="109" name="print"/>      
-      <multiplicity id="110" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="111">    
-    <end type="SOURCE" refId="11" navigable="false">      
-      <attribute id="112" name="swim"/>      
-      <multiplicity id="113" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="12" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="114">    
-    <end type="SOURCE" refId="40"/>    
-    <end type="TARGET" refId="41"/>  
-  </generalization>  
-  <association id="115">    
-    <bendpoint x="4301" y="1914"/>    
-    <bendpoint x="4311" y="2413"/>    
-    <end type="SOURCE" refId="34" navigable="false">      
-      <attribute id="116" name="frame"/>      
-      <multiplicity id="117" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="36" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="118">    
-    <bendpoint x="3198" y="1914"/>    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="119" name="input"/>      
-      <multiplicity id="120" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="4" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="121">    
-    <end type="SOURCE" refId="7" navigable="false">      
-      <attribute id="122" name="customeName"/>      
-      <multiplicity id="123" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="25" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="124">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="125" name="SAND"/>      
-      <multiplicity id="126" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="127">    
-    <end type="SOURCE" refId="38" navigable="false">      
-      <attribute id="128" name="game"/>      
-      <multiplicity id="129" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="1" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="130">    
-    <bendpoint x="4688" y="2413"/>    
-    <end type="SOURCE" refId="47" navigable="false">      
-      <attribute id="131" name="frame"/>      
-      <multiplicity id="132" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="36" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="133">    
-    <end type="SOURCE" refId="12" navigable="false">      
-      <attribute id="134" name="level"/>      
-      <multiplicity id="135" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="20" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="136">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="137" name="screen"/>      
-      <multiplicity id="138" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="16" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="139">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="140" name="socketServer"/>      
-      <multiplicity id="141" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="38" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="142">    
-    <end type="SOURCE" refId="7" navigable="false">      
-      <attribute id="143" name="swim"/>      
-      <multiplicity id="144" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="12" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="145">    
-    <end type="SOURCE" refId="10"/>    
-    <end type="TARGET" refId="9"/>  
-  </generalization>  
-  <generalization id="146">    
-    <end type="SOURCE" refId="15"/>    
-    <end type="TARGET" refId="13"/>  
-  </generalization>  
-  <association id="147">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="148" name="FLOWER_rose"/>      
-      <multiplicity id="149" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="150">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="151" name="game"/>      
-      <multiplicity id="152" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="1" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="153">    
-    <bendpoint x="3177" y="1914"/>    
-    <bendpoint x="3177" y="2413"/>    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="154" name="level"/>      
-      <multiplicity id="155" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="20" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="156">    
-    <end type="SOURCE" refId="16" navigable="false">      
-      <attribute id="157" name="sheet"/>      
-      <multiplicity id="158" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="18" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="159">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="160" name="tiles"/>      
-      <multiplicity id="161" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="162">    
-    <bendpoint x="1937" y="2413"/>    
-    <bendpoint x="1937" y="2948"/>    
-    <end type="SOURCE" refId="37" navigable="false">      
-      <attribute id="163" name="print"/>      
-      <multiplicity id="164" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="165">    
-    <bendpoint x="4322" y="1914"/>    
-    <bendpoint x="4290" y="2413"/>    
-    <bendpoint x="4290" y="2948"/>    
-    <end type="SOURCE" refId="9"/>    
-    <end type="TARGET" refId="8"/>  
-  </generalization>  
-  <association id="166">    
-    <end type="SOURCE" refId="11" navigable="false">      
-      <attribute id="167" name="path"/>      
-      <multiplicity id="168" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="19" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <nesting id="169">    
-    <end type="SOURCE" refId="30"/>    
-    <end type="TARGET" refId="31"/>  
-  </nesting>  
-  <association id="170">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="171" name="mouse"/>      
-      <multiplicity id="172" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="5" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="173">    
-    <bendpoint x="2167" y="1914"/>    
-    <bendpoint x="2167" y="2413"/>    
-    <bendpoint x="2167" y="2948"/>    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="174" name="print"/>      
-      <multiplicity id="175" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="176">    
-    <end type="SOURCE" refId="19" navigable="false">      
-      <attribute id="177" name="tile"/>      
-      <multiplicity id="178" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="33" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="179">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="180" name="STONE"/>      
-      <multiplicity id="181" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="182">    
-    <end type="SOURCE" refId="10" navigable="false">      
-      <attribute id="183" name="path"/>      
-      <multiplicity id="184" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="19" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="185">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="186" name="DIRT"/>      
-      <multiplicity id="187" minimum="0" maximum="1">        
-        <position height="16" width="23" x="1657" y="551"/>      
-      </multiplicity>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="188">    
-    <end type="SOURCE" refId="6"/>    
-    <end type="TARGET" refId="7"/>  
-  </generalization>  
-  <association id="189">    
-    <end type="SOURCE" refId="8" navigable="false">      
-      <attribute id="190" name="level"/>      
-      <multiplicity id="191" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="20" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="192">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="193" name="CARPET_red"/>      
-      <multiplicity id="194" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="195">    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="196" name="right"/>      
-      <multiplicity id="197" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="2" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="198">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="199" name="DIRT_WET"/>      
-      <multiplicity id="200" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="201">    
-    <end type="SOURCE" refId="22"/>    
-    <end type="TARGET" refId="23"/>  
-  </generalization>  
-  <association id="202">    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="203" name="left"/>      
-      <multiplicity id="204" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="2" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <nesting id="205">    
-    <end type="SOURCE" refId="4"/>    
-    <end type="TARGET" refId="2"/>  
-  </nesting>  
-  <generalization id="206">    
-    <end type="SOURCE" refId="13"/>    
-    <end type="TARGET" refId="8"/>  
-  </generalization>  
-  <association id="207">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="208" name="WATER"/>      
-      <multiplicity id="209" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="210">    
-    <bendpoint x="4343" y="1914"/>    
-    <bendpoint x="4343" y="2413"/>    
-    <bendpoint x="4343" y="2948"/>    
-    <bendpoint x="4343" y="3609"/>    
-    <end type="SOURCE" refId="9" navigable="false">      
-      <attribute id="211" name="projectiles"/>      
-      <multiplicity id="212" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="13" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="213">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="214" name="dummy"/>      
-      <multiplicity id="215" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="11" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="216">    
-    <end type="SOURCE" refId="20" navigable="false">      
-      <attribute id="217" name="print"/>      
-      <multiplicity id="218" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="219">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="220" name="FLOWER_dandelion"/>      
-      <multiplicity id="221" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="222">    
-    <end type="SOURCE" refId="20" navigable="false">      
-      <attribute id="223" name="entities"/>      
-      <multiplicity id="224" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="8" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="225">    
-    <end type="SOURCE" refId="21"/>    
-    <end type="TARGET" refId="23"/>  
-  </generalization>  
-  <association id="226">    
-    <end type="SOURCE" refId="10" navigable="false">      
-      <attribute id="227" name="swim"/>      
-      <multiplicity id="228" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="12" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="229">    
-    <end type="SOURCE" refId="7" navigable="false">      
-      <attribute id="230" name="input"/>      
-      <multiplicity id="231" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="4" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="232">    
-    <bendpoint x="2423" y="2413"/>    
-    <bendpoint x="2423" y="2948"/>    
-    <end type="SOURCE" refId="38" navigable="false">      
-      <attribute id="233" name="print"/>      
-      <multiplicity id="234" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="50" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="235">    
-    <end type="SOURCE" refId="38" navigable="false">      
-      <attribute id="236" name="connectedPlayers"/>      
-      <multiplicity id="237" minimum="0" maximum="2147483647"/>    
-    </end>    
-    <end type="TARGET" refId="6" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="238">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="239" name="music"/>      
-      <multiplicity id="240" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="28" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="241">    
-    <end type="SOURCE" refId="7"/>    
-    <end type="TARGET" refId="9"/>  
-  </generalization>  
-  <association id="242">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="243" name="socketClient"/>      
-      <multiplicity id="244" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="37" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="245">    
-    <end type="SOURCE" refId="11"/>    
-    <end type="TARGET" refId="9"/>  
-  </generalization>  
-  <association id="246">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="247" name="window"/>      
-      <multiplicity id="248" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="3" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="249">    
-    <end type="SOURCE" refId="37" navigable="false">      
-      <attribute id="250" name="game"/>      
-      <multiplicity id="251" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="1" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="252">    
-    <bendpoint x="1667" y="1914"/>    
-    <bendpoint x="1667" y="2413"/>    
-    <bendpoint x="1667" y="2948"/>    
-    <bendpoint x="1667" y="3609"/>    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="253" name="time"/>      
-      <multiplicity id="254" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="29" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="255">    
-    <end type="SOURCE" refId="1" navigable="false">      
-      <attribute id="256" name="vendor"/>      
-      <multiplicity id="257" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="10" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="258">    
-    <end type="SOURCE" refId="4" navigable="false">      
-      <attribute id="259" name="popup"/>      
-      <multiplicity id="260" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="49" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="261">    
-    <end type="SOURCE" refId="19" navigable="false">      
-      <attribute id="262" name="parent"/>      
-      <multiplicity id="263" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="19" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <generalization id="264">    
-    <end type="SOURCE" refId="43"/>    
-    <end type="TARGET" refId="41"/>  
-  </generalization>  
-  <association id="265">    
-    <end type="SOURCE" refId="3" navigable="false">      
-      <attribute id="266" name="game"/>      
-      <multiplicity id="267" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="1" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="268">    
-    <end type="SOURCE" refId="24" navigable="false">      
-      <attribute id="269" name="PORTAL">        
-        <position height="18" width="48" x="1667" y="552"/>      
-      </attribute>      
-      <multiplicity id="270" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="24" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="271">    
-    <end type="SOURCE" refId="47" navigable="false">      
-      <attribute id="272" name="window"/>      
-      <multiplicity id="273" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="46" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <association id="274">    
-    <end type="SOURCE" refId="50" navigable="false">      
-      <attribute id="275" name="type"/>      
-      <multiplicity id="276" minimum="0" maximum="1"/>    
-    </end>    
-    <end type="TARGET" refId="48" navigable="true"/>    
-    <display labels="true" multiplicity="true"/>  
-  </association>  
-  <nesting id="277">    
-    <end type="SOURCE" refId="41"/>    
-    <end type="TARGET" refId="42"/>  
-  </nesting>  
-  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
-    accessors="true" visibility="true">    
-    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
-    <operations public="true" package="true" protected="true" private="true" static="true"/>  
-  </classifier-display>  
-  <association-display labels="true" multiplicity="true"/>
-</class-diagram>
\ No newline at end of file
diff --git a/src/com/redomar/game/UML.ucls b/src/com/redomar/game/UML.ucls
new file mode 100644
index 0000000..6c9da34
--- /dev/null
+++ b/src/com/redomar/game/UML.ucls
@@ -0,0 +1,1119 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<class-diagram version="1.1.6" icons="true" always-add-relationships="false" generalizations="true" realizations="true" 
+  associations="true" dependencies="false" nesting-relationships="true">  
+  <class id="1" language="java" name="com.redomar.game.Game" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/Game.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="1827" width="213" x="2669" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="2" language="java" name="com.redomar.game.InputHandler.Key" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="152" x="3383" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="3" language="java" name="com.redomar.game.WindowHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/WindowHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="221" x="2408" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="4" language="java" name="com.redomar.game.InputHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/InputHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="495" width="165" x="3383" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="5" language="java" name="com.redomar.game.MouseHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/MouseHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="193" x="2954" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="6" language="java" name="com.redomar.game.entities.PlayerMP" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/PlayerMP.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="365" x="2782" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="7" language="java" name="com.redomar.game.entities.Player" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Player.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="441" width="275" x="3480" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="8" language="java" name="com.redomar.game.entities.Entity" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Entity.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="133" x="3701" y="3609"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="9" language="java" name="com.redomar.game.entities.Mob" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Mob.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="585" width="394" x="4053" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="10" language="java" name="com.redomar.game.entities.Vendor" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Vendor.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="459" width="218" x="3795" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="11" language="java" name="com.redomar.game.entities.Dummy" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/Dummy.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="351" width="218" x="4053" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="12" language="java" name="com.redomar.game.entities.efx.Swim" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/efx/Swim.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="243" width="249" x="3764" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="13" language="java" name="com.redomar.game.entities.projectiles.Projectile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Projectile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="387" width="222" x="4334" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="14" language="java" name="com.redomar.game.entities.projectiles.Small" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Small.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="184" x="4452" y="4373"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="15" language="java" name="com.redomar.game.entities.projectiles.Medium" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/entities/projectiles/Medium.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="195" x="4217" y="4373"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="16" language="java" name="com.redomar.game.gfx.Screen" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/Screen.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="405" width="170" x="2198" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="17" language="java" name="com.redomar.game.gfx.Colours" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/Colours.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="117" width="116" x="352" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="18" language="java" name="com.redomar.game.gfx.SpriteSheet" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/gfx/SpriteSheet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="121" x="2198" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="19" language="java" name="com.redomar.game.level.Node" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/Node.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="135" width="197" x="4053" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="20" language="java" name="com.redomar.game.level.LevelHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/LevelHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="621" width="238" x="3105" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="21" language="java" name="com.redomar.game.level.tiles.BasicSolidTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/BasicSolidTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="81" width="167" x="1470" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="22" language="java" name="com.redomar.game.level.tiles.AnimatedTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/AnimatedTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="174" x="1256" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="23" language="java" name="com.redomar.game.level.tiles.BasicTile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/BasicTile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="153" width="217" x="1420" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="24" language="java" name="com.redomar.game.level.tiles.Tile" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/level/tiles/Tile.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="549" width="221" x="1420" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="25" language="java" name="com.redomar.game.lib.Name" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Name.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="136" x="3588" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="26" language="java" name="com.redomar.game.lib.Font" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Font.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="211" x="3229" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="27" language="java" name="com.redomar.game.lib.Mouse" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Mouse.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="193" x="508" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="28" language="java" name="com.redomar.game.lib.Music" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Music.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="138" x="1999" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="29" language="java" name="com.redomar.game.lib.Time" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Time.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="99" width="103" x="1658" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="30" language="java" name="com.redomar.game.lib.Keys" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="165" x="4487" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="31" language="java" name="com.redomar.game.lib.Keys.Key" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/Keys.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="152" x="4487" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="32" language="java" name="com.redomar.game.lib.SleepThread" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/SleepThread.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="99" width="103" x="209" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="33" language="java" name="com.redomar.game.lib.utils.Vector2i" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/lib/utils/Vector2i.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="157" x="4053" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="34" language="java" name="com.redomar.game.menu.Menu" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/Menu.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="693" width="243" x="3770" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="35" language="java" name="com.redomar.game.menu.MenuInput" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/MenuInput.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="171" width="165" x="741" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="36" language="java" name="com.redomar.game.menu.DedicatedJFrame" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/menu/DedicatedJFrame.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="187" x="4437" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="37" language="java" name="com.redomar.game.net.GameClient" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/GameClient.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="243" width="261" x="1698" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="38" language="java" name="com.redomar.game.net.GameServer" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/GameServer.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="297" width="245" x="2669" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="39" language="java" name="com.redomar.game.net.packets.Packet00Login" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet00Login.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="261" width="165" x="946" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="40" language="java" name="com.redomar.game.net.packets.Packet02Move" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet02Move.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="369" width="229" x="1151" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="41" language="java" name="com.redomar.game.net.packets.Packet" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="189" x="946" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="42" language="java" name="com.redomar.game.net.packets.Packet.PacketTypes" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="156" x="545" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="43" language="java" name="com.redomar.game.net.packets.Packet01Disconnect" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/net/packets/Packet01Disconnect.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="165" x="741" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="44" language="java" name="com.redomar.game.objects.Inventory" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/Inventory.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="225" width="124" x="4692" y="37"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="45" language="java" name="com.redomar.game.objects.Items" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/Items.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="-1" width="-1" x="82" y="101"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="46" language="java" name="com.redomar.game.objects.InventoryHandler" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/InventoryHandler.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="221" x="4437" y="2413"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="47" language="java" name="com.redomar.game.objects.InventoryWindow" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/objects/InventoryWindow.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="315" width="194" x="4679" y="1914"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <enumeration id="48" language="java" name="com.redomar.game.script.PrintTypes" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/PrintTypes.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="189" width="133" x="2158" y="3946"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </enumeration>  
+  <class id="49" language="java" name="com.redomar.game.script.PopUp" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/PopUp.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="117" width="117" x="3575" y="2948"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <class id="50" language="java" name="com.redomar.game.script.Printing" project="JavaGame" 
+    file="/JavaGame/src/com/redomar/game/script/Printing.java" binary="false" corner="BOTTOM_RIGHT">    
+    <position height="207" width="196" x="2158" y="3609"/>    
+    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" accessors="true" 
+      visibility="true">      
+      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
+      <operations public="true" package="true" protected="true" private="true" static="true"/>    
+    </display>  
+  </class>  
+  <association id="51">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="52" name="player"/>      
+      <multiplicity id="53" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="7" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="54">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="55" name="down"/>      
+      <multiplicity id="56" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="57">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="58" name="entities_p"/>      
+      <multiplicity id="59" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="8" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="60">    
+    <end type="SOURCE" refId="39"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="61">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="62" name="CHISELED_stone"/>      
+      <multiplicity id="63" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="64">    
+    <end type="SOURCE" refId="44" navigable="false">      
+      <attribute id="65" name="inv_window"/>      
+      <multiplicity id="66" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="47" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="67">    
+    <end type="SOURCE" refId="50" navigable="false">      
+      <attribute id="68" name="time"/>      
+      <multiplicity id="69" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="29" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="70">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="71" name="MAGMA"/>      
+      <multiplicity id="72" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="73">    
+    <end type="SOURCE" refId="23"/>    
+    <end type="TARGET" refId="24"/>  
+  </generalization>  
+  <association id="74">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="75" name="VOID"/>      
+      <multiplicity id="76" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="77">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="78" name="up"/>      
+      <multiplicity id="79" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="80">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="81" name="CHEST_a"/>      
+      <multiplicity id="82" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="83">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="84" name="CHEST_b"/>      
+      <multiplicity id="85" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="86">    
+    <end type="SOURCE" refId="46" navigable="false">      
+      <attribute id="87" name="frame"/>      
+      <multiplicity id="88" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="89">    
+    <end type="SOURCE" refId="14"/>    
+    <end type="TARGET" refId="13"/>  
+  </generalization>  
+  <association id="90">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="91" name="GRASS"/>      
+      <multiplicity id="92" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="93">    
+    <end type="SOURCE" refId="30" navigable="false">      
+      <attribute id="94" name="down"/>      
+      <multiplicity id="95" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="31" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="96">    
+    <end type="SOURCE" refId="30" navigable="false">      
+      <attribute id="97" name="up"/>      
+      <multiplicity id="98" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="31" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="99">    
+    <bendpoint x="2088" y="2413"/>    
+    <bendpoint x="2088" y="2948"/>    
+    <end type="SOURCE" refId="28" navigable="false">      
+      <attribute id="100" name="print"/>      
+      <multiplicity id="101" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="102">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="103" name="font"/>      
+      <multiplicity id="104" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="26" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="105">    
+    <end type="SOURCE" refId="34" navigable="false">      
+      <attribute id="106" name="font"/>      
+      <multiplicity id="107" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="26" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="108">    
+    <bendpoint x="2779" y="2948"/>    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="109" name="print"/>      
+      <multiplicity id="110" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="111">    
+    <end type="SOURCE" refId="11" navigable="false">      
+      <attribute id="112" name="swim"/>      
+      <multiplicity id="113" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="114">    
+    <end type="SOURCE" refId="40"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="115">    
+    <bendpoint x="4301" y="1914"/>    
+    <bendpoint x="4311" y="2413"/>    
+    <end type="SOURCE" refId="34" navigable="false">      
+      <attribute id="116" name="frame"/>      
+      <multiplicity id="117" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="118">    
+    <bendpoint x="3198" y="1914"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="119" name="input"/>      
+      <multiplicity id="120" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="4" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="121">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="122" name="customeName"/>      
+      <multiplicity id="123" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="25" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="124">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="125" name="SAND"/>      
+      <multiplicity id="126" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="127">    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="128" name="game"/>      
+      <multiplicity id="129" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="130">    
+    <bendpoint x="4688" y="2413"/>    
+    <end type="SOURCE" refId="47" navigable="false">      
+      <attribute id="131" name="frame"/>      
+      <multiplicity id="132" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="36" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="133">    
+    <end type="SOURCE" refId="12" navigable="false">      
+      <attribute id="134" name="level"/>      
+      <multiplicity id="135" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="136">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="137" name="screen"/>      
+      <multiplicity id="138" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="16" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="139">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="140" name="socketServer"/>      
+      <multiplicity id="141" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="38" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="142">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="143" name="swim"/>      
+      <multiplicity id="144" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="145">    
+    <end type="SOURCE" refId="10"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <generalization id="146">    
+    <end type="SOURCE" refId="15"/>    
+    <end type="TARGET" refId="13"/>  
+  </generalization>  
+  <association id="147">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="148" name="FLOWER_rose"/>      
+      <multiplicity id="149" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="150">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="151" name="game"/>      
+      <multiplicity id="152" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="153">    
+    <bendpoint x="3177" y="1914"/>    
+    <bendpoint x="3177" y="2413"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="154" name="level"/>      
+      <multiplicity id="155" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="156">    
+    <end type="SOURCE" refId="16" navigable="false">      
+      <attribute id="157" name="sheet"/>      
+      <multiplicity id="158" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="18" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="159">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="160" name="tiles"/>      
+      <multiplicity id="161" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="162">    
+    <bendpoint x="1937" y="2413"/>    
+    <bendpoint x="1937" y="2948"/>    
+    <end type="SOURCE" refId="37" navigable="false">      
+      <attribute id="163" name="print"/>      
+      <multiplicity id="164" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="165">    
+    <bendpoint x="4322" y="1914"/>    
+    <bendpoint x="4290" y="2413"/>    
+    <bendpoint x="4290" y="2948"/>    
+    <end type="SOURCE" refId="9"/>    
+    <end type="TARGET" refId="8"/>  
+  </generalization>  
+  <association id="166">    
+    <end type="SOURCE" refId="11" navigable="false">      
+      <attribute id="167" name="path"/>      
+      <multiplicity id="168" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="169">    
+    <end type="SOURCE" refId="30"/>    
+    <end type="TARGET" refId="31"/>  
+  </nesting>  
+  <association id="170">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="171" name="mouse"/>      
+      <multiplicity id="172" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="5" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="173">    
+    <bendpoint x="2167" y="1914"/>    
+    <bendpoint x="2167" y="2413"/>    
+    <bendpoint x="2167" y="2948"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="174" name="print"/>      
+      <multiplicity id="175" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="176">    
+    <end type="SOURCE" refId="19" navigable="false">      
+      <attribute id="177" name="tile"/>      
+      <multiplicity id="178" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="33" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="179">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="180" name="STONE"/>      
+      <multiplicity id="181" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="182">    
+    <end type="SOURCE" refId="10" navigable="false">      
+      <attribute id="183" name="path"/>      
+      <multiplicity id="184" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="185">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="186" name="DIRT"/>      
+      <multiplicity id="187" minimum="0" maximum="1">        
+        <position height="16" width="23" x="1657" y="551"/>      
+      </multiplicity>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="188">    
+    <end type="SOURCE" refId="6"/>    
+    <end type="TARGET" refId="7"/>  
+  </generalization>  
+  <association id="189">    
+    <end type="SOURCE" refId="8" navigable="false">      
+      <attribute id="190" name="level"/>      
+      <multiplicity id="191" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="20" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="192">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="193" name="CARPET_red"/>      
+      <multiplicity id="194" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="195">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="196" name="right"/>      
+      <multiplicity id="197" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="198">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="199" name="DIRT_WET"/>      
+      <multiplicity id="200" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="201">    
+    <end type="SOURCE" refId="22"/>    
+    <end type="TARGET" refId="23"/>  
+  </generalization>  
+  <association id="202">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="203" name="left"/>      
+      <multiplicity id="204" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="2" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="205">    
+    <end type="SOURCE" refId="4"/>    
+    <end type="TARGET" refId="2"/>  
+  </nesting>  
+  <generalization id="206">    
+    <end type="SOURCE" refId="13"/>    
+    <end type="TARGET" refId="8"/>  
+  </generalization>  
+  <association id="207">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="208" name="WATER"/>      
+      <multiplicity id="209" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="210">    
+    <bendpoint x="4343" y="1914"/>    
+    <bendpoint x="4343" y="2413"/>    
+    <bendpoint x="4343" y="2948"/>    
+    <bendpoint x="4343" y="3609"/>    
+    <end type="SOURCE" refId="9" navigable="false">      
+      <attribute id="211" name="projectiles"/>      
+      <multiplicity id="212" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="13" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="213">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="214" name="dummy"/>      
+      <multiplicity id="215" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="11" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="216">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="217" name="print"/>      
+      <multiplicity id="218" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="219">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="220" name="FLOWER_dandelion"/>      
+      <multiplicity id="221" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="222">    
+    <end type="SOURCE" refId="20" navigable="false">      
+      <attribute id="223" name="entities"/>      
+      <multiplicity id="224" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="8" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="225">    
+    <end type="SOURCE" refId="21"/>    
+    <end type="TARGET" refId="23"/>  
+  </generalization>  
+  <association id="226">    
+    <end type="SOURCE" refId="10" navigable="false">      
+      <attribute id="227" name="swim"/>      
+      <multiplicity id="228" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="12" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="229">    
+    <end type="SOURCE" refId="7" navigable="false">      
+      <attribute id="230" name="input"/>      
+      <multiplicity id="231" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="4" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="232">    
+    <bendpoint x="2423" y="2413"/>    
+    <bendpoint x="2423" y="2948"/>    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="233" name="print"/>      
+      <multiplicity id="234" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="50" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="235">    
+    <end type="SOURCE" refId="38" navigable="false">      
+      <attribute id="236" name="connectedPlayers"/>      
+      <multiplicity id="237" minimum="0" maximum="2147483647"/>    
+    </end>    
+    <end type="TARGET" refId="6" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="238">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="239" name="music"/>      
+      <multiplicity id="240" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="28" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="241">    
+    <end type="SOURCE" refId="7"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <association id="242">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="243" name="socketClient"/>      
+      <multiplicity id="244" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="37" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="245">    
+    <end type="SOURCE" refId="11"/>    
+    <end type="TARGET" refId="9"/>  
+  </generalization>  
+  <association id="246">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="247" name="window"/>      
+      <multiplicity id="248" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="3" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="249">    
+    <end type="SOURCE" refId="37" navigable="false">      
+      <attribute id="250" name="game"/>      
+      <multiplicity id="251" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="252">    
+    <bendpoint x="1667" y="1914"/>    
+    <bendpoint x="1667" y="2413"/>    
+    <bendpoint x="1667" y="2948"/>    
+    <bendpoint x="1667" y="3609"/>    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="253" name="time"/>      
+      <multiplicity id="254" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="29" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="255">    
+    <end type="SOURCE" refId="1" navigable="false">      
+      <attribute id="256" name="vendor"/>      
+      <multiplicity id="257" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="10" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="258">    
+    <end type="SOURCE" refId="4" navigable="false">      
+      <attribute id="259" name="popup"/>      
+      <multiplicity id="260" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="49" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="261">    
+    <end type="SOURCE" refId="19" navigable="false">      
+      <attribute id="262" name="parent"/>      
+      <multiplicity id="263" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="19" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <generalization id="264">    
+    <end type="SOURCE" refId="43"/>    
+    <end type="TARGET" refId="41"/>  
+  </generalization>  
+  <association id="265">    
+    <end type="SOURCE" refId="3" navigable="false">      
+      <attribute id="266" name="game"/>      
+      <multiplicity id="267" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="1" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="268">    
+    <end type="SOURCE" refId="24" navigable="false">      
+      <attribute id="269" name="PORTAL">        
+        <position height="18" width="48" x="1667" y="552"/>      
+      </attribute>      
+      <multiplicity id="270" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="24" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="271">    
+    <end type="SOURCE" refId="47" navigable="false">      
+      <attribute id="272" name="window"/>      
+      <multiplicity id="273" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="46" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <association id="274">    
+    <end type="SOURCE" refId="50" navigable="false">      
+      <attribute id="275" name="type"/>      
+      <multiplicity id="276" minimum="0" maximum="1"/>    
+    </end>    
+    <end type="TARGET" refId="48" navigable="true"/>    
+    <display labels="true" multiplicity="true"/>  
+  </association>  
+  <nesting id="277">    
+    <end type="SOURCE" refId="41"/>    
+    <end type="TARGET" refId="42"/>  
+  </nesting>  
+  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
+    accessors="true" visibility="true">    
+    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
+    <operations public="true" package="true" protected="true" private="true" static="true"/>  
+  </classifier-display>  
+  <association-display labels="true" multiplicity="true"/>
+</class-diagram>
\ No newline at end of file

commit 4f557c43c16eff51a699c68b5b2fc40794dd1a7e
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Oct 27 17:53:38 2014 +0000

    Added new class Scenes
    Cleaned some varibles

diff --git a/src/com/redomar/game/level/LevelHandler.java b/src/com/redomar/game/level/LevelHandler.java
index 7d1d70c..dce4ebd 100644
--- a/src/com/redomar/game/level/LevelHandler.java
+++ b/src/com/redomar/game/level/LevelHandler.java
@@ -19,6 +19,7 @@ import com.redomar.game.gfx.Screen;
 import com.redomar.game.level.tiles.Tile;
 import com.redomar.game.lib.utils.Vector2i;
 import com.redomar.game.net.packets.Packet01Disconnect;
+import com.redomar.game.scenes.Scene;
 import com.redomar.game.script.PrintTypes;
 import com.redomar.game.script.Printing;
 
@@ -49,9 +50,9 @@ public class LevelHandler {
 			this.imagePath = imagePath;
 			this.loadLevelFromFile();
 		} else {
-			tiles = new byte[width * height];
-			this.width = 64;
-			this.height = 64;
+			tiles = new byte[getWidth() * getHeight()];
+			this.setWidth(64);
+			this.setHeight(64);
 			this.generateLevel();
 		}
 		
@@ -61,9 +62,9 @@ public class LevelHandler {
 	private void loadLevelFromFile() {
 		try {
 			this.image = ImageIO.read(Level.class.getResource(this.imagePath));
-			this.width = image.getWidth();
-			this.height = image.getHeight();
-			tiles = new byte[width * height];
+			this.setWidth(image.getWidth());
+			this.setHeight(image.getHeight());
+			tiles = new byte[getWidth() * getHeight()];
 			this.loadTiles();
 		} catch (IOException e) {
 			e.printStackTrace();
@@ -71,14 +72,14 @@ public class LevelHandler {
 	}
 
 	private void loadTiles() {
-		int[] tileColours = this.image.getRGB(0, 0, width, height, null, 0,
-				width);
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
+		int[] tileColours = this.image.getRGB(0, 0, getWidth(), getHeight(), null, 0,
+				getWidth());
+		for (int y = 0; y < getHeight(); y++) {
+			for (int x = 0; x < getWidth(); x++) {
 				tileCheck: for (Tile t : Tile.getTiles()) {
 					if (t != null
-							&& t.getLevelColour() == tileColours[x + y * width]) {
-						this.tiles[x + y * width] = t.getId();
+							&& t.getLevelColour() == tileColours[x + y * getWidth()]) {
+						this.tiles[x + y * getWidth()] = t.getId();
 						break tileCheck;
 					}
 				}
@@ -98,17 +99,17 @@ public class LevelHandler {
 
 	@SuppressWarnings("unused")
 	private void alterTile(int x, int y, Tile newTile) {
-		this.tiles[x + y * width] = newTile.getId();
+		this.tiles[x + y * getWidth()] = newTile.getId();
 		image.setRGB(x, y, newTile.getLevelColour());
 	}
 
 	private void generateLevel() {
-		for (int y = 0; y < height; y++) {
-			for (int x = 0; x < width; x++) {
+		for (int y = 0; y < getHeight(); y++) {
+			for (int x = 0; x < getWidth(); x++) {
 				if (x * y % 10 < 7) {
-					tiles[x + y * width] = Tile.getGrass().getId();
+					tiles[x + y * getWidth()] = Tile.getGrass().getId();
 				} else {
-					tiles[x + y * width] = Tile.getStone().getId();
+					tiles[x + y * getWidth()] = Tile.getStone().getId();
 				}
 			}
 		}
@@ -144,23 +145,20 @@ public class LevelHandler {
 		if (xOffset < 0) {
 			xOffset = 0;
 		}
-		if (xOffset > ((width << 3) - screen.getWidth())) {
-			xOffset = ((width << 3) - screen.getWidth());
+		if (xOffset > ((getWidth() << 3) - screen.getWidth())) {
+			xOffset = ((getWidth() << 3) - screen.getWidth());
 		}
 		if (yOffset < 0) {
 			yOffset = 0;
 		}
-		if (yOffset > ((height << 3) - screen.getHeight())) {
-			yOffset = ((height << 3) - screen.getHeight());
+		if (yOffset > ((getHeight() << 3) - screen.getHeight())) {
+			yOffset = ((getHeight() << 3) - screen.getHeight());
 		}
 
 		screen.setOffset(xOffset, yOffset);
 
-		for (int y = (yOffset >> 3); y < (yOffset + screen.getHeight() >> 3) + 1; y++) {
-			for (int x = (xOffset >> 3); x < (xOffset + screen.getWidth() >> 3) + 1; x++) {
-				getTile(x, y).render(screen, this, x << 3, y << 3);
-			}
-		}
+		Scene scene = new Scene(xOffset, yOffset, screen, this);
+		scene.playerScene();
 	}
 
 	public void renderEntities(Screen screen) {
@@ -176,10 +174,10 @@ public class LevelHandler {
 	}
 
 	public Tile getTile(int x, int y) {
-		if (0 > x || x >= width || 0 > y || y >= height) {
+		if (0 > x || x >= getWidth() || 0 > y || y >= getHeight()) {
 			return Tile.getVoid();
 		}
-		return Tile.getTiles()[tiles[x + y * width]];
+		return Tile.getTiles()[tiles[x + y * getWidth()]];
 	}
 
 	public void addEntity(Entity entity) {
@@ -332,4 +330,20 @@ public class LevelHandler {
 		return result;
 	}
 
+	public int getWidth() {
+		return width;
+	}
+
+	public void setWidth(int width) {
+		this.width = width;
+	}
+
+	public int getHeight() {
+		return height;
+	}
+
+	public void setHeight(int height) {
+		this.height = height;
+	}
+
 }
diff --git a/src/com/redomar/game/scenes/Scene.java b/src/com/redomar/game/scenes/Scene.java
new file mode 100644
index 0000000..73b5ab7
--- /dev/null
+++ b/src/com/redomar/game/scenes/Scene.java
@@ -0,0 +1,38 @@
+package com.redomar.game.scenes;
+
+import com.redomar.game.gfx.Screen;
+import com.redomar.game.level.LevelHandler;
+
+public class Scene {
+	
+	private int xOffset, yOffset;
+	private Screen screen;
+	private LevelHandler level;
+	
+	public Scene(int xOffset, int yOffset, Screen screen, LevelHandler level){
+		this.xOffset = xOffset;
+		this.yOffset = yOffset;
+		this.screen = screen;
+		this.level = level;
+	}
+	
+	public void playerScene(){
+		if (xOffset < 0) {
+			xOffset = 0;
+		}
+		if (xOffset > ((level.getWidth() << 10) - screen.getWidth())) {
+			xOffset = ((level.getWidth() << 30) - screen.getWidth());
+		}
+		if (yOffset < 0) {
+			yOffset = 0;
+		}
+		if (yOffset > ((level.getHeight() << 3) - screen.getHeight())) {
+			yOffset = ((level.getHeight() << 3) - screen.getHeight());
+		}
+		for (int y = (yOffset >> 3); y < (yOffset + screen.getHeight() >> 3) + 1; y++) {
+			for (int x = (xOffset >> 3); x < (xOffset + screen.getWidth() >> 3) + 1; x++) {
+				level.getTile(x, y).render(screen, level, x << 3, y << 3);
+			}
+		}
+	}
+}

commit 6c5ac013f0c99e25855885a6404ce2abc08549d1
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Oct 27 18:18:47 2014 +0000

    v1.8.1 - Backend Changes

diff --git a/README.md b/README.md
index 2094d94..64c37d8 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-JavaGame Alpha v1.8
+JavaGame Alpha v1.8.1
 ===================
 
 #####What is JavaGame?
@@ -34,7 +34,4 @@ Watch this video [here](http://youtu.be/_3nCgac3KKM) or checkout the [GitHub Pag
   * Make the changes in the /src folder
 * Commit your changes (```git commit -m "Change Title"```)
 * Push to the branch (```git push origin my_branch```)
-* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
-
-[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/redomar/javagame/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
-[![Ohloh Stats](https://www.ohloh.net/p/JavaGame/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/JavaGame)
+* Open a [Pull Request](https://github.com/redomar/JavaGame/pull/new/master)
\ No newline at end of file
diff --git a/jar/javagame.jar b/jar/javagame.jar
index 1304dcf..ec375db 100644
Binary files a/jar/javagame.jar and b/jar/javagame.jar differ
diff --git a/src/com/redomar/game/Game.java b/src/com/redomar/game/Game.java
index 03f4380..d30a402 100644
--- a/src/com/redomar/game/Game.java
+++ b/src/com/redomar/game/Game.java
@@ -35,7 +35,7 @@ public class Game extends Canvas implements Runnable {
 
 	// Setting the size and name of the frame/canvas
 	private static final long serialVersionUID = 1L;
-	private static final String game_Version = "v1.8 Alpha";
+	private static final String game_Version = "v1.8.1 Alpha";
 	private static final int WIDTH = 160;
 	private static final int HEIGHT = (WIDTH / 3 * 2);
 	private static final int SCALE = 3;
@@ -92,7 +92,7 @@ public class Game extends Canvas implements Runnable {
 
 	/**
 	 * @author Redomar
-	 * @version Alpha 1.8
+	 * @version Alpha 1.8.1
 	 */
 	public Game() {
 		context = InputContext.getInstance();

commit 39a34d483bfe1360ce69d92a19722a3ffd609190
Merge: ac0efd0 6c5ac01
Author: Mohamed Omar <mohamed12@live.co.uk>
Date:   Mon Oct 27 18:28:19 2014 +0000

    v1.8.1 - Backend Changes
