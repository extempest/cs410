commit d87b5a68b6b75e278be2f51e7ead22d74931f3ff
Author: ttung <ttung@fb.com>
Date:   Wed Jun 11 12:01:43 2014 -0700

    Initial commit

diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..3ca18f4
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,23 @@
+Copyright (c) 2014, Instagram
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+* Redistributions of source code must retain the above copyright notice, this
+  list of conditions and the following disclaimer.
+
+* Redistributions in binary form must reproduce the above copyright notice,
+  this list of conditions and the following disclaimer in the documentation
+  and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..06cdc2b
--- /dev/null
+++ b/README.md
@@ -0,0 +1,4 @@
+ig-json-parser
+==============
+
+Fast JSON parser for java projects

commit d3d6200a35a9f1264cf8c772af3f2c78b5075aed
Author: Tony Tung <tonytung@merly.org>
Date:   Wed Jun 11 21:21:32 2014 -0700

    initial commit (based on internal commit ec2db63d106)

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f8b92c3
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+.gradle
+build
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..94b4bcc
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,16 @@
+buildscript {
+}
+
+apply plugin: 'groovy'
+jar {
+    from files( { project(':javawriter').sourceSets.main.output.classesDir } )
+    from files( { project(':common').sourceSets.main.output.classesDir } )
+    from files( { project(':util').sourceSets.main.output.classesDir } )
+    from files( { project(':processor').sourceSets.main.output.classesDir } )
+}
+
+subprojects {
+  repositories {
+    mavenCentral()
+  }
+}
diff --git a/common/build.gradle b/common/build.gradle
new file mode 100644
index 0000000..0034129
--- /dev/null
+++ b/common/build.gradle
@@ -0,0 +1,6 @@
+apply plugin: 'java'
+
+dependencies {
+  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3+'
+}
+
diff --git a/common/src/main/java/com/instagram/common/json/JsonAnnotationProcessorConstants.java b/common/src/main/java/com/instagram/common/json/JsonAnnotationProcessorConstants.java
new file mode 100644
index 0000000..dcc6eb1
--- /dev/null
+++ b/common/src/main/java/com/instagram/common/json/JsonAnnotationProcessorConstants.java
@@ -0,0 +1,13 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json;
+
+/**
+ * Constants used by the json annotation processor.
+ */
+public class JsonAnnotationProcessorConstants {
+  /**
+   * This is the suffix used for the generated class.
+   */
+  public static final String HELPER_CLASS_SUFFIX = "__JsonHelper";
+}
diff --git a/common/src/main/java/com/instagram/common/json/JsonFactoryHolder.java b/common/src/main/java/com/instagram/common/json/JsonFactoryHolder.java
new file mode 100644
index 0000000..c15db95
--- /dev/null
+++ b/common/src/main/java/com/instagram/common/json/JsonFactoryHolder.java
@@ -0,0 +1,12 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json;
+
+import com.fasterxml.jackson.core.JsonFactory;
+
+/**
+ * Holds the {@link JsonFactory} singleton.
+ */
+public class JsonFactoryHolder {
+  public static final JsonFactory APP_FACTORY = new JsonFactory();
+}
diff --git a/common/src/main/java/com/instagram/common/json/annotation/JsonField.java b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
new file mode 100644
index 0000000..2d7e349
--- /dev/null
+++ b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
@@ -0,0 +1,177 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Apply this to a field in a class annotated with {@link JsonType}.  This tells the annotation
+ * processor which fields exist, and how they may to/from the json object.
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface JsonField {
+  /**
+   * This controls how we deal with type mismatches.  If a {@link TypeMapping#EXACT} mapping is
+   * requested, the json data type must exactly match the java data type.  If the destination field
+   * is a java object and there is a data type mismatch, the field will be set to null.   If the
+   * destination field is a primitive, there is no way for us to indicate that a mismatch has
+   * occurred, so we are forced to throw a {@link JsonException}.
+   *
+   * If a {@link TypeMapping#COERCED} mapping is requested, we will do our best to coerce it into
+   * the proper type.
+   */
+  public enum TypeMapping { EXACT, COERCED };
+
+  /**
+   * This is the field name in json.
+   */
+  String fieldName();
+
+  /**
+   * This controls how we deal with type mismatches.  Note that this is ignored if
+   * {@link #valueExtractFormatter()} is specified.
+   * @see TypeMapping
+   * @see #valueExtractFormatter()
+   */
+  TypeMapping mapping() default TypeMapping.COERCED;
+
+  /**
+   * This string allows consumers to override how we extract the value from the {@link JsonParser}
+   * object.  The following formatters will be used to in generating the code:
+   * <table border=1 cellspacing=0>
+   *   <tr>
+   *     <th>parser_object</th>
+   *     <td>the instance of {@link JsonParser} being read from
+   *   </tr>
+   *   <tr>
+   *     <th>subobject_helper_class</th>
+   *     <td>when parsing a subobject, this refers to the class responsible for parsing the
+   *      subobject type.
+   *     </td>
+   *   </tr>
+   * </table>
+   *
+   * Sane defaults are provided except in the case of {@link Enum}.
+   */
+  String valueExtractFormatter() default "";
+
+  /**
+   * This string allows consumers to override how we assign the rvalue to the java field.  The
+   * following formatters will be used to in generating the code:
+   * <table border=1 cellspacing=0>
+   *   <tr>
+   *     <th>object_varname</th>
+   *     <td>the name of the variable referring to the instance of the object being parsed</td>
+   *   </tr>
+   *   <tr>
+   *     <th>field_varname</th>
+   *     <td>the name of the variable referring to the field within the object being parsed</td>
+   *   </tr>
+   *   <tr>
+   *     <th>extracted_value</th>
+   *     <td>the value parsed, after processing by {@link #valueExtractFormatter()}
+   *   </tr>
+   * </table>
+   *
+   * While having both {@link #valueExtractFormatter()} and {@link #fieldAssignmentFormatter()} may
+   * seem redundant, they actually serve radically different purposes when we parse arrays.
+   * {@link #valueExtractFormatter()} will control how we derive each value in the list, while
+   * {@link #fieldAssignmentFormatter()} will control how we assign the list to the java field.
+   * <p/>
+   * For instance, if we wanted to parse an array of integers, increment each element by 1, and
+   * save a sublist:
+   * <pre>
+   *   &#64;JsonField(valueExtractFormatter=&quot;%1$s.getIntValue() + 1&quot;,
+   *              fieldAssignmentFormatter=&quot;${object_varname}.${field_varname} =
+   *                                        ${extracted_value}.subList(2, 5)&quot;)
+   *   List&lt;Integer&gt; incrementedAndReversed;
+   * </pre>
+   */
+  String fieldAssignmentFormatter() default "";
+
+  /**
+   * This string allows consumers to override how we serialize a java field back to json.  The
+   * string is used as a formatter to generate the actual code that serializes the data.  The format
+   * string can contain the following formatting tokens:
+   * <ul>
+   *   <li>
+   *     ${generator_object}: the name of the variable holding the reference to the json generator
+   *     object
+   *   </li>
+   *   <li>
+   *     ${object_varname}: the name of the variable that references the object that encloses the
+   *     current field
+   *   </li>
+   *   <li>
+   *     ${field_varname}: the name of the variable that references the current field
+   *   </li>
+   *   <li>
+   *     ${iterator}: the name of the variable that references the current element of an array field
+   *   </li>
+   *   <li>
+   *     ${json_fieldname}: the json field name
+   *   </li>
+   *   <li>
+   *     ${subobject_helper_class}: the class that is responsible for serializing the current field
+   *   </li>
+   * </ul>
+   * <p/>
+   * The formatting tokens are not always valid, depending on the nature of the field being
+   * serialized.  The following table shows which fields are valid under which situations.
+   * <table border=1 cellspacing=0>
+   *   <tr>
+   *     <th>Field type</th>
+   *     <th>${generator_object}</th>
+   *     <th>${object_varname}</th>
+   *     <th>${field_varname}</th>
+   *     <th>${iterator}</th>
+   *     <th>${json_fieldname}</th>
+   *     <th>${subobject_helper_class}</th>
+   *   </tr>
+   *   <tr>
+   *     <th>Scalars</th>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *   </tr>
+   *   <tr>
+   *     <th>Subobject</th>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2714;</td>
+   *   </tr>
+   *   <tr>
+   *     <th>List of scalars</th>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2717;</td>
+   *   </tr>
+   *   <tr>
+   *     <th>List of subobjects</th>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2714;</td>
+   *     <td>&#x2717;</td>
+   *     <td>&#x2714;</td>
+   *   </tr>
+   * </table>
+   * <p/>
+   * Sane defaults are provided except in the case of {@link Enum}.  Use of this feature should be
+   * an exception rather than the norm.
+   */
+  String serializeCodeFormatter() default "";
+}
diff --git a/common/src/main/java/com/instagram/common/json/annotation/JsonType.java b/common/src/main/java/com/instagram/common/json/annotation/JsonType.java
new file mode 100644
index 0000000..6694de6
--- /dev/null
+++ b/common/src/main/java/com/instagram/common/json/annotation/JsonType.java
@@ -0,0 +1,25 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * This annotation is applied to any class for which a json parser should be automatically
+ * generated.
+ */
+@Retention(CLASS) @Target(TYPE)
+public @interface JsonType {
+  public static final String POSTPROCESSING_METHOD_NAME = "postprocess";
+
+  /**
+   * This annotation specifies that a method with the name specified by
+   * {@link #POSTPROCESSING_METHOD_NAME} (currently "postprocess") on the class that is being
+   * generated that should be called once parsing is finished.
+   */
+  boolean postprocessingEnabled() default false;
+}
diff --git a/demo/AndroidManifest.xml b/demo/AndroidManifest.xml
new file mode 100644
index 0000000..b466aba
--- /dev/null
+++ b/demo/AndroidManifest.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.instagram.jsonbenchmark.app"
+          android:versionCode="100"
+          android:versionName="1.0.0"
+          android:installLocation="auto"
+    >
+
+  <uses-sdk android:minSdkVersion="9"
+            android:targetSdkVersion="16"
+      />
+
+  <uses-feature android:name="android.hardware.screen.portrait"
+                android:required="false"
+      />
+
+  <supports-screens android:smallScreens="true"
+                    android:normalScreens="true"
+                    android:largeScreens="true"
+                    android:xlargeScreens="true"
+      />
+
+  <application
+      android:label="IgBenchmark"
+      android:hardwareAccelerated="true"
+      android:allowTaskReparenting="true"
+      >
+
+    <activity android:name="com.instagram.common.json.app.BenchmarkActivity"
+              android:screenOrientation="portrait"
+              android:configChanges="keyboardHidden|orientation|screenSize"
+              android:windowSoftInputMode="adjustNothing"
+              android:clearTaskOnLaunch="false"
+              android:launchMode="singleTop"
+              android:alwaysRetainTaskState="true">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+
+  </application>
+
+</manifest>
diff --git a/demo/build.gradle b/demo/build.gradle
new file mode 100644
index 0000000..ed8cf2b
--- /dev/null
+++ b/demo/build.gradle
@@ -0,0 +1,46 @@
+buildscript {
+  repositories {
+    mavenCentral()
+  }
+
+  dependencies {
+    classpath group: 'com.android.tools.build', name: 'gradle', version: '0.9.0+'
+  }
+}
+
+apply plugin: 'android'
+
+dependencies {
+  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.3+'
+  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3+'
+  compile project(':demo:igmodel')
+}
+
+android {
+  compileSdkVersion 19
+  buildToolsVersion "19.1"
+
+  defaultConfig {
+    minSdkVersion 10
+    targetSdkVersion 19
+  }
+
+  sourceSets {
+    main {
+      manifest {
+        srcFile 'AndroidManifest.xml'
+      }
+      java {
+        srcDir 'src/java/main'
+      }
+      res {
+        srcDir 'src/main/res'
+      }
+    }
+  }
+
+  packagingOptions {
+    exclude 'META-INF/LICENSE'
+    exclude 'META-INF/NOTICE'
+  }
+}
diff --git a/demo/igmodel/build.gradle b/demo/igmodel/build.gradle
new file mode 100644
index 0000000..17a0b52
--- /dev/null
+++ b/demo/igmodel/build.gradle
@@ -0,0 +1,12 @@
+apply plugin: 'java'
+
+compileJava {
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor'
+  ]
+}
+dependencies {
+  compile project(':common')
+  compile project(':processor')
+}
diff --git a/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgListOfModels.java b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgListOfModels.java
new file mode 100644
index 0000000..de53fea
--- /dev/null
+++ b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgListOfModels.java
@@ -0,0 +1,17 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.igmodel;
+
+import java.util.List;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * List of models for iterations > 1
+ */
+@JsonType
+public class IgListOfModels {
+  @JsonField(fieldName = "list")
+  List<IgModelRequest> list;
+}
diff --git a/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelRequest.java b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelRequest.java
new file mode 100644
index 0000000..d1805ec
--- /dev/null
+++ b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelRequest.java
@@ -0,0 +1,160 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.igmodel;
+
+import java.util.List;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+@JsonType
+public class IgModelRequest {
+  @JsonField(fieldName = "meta")
+  Meta meta;
+  @JsonField(fieldName = "data")
+  List<Data> data;
+}
+
+@JsonType
+class Meta {
+  @JsonField(fieldName = "code")
+  int code;
+}
+
+@JsonType
+class Data {
+  @JsonField(fieldName = "attribution")
+  String attribution;
+  @JsonField(fieldName = "tags")
+  List<String> tags;
+  @JsonField(fieldName = "type")
+  String type;
+  @JsonField(fieldName = "location")
+  Location location;
+  @JsonField(fieldName = "comments")
+  CommentMeta comments;
+  @JsonField(fieldName = "filter")
+  String filter;
+  @JsonField(fieldName = "created_time")
+  String created_time;
+  @JsonField(fieldName = "link")
+  String link;
+  @JsonField(fieldName = "likes")
+  LikeMeta likes;
+  @JsonField(fieldName = "images")
+  ImageMeta images;
+  @JsonField(fieldName = "users_in_photo")
+  List<TaggedUser> users_in_photo;
+  @JsonField(fieldName = "caption")
+  Caption caption;
+  @JsonField(fieldName = "user_has_liked")
+  boolean user_has_liked;
+  @JsonField(fieldName = "id")
+  String id;
+  @JsonField(fieldName = "user")
+  User user;
+}
+
+@JsonType
+class Location {
+  @JsonField(fieldName = "latitude")
+  float latitude;
+  @JsonField(fieldName = "longitude")
+  float longitude;
+  @JsonField(fieldName = "name")
+  String name;
+  @JsonField(fieldName = "id")
+  long id;
+}
+
+@JsonType
+class CommentMeta {
+  @JsonField(fieldName = "count")
+  int count;
+  @JsonField(fieldName = "data")
+  List<Comment> data;
+}
+
+@JsonType
+class LikeMeta {
+  @JsonField(fieldName = "count")
+  int count;
+  @JsonField(fieldName = "data")
+  List<User> data;
+}
+
+@JsonType
+class ImageMeta {
+  @JsonField(fieldName = "low_resolution")
+  ImageData low_resolution;
+  @JsonField(fieldName = "thumbnail")
+  ImageData thumbnail;
+  @JsonField(fieldName = "standard_resolution")
+  ImageData standard_resolution;
+}
+
+@JsonType
+class TaggedUser {
+  @JsonField(fieldName = "position")
+  Position position;
+  @JsonField(fieldName = "user")
+  User user;
+}
+
+@JsonType
+class Caption {
+  @JsonField(fieldName = "created_time")
+  String created_time;
+  @JsonField(fieldName = "text")
+  String text;
+  @JsonField(fieldName = "from")
+  User from;
+  @JsonField(fieldName = "id")
+  String id;
+}
+
+@JsonType
+class Comment {
+  @JsonField(fieldName = "created_time")
+  String created_time;
+  @JsonField(fieldName = "text")
+  String text;
+  @JsonField(fieldName = "from")
+  User from;
+  @JsonField(fieldName = "id")
+  String id;
+}
+
+@JsonType
+class User {
+  @JsonField(fieldName = "username")
+  String username;
+  @JsonField(fieldName = "website")
+  String website;
+  @JsonField(fieldName = "profile_picture")
+  String profile_picture;
+  @JsonField(fieldName = "full_name")
+  String full_name;
+  @JsonField(fieldName = "bio")
+  String bio;
+  @JsonField(fieldName = "id")
+  String id;
+}
+
+@JsonType
+class ImageData {
+  @JsonField(fieldName = "url")
+  String url;
+  @JsonField(fieldName = "width")
+  int width;
+  @JsonField(fieldName = "height")
+  int height;
+}
+
+@JsonType
+class Position {
+  @JsonField(fieldName = "x")
+  float x;
+  @JsonField(fieldName = "y")
+  float y;
+}
diff --git a/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelWorker.java b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelWorker.java
new file mode 100644
index 0000000..09e5b9e
--- /dev/null
+++ b/demo/igmodel/src/main/java/com/instagram/common/json/app/igmodel/IgModelWorker.java
@@ -0,0 +1,18 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.igmodel;
+
+import java.io.IOException;
+
+/**
+ * Helper class to parse the model.
+ */
+public class IgModelWorker {
+  public IgModelRequest parseFromString(String input) throws IOException {
+    return IgModelRequest__JsonHelper.parseFromJson(input);
+  }
+
+  public IgListOfModels parseListFromString(String input) throws IOException {
+    return IgListOfModels__JsonHelper.parseFromJson(input);
+  }
+}
diff --git a/demo/src/main/java/com/instagram/common/json/app/BenchmarkActivity.java b/demo/src/main/java/com/instagram/common/json/app/BenchmarkActivity.java
new file mode 100644
index 0000000..f9fb4b4
--- /dev/null
+++ b/demo/src/main/java/com/instagram/common/json/app/BenchmarkActivity.java
@@ -0,0 +1,146 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Base64;
+import android.util.Base64InputStream;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.instagram.jsonbenchmark.app.R;
+import com.instagram.common.json.app.igmodel.IgListOfModels;
+import com.instagram.common.json.app.igmodel.IgModelRequest;
+import com.instagram.common.json.app.igmodel.IgModelWorker;
+import com.instagram.common.json.app.ommodel.OmListOfModels;
+import com.instagram.common.json.app.ommodel.OmModelRequest;
+import com.instagram.common.json.app.ommodel.OmModelWorker;
+
+import com.google.common.io.Closeables;
+
+public class BenchmarkActivity extends Activity {
+  private String mJsonString;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity);
+
+    try {
+      mJsonString = loadFromFile(R.raw.input);
+    } catch (IOException e) {
+      Toast.makeText(this, "yeah, bad things happened", Toast.LENGTH_LONG)
+          .show();
+      return;
+    }
+
+    View.OnClickListener listener = new View.OnClickListener() {
+      @Override
+      public void onClick(View view) {
+        boolean useIgParser = (view == findViewById(R.id.ig_parse_button));
+        boolean useOmParser = (view == findViewById(R.id.om_parse_button));
+
+        BenchmarkStats bs = new BenchmarkStats();
+
+        int iterations = getIterationCount();
+        if (iterations == 1) {
+          IgModelRequest igModel;
+          OmModelRequest omModel;
+          try {
+            bs.before();
+            if (useIgParser) {
+              igModel = new IgModelWorker().parseFromString(mJsonString);
+            } else if (useOmParser) {
+              omModel = new OmModelWorker().parseFromString(mJsonString);
+            }
+            bs.after();
+          } catch (IOException ex) {
+            Toast.makeText(BenchmarkActivity.this, "yeah, bad things happened", Toast.LENGTH_LONG)
+                .show();
+            return;
+          }
+        } else {
+          String multiIterationInputString = generateInputString(iterations);
+          IgListOfModels igListofModels;
+          OmListOfModels omListofModels;
+          try {
+            bs.before();
+            if (useIgParser) {
+              igListofModels = new IgModelWorker().parseListFromString(multiIterationInputString);
+            } else if (useOmParser) {
+              omListofModels = new OmModelWorker().parseListFromString(multiIterationInputString);
+            }
+            bs.after();
+          } catch (IOException ex) {
+            Toast.makeText(BenchmarkActivity.this, "yeah, bad things happened", Toast.LENGTH_LONG)
+                .show();
+            return;
+          }
+        }
+
+        ((TextView) findViewById(R.id.results)).setText(bs.renderResultsToText());
+      }
+    };
+
+    findViewById(R.id.ig_parse_button).setOnClickListener(listener);
+    findViewById(R.id.om_parse_button).setOnClickListener(listener);
+
+    findViewById(R.id.quit).setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View view) {
+        System.exit(0);
+      }
+    });
+  }
+
+  private String generateInputString(int iterations) {
+    StringBuilder sb = new StringBuilder();
+
+    sb.append("{\"list\": [");
+
+    for (int ix = 0; ix < iterations; ix ++) {
+      if (ix != 0) {
+        sb.append(",");
+      }
+      sb.append(mJsonString);
+    }
+
+    sb.append("]}");
+
+    return sb.toString();
+  }
+
+  String loadFromFile(int resourceId) throws IOException {
+    InputStreamReader inputStreamReader = null;
+
+    try {
+      // we're doing this absurd thing with encoding the json file in base64 because phabricator
+      // chokes on it otherwise.
+      inputStreamReader =
+          new InputStreamReader(
+              new Base64InputStream(getResources().openRawResource(resourceId), Base64.DEFAULT),
+              "UTF-8");
+      StringBuilder sb = new StringBuilder();
+      char[] buffer = new char[8 * 1024];
+      int bytesRead;
+
+      while ((bytesRead = inputStreamReader.read(buffer)) != -1) {
+        sb.append(buffer, 0, bytesRead);
+      }
+
+      return sb.toString();
+    } finally {
+      Closeables.closeQuietly(inputStreamReader);
+    }
+  }
+
+  int getIterationCount() {
+    return Integer.valueOf(((EditText) findViewById(R.id.iterations)).getText().toString());
+  }
+}
diff --git a/demo/src/main/java/com/instagram/common/json/app/BenchmarkStats.java b/demo/src/main/java/com/instagram/common/json/app/BenchmarkStats.java
new file mode 100644
index 0000000..8b461d9
--- /dev/null
+++ b/demo/src/main/java/com/instagram/common/json/app/BenchmarkStats.java
@@ -0,0 +1,90 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app;
+
+import android.os.Debug;
+import android.os.SystemClock;
+
+/**
+ * Utility class to gather stats.
+ */
+class BenchmarkStats {
+  enum State {
+    INIT,
+    BEFORE_CALLED,
+    AFTER_CALLED,
+    ;
+  }
+
+  private Debug.MemoryInfo mMemoryInfoBefore;
+  private Debug.MemoryInfo mMemoryInfoAfter;
+  private int mAllocCount;
+  private int mAllocSize;
+  private int mFreeCount;
+  private int mFreeSize;
+  private long mBeforeTimestamp;
+  private long mAfterTimestamp;
+  private State mState;
+
+  BenchmarkStats() {
+    mMemoryInfoBefore = new Debug.MemoryInfo();
+    mMemoryInfoAfter = new Debug.MemoryInfo();
+    mState = State.INIT;
+  }
+
+  /**
+   * Grabs the pre-snapshot.  Forces a {@link System#gc()} before collecting stats.
+   */
+  synchronized void before() {
+    if (mState != State.INIT) {
+      throw new IllegalStateException("unexpected state");
+    }
+
+    mState = State.BEFORE_CALLED;
+    System.gc();
+    Debug.getMemoryInfo(mMemoryInfoBefore);
+    Debug.startAllocCounting();
+    mBeforeTimestamp = SystemClock.elapsedRealtime();
+  }
+
+  /**
+   * Grabs the post-snapshot.
+   */
+  synchronized void after() {
+    mAfterTimestamp = SystemClock.elapsedRealtime();
+    Debug.stopAllocCounting();
+    Debug.getMemoryInfo(mMemoryInfoAfter);
+
+    mAllocCount = Debug.getGlobalAllocCount();
+    mAllocSize = Debug.getGlobalAllocSize();
+    mFreeCount = Debug.getGlobalFreedCount();
+    mFreeSize = Debug.getGlobalFreedSize();
+
+    if (mState != State.BEFORE_CALLED) {
+      throw new IllegalStateException("unexpected state");
+    }
+    mState = State.AFTER_CALLED;
+  }
+
+  String renderResultsToText() {
+    if (mState != State.AFTER_CALLED) {
+      throw new IllegalStateException("attempted to render results before after was called");
+    }
+
+    StringBuilder sb = new StringBuilder();
+
+    sb.append("elapsed time: ")
+        .append(mAfterTimestamp - mBeforeTimestamp)
+        .append("ms\n");
+    sb.append("pss delta: ")
+        .append(mMemoryInfoAfter.dalvikPss - mMemoryInfoBefore.dalvikPss)
+        .append("\n");
+
+    sb.append("alloc count: ").append(mAllocCount).append("\n");
+    sb.append("alloc size: ").append(mAllocSize).append("\n");
+    sb.append("free count: ").append(mFreeCount).append("\n");
+    sb.append("free size: ").append(mFreeSize).append("\n");
+
+    return sb.toString();
+  }
+}
diff --git a/demo/src/main/java/com/instagram/common/json/app/ommodel/OmListOfModels.java b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmListOfModels.java
new file mode 100644
index 0000000..cc8ada3
--- /dev/null
+++ b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmListOfModels.java
@@ -0,0 +1,15 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.ommodel;
+
+import java.util.List;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+/**
+ * List of models for iterations > 1
+ */
+public class OmListOfModels {
+  @JsonProperty("list")
+  List<OmModelRequest> list;
+}
diff --git a/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelRequest.java b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelRequest.java
new file mode 100644
index 0000000..247bba2
--- /dev/null
+++ b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelRequest.java
@@ -0,0 +1,147 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.ommodel;
+
+import java.util.List;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class OmModelRequest {
+  @JsonProperty("meta")
+  Meta meta;
+  @JsonProperty("data")
+  List<Data> data;
+}
+
+class Meta {
+  @JsonProperty("code")
+  int code;
+}
+
+class Data {
+  @JsonProperty("attribution")
+  String attribution;
+  @JsonProperty("tags")
+  List<String> tags;
+  @JsonProperty("type")
+  String type;
+  @JsonProperty("location")
+  Location location;
+  @JsonProperty("comments")
+  CommentMeta comments;
+  @JsonProperty("filter")
+  String filter;
+  @JsonProperty("created_time")
+  String created_time;
+  @JsonProperty("link")
+  String link;
+  @JsonProperty("likes")
+  LikeMeta likes;
+  @JsonProperty("images")
+  ImageMeta images;
+  @JsonProperty("users_in_photo")
+  List<TaggedUser> users_in_photo;
+  @JsonProperty("caption")
+  Caption caption;
+  @JsonProperty("user_has_liked")
+  boolean user_has_liked;
+  @JsonProperty("id")
+  String id;
+  @JsonProperty("user")
+  User user;
+}
+
+class Location {
+  @JsonProperty("latitude")
+  float latitude;
+  @JsonProperty("longitude")
+  float longitude;
+  @JsonProperty("name")
+  String name;
+  @JsonProperty("id")
+  long id;
+}
+
+
+class CommentMeta {
+  @JsonProperty("count")
+  int count;
+  @JsonProperty("data")
+  List<Comment> data;
+}
+
+class LikeMeta {
+  @JsonProperty("count")
+  int count;
+  @JsonProperty("data")
+  List<User> data;
+}
+
+class ImageMeta {
+  @JsonProperty("low_resolution")
+  ImageData low_resolution;
+  @JsonProperty("thumbnail")
+  ImageData thumbnail;
+  @JsonProperty("standard_resolution")
+  ImageData standard_resolution;
+}
+
+class TaggedUser {
+  @JsonProperty("position")
+  Position position;
+  @JsonProperty("user")
+  User user;
+}
+
+class Caption {
+  @JsonProperty("created_time")
+  String created_time;
+  @JsonProperty("text")
+  String text;
+  @JsonProperty("from")
+  User from;
+  @JsonProperty("id")
+  String id;
+}
+
+class Comment {
+  @JsonProperty("created_time")
+  String created_time;
+  @JsonProperty("text")
+  String text;
+  @JsonProperty("from")
+  User from;
+  @JsonProperty("id")
+  String id;
+}
+
+class User {
+  @JsonProperty("username")
+  String username;
+  @JsonProperty("website")
+  String website;
+  @JsonProperty("profile_picture")
+  String profile_picture;
+  @JsonProperty("full_name")
+  String full_name;
+  @JsonProperty("bio")
+  String bio;
+  @JsonProperty("id")
+  String id;
+}
+
+class ImageData {
+  @JsonProperty("url")
+  String url;
+  @JsonProperty("width")
+  int width;
+  @JsonProperty("height")
+  int height;
+}
+
+class Position {
+  @JsonProperty("x")
+  float x;
+  @JsonProperty("y")
+  float y;
+}
diff --git a/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelWorker.java b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelWorker.java
new file mode 100644
index 0000000..af69a32
--- /dev/null
+++ b/demo/src/main/java/com/instagram/common/json/app/ommodel/OmModelWorker.java
@@ -0,0 +1,22 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.app.ommodel;
+
+import java.io.IOException;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+/**
+ * Helper class to parse the model.
+ */
+public class OmModelWorker {
+  private static final ObjectMapper sObjectMapper = new ObjectMapper();
+
+  public OmModelRequest parseFromString(String input) throws IOException {
+    return sObjectMapper.readValue(input, OmModelRequest.class);
+  }
+
+  public OmListOfModels parseListFromString(String input) throws IOException {
+    return sObjectMapper.readValue(input, OmListOfModels.class);
+  }
+}
diff --git a/demo/src/main/res/layout/activity.xml b/demo/src/main/res/layout/activity.xml
new file mode 100644
index 0000000..44c169e
--- /dev/null
+++ b/demo/src/main/res/layout/activity.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    >
+  <LinearLayout
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      >
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Iterations:"
+        />
+    <EditText
+        android:id="@+id/iterations"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:text="1"
+        android:hint="Iterations"
+        android:inputType="numberDecimal"
+        />
+  </LinearLayout>
+  <LinearLayout
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      >
+    <Button
+        android:id="@+id/ig_parse_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="IG Parse"
+        />
+    <Button
+        android:id="@+id/om_parse_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="ObjectMapper Parse"
+        />
+    <Button
+        android:id="@+id/quit"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Quit"
+        />
+  </LinearLayout>
+  <TextView
+      android:id="@+id/results"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      />
+</LinearLayout>
diff --git a/demo/src/main/res/raw/input.base64 b/demo/src/main/res/raw/input.base64
new file mode 100644
index 0000000..69ad64a
--- /dev/null
+++ b/demo/src/main/res/raw/input.base64
@@ -0,0 +1 @@

diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..3c7abdf
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..7bdc062
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri May 30 12:56:54 PDT 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100644
index 0000000..91a7e26
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000..aec9973
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/javawriter/build.gradle b/javawriter/build.gradle
new file mode 100644
index 0000000..544652f
--- /dev/null
+++ b/javawriter/build.gradle
@@ -0,0 +1,5 @@
+apply plugin: 'java'
+
+repositories {
+  mavenCentral()
+}
diff --git a/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java b/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java
new file mode 100644
index 0000000..1b2dc5b
--- /dev/null
+++ b/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java
@@ -0,0 +1,856 @@
+// Copyright 2013 Square, Inc.
+package com.squareup.javawriter;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.Writer;
+import java.lang.annotation.Annotation;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Deque;
+import java.util.EnumSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.lang.model.element.Modifier;
+
+import static javax.lang.model.element.Modifier.ABSTRACT;
+
+/** A utility class which aids in generating Java source files. */
+public class JavaWriter implements Closeable {
+  public interface JavaGenerator {
+    public void emitJava(JavaWriter writer) throws IOException;
+  }
+
+  private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w\\.*$]+)");
+  private static final int MAX_SINGLE_LINE_ATTRIBUTES = 3;
+  private static final String INDENT = "  ";
+
+  /** Map fully qualified type names to their short names. */
+  private final Map<String, String> importedTypes = new LinkedHashMap<String, String>();
+
+  private String packagePrefix;
+  private final Deque<Scope> scopes = new ArrayDeque<Scope>();
+  private final Deque<String> types = new ArrayDeque<String>();
+  private final Writer out;
+  private boolean isCompressingTypes = true;
+  private String indent = INDENT;
+
+  /**
+   * @param out the stream to which Java source will be written. This should be a buffered stream.
+   */
+  public JavaWriter(Writer out) {
+    this.out = out;
+  }
+
+  public void setCompressingTypes(boolean isCompressingTypes) {
+    this.isCompressingTypes = isCompressingTypes;
+  }
+
+  public boolean isCompressingTypes() {
+    return isCompressingTypes;
+  }
+
+  public void setIndent(String indent) {
+    this.indent = indent;
+  }
+
+  public String getIndent() {
+    return indent;
+  }
+
+  public JavaWriter emitWithGenerator(JavaGenerator generator) throws IOException {
+    generator.emitJava(this);
+    return this;
+  }
+
+  /** Emit a package declaration and empty line. */
+  public JavaWriter emitPackage(String packageName) throws IOException {
+    if (this.packagePrefix != null) {
+      throw new IllegalStateException();
+    }
+    if (packageName.isEmpty()) {
+      this.packagePrefix = "";
+    } else {
+      out.write("package ");
+      out.write(packageName);
+      out.write(";\n\n");
+      this.packagePrefix = packageName + ".";
+    }
+    return this;
+  }
+
+  /**
+   * Emit an import for each {@code type} provided. For the duration of the file, all references to
+   * these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(String... types) throws IOException {
+    return emitImports(Arrays.asList(types));
+  }
+
+  /**
+   * Emit an import for each {@code type} provided. For the duration of the file, all references to
+   * these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(Class<?>... types) throws IOException {
+    List<String> classNames = new ArrayList<String>(types.length);
+    for (Class<?> classToImport : types) {
+      classNames.add(classToImport.getName());
+    }
+    return emitImports(classNames);
+  }
+
+  /**
+   * Emit an import for each {@code type} in the provided {@code Collection}. For the duration of
+   * the file, all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(Collection<String> types) throws IOException {
+    for (String type : new TreeSet<String>(types)) {
+      Matcher matcher = TYPE_PATTERN.matcher(type);
+      if (!matcher.matches()) {
+        throw new IllegalArgumentException(type);
+      }
+      if (importedTypes.put(type, matcher.group(1)) != null) {
+        throw new IllegalArgumentException(type);
+      }
+      out.write("import ");
+      out.write(type);
+      out.write(";\n");
+    }
+    return this;
+  }
+
+  /**
+   * Emit a static import for each {@code type} provided. For the duration of the file,
+   * all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitStaticImports(String... types) throws IOException {
+    return emitStaticImports(Arrays.asList(types));
+  }
+
+  /**
+   * Emit a static import for each {@code type} in the provided {@code Collection}. For the
+   * duration of the file, all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitStaticImports(Collection<String> types) throws IOException {
+    for (String type : new TreeSet<String>(types)) {
+      Matcher matcher = TYPE_PATTERN.matcher(type);
+      if (!matcher.matches()) {
+        throw new IllegalArgumentException(type);
+      }
+      if (importedTypes.put(type, matcher.group(1)) != null) {
+        throw new IllegalArgumentException(type);
+      }
+      out.write("import static ");
+      out.write(type);
+      out.write(";\n");
+    }
+    return this;
+  }
+
+  /**
+   * Emits a name like {@code java.lang.String} or {@code java.util.List<java.lang.String>},
+   * compressing it with imports if possible. Type compression will only be enabled if
+   * {@link #isCompressingTypes} is true.
+   */
+  private JavaWriter emitCompressedType(String type) throws IOException {
+    if (isCompressingTypes) {
+      out.write(compressType(type));
+    } else {
+      out.write(type);
+    }
+    return this;
+  }
+
+  /** Try to compress a fully-qualified class name to only the class name. */
+  public String compressType(String type) {
+    StringBuilder sb = new StringBuilder();
+    if (this.packagePrefix == null) {
+      throw new IllegalStateException();
+    }
+
+    Matcher m = TYPE_PATTERN.matcher(type);
+    int pos = 0;
+    while (true) {
+      boolean found = m.find(pos);
+
+      // Copy non-matching characters like "<".
+      int typeStart = found ? m.start() : type.length();
+      sb.append(type, pos, typeStart);
+
+      if (!found) {
+        break;
+      }
+
+      // Copy a single class name, shortening it if possible.
+      String name = m.group(0);
+      String imported = importedTypes.get(name);
+      if (imported != null) {
+        sb.append(imported);
+      } else if (isClassInPackage(name, packagePrefix)) {
+        String compressed = name.substring(packagePrefix.length());
+        if (isAmbiguous(compressed)) {
+          sb.append(name);
+        } else {
+          sb.append(compressed);
+        }
+      } else if (isClassInPackage(name, "java.lang.")) {
+        sb.append(name.substring("java.lang.".length()));
+      } else {
+        sb.append(name);
+      }
+      pos = m.end();
+    }
+    return sb.toString();
+  }
+
+  private static boolean isClassInPackage(String name, String packagePrefix) {
+    if (name.startsWith(packagePrefix)) {
+      if (name.indexOf('.', packagePrefix.length()) == -1) {
+        return true;
+      }
+      // check to see if the part after the package looks like a class
+      if (Character.isUpperCase(name.charAt(packagePrefix.length()))) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Returns true if the imports contain a class with same simple name as {@code compressed}.
+   *
+   * @param compressed simple name of the type
+   */
+  private boolean isAmbiguous(String compressed) {
+    return importedTypes.values().contains(compressed);
+  }
+
+  /**
+   * Emits an initializer declaration.
+   *
+   * @param isStatic true if it should be an static initializer, false for an instance initializer.
+   */
+  public JavaWriter beginInitializer(boolean isStatic) throws IOException {
+    indent();
+    if (isStatic) {
+      out.write("static");
+      out.write(" {\n");
+    } else {
+      out.write("{\n");
+    }
+    scopes.push(Scope.INITIALIZER);
+    return this;
+  }
+
+  /** Ends the current initializer declaration. */
+  public JavaWriter endInitializer() throws IOException {
+    popScope(Scope.INITIALIZER);
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+ /**
+  * Emits a type declaration.
+  *
+  * @param kind such as "class", "interface" or "enum".
+  */
+  public JavaWriter beginType(String type, String kind) throws IOException {
+    return beginType(type, kind, EnumSet.noneOf(Modifier.class), null);
+  }
+
+  /**
+   * Emits a type declaration.
+   *
+   * @param kind such as "class", "interface" or "enum".
+   */
+  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers)
+      throws IOException {
+    return beginType(type, kind, modifiers, null);
+  }
+
+  /**
+   * Emits a type declaration.
+   *
+   * @param kind such as "class", "interface" or "enum".
+   * @param extendsType the class to extend, or null for no extends clause.
+   */
+  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers, String extendsType,
+      String... implementsTypes) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    out.write(kind);
+    out.write(" ");
+    emitCompressedType(type);
+    if (extendsType != null) {
+      out.write(" extends ");
+      emitCompressedType(extendsType);
+    }
+    if (implementsTypes.length > 0) {
+      out.write("\n");
+      indent();
+      out.write("    implements ");
+      for (int i = 0; i < implementsTypes.length; i++) {
+        if (i != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(implementsTypes[i]);
+      }
+    }
+    out.write(" {\n");
+    scopes.push(Scope.TYPE_DECLARATION);
+    types.push(type);
+    return this;
+  }
+
+  /** Completes the current type declaration. */
+  public JavaWriter endType() throws IOException {
+    popScope(Scope.TYPE_DECLARATION);
+    types.pop();
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name) throws IOException {
+    return emitField(type, name, EnumSet.noneOf(Modifier.class), null);
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers)
+      throws IOException {
+    return emitField(type, name, modifiers, null);
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers,
+      String initialValue) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    emitCompressedType(type);
+    out.write(" ");
+    out.write(name);
+
+    if (initialValue != null) {
+      out.write(" = ");
+
+      String[] lines = initialValue.split("\n", -1);
+      out.write(lines[0]);
+      for (int i = 1; i < lines.length; i++) {
+        out.write("\n");
+        hangingIndent();
+        out.write(lines[i]);
+      }
+    }
+    out.write(";\n");
+    return this;
+  }
+
+  /**
+   * Emit a method declaration.
+   *
+   * <p>A {@code null} return type may be used to indicate a constructor, but
+   * {@link #beginConstructor(Set, String...)} should be preferred. This behavior may be removed in
+   * a future release.
+   *
+   * @param returnType the method's return type, or null for constructors
+   * @param name the method name, or the fully qualified class name for constructors.
+   * @param modifiers the set of modifiers to be applied to the method
+   * @param parameters alternating parameter types and names.
+   */
+  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
+      String... parameters) throws IOException {
+    return beginMethod(returnType, name, modifiers, Arrays.asList(parameters), null);
+  }
+
+  /**
+   * Emit a method declaration.
+   *
+   * <p>A {@code null} return type may be used to indicate a constructor, but
+   * {@link #beginConstructor(Set, List, List)} should be preferred. This behavior may be removed in
+   * a future release.
+   *
+   * @param returnType the method's return type, or null for constructors.
+   * @param name the method name, or the fully qualified class name for constructors.
+   * @param modifiers the set of modifiers to be applied to the method
+   * @param parameters alternating parameter types and names.
+   * @param throwsTypes the classes to throw, or null for no throws clause.
+   */
+  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
+      List<String> parameters, List<String> throwsTypes) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    if (returnType != null) {
+      emitCompressedType(returnType);
+      out.write(" ");
+      out.write(name);
+    } else {
+      emitCompressedType(name);
+    }
+    out.write("(");
+    if (parameters != null) {
+      for (int p = 0; p < parameters.size();) {
+        if (p != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(parameters.get(p++));
+        out.write(" ");
+        emitCompressedType(parameters.get(p++));
+      }
+    }
+    out.write(")");
+    if (throwsTypes != null && throwsTypes.size() > 0) {
+      out.write("\n");
+      indent();
+      out.write("    throws ");
+      for (int i = 0; i < throwsTypes.size(); i++) {
+        if (i != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(throwsTypes.get(i));
+      }
+    }
+    if (modifiers.contains(ABSTRACT)) {
+      out.write(";\n");
+      scopes.push(Scope.ABSTRACT_METHOD);
+    } else {
+      out.write(" {\n");
+      scopes.push(returnType == null ? Scope.CONSTRUCTOR : Scope.NON_ABSTRACT_METHOD);
+    }
+    return this;
+  }
+
+  public JavaWriter beginConstructor(Set<Modifier> modifiers, String... parameters)
+      throws IOException {
+    beginMethod(null, types.peekFirst(), modifiers, parameters);
+    return this;
+  }
+
+  public JavaWriter beginConstructor(Set<Modifier> modifiers,
+      List<String> parameters, List<String> throwsTypes)
+      throws IOException {
+    beginMethod(null, types.peekFirst(), modifiers, parameters, throwsTypes);
+    return this;
+  }
+
+  /** Emits some Javadoc comments with line separated by {@code \n}. */
+  public JavaWriter emitJavadoc(String javadoc, Object... params) throws IOException {
+    String formatted = String.format(javadoc, params);
+
+    indent();
+    out.write("/**\n");
+    for (String line : formatted.split("\n")) {
+      indent();
+      out.write(" *");
+      if (!line.isEmpty()) {
+        out.write(" ");
+        out.write(line);
+      }
+      out.write("\n");
+    }
+    indent();
+    out.write(" */\n");
+    return this;
+  }
+
+  /** Emits a single line comment. */
+  public JavaWriter emitSingleLineComment(String comment, Object... args) throws IOException {
+    indent();
+    out.write("// ");
+    out.write(String.format(comment, args));
+    out.write("\n");
+    return this;
+  }
+
+  public JavaWriter emitEmptyLine() throws IOException {
+    out.write("\n");
+    return this;
+  }
+
+  public JavaWriter emitEnumValue(String name) throws IOException {
+    indent();
+    out.write(name);
+    out.write(",\n");
+    return this;
+  }
+
+  /**
+   * A simple switch to emit the proper enum depending if its last causing it to be terminated
+   * by a semi-colon ({@code ;}).
+   */
+  public JavaWriter emitEnumValue(String name, boolean isLast) throws IOException {
+    return isLast ? emitLastEnumValue(name) : emitEnumValue(name);
+  }
+
+  private JavaWriter emitLastEnumValue(String name) throws IOException {
+    indent();
+    out.write(name);
+    out.write(";\n");
+    return this;
+  }
+
+  /** Emit a list of enum values followed by a semi-colon ({@code ;}). */
+  public JavaWriter emitEnumValues(Iterable<String> names) throws IOException {
+    Iterator<String> iterator = names.iterator();
+
+    while (iterator.hasNext()) {
+      String name = iterator.next();
+      if (iterator.hasNext()) {
+        emitEnumValue(name);
+      } else {
+        emitLastEnumValue(name);
+      }
+    }
+
+    return this;
+  }
+
+  /** Equivalent to {@code annotation(annotation, emptyMap())}. */
+  public JavaWriter emitAnnotation(String annotation) throws IOException {
+    return emitAnnotation(annotation, Collections.<String, Object>emptyMap());
+  }
+
+  /** Equivalent to {@code annotation(annotationType.getName(), emptyMap())}. */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType) throws IOException {
+    return emitAnnotation(type(annotationType), Collections.<String, Object>emptyMap());
+  }
+
+  /**
+   * Annotates the next element with {@code annotationType} and a {@code value}.
+   *
+   * @param value an object used as the default (value) parameter of the annotation. The value will
+   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
+   *     arrays are written one element per line.
+   */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType, Object value)
+      throws IOException {
+    return emitAnnotation(type(annotationType), value);
+  }
+
+  /**
+   * Annotates the next element with {@code annotation} and a {@code value}.
+   *
+   * @param value an object used as the default (value) parameter of the annotation. The value will
+   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
+   *     arrays are written one element per line.
+   */
+  public JavaWriter emitAnnotation(String annotation, Object value) throws IOException {
+    indent();
+    out.write("@");
+    emitCompressedType(annotation);
+    out.write("(");
+    emitAnnotationValue(value);
+    out.write(")");
+    out.write("\n");
+    return this;
+  }
+
+  /** Equivalent to {@code annotation(annotationType.getName(), attributes)}. */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType,
+      Map<String, ?> attributes) throws IOException {
+    return emitAnnotation(type(annotationType), attributes);
+  }
+
+  /**
+   * Annotates the next element with {@code annotation} and {@code attributes}.
+   *
+   * @param attributes a map from annotation attribute names to their values. Values are encoded
+   *     using Object.toString(); use {@link #stringLiteral} for String values. Object arrays are
+   *     written one element per line.
+   */
+  public JavaWriter emitAnnotation(String annotation, Map<String, ?> attributes)
+      throws IOException {
+    indent();
+    out.write("@");
+    emitCompressedType(annotation);
+    switch (attributes.size()) {
+      case 0:
+        break;
+      case 1:
+        Entry<String, ?> onlyEntry = attributes.entrySet().iterator().next();
+        out.write("(");
+        if (!"value".equals(onlyEntry.getKey())) {
+          out.write(onlyEntry.getKey());
+          out.write(" = ");
+        }
+        emitAnnotationValue(onlyEntry.getValue());
+        out.write(")");
+        break;
+      default:
+        boolean split = attributes.size() > MAX_SINGLE_LINE_ATTRIBUTES
+            || containsArray(attributes.values());
+        out.write("(");
+        scopes.push(Scope.ANNOTATION_ATTRIBUTE);
+        String separator = split ? "\n" : "";
+        for (Map.Entry<String, ?> entry : attributes.entrySet()) {
+          out.write(separator);
+          separator = split ? ",\n" : ", ";
+          if (split) {
+            indent();
+          }
+          out.write(entry.getKey());
+          out.write(" = ");
+          Object value = entry.getValue();
+          emitAnnotationValue(value);
+        }
+        popScope(Scope.ANNOTATION_ATTRIBUTE);
+        if (split) {
+          out.write("\n");
+          indent();
+        }
+        out.write(")");
+        break;
+    }
+    out.write("\n");
+    return this;
+  }
+
+  private boolean containsArray(Collection<?> values) {
+    for (Object value : values) {
+      if (value instanceof Object[]) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Writes a single annotation value. If the value is an array, each element in the array will be
+   * written to its own line.
+   */
+  private JavaWriter emitAnnotationValue(Object value) throws IOException {
+    if (value instanceof Object[]) {
+      out.write("{");
+      boolean firstValue = true;
+      scopes.push(Scope.ANNOTATION_ARRAY_VALUE);
+      for (Object o : ((Object[]) value)) {
+        if (firstValue) {
+          firstValue = false;
+          out.write("\n");
+        } else {
+          out.write(",\n");
+        }
+        indent();
+        out.write(o.toString());
+      }
+      popScope(Scope.ANNOTATION_ARRAY_VALUE);
+      out.write("\n");
+      indent();
+      out.write("}");
+    } else {
+      out.write(value.toString());
+    }
+    return this;
+  }
+
+  /**
+   * @param pattern a code pattern like "int i = %s". Newlines will be further indented. Should not
+   *     contain trailing semicolon.
+   */
+  public JavaWriter emitStatement(String pattern, Object... args) throws IOException {
+    checkInMethod();
+    String[] lines = String.format(pattern, args).split("\n", -1);
+    indent();
+    out.write(lines[0]);
+    for (int i = 1; i < lines.length; i++) {
+      out.write("\n");
+      hangingIndent();
+      out.write(lines[i]);
+    }
+    out.write(";\n");
+    return this;
+  }
+
+  /**
+   * @param controlFlow the control flow construct and its code, such as "if (foo == 5)". Shouldn't
+   *     contain braces or newline characters.
+   */
+  public JavaWriter beginControlFlow(String controlFlow) throws IOException {
+    checkInMethod();
+    indent();
+    out.write(controlFlow);
+    out.write(" {\n");
+    scopes.push(Scope.CONTROL_FLOW);
+    return this;
+  }
+
+  /**
+   * @param controlFlow the control flow construct and its code, such as "else if (foo == 10)".
+   *     Shouldn't contain braces or newline characters.
+   */
+  public JavaWriter nextControlFlow(String controlFlow) throws IOException {
+    popScope(Scope.CONTROL_FLOW);
+    indent();
+    scopes.push(Scope.CONTROL_FLOW);
+    out.write("} ");
+    out.write(controlFlow);
+    out.write(" {\n");
+    return this;
+  }
+
+  public JavaWriter endControlFlow() throws IOException {
+    return endControlFlow(null);
+  }
+
+  /**
+   * @param controlFlow the optional control flow construct and its code, such as
+   *     "while(foo == 20)". Only used for "do/while" control flows.
+   */
+  public JavaWriter endControlFlow(String controlFlow) throws IOException {
+    popScope(Scope.CONTROL_FLOW);
+    indent();
+    if (controlFlow != null) {
+      out.write("} ");
+      out.write(controlFlow);
+      out.write(";\n");
+    } else {
+      out.write("}\n");
+    }
+    return this;
+  }
+
+  /** Completes the current method declaration. */
+  public JavaWriter endMethod() throws IOException {
+    Scope popped = scopes.pop();
+    // support calling a constructor a "method" to support the legacy code
+    if (popped == Scope.NON_ABSTRACT_METHOD || popped == Scope.CONSTRUCTOR) {
+      indent();
+      out.write("}\n");
+    } else if (popped != Scope.ABSTRACT_METHOD) {
+      throw new IllegalStateException();
+    }
+    return this;
+  }
+
+  /** Completes the current constructor declaration. */
+  public JavaWriter endConstructor() throws IOException {
+    popScope(Scope.CONSTRUCTOR);
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+  /** Returns the string literal representing {@code data}, including wrapping quotes. */
+  public static String stringLiteral(String data) {
+    StringBuilder result = new StringBuilder();
+    result.append('"');
+    for (int i = 0; i < data.length(); i++) {
+      char c = data.charAt(i);
+      switch (c) {
+        case '"':
+          result.append("\\\"");
+          break;
+        case '\\':
+          result.append("\\\\");
+          break;
+        case '\b':
+          result.append("\\b");
+          break;
+        case '\t':
+          result.append("\\t");
+          break;
+        case '\n':
+          result.append("\\n");
+          break;
+        case '\f':
+          result.append("\\f");
+          break;
+        case '\r':
+          result.append("\\r");
+          break;
+        default:
+          if (Character.isISOControl(c)) {
+            result.append(String.format("\\u%04x", (int) c));
+          } else {
+            result.append(c);
+          }
+      }
+    }
+    result.append('"');
+    return result.toString();
+  }
+
+  /** Build a string representation of a type and optionally its generic type arguments. */
+  public static String type(Class<?> raw, String... parameters) {
+    if (parameters.length == 0) {
+      return raw.getCanonicalName();
+    }
+    if (raw.getTypeParameters().length != parameters.length) {
+      throw new IllegalArgumentException();
+    }
+    StringBuilder result = new StringBuilder();
+    result.append(raw.getCanonicalName());
+    result.append("<");
+    result.append(parameters[0]);
+    for (int i = 1; i < parameters.length; i++) {
+      result.append(", ");
+      result.append(parameters[i]);
+    }
+    result.append(">");
+    return result.toString();
+  }
+
+  @Override public void close() throws IOException {
+    out.close();
+  }
+
+  /** Emits the modifiers to the writer. */
+  private void emitModifiers(Set<Modifier> modifiers) throws IOException {
+    // Use an EnumSet to ensure the proper ordering
+    if (!(modifiers instanceof EnumSet)) {
+      modifiers = EnumSet.copyOf(modifiers);
+    }
+    for (Modifier modifier : modifiers) {
+      out.append(modifier.toString()).append(' ');
+    }
+  }
+
+  private void indent() throws IOException {
+    for (int i = 0, count = scopes.size(); i < count; i++) {
+      out.write(indent);
+    }
+  }
+
+  private void hangingIndent() throws IOException {
+    for (int i = 0, count = scopes.size() + 2; i < count; i++) {
+      out.write(indent);
+    }
+  }
+
+  private static final EnumSet<Scope> METHOD_SCOPES = EnumSet.of(
+      Scope.NON_ABSTRACT_METHOD, Scope.CONSTRUCTOR, Scope.CONTROL_FLOW, Scope.INITIALIZER);
+
+  private void checkInMethod() {
+    if (!METHOD_SCOPES.contains(scopes.peekFirst())) {
+      throw new IllegalArgumentException();
+    }
+  }
+
+  private void popScope(Scope expected) {
+    if (scopes.pop() != expected) {
+      throw new IllegalStateException();
+    }
+  }
+
+  private enum Scope {
+    TYPE_DECLARATION,
+    ABSTRACT_METHOD,
+    NON_ABSTRACT_METHOD,
+    CONSTRUCTOR,
+    CONTROL_FLOW,
+    ANNOTATION_ATTRIBUTE,
+    ANNOTATION_ARRAY_VALUE,
+    INITIALIZER
+  }
+}
diff --git a/processor/build.gradle b/processor/build.gradle
new file mode 100644
index 0000000..0d32f54
--- /dev/null
+++ b/processor/build.gradle
@@ -0,0 +1,16 @@
+apply plugin: 'java'
+
+repositories {
+  mavenCentral()
+}
+
+dependencies {
+  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1+'
+  compile project(':javawriter')
+  compile project(':util')
+  compile project(':common')
+  testCompile group: 'junit', name: 'junit', version: '4.8.2+'
+  testCompile project(':processor:support')
+  testCompile project(':processor:testuut')
+  testCompile project(':processor:testuut:dependent')
+}
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
new file mode 100644
index 0000000..bafe6e9
--- /dev/null
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
@@ -0,0 +1,313 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
+import javax.annotation.processing.Messager;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.JavaFileObject;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.lang.annotation.Annotation;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Set;
+
+import com.instagram.common.json.JsonAnnotationProcessorConstants;
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+import com.instagram.common.json.annotation.util.Console;
+import com.instagram.common.json.annotation.util.ProcessorClassData;
+import com.instagram.common.json.annotation.util.TypeUtils;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+
+import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.Modifier.PRIVATE;
+
+/**
+ * This annotation processor is run at compile time to find classes annotated with {@link JsonType}.
+ * Deserializers are generated for such classes.
+ */
+public class JsonAnnotationProcessor extends AbstractProcessor {
+  private Messager mMessager;
+  private Elements mElements;
+  private Types mTypes;
+  private Filer mFiler;
+  private TypeUtils mTypeUtils;
+  private static class State {
+    private Map<TypeElement, JsonParserClassData> mClassElementToInjectorMap;
+
+    State() {
+      mClassElementToInjectorMap = Maps.newHashMap();
+    }
+  }
+  private State mState;
+
+  @Override
+  public synchronized void init(ProcessingEnvironment env) {
+    super.init(env);
+
+    mMessager = env.getMessager();
+    mElements = env.getElementUtils();
+    mTypes = env.getTypeUtils();
+    mFiler = env.getFiler();
+    mTypeUtils = new TypeUtils(mTypes, mMessager);
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    Set<String> supportTypes = new LinkedHashSet<String>();
+    supportTypes.add(JsonField.class.getCanonicalName());
+    supportTypes.add(JsonType.class.getCanonicalName());
+
+    return supportTypes;
+  }
+
+  @Override
+  public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+    try {
+      // each round of processing requires a clean state.
+      mState = new State();
+
+      gatherClassAnnotations(env);
+      gatherFieldAnnotations(env);
+
+      for (Map.Entry<TypeElement, JsonParserClassData> entry :
+          mState.mClassElementToInjectorMap.entrySet()) {
+        TypeElement typeElement = entry.getKey();
+        JsonParserClassData injector = entry.getValue();
+
+        try {
+          JavaFileObject jfo = mFiler.createSourceFile(injector.getInjectedFqcn(), typeElement);
+          Writer writer = jfo.openWriter();
+          writer.write(injector.getJavaCode(processingEnv.getMessager()));
+          writer.flush();
+          writer.close();
+        } catch (IOException e) {
+          error(typeElement,
+              "Unable to write injector for type %s: %s", typeElement, e.getMessage());
+        }
+      }
+
+      return true;
+    } catch (Throwable ex) {
+      StringWriter sw = new StringWriter();
+      ex.printStackTrace(new PrintWriter(sw));
+      error("annotation exception: %s cause: %s", ex.toString(), sw.toString());
+      return false;
+    }
+  }
+
+  /**
+   * This finds the classes that are annotated with {@link JsonType}.
+   */
+  private void gatherClassAnnotations(RoundEnvironment env) {
+    // Process each @TypeTesting elements.
+    for (Element element : env.getElementsAnnotatedWith(JsonType.class)) {
+      try {
+        processClassAnnotation(element);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate injector for @JsonType.\n\n%s",
+            stackTrace.toString());
+      }
+    }
+  }
+
+  /**
+   * This processes a single class that is annotated with {@link JsonType}.  It verifies that the
+   * class is public and creates an {@link ProcessorClassData} for it.
+   */
+  private void processClassAnnotation(Element element) {
+    TypeElement typeElement = (TypeElement) element;
+
+    // Verify containing class visibility is not private.
+    if (element.getModifiers().contains(PRIVATE)) {
+      error(element, "@%s %s may not be applied to private classes. (%s.%s)",
+          JsonType.class.getSimpleName(), typeElement.getQualifiedName(),
+          element.getSimpleName());
+      return;
+    }
+
+    JsonParserClassData injector = mState.mClassElementToInjectorMap.get(typeElement);
+    if (injector == null) {
+      JsonType annotation = element.getAnnotation(JsonType.class);
+
+      String parentGeneratedClassName = null;
+
+      TypeMirror superclass = typeElement.getSuperclass();
+      // walk up the superclass hierarchy until we find another class we know about.
+      while (superclass.getKind() != TypeKind.NONE) {
+        TypeElement superclassElement = (TypeElement) mTypes.asElement(superclass);
+
+        if (superclassElement.getAnnotation(JsonType.class) != null) {
+          String superclassPackageName = mTypeUtils.getPackageName(mElements, superclassElement);
+          parentGeneratedClassName = superclassPackageName + "." +
+              mTypeUtils.getPrefixForGeneratedClass(superclassElement, superclassPackageName) +
+              JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX;
+
+          break;
+        }
+
+        superclass = superclassElement.getSuperclass();
+      }
+
+      String packageName = mTypeUtils.getPackageName(mElements, typeElement);
+      injector = new JsonParserClassData(
+          packageName,
+          typeElement.getQualifiedName().toString(),
+          mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName) +
+              JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX,
+          new ProcessorClassData.AnnotationRecordFactory<String, TypeData>() {
+
+            @Override
+            public TypeData createAnnotationRecord(String key) {
+              return new TypeData();
+            }
+          },
+          annotation.postprocessingEnabled(),
+          parentGeneratedClassName);
+      mState.mClassElementToInjectorMap.put(typeElement, injector);
+    }
+  }
+
+  /**
+   * This finds the fields that are annotated with {@link JsonField}.
+   */
+  private void gatherFieldAnnotations(RoundEnvironment env) {
+    // Process each @TypeTesting elements.
+    for (Element element : env.getElementsAnnotatedWith(JsonField.class)) {
+      try {
+        processFieldAnnotation(element);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view injector for @JsonField.\n\n%s",
+            stackTrace.toString());
+      }
+    }
+  }
+
+  /**
+   * This processes a single field annotated with {@link JsonField}.  It locates the enclosing
+   * class and then gathers data on the declared type of the field.
+   */
+  private void processFieldAnnotation(Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify common generated code restrictions.
+    if (!isFieldAnnotationValid(JsonField.class, element)) {
+      return;
+    }
+
+    TypeMirror type = element.asType();
+
+    JsonParserClassData injector = mState.mClassElementToInjectorMap.get(enclosingElement);
+
+    TypeData data = injector.getOrCreateRecord(element.getSimpleName().toString());
+
+    JsonField annotation = element.getAnnotation(JsonField.class);
+
+    data.setFieldName(annotation.fieldName());
+    data.setMapping(annotation.mapping());
+    data.setValueExtractFormatter(annotation.valueExtractFormatter());
+    data.setAssignmentFormatter(annotation.fieldAssignmentFormatter());
+    data.setSerializeCodeFormatter(annotation.serializeCodeFormatter());
+
+    if (mTypeUtils.isListType(type)) {
+      // inspect the inner type.
+      data.setInCollection(true);
+      type = mTypeUtils.getListParameterizedType(type);
+    }
+
+    data.setParseType(mTypeUtils.getParseType(type, JsonType.class));
+    if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
+      TypeMirror erasedType = mTypes.erasure(type);
+      DeclaredType declaredType = (DeclaredType) erasedType;
+      TypeElement typeElement = (TypeElement) declaredType.asElement();
+
+      String packageName = mTypeUtils.getPackageName(mElements, typeElement);
+      String className = mTypeUtils.getClassName(typeElement, packageName);
+      String parserClassName = mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName);
+
+      data.setParsableType(packageName + "." + className);
+      data.setParsableTypeParserClass(packageName + "." + parserClassName);
+    } else if (data.getParseType() == TypeUtils.ParseType.ENUM_OBJECT) {
+      // verify that we have value extract and serializer formatters.
+      if (Strings.isNullOrEmpty(annotation.valueExtractFormatter()) ||
+          Strings.isNullOrEmpty(annotation.serializeCodeFormatter())) {
+        error(element,
+            "%s: enums must have both value extract formatters and serialize code formatters",
+            enclosingElement);
+      }
+    }
+  }
+
+  private boolean isFieldAnnotationValid(
+      Class<? extends Annotation> annotationClass,
+      Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify containing type.
+    if (enclosingElement.getKind() != CLASS) {
+      error(enclosingElement, "@%s field may only be contained in classes. (%s.%s)",
+          annotationClass.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      return false;
+    }
+
+    Annotation annotation = enclosingElement.getAnnotation(JsonType.class);
+    if (annotation == null) {
+      error(enclosingElement,
+          "@%s field may only be contained in classes annotated with @%s (%s.%s)",
+          annotationClass.getSimpleName(), JsonField.class.toString(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      return false;
+    }
+
+    // Verify containing class visibility is not private.
+    if (enclosingElement.getModifiers().contains(PRIVATE)) {
+      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
+          annotationClass.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      return false;
+    }
+
+    return true;
+  }
+
+  private void error(String message, Object... args) {
+    Console.error(processingEnv.getMessager(), message, args);
+  }
+
+  private void error(Element element, String message, Object... args) {
+    Console.error(processingEnv.getMessager(), element, message, args);
+  }
+
+  private void warning(String message, Object... args) {
+    Console.warning(processingEnv.getMessager(), message, args);
+  }
+}
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
new file mode 100644
index 0000000..d6cdd5d
--- /dev/null
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
@@ -0,0 +1,515 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import javax.annotation.processing.Messager;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.Arrays;
+import java.util.EnumSet;
+import java.util.Map;
+
+import com.instagram.common.json.JsonAnnotationProcessorConstants;
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+import com.instagram.common.json.annotation.util.Console;
+import com.instagram.common.json.annotation.util.ProcessorClassData;
+import com.instagram.common.json.annotation.util.TypeUtils;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Maps;
+import com.squareup.javawriter.JavaWriter;
+
+import static javax.lang.model.element.Modifier.*;
+
+/**
+ * This collects the data about the fields of a class, and generates the java code to parse the
+ * object.
+ */
+public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
+
+  private final boolean mPostprocessingEnabled;
+  private final String mParentInjectedClassName;
+
+  public JsonParserClassData(
+      String classPackage, String className, String injectedClassName,
+      AnnotationRecordFactory<String, TypeData> factory,
+      boolean postprocessingEnabled,
+      String parentInjectedClassName) {
+    super(classPackage, className, injectedClassName, factory);
+    mPostprocessingEnabled = postprocessingEnabled;
+    mParentInjectedClassName = parentInjectedClassName;
+  }
+
+  @Override
+  public String getJavaCode(final Messager messager) {
+    StringWriter sw = new StringWriter();
+    JavaWriter writer = new JavaWriter(sw);
+
+    try {
+      writer.emitPackage(mClassPackage);
+
+      writer.emitImports(
+          "java.io.IOException",
+          "java.io.StringWriter",
+          "java.util.ArrayList",
+          "java.util.List",
+          "com.fasterxml.jackson.core.JsonGenerator",
+          "com.fasterxml.jackson.core.JsonParser",
+          "com.fasterxml.jackson.core.JsonToken",
+          "com.instagram.common.json.JsonFactoryHolder"
+      );
+
+      writer.beginType(mInjectedClassName, "class", EnumSet.of(PUBLIC, FINAL));
+
+      String returnValue = mPostprocessingEnabled ?
+          ("instance." + JsonType.POSTPROCESSING_METHOD_NAME + "()") : "instance";
+
+      writer
+            .beginMethod(
+                mClassName,
+                "parseFromJson",
+                EnumSet.of(PUBLIC, STATIC, FINAL),
+                Arrays.asList("JsonParser", "jp"),
+                Arrays.asList("IOException"))
+              .emitStatement("%s instance = new %s()", mClassName, mClassName)
+              .emitSingleLineComment("validate that we're on the right token")
+              .beginControlFlow("if (jp.getCurrentToken() != JsonToken.START_OBJECT)")
+                .emitStatement("jp.skipChildren()")
+                .emitStatement("return null")
+              .endControlFlow()
+              .beginControlFlow("while (jp.nextToken() != JsonToken.END_OBJECT)")
+                .emitStatement("String fieldName = jp.getCurrentName()")
+                .emitStatement("jp.nextToken()")
+                .emitStatement("processSingleField(instance, fieldName, jp)")
+                // always skip children.  if we expected an array or an object, we would have
+                // consumed the START_ARRAY or START_OBJECT.  therefore, we would only skip forward
+                // if we're seeing something unexpected.
+                .emitStatement("jp.skipChildren()")
+              .endControlFlow()
+              .emitStatement("return %s", returnValue)
+            .endMethod()
+            .emitEmptyLine();
+
+      writer
+          .beginMethod(
+              "boolean",
+              "processSingleField",
+              EnumSet.of(PUBLIC, STATIC, FINAL),
+              Arrays.asList(mClassName, "instance", "String", "fieldName", "JsonParser", "jp"),
+              Arrays.asList("IOException"))
+          .emitWithGenerator(
+              new JavaWriter.JavaGenerator() {
+                @Override
+                public void emitJava(JavaWriter writer) throws IOException {
+                  JsonParserClassData.this.writeFields(messager, writer);
+
+                  // if we reached here, we need to call the superclasses processSingleField
+                  // method.
+                  if (mParentInjectedClassName != null) {
+                    writer.emitStatement("return %s.processSingleField(instance, fieldName, jp)",
+                        mParentInjectedClassName);
+                  } else {
+                    writer.emitStatement("return false");
+                  }
+                }
+              })
+          .endMethod()
+          .emitEmptyLine();
+
+      writer
+          .beginMethod(
+              mClassName,
+              "parseFromJson",
+              EnumSet.of(PUBLIC, STATIC, FINAL),
+              Arrays.asList("String", "inputString"),
+              Arrays.asList("IOException"))
+            .emitStatement(
+                "JsonParser jp = JsonFactoryHolder.APP_FACTORY.createParser(inputString)")
+            .emitStatement("jp.nextToken()")
+            .emitStatement("return parseFromJson(jp)")
+          .endMethod()
+          .emitEmptyLine();
+
+      writer
+            .beginMethod(
+                "void",
+                "serializeToJson",
+                EnumSet.of(PUBLIC, STATIC, FINAL),
+                Arrays.asList("JsonGenerator", "generator",
+                    mClassName, "object",
+                    "boolean", "writeStartAndEnd"),
+                Arrays.asList("IOException"))
+              .beginControlFlow("if (writeStartAndEnd)")
+                .emitStatement("generator.writeStartObject()")
+              .endControlFlow()
+              .emitWithGenerator(
+                  new JavaWriter.JavaGenerator() {
+                    @Override
+                    public void emitJava(JavaWriter writer) throws IOException {
+                      JsonParserClassData.this.writeSerializeCalls(messager, writer);
+
+                      // if we reached here, we need to call the superclasses processSingleField
+                      // method.
+                      if (mParentInjectedClassName != null) {
+                        writer.emitStatement(mParentInjectedClassName +
+                                ".serializeToJson(generator, object, false)");
+                      }
+
+                    }
+                  })
+              .beginControlFlow("if (writeStartAndEnd)")
+                .emitStatement("generator.writeEndObject()")
+              .endControlFlow()
+            .endMethod()
+            .emitEmptyLine();
+
+      writer
+          .beginMethod(
+              "String",
+              "serializeToJson",
+              EnumSet.of(PUBLIC, STATIC, FINAL),
+              Arrays.asList(mClassName, "object"),
+              Arrays.asList("IOException"))
+          .emitStatement("StringWriter stringWriter = new StringWriter()")
+          .emitStatement(
+              "JsonGenerator generator = " +
+                  "JsonFactoryHolder.APP_FACTORY.createGenerator(stringWriter)")
+          .emitStatement("serializeToJson(generator, object, true)")
+          .emitStatement("generator.close()")
+          .emitStatement("return stringWriter.toString()")
+          .endMethod()
+          .emitEmptyLine();
+
+      writer.endType();
+    } catch (IOException ex) {
+      Console.error(
+          messager, "IOException while generating %s: %s",
+          mInjectedClassName, ex.toString());
+    }
+
+    return sw.toString();
+  }
+
+  /**
+   * This writes the if-else block for the fields in this class.
+   * <p/>
+   * NOTE: This could be optimized further by building a radix trie, and building out the if-else
+   * block from traversing the radix trie.
+   */
+  private void writeFields(Messager messager, JavaWriter writer) throws IOException {
+    boolean firstEntry = true;
+    for (Map.Entry<String, TypeData> entry : getIterator()) {
+      TypeData data = entry.getValue();
+
+      if (firstEntry) {
+        writer.beginControlFlow("if (\"" + data.getFieldName() + "\".equals(fieldName))");
+      } else {
+        writer.nextControlFlow("else if (\"" + data.getFieldName() + "\".equals(fieldName))");
+      }
+
+      if (data.isInCollection()) {
+        generateArrayParser(messager, writer, data);
+        String assignmentFormatter = data.getAssignmentFormatter();
+        if (Strings.isNullOrEmpty(assignmentFormatter)) {
+          assignmentFormatter = DEFAULT_ASSIGNMENT_FORMATTER;
+        }
+        writer.emitStatement(
+            StrFormat.createStringFormatter(assignmentFormatter)
+                .addParam("object_varname", "instance")
+                .addParam("field_varname", entry.getKey())
+                .addParam("extracted_value", "results")
+                .format());
+      } else {
+        String rValue = generateExtractRvalue(data);
+        String assignmentFormatter = data.getAssignmentFormatter();
+        if (Strings.isNullOrEmpty(assignmentFormatter)) {
+          assignmentFormatter = DEFAULT_ASSIGNMENT_FORMATTER;
+        }
+        writer.emitStatement(
+            StrFormat.createStringFormatter(assignmentFormatter)
+                .addParam("object_varname", "instance")
+                .addParam("field_varname", entry.getKey())
+                .addParam("extracted_value", rValue)
+                .format());
+      }
+
+      writer.emitStatement("return true");
+
+      firstEntry = false;
+    }
+
+    if (firstEntry == false) {
+      writer.endControlFlow();
+    }
+  }
+
+  /**
+   * This writes the code to properly parse an array.
+   */
+  private void generateArrayParser(Messager messager, JavaWriter writer, TypeData data)
+      throws IOException {
+    String innerType = getJavaType(messager, data);
+    writer.emitStatement("List<%s> results = null", innerType)
+          .beginControlFlow("if (jp.getCurrentToken() == JsonToken.START_ARRAY)")
+            .emitStatement("results = new ArrayList<%s>()", innerType)
+            .beginControlFlow("while (jp.nextToken() != JsonToken.END_ARRAY)")
+              .emitStatement("%s parsed = %s", innerType, generateExtractRvalue(data))
+              .beginControlFlow("if (parsed != null)")
+                .emitStatement("results.add(parsed)")
+              .endControlFlow()
+            .endControlFlow()
+          .endControlFlow();
+  }
+
+  /**
+   * We allow consumers of this library to override how we interact with the jackson to get the
+   * value.  This generates the code to generate the rvalue expression.
+   */
+  private String generateExtractRvalue(TypeData data) {
+    String valueExtractFormatter = data.getValueExtractFormatter();
+    if (Strings.isNullOrEmpty(valueExtractFormatter)) {
+      if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
+        valueExtractFormatter = PARSABLE_OBJECT_VALUE_EXTRACT_FORMATTER;
+      } else {
+        if (data.getMapping() == JsonField.TypeMapping.EXACT) {
+          valueExtractFormatter = sExactFormatters.get(data.getParseType());
+        } else if (data.getMapping() == JsonField.TypeMapping.COERCED) {
+          valueExtractFormatter = sCoercedFormatters.get(data.getParseType());
+        }
+      }
+    }
+
+    return StrFormat.createStringFormatter(valueExtractFormatter)
+        .addParam("parser_object", "jp")
+        .addParam("subobject_helper_class",
+            data.getParsableTypeParserClass() +
+                JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX)
+        .format();
+  }
+
+  private String getJavaType(Messager messager, TypeData type) {
+    if (type.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
+      return type.getParsableType();
+    }
+
+    String javaType = sJavaTypes.get(type.getParseType());
+    if (javaType != null) {
+      return javaType;
+    }
+
+    throw new IllegalStateException(
+        "Could not divine java type for " + type.getFieldName() + " in class " + mClassName);
+  }
+
+  // These are all the default formatters.
+  private static String DEFAULT_ASSIGNMENT_FORMATTER =
+      "${object_varname}.${field_varname} = ${extracted_value}";
+  private static String PARSABLE_OBJECT_VALUE_EXTRACT_FORMATTER =
+      "${subobject_helper_class}.parseFromJson(${parser_object})";
+
+  private static Map<TypeUtils.ParseType, String> sExactFormatters = Maps.newHashMap();
+  private static Map<TypeUtils.ParseType, String> sCoercedFormatters = Maps.newHashMap();
+  private static Map<TypeUtils.ParseType, String> sJavaTypes = Maps.newHashMap();
+  static {
+    sExactFormatters.put(TypeUtils.ParseType.BOOLEAN, "${parser_object}.getBooleanValue()");
+    sExactFormatters.put(TypeUtils.ParseType.BOOLEAN_OBJECT,
+        "((${parser_object}.getCurrentToken() == JsonToken.VALUE_TRUE || " +
+          "${parser_object}.getCurrentToken() == JsonToken.VALUE_FALSE) ? " +
+            "Boolean.valueOf(${parser_object}.getValueAsBoolean()) : null)");
+    sExactFormatters.put(TypeUtils.ParseType.INTEGER, "${parser_object}.getIntValue()");
+    sExactFormatters.put(TypeUtils.ParseType.INTEGER_OBJECT,
+        "(${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_INT ? " +
+            "Integer.valueOf(${parser_object}.getValueAsInt()) : null)");
+    sExactFormatters.put(TypeUtils.ParseType.LONG, "${parser_object}.getLongValue()");
+    sExactFormatters.put(TypeUtils.ParseType.LONG_OBJECT,
+        "(${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_INT ? " +
+            "Long.valueOf(${parser_object}.getValueAsLong()) : null)");
+    sExactFormatters.put(TypeUtils.ParseType.FLOAT, "${parser_object}.getFloatValue()");
+    sExactFormatters.put(TypeUtils.ParseType.FLOAT_OBJECT,
+        "((${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_FLOAT || " +
+          "${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_INT) ? " +
+            "new Float(${parser_object}.getValueAsDouble()) : null)");
+    sExactFormatters.put(TypeUtils.ParseType.DOUBLE, "${parser_object}.getDoubleValue()");
+    sExactFormatters.put(TypeUtils.ParseType.DOUBLE_OBJECT,
+        "((${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_FLOAT || " +
+            "${parser_object}.getCurrentToken() == JsonToken.VALUE_NUMBER_INT) ? " +
+            "Double.valueOf(${parser_object}.getValueAsDouble()) : null)");
+    sExactFormatters.put(TypeUtils.ParseType.STRING,
+        "(${parser_object}.getCurrentToken() == JsonToken.VALUE_STRING ? ${parser_object}.getText() : null)");
+
+    sCoercedFormatters.put(TypeUtils.ParseType.BOOLEAN, "${parser_object}.getValueAsBoolean()");
+    sCoercedFormatters.put(
+        TypeUtils.ParseType.BOOLEAN_OBJECT, "Boolean.valueOf(${parser_object}.getValueAsBoolean())");
+    sCoercedFormatters.put(TypeUtils.ParseType.INTEGER, "${parser_object}.getValueAsInt()");
+    sCoercedFormatters.put(TypeUtils.ParseType.INTEGER_OBJECT,
+        "Integer.valueOf(${parser_object}.getValueAsInt())");
+    sCoercedFormatters.put(TypeUtils.ParseType.LONG, "${parser_object}.getValueAsLong()");
+    sCoercedFormatters.put(TypeUtils.ParseType.LONG_OBJECT,
+        "Long.valueOf(${parser_object}.getValueAsLong())");
+    sCoercedFormatters.put(TypeUtils.ParseType.FLOAT,
+        "((float) ${parser_object}.getValueAsDouble())");
+    sCoercedFormatters.put(TypeUtils.ParseType.FLOAT_OBJECT,
+        "new Float(${parser_object}.getValueAsDouble())");
+    sCoercedFormatters.put(TypeUtils.ParseType.DOUBLE, "${parser_object}.getValueAsDouble()");
+    sCoercedFormatters.put(
+        TypeUtils.ParseType.DOUBLE_OBJECT, "Double.valueOf(${parser_object}.getValueAsDouble())");
+    sCoercedFormatters.put(TypeUtils.ParseType.STRING, "${parser_object}.getText()");
+
+    sJavaTypes.put(TypeUtils.ParseType.BOOLEAN_OBJECT, "Boolean");
+    sJavaTypes.put(TypeUtils.ParseType.INTEGER_OBJECT, "Integer");
+    sJavaTypes.put(TypeUtils.ParseType.LONG_OBJECT, "Long");
+    sJavaTypes.put(TypeUtils.ParseType.FLOAT_OBJECT, "Float");
+    sJavaTypes.put(TypeUtils.ParseType.DOUBLE_OBJECT, "Double");
+    sJavaTypes.put(TypeUtils.ParseType.STRING, "String");
+  }
+
+  /**
+   * This writes the code to serialize this class to a JsonGenerator.
+   */
+  private void writeSerializeCalls(Messager messager, JavaWriter writer) throws IOException {
+    for (Map.Entry<String, TypeData> entry : getIterator()) {
+      TypeData data = entry.getValue();
+      String serializeCode = data.getSerializeCodeFormatter();
+
+      if (data.isInCollection()) {
+        if (Strings.isNullOrEmpty(serializeCode)) {
+          if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
+            serializeCode = PARSABLE_OBJECT_ARRAY_SERIALIZE_CALL;
+          } else {
+            serializeCode = mArraySerializeCalls.get(data.getParseType());
+          }
+        }
+
+        String listType = getJavaType(messager, entry.getValue());
+
+        writer
+            .beginControlFlow("if (object." + entry.getKey() + " != null)")
+              .emitStatement("generator.writeFieldName(\"%s\")", data.getFieldName())
+              .emitStatement("generator.writeStartArray()")
+              .beginControlFlow("for (" + listType +
+                  " element : (List<" + listType + ">) object." + entry.getKey() + ")")
+                .beginControlFlow("if (element != null)")
+                  .emitStatement(
+                      StrFormat.createStringFormatter(serializeCode)
+                        .addParam("generator_object", "generator")
+                        .addParam("iterator", "element")
+                        .addParam("subobject_helper_class",
+                            data.getParsableTypeParserClass() +
+                                JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX)
+                        .format())
+                .endControlFlow()
+              .endControlFlow()
+              .emitStatement("generator.writeEndArray()")
+            .endControlFlow();
+      } else {
+        if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
+          if (Strings.isNullOrEmpty(serializeCode)) {
+            serializeCode = PARSABLE_OBJECT_SERIALIZE_CALL;
+          }
+          writer
+              .beginControlFlow("if (object." + entry.getKey() + " != null)")
+                .emitStatement("generator.writeFieldName(\"%s\")", data.getFieldName())
+                .emitStatement(
+                    StrFormat.createStringFormatter(serializeCode)
+                        .addParam("generator_object", "generator")
+                        .addParam("object_varname", "object")
+                        .addParam("field_varname", entry.getKey())
+                        .addParam("subobject_helper_class",
+                            data.getParsableTypeParserClass() +
+                                JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX)
+                        .format())
+              .endControlFlow();
+        } else {
+          if (Strings.isNullOrEmpty(serializeCode)) {
+            serializeCode = mScalarSerializeCalls.get(data.getParseType());
+          }
+
+          String statement =
+              StrFormat.createStringFormatter(serializeCode)
+                  .addParam("generator_object", "generator")
+                  .addParam("object_varname", "object")
+                  .addParam("field_varname", entry.getKey())
+                  .addParam("json_fieldname", data.getFieldName())
+                  .format();
+
+          switch (data.getParseType()) {
+            case BOOLEAN:
+            case INTEGER:
+            case LONG:
+            case FLOAT:
+            case DOUBLE:
+              writer.emitStatement(statement);
+              break;
+
+            default:
+              writer
+                  .beginControlFlow("if (object." + entry.getKey() + " != null)")
+                  .emitStatement(statement)
+                  .endControlFlow();
+          }
+        }
+      }
+    }
+  }
+
+  /**
+   * used to write a single instance of a parsable object.
+   */
+  private static final String PARSABLE_OBJECT_SERIALIZE_CALL =
+      "${subobject_helper_class}.serializeToJson(${generator_object}, ${object_varname}.${field_varname}, true)";
+  private static final String PARSABLE_OBJECT_ARRAY_SERIALIZE_CALL =
+      "${subobject_helper_class}.serializeToJson(${generator_object}, ${iterator}, true)";
+
+  private static Map<TypeUtils.ParseType, String> mScalarSerializeCalls = Maps.newHashMap();
+  private static Map<TypeUtils.ParseType, String> mArraySerializeCalls = Maps.newHashMap();
+  static {
+    mScalarSerializeCalls.put(TypeUtils.ParseType.BOOLEAN,
+        "${generator_object}.writeBooleanField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.BOOLEAN_OBJECT,
+        "${generator_object}.writeBooleanField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.INTEGER,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.INTEGER_OBJECT,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.LONG,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.LONG_OBJECT,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.FLOAT,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.FLOAT_OBJECT,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.DOUBLE,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.DOUBLE_OBJECT,
+        "${generator_object}.writeNumberField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+    mScalarSerializeCalls.put(TypeUtils.ParseType.STRING,
+        "${generator_object}.writeStringField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
+
+    mArraySerializeCalls.put(TypeUtils.ParseType.BOOLEAN,
+        "${generator_object}.writeBoolean(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.BOOLEAN_OBJECT,
+        "${generator_object}.writeBoolean(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.INTEGER,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.INTEGER_OBJECT,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.LONG,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.LONG_OBJECT,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.FLOAT,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.FLOAT_OBJECT,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.DOUBLE,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.DOUBLE_OBJECT,
+        "${generator_object}.writeNumber(${iterator})");
+    mArraySerializeCalls.put(TypeUtils.ParseType.STRING,
+        "${generator_object}.writeString(${iterator})");
+
+  }
+}
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java
new file mode 100644
index 0000000..50c8919
--- /dev/null
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java
@@ -0,0 +1,34 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.util.Map;
+
+import com.google.common.collect.Maps;
+import org.apache.commons.lang3.text.StrSubstitutor;
+
+/**
+ * Syntactic sugar wrapper for {@link StrSubstitutor}.
+ */
+class StrFormat {
+  private String mFormatString;
+  private Map<String, String> mInternalMap;
+
+  StrFormat(String formatString) {
+    mFormatString = formatString;
+    mInternalMap = Maps.newHashMap();
+  }
+
+  StrFormat addParam(String variableName, String replacementText) {
+    mInternalMap.put(variableName, replacementText);
+    return this;
+  }
+
+  String format() {
+    return StrSubstitutor.replace(mFormatString, mInternalMap);
+  }
+
+  static StrFormat createStringFormatter(String formatString) {
+    return new StrFormat(formatString);
+  }
+}
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
new file mode 100644
index 0000000..8e9f656
--- /dev/null
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
@@ -0,0 +1,93 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.util.TypeUtils;
+
+/**
+ * Represents the data needed to serialize and deserialize a field.
+ */
+class TypeData {
+  private String mFieldName;
+  private JsonField.TypeMapping mMapping;
+  private String mValueExtractFormatter;
+  private String mAssignmentFormatter;
+  private String mSerializeCodeFormatter;
+  private boolean mInCollection;
+  private TypeUtils.ParseType mParseType;
+  private String mParsableType;
+  private String mParsableTypeParserClass;
+
+  String getFieldName() {
+    return mFieldName;
+  }
+
+  void setFieldName(String fieldName) {
+    this.mFieldName = fieldName;
+  }
+
+  JsonField.TypeMapping getMapping() {
+    return mMapping;
+  }
+
+  void setMapping(JsonField.TypeMapping mapping) {
+    this.mMapping = mapping;
+  }
+
+  public String getValueExtractFormatter() {
+    return mValueExtractFormatter;
+  }
+
+  public void setValueExtractFormatter(String valueExtractFormatter) {
+    mValueExtractFormatter = valueExtractFormatter;
+  }
+
+  public String getAssignmentFormatter() {
+    return mAssignmentFormatter;
+  }
+
+  public void setAssignmentFormatter(String assignmentFormatter) {
+    mAssignmentFormatter = assignmentFormatter;
+  }
+
+  public String getSerializeCodeFormatter() {
+    return mSerializeCodeFormatter;
+  }
+
+  public void setSerializeCodeFormatter(String serializeCodeFormatter) {
+    mSerializeCodeFormatter = serializeCodeFormatter;
+  }
+
+  boolean isInCollection() {
+    return mInCollection;
+  }
+
+  void setInCollection(boolean inCollection) {
+    mInCollection = inCollection;
+  }
+
+  TypeUtils.ParseType getParseType() {
+    return mParseType;
+  }
+
+  void setParseType(TypeUtils.ParseType parseType) {
+    mParseType = parseType;
+  }
+
+  String getParsableType() {
+    return mParsableType;
+  }
+
+  void setParsableType(String parsableType) {
+    mParsableType = parsableType;
+  }
+
+  String getParsableTypeParserClass() {
+    return mParsableTypeParserClass;
+  }
+
+  void setParsableTypeParserClass(String parsableTypeParserClass) {
+    mParsableTypeParserClass = parsableTypeParserClass;
+  }
+}
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
new file mode 100644
index 0000000..087ae51
--- /dev/null
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
@@ -0,0 +1,338 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.List;
+
+import com.instagram.common.json.annotation.processor.support.ExtensibleJSONWriter;
+
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParseException;
+import com.fasterxml.jackson.core.JsonParser;
+import com.google.common.collect.Lists;
+import org.json.JSONException;
+import org.json.JSONWriter;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Basic deserialization tests.
+ */
+public class DeserializeTest {
+  @Test
+  public void simpleDeserializeTest() throws IOException, JSONException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final float floatValue = 1.0f;
+    final float floatObjValue = 2.0f;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final int subIntValue = 30;
+
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.INT_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.INTEGER_FIELD_NAME).value(integerValue)
+        .key(SimpleParseUUT.FLOAT_FIELD_NAME).value(floatValue)
+        .key(SimpleParseUUT.FLOAT_OBJ_FIELD_NAME).value(floatObjValue)
+        .key(SimpleParseUUT.STRING_FIELD_NAME).value(stringValue)
+        .key(SimpleParseUUT.INTEGER_LIST_FIELD_NAME)
+          .array()
+          .extend(new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              for (Integer integer : integerList) {
+                writer.value(integer);
+              }
+            }
+          })
+          .endArray()
+        .key(SimpleParseUUT.SUBOBJECT_FIELD_NAME)
+          .object()
+            .key(SimpleParseUUT.SubobjectParseUUT.INT_FIELD_NAME).value(subIntValue)
+          .endObject()
+      .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(intValue, uut.intField);
+    assertSame(integerValue, uut.integerField.intValue());
+    assertEquals(Float.valueOf(floatValue), Float.valueOf(uut.floatField));
+    assertEquals(Float.valueOf(floatObjValue), uut.FloatField);
+    assertEquals(stringValue, uut.stringField);
+    assertEquals(integerList, uut.integerListField);
+    assertSame(subIntValue, uut.subobjectField.intField);
+  }
+
+  @Test
+  public void valueExtractTest() throws IOException, JSONException {
+    final int encodedValue = 25;
+    final int deserializedValue = 40;
+
+    StringWriter stringWriter = new StringWriter();
+    JSONWriter writer = new JSONWriter(stringWriter);
+
+    writer.object()
+        .key(FormatterUUT.VALUE_FORMATTER_FIELD_NAME).value(encodedValue)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    FormatterUUT uut = FormatterUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(deserializedValue, uut.valueFormatter);
+  }
+
+  @Test
+  public void fieldAssignmentTest() throws IOException, JSONException {
+    final int encodedValue = 25;
+    final int deserializedValue = -encodedValue;
+
+    StringWriter stringWriter = new StringWriter();
+    JSONWriter writer = new JSONWriter(stringWriter);
+
+    writer.object()
+        .key(FormatterUUT.FIELD_ASSIGNMENT_FIELD_NAME).value(encodedValue)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    FormatterUUT uut = FormatterUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(deserializedValue, uut.fieldAssignmentFormatter);
+  }
+
+  @Test
+  public void enumTest() throws IOException, JSONException {
+    final EnumUUT.EnumType value = EnumUUT.EnumType.VALUE2;
+
+    StringWriter stringWriter = new StringWriter();
+    JSONWriter writer = new JSONWriter(stringWriter);
+
+    writer.object()
+        .key(EnumUUT.ENUM_FIELD_NAME).value(value.toString())
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    EnumUUT uut = EnumUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(value, uut.enumField);
+  }
+
+  @Test
+  public void exactMappingTest() throws IOException, JSONException {
+    // boolean exact fail.  should throw exception.
+    try {
+      parseObjectFromContents(
+          new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              writer.key(ExactMappingUUT.BOOLEAN_FIELD_NAME).value(15);
+            }
+          });
+      fail("primitive type exact mismatches should throw exception");
+    } catch (JsonParseException ex) {
+      // this is expected.
+    }
+
+    // Boolean exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.BOOLEAN_OBJ_FIELD_NAME).value(15);
+          }
+        })
+        .BooleanField);
+
+    // int exact fail.  should throw exception.
+    try {
+      parseObjectFromContents(
+          new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              writer.key(ExactMappingUUT.INT_FIELD_NAME).value(false);
+            }
+          });
+      fail("primitive type exact mismatches should throw exception");
+    } catch (JsonParseException ex) {
+      // this is expected.
+    }
+
+    // Integer exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.INTEGER_FIELD_NAME).value(false);
+          }
+        })
+        .IntegerField);
+
+    // long exact fail.  should throw exception.
+    try {
+      parseObjectFromContents(
+          new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              writer.key(ExactMappingUUT.LONG_FIELD_NAME).value("abc");
+            }
+          });
+      fail("primitive type exact mismatches should throw exception");
+    } catch (JsonParseException ex) {
+      // this is expected.
+    }
+
+    // Long exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.LONG_OBJ_FIELD_NAME).value("abc");
+          }
+        })
+        .LongField);
+
+    // float exact fail.  should throw exception.
+    try {
+      parseObjectFromContents(
+          new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              writer.key(ExactMappingUUT.FLOAT_FIELD_NAME).value("abc");
+            }
+          });
+      fail("primitive type exact mismatches should throw exception");
+    } catch (JsonParseException ex) {
+      // this is expected.
+    }
+
+    // Float exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.FLOAT_OBJ_FIELD_NAME).value("abc");
+          }
+        })
+        .FloatField);
+
+    // double exact fail.  should throw exception.
+    try {
+      parseObjectFromContents(
+          new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              writer.key(ExactMappingUUT.DOUBLE_FIELD_NAME).value("abc");
+            }
+          });
+      fail("primitive type exact mismatches should throw exception");
+    } catch (JsonParseException ex) {
+      // this is expected.
+    }
+
+    // Double exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.DOUBLE_OBJ_FIELD_NAME).value("abc");
+          }
+        })
+        .DoubleField);
+
+    // string exact fail.  should be null.
+    assertNull(parseObjectFromContents(
+        new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            writer.key(ExactMappingUUT.STRING_FIELD_NAME).value(15);
+          }
+        })
+        .StringField);
+  }
+
+  /**
+   * Write an object in which the contents are sourced from the extender.  Then parse it as an
+   * {@link ExactMappingUUT} object and return it.
+   */
+  private static ExactMappingUUT parseObjectFromContents(ExtensibleJSONWriter.Extender extender)
+      throws IOException, JSONException {
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .extend(extender)
+        .endObject();
+
+    return ExactMappingUUT__JsonHelper.parseFromJson(stringWriter.toString());
+  }
+
+  @Test
+  public void postprocessTest() throws IOException, JSONException {
+    final int value = 25;
+
+    StringWriter stringWriter = new StringWriter();
+    JSONWriter writer = new JSONWriter(stringWriter);
+
+    writer.object()
+        .key(PostprocessingUUT.FIELD_NAME).value(value)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    PostprocessingUUT uut = PostprocessingUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(value + 1, uut.value);
+  }
+
+  @Test
+  public void malformedArrayEntry() throws IOException, JSONException {
+    final List<Integer> integerList = Lists.newArrayList(1, null, 3, 4);
+    final int subIntValue = 30;
+
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(StrictListParseUUT.INTEGER_LIST_FIELD_NAME)
+        .array()
+          .extend(new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              for (Integer integer : integerList) {
+                writer.value(integer);
+              }
+            }
+        })
+        .endArray()
+        .key(StrictListParseUUT.SUBOBJECT_LIST_FIELD_NAME)
+        .object()
+          .key(StrictListParseUUT.SubobjectParseUUT.INT_FIELD_NAME).value(subIntValue)
+        .endObject()
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    StrictListParseUUT uut = StrictListParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertEquals(3, uut.integerListField.size());
+    assertEquals(1, uut.integerListField.get(0).intValue());
+    assertEquals(3, uut.integerListField.get(1).intValue());
+    assertEquals(4, uut.integerListField.get(2).intValue());
+  }
+}
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java
new file mode 100644
index 0000000..87c01d4
--- /dev/null
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java
@@ -0,0 +1,68 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.io.IOException;
+
+import com.instagram.common.json.annotation.processor.dependent.SubclassUUT;
+import com.instagram.common.json.annotation.processor.dependent.SubclassUUT__JsonHelper;
+import com.instagram.common.json.annotation.processor.dependent.WrapperClassUUT;
+import com.instagram.common.json.annotation.processor.dependent.WrapperClassUUT__JsonHelper;
+import com.instagram.common.json.annotation.processor.parent.ParentUUT;
+
+import org.json.JSONException;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Try to do stuff across modules.
+ */
+public class InterModuleTest {
+
+  /**
+   * Subclasses a java object in a different class.
+   */
+  @Test
+  public void subclassingTest() throws IOException, JSONException {
+    final int intValue = 25;
+    final String stringValue = "hello world\r\n\'\"";
+    final int subIntValue = 30;
+
+    SubclassUUT uut = new SubclassUUT();
+    uut.parentInt = intValue;
+    uut.subclassInt = subIntValue;
+    uut.parentString = stringValue;
+
+    // serialize it
+    String serialized = SubclassUUT__JsonHelper.serializeToJson(uut);
+
+    SubclassUUT parsed = SubclassUUT__JsonHelper.parseFromJson(serialized);
+
+    assertEquals(uut.parentInt, parsed.parentInt);
+    assertEquals(uut.parentString, parsed.parentString);
+    assertEquals(uut.subclassInt, parsed.subclassInt);
+  }
+
+  /**
+   * Includes a java object in a different class.
+   */
+  @Test
+  public void wrapperTest() throws IOException, JSONException {
+    final int intValue = 25;
+    final String stringValue = "hello world\r\n\'\"";
+
+    WrapperClassUUT uut = new WrapperClassUUT();
+    uut.parent = new ParentUUT();
+    uut.parent.parentInt = intValue;
+    uut.parent.parentString = stringValue;
+
+    // serialize it
+    String serialized = WrapperClassUUT__JsonHelper.serializeToJson(uut);
+
+    WrapperClassUUT parsed = WrapperClassUUT__JsonHelper.parseFromJson(serialized);
+
+    assertEquals(uut.parent.parentInt, parsed.parent.parentInt);
+    assertEquals(uut.parent.parentString, parsed.parent.parentString);
+  }
+}
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/MalformedJsonTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/MalformedJsonTest.java
new file mode 100644
index 0000000..91dd8d8
--- /dev/null
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/MalformedJsonTest.java
@@ -0,0 +1,159 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.List;
+
+import com.instagram.common.json.annotation.processor.support.ExtensibleJSONWriter;
+
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.google.common.collect.Lists;
+import org.json.JSONException;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Where we attack the parser with poorly formed json, where structures and arrays are interchanged
+ * with scalars.  These are errors that can result in infinite loops or improper termination of
+ * parsing.
+ */
+public class MalformedJsonTest {
+  private final int intValue = 25;
+  private final int integerValue = 37;
+  private final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+
+  @Test
+  public void arrayInsteadOfScalar() throws IOException, JSONException {
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.STRING_FIELD_NAME)
+        .array()
+          .extend(new ExtensibleJSONWriter.Extender() {
+            @Override
+            public void extend(ExtensibleJSONWriter writer) throws JSONException {
+              for (Integer integer : integerList) {
+                writer.value(integer);
+              }
+            }
+          })
+          .endArray()
+        .key(SimpleParseUUT.INT_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.INTEGER_FIELD_NAME).value(integerValue)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(intValue, uut.intField);
+    assertSame(integerValue, uut.integerField.intValue());
+    assertNull(uut.stringField);
+  }
+
+  @Test
+  public void dictInsteadOfScalar() throws IOException, JSONException {
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.STRING_FIELD_NAME)
+        .object()
+          .key("garbage").value("123")
+        .endObject()
+        .key(SimpleParseUUT.INT_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.INTEGER_FIELD_NAME).value(integerValue)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(intValue, uut.intField);
+    assertSame(integerValue, uut.integerField.intValue());
+    assertNull(uut.stringField);
+  }
+
+  @Test
+  public void scalarInsteadOfArray() throws IOException, JSONException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final int subIntValue = 30;
+
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.INT_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.INTEGER_FIELD_NAME).value(integerValue)
+        .key(SimpleParseUUT.STRING_FIELD_NAME).value(stringValue)
+        .key(SimpleParseUUT.INTEGER_LIST_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.SUBOBJECT_FIELD_NAME)
+        .object()
+        .key(SimpleParseUUT.SubobjectParseUUT.INT_FIELD_NAME).value(subIntValue)
+        .endObject()
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(intValue, uut.intField);
+    assertSame(integerValue, uut.integerField.intValue());
+    assertEquals(stringValue, uut.stringField);
+    assertNull(uut.integerListField);
+    assertSame(subIntValue, uut.subobjectField.intField);
+  }
+
+  @Test
+  public void scalarInsteadOfObject() throws IOException, JSONException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final int subIntValue = 30;
+
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.INT_FIELD_NAME).value(intValue)
+        .key(SimpleParseUUT.INTEGER_FIELD_NAME).value(integerValue)
+        .key(SimpleParseUUT.STRING_FIELD_NAME).value(stringValue)
+        .key(SimpleParseUUT.INTEGER_LIST_FIELD_NAME)
+        .array()
+        .extend(
+            new ExtensibleJSONWriter.Extender() {
+              @Override
+              public void extend(ExtensibleJSONWriter writer) throws JSONException {
+                for (Integer integer : integerList) {
+                  writer.value(integer);
+                }
+              }
+            })
+        .endArray()
+        .key(SimpleParseUUT.SUBOBJECT_FIELD_NAME).value(subIntValue)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(intValue, uut.intField);
+    assertSame(integerValue, uut.integerField.intValue());
+    assertEquals(stringValue, uut.stringField);
+    assertEquals(integerList, uut.integerListField);
+    assertNull(uut.subobjectField);
+  }
+
+}
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java
new file mode 100644
index 0000000..9b674f0
--- /dev/null
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java
@@ -0,0 +1,176 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.List;
+
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonParser;
+import com.google.common.collect.Lists;
+import org.json.JSONException;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Basic serialization tests.  It depends on deserialization working correctly but that's an
+ * acceptable assumption since if deserialization is broken, {@link DeserializeTest} should fail.
+ */
+public class SerializeTest {
+  @Test
+  public void simpleSerializeTest() throws IOException, JSONException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final int subIntValue = 30;
+
+    SimpleParseUUT source = new SimpleParseUUT();
+    source.intField = intValue;
+    source.integerField = integerValue;
+    source.stringField = stringValue;
+    source.integerListField = integerList;
+    source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
+    source.subobjectField.intField = subIntValue;
+
+    StringWriter stringWriter = new StringWriter();
+    JsonGenerator jsonGenerator = new JsonFactory().createGenerator(stringWriter);
+
+    SimpleParseUUT__JsonHelper.serializeToJson(jsonGenerator, source, true);
+    jsonGenerator.close();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT parsed = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertSame(source.intField, parsed.intField);
+    assertEquals(source.integerField, parsed.integerField);
+    assertEquals(source.stringField, parsed.stringField);
+    assertEquals(source.integerListField, parsed.integerListField);
+    assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
+  }
+
+  @Test
+  public void stringSerializeTest() throws IOException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final int subIntValue = 30;
+
+    SimpleParseUUT source = new SimpleParseUUT();
+    source.intField = intValue;
+    source.integerField = integerValue;
+    source.stringField = stringValue;
+    source.integerListField = integerList;
+    source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
+    source.subobjectField.intField = subIntValue;
+
+    String serialized = SimpleParseUUT__JsonHelper.serializeToJson(source);
+    SimpleParseUUT parsed = SimpleParseUUT__JsonHelper.parseFromJson(serialized);
+
+    assertSame(source.intField, parsed.intField);
+    assertEquals(source.integerField, parsed.integerField);
+    assertEquals(source.stringField, parsed.stringField);
+    assertEquals(source.integerListField, parsed.integerListField);
+    assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
+  }
+
+  @Test
+  public void enumTest() throws IOException {
+    final EnumUUT.EnumType value = EnumUUT.EnumType.VALUE3;
+
+    EnumUUT source = new EnumUUT();
+    source.enumField = value;
+
+    String serialized = EnumUUT__JsonHelper.serializeToJson(source);
+    EnumUUT parsed = EnumUUT__JsonHelper.parseFromJson(serialized);
+
+    assertSame(source.enumField, parsed.enumField);
+  }
+
+  @Test
+  public void nullObject() throws IOException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final int subIntValue = 30;
+
+    SimpleParseUUT source = new SimpleParseUUT();
+    source.intField = intValue;
+    // intentionally do not set integerField
+    source.stringField = stringValue;
+    source.integerListField = integerList;
+    source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
+    source.subobjectField.intField = subIntValue;
+
+    String serialized = SimpleParseUUT__JsonHelper.serializeToJson(source);
+    SimpleParseUUT parsed = SimpleParseUUT__JsonHelper.parseFromJson(serialized);
+
+    assertSame(source.intField, parsed.intField);
+    assertNull(parsed.integerField);
+    assertEquals(source.stringField, parsed.stringField);
+    assertEquals(source.integerListField, parsed.integerListField);
+    assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
+  }
+
+  @Test
+  public void nullArray() throws IOException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final int subIntValue = 30;
+
+    SimpleParseUUT source = new SimpleParseUUT();
+    source.intField = intValue;
+    source.integerField = integerValue;
+    source.stringField = stringValue;
+    // intentionally do not set integerListField
+    source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
+    source.subobjectField.intField = subIntValue;
+
+    String serialized = SimpleParseUUT__JsonHelper.serializeToJson(source);
+    SimpleParseUUT parsed = SimpleParseUUT__JsonHelper.parseFromJson(serialized);
+
+    assertSame(source.intField, parsed.intField);
+    assertEquals(source.integerField, parsed.integerField);
+    assertEquals(source.stringField, parsed.stringField);
+    assertNull(parsed.integerListField);
+    assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
+  }
+
+  @Test
+  public void nullArrayEntry() throws IOException {
+    final int intValue = 25;
+    final int integerValue = 37;
+    final String stringValue = "hello world\r\n\'\"";
+    final List<Integer> integerList = Lists.newArrayList(1, 2, 3, null);
+    final int subIntValue = 30;
+
+    SimpleParseUUT source = new SimpleParseUUT();
+    source.intField = intValue;
+    source.integerField = integerValue;
+    source.stringField = stringValue;
+    source.integerListField = integerList;
+    source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
+    source.subobjectField.intField = subIntValue;
+
+    String serialized = SimpleParseUUT__JsonHelper.serializeToJson(source);
+    SimpleParseUUT parsed = SimpleParseUUT__JsonHelper.parseFromJson(serialized);
+
+    assertSame(source.intField, parsed.intField);
+    assertEquals(source.integerField, parsed.integerField);
+    assertEquals(source.stringField, parsed.stringField);
+    assertEquals(source.integerListField.size() - 1, parsed.integerListField.size());
+    for (int ix = 0; ix < source.integerListField.size() - 1; ix ++) {
+      assertEquals(source.integerListField.get(ix), parsed.integerListField.get(ix));
+    }
+    assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
+  }
+}
diff --git a/processor/support/build.gradle b/processor/support/build.gradle
new file mode 100644
index 0000000..e758d62
--- /dev/null
+++ b/processor/support/build.gradle
@@ -0,0 +1,5 @@
+apply plugin: 'java'
+
+dependencies {
+  compile group: 'org.json', name: 'json', version: '20090211'
+}
diff --git a/processor/support/src/main/java/com/instagram/common/json/annotation/processor/support/ExtensibleJSONWriter.java b/processor/support/src/main/java/com/instagram/common/json/annotation/processor/support/ExtensibleJSONWriter.java
new file mode 100644
index 0000000..ca585b9
--- /dev/null
+++ b/processor/support/src/main/java/com/instagram/common/json/annotation/processor/support/ExtensibleJSONWriter.java
@@ -0,0 +1,108 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.support;
+
+import java.io.Writer;
+
+import org.json.JSONException;
+import org.json.JSONWriter;
+
+/**
+ * This is a subclass of {@link JSONWriter} that allows a function to be called within a sequence of
+ * commands.  This is syntactic sugar for constructs like:
+ * <p/>
+ * <pre>
+ *   writer.array()
+ *           .value(XXX)
+ *           .value(YYY)
+ *           .object()
+ *           // call some function that writes the object data
+ *           .extend(EXTENDER)
+ *           .endObject()
+ *         .endArray();
+ * </pre>
+ * <p/>
+ * Without this syntactic sugar, one would have to have one block for everything leading up to the
+ * function call, the function call, and the remaining items.  This also separates the opening
+ * <code>array()</code>/<code>object()</code> calls from their closing counterparts.
+ * <p/>
+ */
+public class ExtensibleJSONWriter extends JSONWriter {
+
+  /**
+   * Implementations of this interface can be passed into {@link #extend(Extender)} to do the actual
+   * work.
+   */
+  public interface Extender {
+    void extend(ExtensibleJSONWriter writer) throws JSONException;
+  }
+
+  public ExtensibleJSONWriter(Writer writer) {
+    super(writer);
+  }
+
+  /**
+   * Execute the {@link Extender#extend(Extender)} method.
+   */
+  public ExtensibleJSONWriter extend(Extender extender) throws JSONException {
+    extender.extend(this);
+    return this;
+  }
+
+  /////////////
+  // The remaining methods are simply overriden methods of {@link JSONWriter} that return an
+  // {@link ExtensibleJSONWriter}.
+  @Override
+  public ExtensibleJSONWriter array() throws JSONException {
+    super.array();
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter endArray() throws JSONException {
+    super.endArray();
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter endObject() throws JSONException {
+    super.endObject();
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter key(String s) throws JSONException {
+    super.key(s);
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter object() throws JSONException {
+    super.object();
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter value(boolean b) throws JSONException {
+    super.value(b);
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter value(double v) throws JSONException {
+    super.value(v);
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter value(long l) throws JSONException {
+    super.value(l);
+    return this;
+  }
+
+  @Override
+  public ExtensibleJSONWriter value(Object o) throws JSONException {
+    super.value(o);
+    return this;
+  }
+}
diff --git a/processor/testuut/build.gradle b/processor/testuut/build.gradle
new file mode 100644
index 0000000..17a0b52
--- /dev/null
+++ b/processor/testuut/build.gradle
@@ -0,0 +1,12 @@
+apply plugin: 'java'
+
+compileJava {
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor'
+  ]
+}
+dependencies {
+  compile project(':common')
+  compile project(':processor')
+}
diff --git a/processor/testuut/dependent/build.gradle b/processor/testuut/dependent/build.gradle
new file mode 100644
index 0000000..e8bf798
--- /dev/null
+++ b/processor/testuut/dependent/build.gradle
@@ -0,0 +1,13 @@
+apply plugin: 'java'
+
+compileJava {
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor'
+  ]
+}
+dependencies {
+  compile project(':common')
+  compile project(':processor')
+  compile project(':processor:testuut:parent')
+}
diff --git a/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassUUT.java b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassUUT.java
new file mode 100644
index 0000000..a3a6b78
--- /dev/null
+++ b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassUUT.java
@@ -0,0 +1,18 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.dependent;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+import com.instagram.common.json.annotation.processor.parent.ParentUUT;
+
+/**
+ * Subclasses {@link ParentUUT}.
+ */
+@JsonType
+public class SubclassUUT extends ParentUUT {
+  public static final String SUBCLASS_INT_KEY = "subclass_int";
+
+  @JsonField(fieldName = SUBCLASS_INT_KEY)
+  public int subclassInt;
+}
diff --git a/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/WrapperClassUUT.java b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/WrapperClassUUT.java
new file mode 100644
index 0000000..f203455
--- /dev/null
+++ b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/WrapperClassUUT.java
@@ -0,0 +1,18 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.dependent;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+import com.instagram.common.json.annotation.processor.parent.ParentUUT;
+
+/**
+ * Wraps {@link ParentUUT}.
+ */
+@JsonType
+public class WrapperClassUUT {
+  public static final String PARENT_KEY = "parent";
+
+  @JsonField(fieldName = PARENT_KEY)
+  public ParentUUT parent;
+}
diff --git a/processor/testuut/parent/build.gradle b/processor/testuut/parent/build.gradle
new file mode 100644
index 0000000..17a0b52
--- /dev/null
+++ b/processor/testuut/parent/build.gradle
@@ -0,0 +1,12 @@
+apply plugin: 'java'
+
+compileJava {
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor'
+  ]
+}
+dependencies {
+  compile project(':common')
+  compile project(':processor')
+}
diff --git a/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/ParentUUT.java b/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/ParentUUT.java
new file mode 100644
index 0000000..8371816
--- /dev/null
+++ b/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/ParentUUT.java
@@ -0,0 +1,21 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.parent;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * Parent class.
+ */
+@JsonType
+public class ParentUUT {
+  public static final String PARENT_STRING_KEY = "parent_string";
+  public static final String PARENT_INT_KEY = "parent_int";
+
+  @JsonField(fieldName = PARENT_STRING_KEY)
+  public String parentString;
+
+  @JsonField(fieldName = PARENT_INT_KEY)
+  public int parentInt;
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/EnumUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/EnumUUT.java
new file mode 100644
index 0000000..b81dc0a
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/EnumUUT.java
@@ -0,0 +1,27 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * UUT to test using enums in autogenerated parsing and serialization.
+ */
+@JsonType
+public class EnumUUT {
+  public static final String ENUM_FIELD_NAME = "enum";
+
+  public enum EnumType {
+    VALUE0,
+    VALUE1,
+    VALUE2,
+    VALUE3,
+  }
+
+  @JsonField(fieldName = ENUM_FIELD_NAME,
+      valueExtractFormatter = "EnumUUT.EnumType.valueOf(${parser_object}.getText())",
+      serializeCodeFormatter =
+          "${generator_object}.writeStringField(\"${json_fieldname}\", ${object_varname}.${field_varname}.toString())")
+  public EnumType enumField;
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/ExactMappingUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/ExactMappingUUT.java
new file mode 100644
index 0000000..c0c1625
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/ExactMappingUUT.java
@@ -0,0 +1,59 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+import static com.instagram.common.json.annotation.JsonField.TypeMapping.*;
+
+/**
+ * UUT for testing the {@link JsonField.TypeMapping#EXACT} mapping.
+ */
+@JsonType
+public class ExactMappingUUT {
+  public static final String BOOLEAN_FIELD_NAME = "boolean";
+  public static final String BOOLEAN_OBJ_FIELD_NAME = "Boolean";
+  public static final String INT_FIELD_NAME = "int";
+  public static final String INTEGER_FIELD_NAME = "Integer";
+  public static final String LONG_FIELD_NAME = "long";
+  public static final String LONG_OBJ_FIELD_NAME = "Long";
+  public static final String FLOAT_FIELD_NAME = "float";
+  public static final String FLOAT_OBJ_FIELD_NAME = "Float";
+  public static final String DOUBLE_FIELD_NAME = "double";
+  public static final String DOUBLE_OBJ_FIELD_NAME = "Double";
+  public static final String STRING_FIELD_NAME = "String";
+
+  @JsonField(fieldName = BOOLEAN_FIELD_NAME, mapping = EXACT)
+  public boolean booleanField;
+
+  @JsonField(fieldName = BOOLEAN_OBJ_FIELD_NAME, mapping = EXACT)
+  public Boolean BooleanField;
+
+  @JsonField(fieldName = INT_FIELD_NAME, mapping = EXACT)
+  public int intField;
+
+  @JsonField(fieldName = INTEGER_FIELD_NAME, mapping = EXACT)
+  public Integer IntegerField;
+
+  @JsonField(fieldName = LONG_FIELD_NAME, mapping = EXACT)
+  public long longField;
+
+  @JsonField(fieldName = LONG_OBJ_FIELD_NAME, mapping = EXACT)
+  public Long LongField;
+
+  @JsonField(fieldName = FLOAT_FIELD_NAME, mapping = EXACT)
+  public float floatField;
+
+  @JsonField(fieldName = FLOAT_OBJ_FIELD_NAME, mapping = EXACT)
+  public Float FloatField;
+
+  @JsonField(fieldName = DOUBLE_FIELD_NAME, mapping = EXACT)
+  public double doubleField;
+
+  @JsonField(fieldName = DOUBLE_OBJ_FIELD_NAME, mapping = EXACT)
+  public Double DoubleField;
+
+  @JsonField(fieldName = STRING_FIELD_NAME, mapping = EXACT)
+  public String StringField;
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/FormatterUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/FormatterUUT.java
new file mode 100644
index 0000000..7c534d3
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/FormatterUUT.java
@@ -0,0 +1,24 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * UUT for testing the overridden formatters.  See {@link JsonField#valueExtractFormatter()} and
+ * {@link JsonField#fieldAssignmentFormatter()}.
+ */
+@JsonType
+class FormatterUUT {
+  static final String VALUE_FORMATTER_FIELD_NAME = "value_formatter";
+  static final String FIELD_ASSIGNMENT_FIELD_NAME = "field_assignment";
+
+  @JsonField(fieldName = VALUE_FORMATTER_FIELD_NAME,
+      valueExtractFormatter = "${parser_object}.getIntValue() + 15")
+  int valueFormatter;
+
+  @JsonField(fieldName = FIELD_ASSIGNMENT_FIELD_NAME,
+      fieldAssignmentFormatter = "${object_varname}.${field_varname} = -${extracted_value}")
+  int fieldAssignmentFormatter;
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/PostprocessingUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/PostprocessingUUT.java
new file mode 100644
index 0000000..302850d
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/PostprocessingUUT.java
@@ -0,0 +1,22 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * UUT to test the optional post-processing code.
+ */
+@JsonType(postprocessingEnabled = true)
+public class PostprocessingUUT {
+  static final String FIELD_NAME = "abcabc";
+
+  @JsonField(fieldName = FIELD_NAME)
+  int value;
+
+  PostprocessingUUT postprocess() {
+    value = value + 1;
+    return this;
+  }
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
new file mode 100644
index 0000000..0f6dab8
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
@@ -0,0 +1,54 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.util.List;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * Simple UUT for testing the most basic functionality.
+ */
+@JsonType
+public class SimpleParseUUT {
+  public static final String INT_FIELD_NAME = "int";
+  public static final String INTEGER_FIELD_NAME = "Integer";
+  public static final String FLOAT_FIELD_NAME = "float";
+  public static final String FLOAT_OBJ_FIELD_NAME = "Float";
+  public static final String STRING_FIELD_NAME = "String";
+  public static final String INTEGER_LIST_FIELD_NAME = "IntegerList";
+  public static final String SUBOBJECT_FIELD_NAME = "Subobject";
+
+  @JsonField(fieldName = INT_FIELD_NAME)
+  public int intField;
+
+  @JsonField(fieldName = INTEGER_FIELD_NAME)
+  public Integer integerField;
+
+  @JsonField(fieldName = FLOAT_FIELD_NAME)
+  public float floatField;
+
+  @JsonField(fieldName = FLOAT_OBJ_FIELD_NAME)
+  public Float FloatField;
+
+  @JsonField(fieldName = STRING_FIELD_NAME, mapping = JsonField.TypeMapping.EXACT)
+  public String stringField;
+
+  @JsonField(fieldName = INTEGER_LIST_FIELD_NAME)
+  public List<Integer> integerListField;
+
+  @JsonField(fieldName = SUBOBJECT_FIELD_NAME)
+  public SubobjectParseUUT subobjectField;
+
+  /**
+   * UUT for embedding a subobject.
+   */
+  @JsonType
+  public static class SubobjectParseUUT {
+    public static final String INT_FIELD_NAME = "int";
+
+    @JsonField(fieldName = INT_FIELD_NAME)
+    public int intField;
+  }
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StrictListParseUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StrictListParseUUT.java
new file mode 100644
index 0000000..8c2458f
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StrictListParseUUT.java
@@ -0,0 +1,34 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import java.util.List;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * Object with lists that request an {@link JsonField.TypeMapping#EXACT} mapping.
+ */
+@JsonType
+public class StrictListParseUUT {
+  public static final String INTEGER_LIST_FIELD_NAME = "IntegerList";
+  public static final String SUBOBJECT_LIST_FIELD_NAME = "SubobjectList";
+
+  @JsonField(fieldName = INTEGER_LIST_FIELD_NAME, mapping = JsonField.TypeMapping.EXACT)
+  public List<Integer> integerListField;
+
+  @JsonField(fieldName = SUBOBJECT_LIST_FIELD_NAME, mapping = JsonField.TypeMapping.EXACT)
+  public List<SubobjectParseUUT> subobjectListField;
+
+  /**
+   * UUT for embedding a subobject.
+   */
+  @JsonType
+  public static class SubobjectParseUUT {
+    public static final String INT_FIELD_NAME = "int";
+
+    @JsonField(fieldName = INT_FIELD_NAME)
+    public int intField;
+  }
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StringInterfaceUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StringInterfaceUUT.java
new file mode 100644
index 0000000..fd3cab0
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/StringInterfaceUUT.java
@@ -0,0 +1,17 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * Simple UUT for testing the most basic functionality.
+ */
+@JsonType()
+public class StringInterfaceUUT {
+  public static final String INT_FIELD_NAME = "int";
+
+  @JsonField(fieldName = INT_FIELD_NAME)
+  public int intField;
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..4a87f33
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,12 @@
+include 'javawriter'
+include 'util'
+include 'util:testprocessor'
+include 'util:testuut'
+include 'common'
+include 'processor'
+include 'processor:support'
+include 'processor:testuut'
+include 'processor:testuut:parent'
+include 'processor:testuut:dependent'
+include 'demo'
+include 'demo:igmodel'
diff --git a/util/build.gradle b/util/build.gradle
new file mode 100644
index 0000000..61b7953
--- /dev/null
+++ b/util/build.gradle
@@ -0,0 +1,12 @@
+apply plugin: 'java'
+
+repositories {
+  mavenCentral()
+}
+
+dependencies {
+  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  testCompile group: 'junit', name: 'junit', version: '4.8.2+'
+  testCompile project(':util:testuut')
+}
+
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/Console.java b/util/src/main/java/com/instagram/common/json/annotation/util/Console.java
new file mode 100644
index 0000000..a414890
--- /dev/null
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/Console.java
@@ -0,0 +1,56 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Element;
+import javax.tools.Diagnostic;
+
+import java.util.Locale;
+
+import static javax.tools.Diagnostic.Kind.ERROR;
+import static javax.tools.Diagnostic.Kind.WARNING;
+
+/**
+ * Utility functions to write to the compiler log.
+ */
+public class Console {
+  public static void error(Messager messager, String message, Object... args) {
+    messager.printMessage(ERROR, String.format(Locale.US, message, args));
+  }
+
+  public static void error(Messager messager, Element element, String message, Object... args) {
+    messager.printMessage(ERROR, String.format(Locale.US, message, args), element);
+  }
+
+  public static void warning(Messager messager, String message, Object... args) {
+    messager.printMessage(WARNING, String.format(Locale.US, message, args));
+  }
+
+  /**
+   * Returns a messager that swallows all its output.
+   */
+  public static Messager getNullMessager() {
+    return new Messager() {
+      @Override
+      public void printMessage(Diagnostic.Kind kind, CharSequence msg) {
+      }
+
+      @Override
+      public void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e) {
+      }
+
+      @Override
+      public void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e,
+          AnnotationMirror a) {
+      }
+
+      @Override
+      public void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e,
+          AnnotationMirror a, AnnotationValue v) {
+      }
+    };
+  }
+}
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
new file mode 100644
index 0000000..9d80d0f
--- /dev/null
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
@@ -0,0 +1,92 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import com.google.common.collect.Maps;
+
+import javax.annotation.processing.Messager;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * The basic construct to hold the annotation data gathered about a class.  Data records are indexed
+ * by a key.  {@link ProcessorClassData} manages the set of data records, though creation of a
+ * record is delegated to a factory.
+ *
+ * When the gathering phase is complete, a class injector is asked to produce java source code to be
+ * written out.
+ */
+abstract public class ProcessorClassData<AnnotationKeyType, AnnotationRecordType> {
+
+  /**
+   * Factory to produce records.
+   */
+  public interface AnnotationRecordFactory<AnnotationKeyType, AnnotationRecordType> {
+
+    /**
+     * Creates a record for a given key.
+     */
+    public AnnotationRecordType createAnnotationRecord(AnnotationKeyType key);
+  }
+
+  protected final String mClassPackage;
+  protected final String mClassName;
+  protected final String mInjectedClassName;
+  private final AnnotationRecordFactory<AnnotationKeyType, AnnotationRecordType> mFactory;
+  private Map<AnnotationKeyType, AnnotationRecordType> mData;
+
+  /**
+   * Creates a ProcessorClassData.
+   * @param classPackage the package of the class being inspected.
+   * @param className the simple class name of the class being inspected.  See
+   * {@link Class#getSimpleName()}.
+   * @param injectedClassName the simple class name of the class this injector will write its
+   * generated code to.  See {@link Class#getSimpleName()}.
+   * @param factory creates data records.
+   */
+  protected ProcessorClassData(String classPackage, String className, String injectedClassName,
+      AnnotationRecordFactory<AnnotationKeyType, AnnotationRecordType> factory) {
+    mClassPackage = classPackage;
+    mClassName = className;
+    mInjectedClassName = injectedClassName;
+    mFactory = factory;
+    mData = Maps.newHashMap();
+  }
+
+  /**
+   * Retrieves the data record corresponding to a given key.  If the record does not exist, it is
+   * created.
+   */
+  public AnnotationRecordType getOrCreateRecord(AnnotationKeyType key) {
+    AnnotationRecordType record = mData.get(key);
+    if (record == null) {
+      record = mFactory.createAnnotationRecord(key);
+      mData.put(key, record);
+    }
+    return record;
+  }
+
+  /**
+   * Returns the fully-qualified class name of the class we're generating the source for.
+   */
+  public String getInjectedFqcn() {
+    return mClassPackage + '.' + mInjectedClassName;
+  }
+
+  /**
+   * Returns an iterator across all the records gathered by this injector.
+   */
+  protected Iterable<Map.Entry<AnnotationKeyType, AnnotationRecordType>> getIterator() {
+    return new Iterable<Map.Entry<AnnotationKeyType, AnnotationRecordType>>() {
+      @Override
+      public Iterator<Map.Entry<AnnotationKeyType, AnnotationRecordType>> iterator() {
+        return mData.entrySet().iterator();
+      }
+    };
+  }
+
+  /**
+   * Returns the java code generated.
+   */
+  abstract public String getJavaCode(Messager messager);
+}
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
new file mode 100644
index 0000000..2d91bc5
--- /dev/null
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
@@ -0,0 +1,204 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Utility functions to get the declared types of fields.
+ */
+public class TypeUtils {
+
+  public enum ParseType {
+    UNSUPPORTED,
+    BOOLEAN,
+    BOOLEAN_OBJECT,
+    INTEGER,
+    INTEGER_OBJECT,
+    LONG,
+    LONG_OBJECT,
+    FLOAT,
+    FLOAT_OBJECT,
+    DOUBLE,
+    DOUBLE_OBJECT,
+    STRING,
+    PARSABLE_OBJECT,
+    ENUM_OBJECT,
+  };
+
+  private static final String JAVA_LANG_STRING = "java.lang.String";
+  private static final String JAVA_LANG_BOOLEAN = "java.lang.Boolean";
+  private static final String JAVA_LANG_INTEGER = "java.lang.Integer";
+  private static final String JAVA_LANG_LONG = "java.lang.Long";
+  private static final String JAVA_LANG_FLOAT = "java.lang.Float";
+  private static final String JAVA_LANG_DOUBLE = "java.lang.Double";
+  private static final String JAVA_UTIL_LIST = "java.util.List<?>";
+  private static final String JAVA_UTIL_LIST_UNTYPED = "java.util.List";
+  private static final String JAVA_LANG_ENUM = "java.lang.Enum<?>";
+
+  private final Types mTypes;
+  private final Messager mMessager;
+
+  public TypeUtils(Types types, Messager messager) {
+    mTypes = types;
+    mMessager = messager;
+  }
+
+  public ParseType getParseType(
+      TypeMirror typeMirror, Class<? extends Annotation> typeAnnotationClass) {
+    if (typeMirror == null) {
+      return ParseType.UNSUPPORTED;
+    } else if (JAVA_LANG_STRING.equals(typeMirror.toString())) {
+      return ParseType.STRING;
+    } else if (typeMirror.getKind() == TypeKind.BOOLEAN) {
+      return ParseType.BOOLEAN;
+    } else if (JAVA_LANG_BOOLEAN.equals(typeMirror.toString())) {
+      return ParseType.BOOLEAN_OBJECT;
+    } else if (typeMirror.getKind() == TypeKind.INT) {
+      return ParseType.INTEGER;
+    } else if (JAVA_LANG_INTEGER.equals(typeMirror.toString())) {
+      return ParseType.INTEGER_OBJECT;
+    } else if (typeMirror.getKind() == TypeKind.LONG) {
+      return ParseType.LONG;
+    } else if (JAVA_LANG_LONG.equals(typeMirror.toString())) {
+      return ParseType.LONG_OBJECT;
+    } else if (typeMirror.getKind() == TypeKind.FLOAT) {
+      return ParseType.FLOAT;
+    } else if (JAVA_LANG_FLOAT.equals(typeMirror.toString())) {
+      return ParseType.FLOAT_OBJECT;
+    } else if (typeMirror.getKind() == TypeKind.DOUBLE) {
+      return ParseType.DOUBLE;
+    } else if (JAVA_LANG_DOUBLE.equals(typeMirror.toString())) {
+      return ParseType.DOUBLE_OBJECT;
+    } else if (typeMirror instanceof DeclaredType) {
+      DeclaredType type = (DeclaredType) typeMirror;
+      Element element = type.asElement();
+
+      Annotation annotation = element.getAnnotation(typeAnnotationClass);
+      if (annotation != null) {
+        return ParseType.PARSABLE_OBJECT;
+      }
+
+      // is it an enum?
+      if (element instanceof TypeElement) {
+        TypeElement typeElement = (TypeElement) element;
+        TypeMirror superclass = typeElement.getSuperclass();
+        if (superclass instanceof DeclaredType) {
+          DeclaredType superclassDeclaredType = (DeclaredType) superclass;
+
+          if (JAVA_LANG_ENUM.equals(getCanonicalTypeName(superclassDeclaredType))) {
+            return ParseType.ENUM_OBJECT;
+          }
+        }
+      }
+    }
+
+    return ParseType.UNSUPPORTED;
+  }
+
+  public boolean isListType(TypeMirror typeMirror) {
+    return JAVA_UTIL_LIST_UNTYPED.equals(mTypes.erasure(typeMirror).toString());
+  }
+
+  /**
+   * If {@code typeMirror} represents a list type ({@link java.util.List}), attempt to divine the
+   * type of the contents.
+   *
+   * Returns null if {@code typeMirror} does not represent a list type or if we cannot divine the
+   * type of the contents.
+   */
+  public TypeMirror getListParameterizedType(TypeMirror typeMirror) {
+    if (!(typeMirror instanceof DeclaredType)) {
+      return null;
+    }
+    DeclaredType declaredType = (DeclaredType) typeMirror;
+    Element element = declaredType.asElement();
+    if (!(element instanceof TypeElement)) {
+      return null;
+    }
+    TypeElement typeElement = (TypeElement) element;
+    List<? extends TypeParameterElement> typeParameterElements = typeElement.getTypeParameters();
+
+    if (JAVA_UTIL_LIST.equals(getCanonicalTypeName(declaredType))) {
+      // sanity check.
+      if (typeParameterElements.size() != 1) {
+        throw new IllegalStateException("java list is not expected generic type");
+      }
+
+      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+
+      if (typeArguments.size() == 1) {
+        return typeArguments.get(0);
+      } else {
+        return null;
+      }
+    }
+
+    return null;
+  }
+
+  /**
+   * This returns the class name of the type as one would use to reference in code.  For most cases,
+   * this is pretty straightforward.  Inner classes are used with . notation, i.e., if class Y is an
+   * inner class of class X, then class Y's class name should be X.Y.
+   */
+  public String getClassName(TypeElement type, String packageName) {
+    int packageLen = packageName.length() + 1;
+    return type.getQualifiedName().toString().substring(packageLen);
+  }
+
+  /**
+   * This returns the prefix used to refer to the generated class.  This is different because we
+   * generate individual source files for each inner class.  For instance, if we have class X with
+   * inner classes Y and Z, then we generate three source files.
+   * <p/>
+   * To make this work, we replace the normal dot notation between an outer class and an inner class
+   * with a '_', i.e., the generated class for class X will be X_Y&lt;suffix&gt;.
+   */
+  public String getPrefixForGeneratedClass(TypeElement type, String packageName) {
+    int packageLen = packageName.length() + 1;
+    return type.getQualifiedName().toString().substring(packageLen).replace('.', '_');
+  }
+
+  public String getPackageName(Elements elements, TypeElement type) {
+    return elements.getPackageOf(type).getQualifiedName().toString();
+  }
+
+  /**
+   * Returns a string with type parameters replaced with wildcards.  This is slightly different from
+   * {@link Types#erasure(javax.lang.model.type.TypeMirror)}, which removes all type parameter data.
+   *
+   * For instance, if there is a field with type List&lt;String&gt;, this returns a string
+   * List&lt;?&gt;.
+   */
+  private String getCanonicalTypeName(DeclaredType declaredType) {
+    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+    if (!typeArguments.isEmpty()) {
+      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
+      typeString.append('<');
+      for (int i = 0; i < typeArguments.size(); i++) {
+        if (i > 0) {
+          typeString.append(',');
+        }
+        typeString.append('?');
+      }
+      typeString.append('>');
+
+      return typeString.toString();
+    } else {
+      return declaredType.toString();
+    }
+  }
+}
diff --git a/util/src/test/java/com/instagram/common/json/annotation/util/TypeUtilsTest.java b/util/src/test/java/com/instagram/common/json/annotation/util/TypeUtilsTest.java
new file mode 100644
index 0000000..9f28283
--- /dev/null
+++ b/util/src/test/java/com/instagram/common/json/annotation/util/TypeUtilsTest.java
@@ -0,0 +1,127 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Verifies that we can correctly identify the declared type of fields.
+ */
+public class TypeUtilsTest {
+
+  @Test
+  public void testTypeIdentification() {
+    TypeInspectionUUT object = new TypeInspectionUUT();
+    TypeInspectionUUT__Test.injectTypeData(object);
+
+    verifyBaseClass(object);
+  }
+
+  @Test
+  public void testSubclassTypeIdentification() {
+    SubclassUUT object = new SubclassUUT();
+    SubclassUUT__Test.injectTypeData(object);
+
+    assertFalse(object.subclassInteger__IsList);
+    assertEquals(object.subclassInteger__ParseType, TypeUtils.ParseType.INTEGER.toString());
+
+    verifyBaseClass(object);
+  }
+
+  private void verifyBaseClass(TypeInspectionUUT object) {
+    assertFalse(object.primitiveBoolean__IsList);
+    assertEquals(object.primitiveBoolean__ParseType, TypeUtils.ParseType.BOOLEAN.toString());
+    assertNull(object.primitiveBoolean__ParseTypeGeneratedClass);
+
+    assertFalse(object.boxedBoolean__IsList);
+    assertEquals(object.boxedBoolean__ParseType, TypeUtils.ParseType.BOOLEAN_OBJECT.toString());
+    assertNull(object.boxedBoolean__ParseTypeGeneratedClass);
+
+    assertFalse(object.primitiveInteger__IsList);
+    assertEquals(object.primitiveInteger__ParseType, TypeUtils.ParseType.INTEGER.toString());
+    assertNull(object.primitiveInteger__ParseTypeGeneratedClass);
+
+    assertFalse(object.boxedInteger__IsList);
+    assertEquals(object.boxedInteger__ParseType, TypeUtils.ParseType.INTEGER_OBJECT.toString());
+    assertNull(object.boxedInteger__ParseTypeGeneratedClass);
+
+    assertFalse(object.primitiveLong__IsList);
+    assertEquals(object.primitiveLong__ParseType, TypeUtils.ParseType.LONG.toString());
+    assertNull(object.primitiveLong__ParseTypeGeneratedClass);
+
+    assertFalse(object.boxedLong__IsList);
+    assertEquals(object.boxedLong__ParseType, TypeUtils.ParseType.LONG_OBJECT.toString());
+    assertNull(object.boxedLong__ParseTypeGeneratedClass);
+
+    assertFalse(object.primitiveFloat__IsList);
+    assertEquals(object.primitiveFloat__ParseType, TypeUtils.ParseType.FLOAT.toString());
+    assertNull(object.primitiveFloat__ParseTypeGeneratedClass);
+
+    assertFalse(object.boxedFloat__IsList);
+    assertEquals(object.boxedFloat__ParseType, TypeUtils.ParseType.FLOAT_OBJECT.toString());
+    assertNull(object.boxedFloat__ParseTypeGeneratedClass);
+
+    assertFalse(object.primitiveDouble__IsList);
+    assertEquals(object.primitiveDouble__ParseType, TypeUtils.ParseType.DOUBLE.toString());
+    assertNull(object.primitiveDouble__ParseTypeGeneratedClass);
+
+    assertFalse(object.boxedDouble__IsList);
+    assertEquals(object.boxedDouble__ParseType, TypeUtils.ParseType.DOUBLE_OBJECT.toString());
+    assertNull(object.boxedDouble__ParseTypeGeneratedClass);
+
+    assertFalse(object.enumInstance__IsList);
+    assertEquals(object.enumInstance__ParseType, TypeUtils.ParseType.ENUM_OBJECT.toString());
+    assertNull(object.enumInstance__ParseTypeGeneratedClass);
+
+    assertFalse(object.string__IsList);
+    assertEquals(object.string__ParseType, TypeUtils.ParseType.STRING.toString());
+    assertNull(object.string__ParseTypeGeneratedClass);
+
+    assertTrue(object.integerList__IsList);
+    assertEquals(object.integerList__ParseType, TypeUtils.ParseType.INTEGER_OBJECT.toString());
+    assertNull(object.integerList__ParseTypeGeneratedClass);
+
+    assertFalse(object.integerInheritedList__IsList);
+    assertEquals(object.integerInheritedList__ParseType,
+        TypeUtils.ParseType.UNSUPPORTED.toString());
+    assertNull(object.integerInheritedList__ParseTypeGeneratedClass);
+
+    assertFalse(object.unspecifiedInheritedList__IsList);
+    assertEquals(object.unspecifiedInheritedList__ParseType,
+        TypeUtils.ParseType.UNSUPPORTED.toString());
+    assertNull(object.unspecifiedInheritedList__ParseTypeGeneratedClass);
+
+    assertFalse(object.nestedData__IsList);
+    assertEquals(object.nestedData__ParseType, TypeInspectionUUT.class.getCanonicalName());
+    assertEquals(object.nestedData__ParseTypeGeneratedClass,
+        transformName(TypeInspectionUUT.class.getName()));
+
+    assertFalse(object.nestedInnerClassData__IsList);
+    assertEquals(object.nestedInnerClassData__ParseType,
+        TypeInspectionUUT.InnerClassUUT.class.getCanonicalName());
+    assertEquals(object.nestedInnerClassData__ParseTypeGeneratedClass,
+        transformName(TypeInspectionUUT.InnerClassUUT.class.getName()));
+
+    assertTrue(object.nestedDataList__IsList);
+    assertEquals(object.nestedDataList__ParseType, TypeInspectionUUT.class.getCanonicalName());
+    assertEquals(object.nestedDataList__ParseTypeGeneratedClass,
+        transformName(TypeInspectionUUT.class.getName()));
+
+    assertTrue(object.nestedInnerClassDataList__IsList);
+    assertEquals(object.nestedInnerClassDataList__ParseType,
+        TypeInspectionUUT.InnerClassUUT.class.getCanonicalName());
+    assertEquals(object.nestedInnerClassDataList__ParseTypeGeneratedClass,
+        transformName(TypeInspectionUUT.InnerClassUUT.class.getName()));
+
+  }
+
+  /**
+   * Inner classes are represented in java as OUTER_CLASS$INNER_CLASS.  Since we want to avoid the
+   * usage of $ in the generated class names, we replace the $ with a _.
+   */
+  private String transformName(String stringName) {
+    return stringName.replace('$', '_');
+  }
+}
diff --git a/util/testprocessor/build.gradle b/util/testprocessor/build.gradle
new file mode 100644
index 0000000..0afb606
--- /dev/null
+++ b/util/testprocessor/build.gradle
@@ -0,0 +1,7 @@
+apply plugin: 'java'
+
+dependencies {
+  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  compile project(':util')
+  compile project(':javawriter')
+}
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/FieldData.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/FieldData.java
new file mode 100644
index 0000000..c67528b
--- /dev/null
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/FieldData.java
@@ -0,0 +1,14 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+/**
+ * Records the data we gathered about each field.
+ */
+class FieldData {
+
+  boolean mIsList;
+  TypeUtils.ParseType mParseType;
+  String mParsableType;
+  String mParsableTypeGeneratedClass;
+}
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/MarkedTypes.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/MarkedTypes.java
new file mode 100644
index 0000000..038bd2d
--- /dev/null
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/MarkedTypes.java
@@ -0,0 +1,16 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Annotation we apply to classes we want to run the test annotation processor on.
+ */
+@Retention(CLASS) @Target(TYPE)
+@interface MarkedTypes {
+}
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
new file mode 100644
index 0000000..0bfbeaa
--- /dev/null
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
@@ -0,0 +1,259 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+import javax.annotation.processing.*;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.JavaFileObject;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.lang.annotation.Annotation;
+import java.util.Map;
+import java.util.Set;
+
+import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.Modifier.PRIVATE;
+
+/**
+ * This annotation processor generates a class that traverses the fields of a class and records
+ * information about the declared types of the fields.
+ */
+public class TestAnnotationProcessor extends AbstractProcessor {
+
+  public static final String TYPE_DATA_SUFFIX = "__Test";
+
+  private Elements mElements;
+  private Types mTypes;
+  private Filer mFiler;
+  private TypeUtils mTypeUtils;
+  private static class State {
+    private Map<TypeElement, TypeGathererClassData> mClassElementToInjectorMap;
+
+    State() {
+      mClassElementToInjectorMap = Maps.newHashMap();
+    }
+  }
+  private State mState;
+
+  @Override
+  public synchronized void init(ProcessingEnvironment env) {
+    super.init(env);
+
+    mElements = env.getElementUtils();
+    mTypes = env.getTypeUtils();
+    mFiler = env.getFiler();
+    mTypeUtils = new TypeUtils(mTypes, /*Console.getNullMessager()*/ env.getMessager());
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    Set<String> supportTypes = Sets.newLinkedHashSet();
+    supportTypes.add(TypeTesting.class.getCanonicalName());
+    supportTypes.add(MarkedTypes.class.getCanonicalName());
+
+    return supportTypes;
+  }
+
+  @Override
+  public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+    try {
+      // each round of processing requires a clean state.
+      mState = new State();
+
+      gatherClassAnnotations(env);
+      gatherFieldAnnotations(env);
+
+      for (Map.Entry<TypeElement, TypeGathererClassData> entry :
+          mState.mClassElementToInjectorMap.entrySet()) {
+        TypeElement typeElement = entry.getKey();
+        TypeGathererClassData injector = entry.getValue();
+
+        try {
+          JavaFileObject jfo = mFiler.createSourceFile(injector.getInjectedFqcn(), typeElement);
+          Writer writer = jfo.openWriter();
+          writer.write(injector.getJavaCode(Console.getNullMessager()));
+          writer.flush();
+          writer.close();
+        } catch (IOException e) {
+          error(typeElement, "Unable to write injector for type %s: %s",
+              typeElement, e.getMessage());
+        }
+      }
+
+      return true;
+    } catch (Throwable ex) {
+      error("exception: %s cause: %s", ex.toString(), ex.getCause());
+      return false;
+    }
+  }
+
+  private void gatherClassAnnotations(RoundEnvironment env) {
+    // Process each @TypeTesting elements.
+    for (Element element : env.getElementsAnnotatedWith(MarkedTypes.class)) {
+      try {
+        processClassAnnotation(element);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view injector for @TypeTesting.\n\n%s",
+            stackTrace.toString());
+      }
+    }
+
+    for (Map.Entry<TypeElement, TypeGathererClassData> entry :
+        mState.mClassElementToInjectorMap.entrySet()) {
+      TypeMirror superclass = entry.getKey().getSuperclass();
+
+      // walk up the superclass hierarchy until we find another class we know about.
+      while (superclass.getKind() != TypeKind.NONE) {
+        TypeElement element = (TypeElement) mTypes.asElement(superclass);
+
+        TypeGathererClassData injector = mState.mClassElementToInjectorMap.get(element);
+        if (injector != null) {
+          entry.getValue().setParentClassData(injector);
+          break;
+        }
+
+        superclass = element.getSuperclass();
+      }
+    }
+  }
+
+  private void processClassAnnotation(Element element) {
+    TypeElement typeElement = (TypeElement) element;
+
+    // Verify containing class visibility is not private.
+    if (element.getModifiers().contains(PRIVATE)) {
+      error(element, "@%s %s may not be applied to private classes. (%s.%s)",
+          MarkedTypes.class.getSimpleName(), typeElement.getQualifiedName(),
+          element.getSimpleName());
+      return;
+    }
+
+    TypeGathererClassData injector = mState.mClassElementToInjectorMap.get(typeElement);
+    if (injector == null) {
+      String packageName = mTypeUtils.getPackageName(mElements, typeElement);
+      injector = new TypeGathererClassData(
+          packageName,
+          typeElement.getQualifiedName().toString(),
+          mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName) + TYPE_DATA_SUFFIX,
+          new ProcessorClassData.AnnotationRecordFactory<String, FieldData>() {
+
+            @Override
+            public FieldData createAnnotationRecord(String key) {
+              return new FieldData();
+            }
+          });
+      mState.mClassElementToInjectorMap.put(typeElement, injector);
+    }
+  }
+
+  private void gatherFieldAnnotations(RoundEnvironment env) {
+    // Process each @TypeTesting elements.
+    for (Element element : env.getElementsAnnotatedWith(TypeTesting.class)) {
+      try {
+        processFieldAnnotation(element);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view injector for @TypeTesting.\n\n%s",
+            stackTrace.toString());
+      }
+    }
+  }
+
+  private void processFieldAnnotation(Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify common generated code restrictions.
+    if (!isFieldAnnotationValid(TypeTesting.class, element)) {
+      return;
+    }
+
+    TypeMirror type = element.asType();
+
+    TypeGathererClassData injector = mState.mClassElementToInjectorMap.get(enclosingElement);
+
+    FieldData data = injector.getOrCreateRecord(element.getSimpleName().toString());
+    if (data.mIsList = mTypeUtils.isListType(type)) {
+      // inspect the inner type.
+      type = mTypeUtils.getListParameterizedType(type);
+    }
+
+    data.mParseType = mTypeUtils.getParseType(type, MarkedTypes.class);
+    if (data.mParseType == TypeUtils.ParseType.PARSABLE_OBJECT) {
+      TypeMirror erasedType = mTypes.erasure(type);
+      DeclaredType declaredType = (DeclaredType) erasedType;
+      TypeElement typeElement = (TypeElement) declaredType.asElement();
+
+      String packageName = mTypeUtils.getPackageName(mElements, typeElement);
+      String className = mTypeUtils.getClassName(typeElement, packageName);
+      String parserClassName = mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName);
+
+      data.mParsableType = packageName + "." + className;
+      data.mParsableTypeGeneratedClass = packageName + "." + parserClassName;
+    }
+  }
+
+  private boolean isFieldAnnotationValid(Class<? extends Annotation> annotationClass,
+      Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify containing type.
+    if (enclosingElement.getKind() != CLASS) {
+      error(enclosingElement, "@%s field may only be contained in classes. (%s.%s)",
+          annotationClass.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      return false;
+    }
+
+    Annotation annotation = enclosingElement.getAnnotation(MarkedTypes.class);
+    if (annotation == null) {
+      error(enclosingElement,
+          "@%s field may only be contained in classes annotated with @%s (%s.%s)",
+          annotationClass.getSimpleName(),
+          MarkedTypes.class.toString(),
+          enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      return false;
+    }
+
+    // Verify containing class visibility is not private.
+    if (enclosingElement.getModifiers().contains(PRIVATE)) {
+      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
+          annotationClass.getSimpleName(),
+          enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      return false;
+    }
+
+    return true;
+  }
+
+  private void error(String message, Object... args) {
+    Console.error(processingEnv.getMessager(), message, args);
+  }
+
+  private void error(Element element, String message, Object... args) {
+    Console.error(processingEnv.getMessager(), element, message, args);
+  }
+}
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
new file mode 100644
index 0000000..fa98393
--- /dev/null
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
@@ -0,0 +1,105 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import javax.annotation.processing.Messager;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.Arrays;
+import java.util.EnumSet;
+import java.util.Map;
+
+import com.squareup.javawriter.JavaWriter;
+
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
+/**
+ * This gathers data about the declared types of annotated fields and writes code to mutate fields
+ * to record that information.
+ * <p/>
+ * If a field's name is XXX, then it generates code to write:
+ * <ul>
+ *    <li>XXX__IsList - whether a field is a list or a scalar.</li>
+ *    <li>XXX__ParseType - the {@link TypeUtils.ParseType} that best matches the field.</li>
+ * </ul>
+ *
+ * As an example, a field declared as <code>int foo;</code>
+ * Will generate the following code:<pre>
+ *    foo__IsList = false;
+ *    foo__ParseType = "INTEGER";
+ * </pre>
+ */
+public class TypeGathererClassData extends ProcessorClassData<String, FieldData> {
+  private TypeGathererClassData mParentClassData;
+
+  public TypeGathererClassData(String classPackage, String className, String injectedClassName,
+      AnnotationRecordFactory<String, FieldData> factory) {
+    super(classPackage, className, injectedClassName, factory);
+  }
+
+  @Override
+  public String getJavaCode(Messager messager) {
+    StringWriter sw = new StringWriter();
+    JavaWriter writer = new JavaWriter(sw);
+
+    try {
+      writer.emitPackage(mClassPackage)
+          .beginType(mInjectedClassName, "class", EnumSet.of(PUBLIC, FINAL))
+            .beginMethod("void", "injectTypeData", EnumSet.of(PUBLIC, FINAL, STATIC),
+                mClassName, "instance")
+              .emitWithGenerator(new JavaWriter.JavaGenerator() {
+                @Override
+                public void emitJava(JavaWriter writer) throws IOException {
+                  TypeGathererClassData classWalker = TypeGathererClassData.this;
+                  while (classWalker != null) {
+                    classWalker.writeFields(writer);
+                    classWalker = classWalker.getParentClassData();
+                  }
+                }
+              })
+            .endMethod()
+          .endType();
+    } catch (IOException ex) {
+      Console.error(messager, "IOException while generating %s: %s",
+          mInjectedClassName, ex.toString());
+    }
+
+    return sw.toString();
+  }
+
+  protected void writeFields(JavaWriter writer) throws IOException {
+    for (Map.Entry<String, FieldData> entry : getIterator()) {
+      writer.emitStatement("instance.%s__IsList = %s", entry.getKey(), entry.getValue().mIsList);
+
+      String parseTypeString;
+      if (entry.getValue().mParseType == TypeUtils.ParseType.PARSABLE_OBJECT) {
+        parseTypeString = entry.getValue().mParsableType;
+      } else {
+        parseTypeString = entry.getValue().mParseType.toString();
+      }
+      writer.emitStatement("instance.%s__ParseType = \"%s\"", entry.getKey(), parseTypeString);
+
+      String parseTypeGeneratedClass = entry.getValue().mParsableTypeGeneratedClass;
+      writer.emitStatement("instance.%s__ParseTypeGeneratedClass = %s",
+          entry.getKey(),
+          parseTypeGeneratedClass == null ? null : '\"' + parseTypeGeneratedClass + '\"');
+    }
+  }
+
+  /**
+   * Sets the class data structure for the parent class.
+   */
+  void setParentClassData(TypeGathererClassData parentClassData) {
+    mParentClassData = parentClassData;
+  }
+
+  /**
+   * Retrieves the class data structure for the parent class.
+   * @return
+   */
+  private TypeGathererClassData getParentClassData() {
+    return mParentClassData;
+  }
+}
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeTesting.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeTesting.java
new file mode 100644
index 0000000..213b7c0
--- /dev/null
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeTesting.java
@@ -0,0 +1,16 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Applied to each field we want the annotation processor to understand.
+ */
+@Retention(CLASS) @Target(FIELD)
+@interface TypeTesting {
+}
diff --git a/util/testuut/build.gradle b/util/testuut/build.gradle
new file mode 100644
index 0000000..7628375
--- /dev/null
+++ b/util/testuut/build.gradle
@@ -0,0 +1,12 @@
+apply plugin: 'java'
+
+compileJava {
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.util.TestAnnotationProcessor'
+  ]
+}
+dependencies {
+  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  compile project(':util:testprocessor')
+}
diff --git a/util/testuut/src/main/java/com/instagram/common/json/annotation/util/SubclassUUT.java b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/SubclassUUT.java
new file mode 100644
index 0000000..23b4aad
--- /dev/null
+++ b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/SubclassUUT.java
@@ -0,0 +1,18 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+/**
+ * Subclass of the type inspection unit under test.  This allows us to verify that we can traverse
+ * the type hierarchy correctly.
+ */
+@MarkedTypes
+class SubclassUUT extends TypeInspectionUUT {
+
+  @TypeTesting
+  int subclassInteger;
+
+  boolean subclassInteger__IsList;
+  String subclassInteger__ParseType;
+  String subclassInteger__ParseTypeGeneratedClass;
+}
diff --git a/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java
new file mode 100644
index 0000000..08cbd26
--- /dev/null
+++ b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java
@@ -0,0 +1,172 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.util;
+
+import java.util.List;
+
+/**
+ * Basic class that contains all the supported types.
+ */
+@MarkedTypes
+class TypeInspectionUUT {
+
+  //////
+  // primitives and their boxed counterparts.
+  @TypeTesting
+  boolean primitiveBoolean;
+
+  boolean primitiveBoolean__IsList;
+  String primitiveBoolean__ParseType;
+  String primitiveBoolean__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  Boolean boxedBoolean;
+
+  boolean boxedBoolean__IsList;
+  String boxedBoolean__ParseType;
+  String boxedBoolean__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  int primitiveInteger;
+
+  boolean primitiveInteger__IsList;
+  String primitiveInteger__ParseType;
+  String primitiveInteger__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  Integer boxedInteger;
+
+  boolean boxedInteger__IsList;
+  String boxedInteger__ParseType;
+  String boxedInteger__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  long primitiveLong;
+
+  boolean primitiveLong__IsList;
+  String primitiveLong__ParseType;
+  String primitiveLong__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  Long boxedLong;
+
+  boolean boxedLong__IsList;
+  String boxedLong__ParseType;
+  String boxedLong__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  float primitiveFloat;
+
+  boolean primitiveFloat__IsList;
+  String primitiveFloat__ParseType;
+  String primitiveFloat__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  Float boxedFloat;
+
+  boolean boxedFloat__IsList;
+  String boxedFloat__ParseType;
+  String boxedFloat__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  double primitiveDouble;
+
+  boolean primitiveDouble__IsList;
+  String primitiveDouble__ParseType;
+  String primitiveDouble__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  Double boxedDouble;
+
+  boolean boxedDouble__IsList;
+  String boxedDouble__ParseType;
+  String boxedDouble__ParseTypeGeneratedClass;
+
+  enum Foo {
+    VALUE0,
+    VALUE1,
+  };
+
+  @TypeTesting
+  Foo enumInstance;
+
+  boolean enumInstance__IsList;
+  String enumInstance__ParseType;
+  String enumInstance__ParseTypeGeneratedClass;
+
+  //////
+  // strings.
+  @TypeTesting
+  String string;
+
+  boolean string__IsList;
+  String string__ParseType;
+  String string__ParseTypeGeneratedClass;
+
+  //////
+  // collection types.
+  @TypeTesting
+  List<Integer> integerList;
+
+  boolean integerList__IsList;
+  String integerList__ParseType;
+  String integerList__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  InheritedExtendsSpecifiesType integerInheritedList;
+
+  boolean integerInheritedList__IsList;
+  String integerInheritedList__ParseType;
+  String integerInheritedList__ParseTypeGeneratedClass;
+
+  private abstract static class InheritedExtendsSpecifiesType implements List<Integer> {}
+
+  @TypeTesting
+  InheritedExtendsNoType unspecifiedInheritedList;
+
+  boolean unspecifiedInheritedList__IsList;
+  String unspecifiedInheritedList__ParseType;
+  String unspecifiedInheritedList__ParseTypeGeneratedClass;
+
+  private abstract static class InheritedExtendsNoType implements List {}
+
+  //////
+  // nesting
+  @TypeTesting
+  TypeInspectionUUT nestedData;
+
+  boolean nestedData__IsList;
+  String nestedData__ParseType;
+  String nestedData__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  InnerClassUUT nestedInnerClassData;
+
+  boolean nestedInnerClassData__IsList;
+  String nestedInnerClassData__ParseType;
+  String nestedInnerClassData__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  List<TypeInspectionUUT> nestedDataList;
+
+  boolean nestedDataList__IsList;
+  String nestedDataList__ParseType;
+  String nestedDataList__ParseTypeGeneratedClass;
+
+  @TypeTesting
+  List<InnerClassUUT> nestedInnerClassDataList;
+
+  boolean nestedInnerClassDataList__IsList;
+  String nestedInnerClassDataList__ParseType;
+  String nestedInnerClassDataList__ParseTypeGeneratedClass;
+
+  @MarkedTypes
+  public static class InnerClassUUT {
+    @TypeTesting
+    String string;
+
+    boolean string__IsList;
+    String string__ParseType;
+    String string__ParseTypeGeneratedClass;
+  }
+}

commit 50147d096080183a33b35be8f7a306e1331011ad
Author: Tony Tung <tonytung@merly.org>
Date:   Fri Sep 5 21:23:51 2014 -0700

    Sync from repo as of d5952274397e
    
    Properly handle abstract classes.
    Container classes can be Lists or Queues.

diff --git a/common/src/main/java/com/instagram/common/json/annotation/JsonField.java b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
index 2d7e349..a6fe545 100644
--- a/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
+++ b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
@@ -24,7 +24,7 @@ public @interface JsonField {
    * If a {@link TypeMapping#COERCED} mapping is requested, we will do our best to coerce it into
    * the proper type.
    */
-  public enum TypeMapping { EXACT, COERCED };
+  public enum TypeMapping { EXACT, COERCED }
 
   /**
    * This is the field name in json.
diff --git a/processor/build.gradle b/processor/build.gradle
index 0d32f54..f333aa8 100644
--- a/processor/build.gradle
+++ b/processor/build.gradle
@@ -9,6 +9,7 @@ dependencies {
   compile project(':javawriter')
   compile project(':util')
   compile project(':common')
+  testCompile group: 'com.google.guava', name: 'guava', version: '12.0.1+'
   testCompile group: 'junit', name: 'junit', version: '4.8.2+'
   testCompile project(':processor:support')
   testCompile project(':processor:testuut')
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
index bafe6e9..63cf290 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
@@ -22,6 +22,7 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.Writer;
 import java.lang.annotation.Annotation;
+import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
@@ -33,11 +34,8 @@ import com.instagram.common.json.annotation.util.Console;
 import com.instagram.common.json.annotation.util.ProcessorClassData;
 import com.instagram.common.json.annotation.util.TypeUtils;
 
-import com.google.common.base.Strings;
-import com.google.common.collect.Maps;
-
 import static javax.lang.model.element.ElementKind.CLASS;
-import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.*;
 
 /**
  * This annotation processor is run at compile time to find classes annotated with {@link JsonType}.
@@ -53,7 +51,7 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
     private Map<TypeElement, JsonParserClassData> mClassElementToInjectorMap;
 
     State() {
-      mClassElementToInjectorMap = Maps.newHashMap();
+      mClassElementToInjectorMap = new HashMap<TypeElement, JsonParserClassData>();
     }
   }
   private State mState;
@@ -141,6 +139,7 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
    * class is public and creates an {@link ProcessorClassData} for it.
    */
   private void processClassAnnotation(Element element) {
+    boolean abstractClass = false;
     TypeElement typeElement = (TypeElement) element;
 
     // Verify containing class visibility is not private.
@@ -150,6 +149,9 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
           element.getSimpleName());
       return;
     }
+    if (element.getModifiers().contains(ABSTRACT)) {
+      abstractClass = true;
+    }
 
     JsonParserClassData injector = mState.mClassElementToInjectorMap.get(typeElement);
     if (injector == null) {
@@ -187,6 +189,7 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
               return new TypeData();
             }
           },
+          abstractClass,
           annotation.postprocessingEnabled(),
           parentGeneratedClassName);
       mState.mClassElementToInjectorMap.put(typeElement, injector);
@@ -236,11 +239,12 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
     data.setValueExtractFormatter(annotation.valueExtractFormatter());
     data.setAssignmentFormatter(annotation.fieldAssignmentFormatter());
     data.setSerializeCodeFormatter(annotation.serializeCodeFormatter());
+    TypeUtils.CollectionType collectionType = mTypeUtils.getCollectionType(type);
+    data.setCollectionType(collectionType);
 
-    if (mTypeUtils.isListType(type)) {
+    if (collectionType != TypeUtils.CollectionType.NOT_A_COLLECTION) {
       // inspect the inner type.
-      data.setInCollection(true);
-      type = mTypeUtils.getListParameterizedType(type);
+      type = mTypeUtils.getCollectionParameterizedType(type);
     }
 
     data.setParseType(mTypeUtils.getParseType(type, JsonType.class));
@@ -257,8 +261,8 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
       data.setParsableTypeParserClass(packageName + "." + parserClassName);
     } else if (data.getParseType() == TypeUtils.ParseType.ENUM_OBJECT) {
       // verify that we have value extract and serializer formatters.
-      if (Strings.isNullOrEmpty(annotation.valueExtractFormatter()) ||
-          Strings.isNullOrEmpty(annotation.serializeCodeFormatter())) {
+      if (StringUtil.isNullOrEmpty(annotation.valueExtractFormatter()) ||
+          StringUtil.isNullOrEmpty(annotation.serializeCodeFormatter())) {
         error(element,
             "%s: enums must have both value extract formatters and serialize code formatters",
             enclosingElement);
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
index d6cdd5d..cb41d7d 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
@@ -8,6 +8,7 @@ import java.io.IOException;
 import java.io.StringWriter;
 import java.util.Arrays;
 import java.util.EnumSet;
+import java.util.HashMap;
 import java.util.Map;
 
 import com.instagram.common.json.JsonAnnotationProcessorConstants;
@@ -17,8 +18,6 @@ import com.instagram.common.json.annotation.util.Console;
 import com.instagram.common.json.annotation.util.ProcessorClassData;
 import com.instagram.common.json.annotation.util.TypeUtils;
 
-import com.google.common.base.Strings;
-import com.google.common.collect.Maps;
 import com.squareup.javawriter.JavaWriter;
 
 import static javax.lang.model.element.Modifier.*;
@@ -29,15 +28,18 @@ import static javax.lang.model.element.Modifier.*;
  */
 public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
 
+  private final boolean mAbstractClass;
   private final boolean mPostprocessingEnabled;
   private final String mParentInjectedClassName;
 
   public JsonParserClassData(
       String classPackage, String className, String injectedClassName,
       AnnotationRecordFactory<String, TypeData> factory,
+      boolean abstractClass,
       boolean postprocessingEnabled,
       String parentInjectedClassName) {
     super(classPackage, className, injectedClassName, factory);
+    mAbstractClass = abstractClass;
     mPostprocessingEnabled = postprocessingEnabled;
     mParentInjectedClassName = parentInjectedClassName;
   }
@@ -53,8 +55,10 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       writer.emitImports(
           "java.io.IOException",
           "java.io.StringWriter",
+          "java.util.ArrayDeque",
           "java.util.ArrayList",
           "java.util.List",
+          "java.util.Queue",
           "com.fasterxml.jackson.core.JsonGenerator",
           "com.fasterxml.jackson.core.JsonParser",
           "com.fasterxml.jackson.core.JsonToken",
@@ -66,31 +70,33 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       String returnValue = mPostprocessingEnabled ?
           ("instance." + JsonType.POSTPROCESSING_METHOD_NAME + "()") : "instance";
 
-      writer
-            .beginMethod(
-                mClassName,
-                "parseFromJson",
-                EnumSet.of(PUBLIC, STATIC, FINAL),
-                Arrays.asList("JsonParser", "jp"),
-                Arrays.asList("IOException"))
-              .emitStatement("%s instance = new %s()", mClassName, mClassName)
-              .emitSingleLineComment("validate that we're on the right token")
-              .beginControlFlow("if (jp.getCurrentToken() != JsonToken.START_OBJECT)")
-                .emitStatement("jp.skipChildren()")
-                .emitStatement("return null")
-              .endControlFlow()
-              .beginControlFlow("while (jp.nextToken() != JsonToken.END_OBJECT)")
-                .emitStatement("String fieldName = jp.getCurrentName()")
-                .emitStatement("jp.nextToken()")
-                .emitStatement("processSingleField(instance, fieldName, jp)")
-                // always skip children.  if we expected an array or an object, we would have
-                // consumed the START_ARRAY or START_OBJECT.  therefore, we would only skip forward
-                // if we're seeing something unexpected.
-                .emitStatement("jp.skipChildren()")
-              .endControlFlow()
-              .emitStatement("return %s", returnValue)
-            .endMethod()
-            .emitEmptyLine();
+      if (!mAbstractClass) {
+        writer
+              .beginMethod(
+                  mClassName,
+                  "parseFromJson",
+                  EnumSet.of(PUBLIC, STATIC, FINAL),
+                  Arrays.asList("JsonParser", "jp"),
+                  Arrays.asList("IOException"))
+                .emitStatement("%s instance = new %s()", mClassName, mClassName)
+                .emitSingleLineComment("validate that we're on the right token")
+                .beginControlFlow("if (jp.getCurrentToken() != JsonToken.START_OBJECT)")
+                  .emitStatement("jp.skipChildren()")
+                  .emitStatement("return null")
+                .endControlFlow()
+                .beginControlFlow("while (jp.nextToken() != JsonToken.END_OBJECT)")
+                  .emitStatement("String fieldName = jp.getCurrentName()")
+                  .emitStatement("jp.nextToken()")
+                  .emitStatement("processSingleField(instance, fieldName, jp)")
+                  // always skip children.  if we expected an array or an object, we would have
+                  // consumed the START_ARRAY or START_OBJECT.  therefore, we would only skip
+                  // forward if we're seeing something unexpected.
+                  .emitStatement("jp.skipChildren()")
+                .endControlFlow()
+                .emitStatement("return %s", returnValue)
+              .endMethod()
+              .emitEmptyLine();
+      }
 
       writer
           .beginMethod(
@@ -118,19 +124,21 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
           .endMethod()
           .emitEmptyLine();
 
-      writer
-          .beginMethod(
-              mClassName,
-              "parseFromJson",
-              EnumSet.of(PUBLIC, STATIC, FINAL),
-              Arrays.asList("String", "inputString"),
-              Arrays.asList("IOException"))
-            .emitStatement(
-                "JsonParser jp = JsonFactoryHolder.APP_FACTORY.createParser(inputString)")
-            .emitStatement("jp.nextToken()")
-            .emitStatement("return parseFromJson(jp)")
-          .endMethod()
-          .emitEmptyLine();
+      if (!mAbstractClass) {
+        writer
+              .beginMethod(
+                  mClassName,
+                  "parseFromJson",
+                  EnumSet.of(PUBLIC, STATIC, FINAL),
+                  Arrays.asList("String", "inputString"),
+                  Arrays.asList("IOException"))
+              .emitStatement(
+                  "JsonParser jp = JsonFactoryHolder.APP_FACTORY.createParser(inputString)")
+              .emitStatement("jp.nextToken()")
+              .emitStatement("return parseFromJson(jp)")
+              .endMethod()
+              .emitEmptyLine();
+      }
 
       writer
             .beginMethod(
@@ -150,8 +158,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
                     public void emitJava(JavaWriter writer) throws IOException {
                       JsonParserClassData.this.writeSerializeCalls(messager, writer);
 
-                      // if we reached here, we need to call the superclasses processSingleField
-                      // method.
+                      // if we have a superclass, we need to call its serialize method.
                       if (mParentInjectedClassName != null) {
                         writer.emitStatement(mParentInjectedClassName +
                                 ".serializeToJson(generator, object, false)");
@@ -165,22 +172,24 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
             .endMethod()
             .emitEmptyLine();
 
-      writer
-          .beginMethod(
-              "String",
-              "serializeToJson",
-              EnumSet.of(PUBLIC, STATIC, FINAL),
-              Arrays.asList(mClassName, "object"),
-              Arrays.asList("IOException"))
-          .emitStatement("StringWriter stringWriter = new StringWriter()")
-          .emitStatement(
-              "JsonGenerator generator = " +
-                  "JsonFactoryHolder.APP_FACTORY.createGenerator(stringWriter)")
-          .emitStatement("serializeToJson(generator, object, true)")
-          .emitStatement("generator.close()")
-          .emitStatement("return stringWriter.toString()")
-          .endMethod()
-          .emitEmptyLine();
+      if (!mAbstractClass) {
+        writer
+            .beginMethod(
+                "String",
+                "serializeToJson",
+                EnumSet.of(PUBLIC, STATIC, FINAL),
+                Arrays.asList(mClassName, "object"),
+                Arrays.asList("IOException"))
+            .emitStatement("StringWriter stringWriter = new StringWriter()")
+            .emitStatement(
+                "JsonGenerator generator = " +
+                    "JsonFactoryHolder.APP_FACTORY.createGenerator(stringWriter)")
+            .emitStatement("serializeToJson(generator, object, true)")
+            .emitStatement("generator.close()")
+            .emitStatement("return stringWriter.toString()")
+            .endMethod()
+            .emitEmptyLine();
+      }
 
       writer.endType();
     } catch (IOException ex) {
@@ -209,10 +218,10 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
         writer.nextControlFlow("else if (\"" + data.getFieldName() + "\".equals(fieldName))");
       }
 
-      if (data.isInCollection()) {
+      if (data.getCollectionType() != TypeUtils.CollectionType.NOT_A_COLLECTION) {
         generateArrayParser(messager, writer, data);
         String assignmentFormatter = data.getAssignmentFormatter();
-        if (Strings.isNullOrEmpty(assignmentFormatter)) {
+        if (StringUtil.isNullOrEmpty(assignmentFormatter)) {
           assignmentFormatter = DEFAULT_ASSIGNMENT_FORMATTER;
         }
         writer.emitStatement(
@@ -224,7 +233,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       } else {
         String rValue = generateExtractRvalue(data);
         String assignmentFormatter = data.getAssignmentFormatter();
-        if (Strings.isNullOrEmpty(assignmentFormatter)) {
+        if (StringUtil.isNullOrEmpty(assignmentFormatter)) {
           assignmentFormatter = DEFAULT_ASSIGNMENT_FORMATTER;
         }
         writer.emitStatement(
@@ -251,9 +260,12 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
   private void generateArrayParser(Messager messager, JavaWriter writer, TypeData data)
       throws IOException {
     String innerType = getJavaType(messager, data);
-    writer.emitStatement("List<%s> results = null", innerType)
+    String interfaceType = mapCollectionTypeToInterfaceType(data.getCollectionType());
+    String concreteType = mapCollectionTypeToConcreteType(data.getCollectionType());
+
+    writer.emitStatement("%s<%s> results = null", interfaceType, innerType)
           .beginControlFlow("if (jp.getCurrentToken() == JsonToken.START_ARRAY)")
-            .emitStatement("results = new ArrayList<%s>()", innerType)
+            .emitStatement("results = new %s<%s>()", concreteType, innerType)
             .beginControlFlow("while (jp.nextToken() != JsonToken.END_ARRAY)")
               .emitStatement("%s parsed = %s", innerType, generateExtractRvalue(data))
               .beginControlFlow("if (parsed != null)")
@@ -269,7 +281,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
    */
   private String generateExtractRvalue(TypeData data) {
     String valueExtractFormatter = data.getValueExtractFormatter();
-    if (Strings.isNullOrEmpty(valueExtractFormatter)) {
+    if (StringUtil.isNullOrEmpty(valueExtractFormatter)) {
       if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
         valueExtractFormatter = PARSABLE_OBJECT_VALUE_EXTRACT_FORMATTER;
       } else {
@@ -309,9 +321,13 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
   private static String PARSABLE_OBJECT_VALUE_EXTRACT_FORMATTER =
       "${subobject_helper_class}.parseFromJson(${parser_object})";
 
-  private static Map<TypeUtils.ParseType, String> sExactFormatters = Maps.newHashMap();
-  private static Map<TypeUtils.ParseType, String> sCoercedFormatters = Maps.newHashMap();
-  private static Map<TypeUtils.ParseType, String> sJavaTypes = Maps.newHashMap();
+  private static Map<TypeUtils.ParseType, String> sExactFormatters =
+      new HashMap<TypeUtils.ParseType, String>();
+  private static Map<TypeUtils.ParseType, String> sCoercedFormatters =
+      new HashMap<TypeUtils.ParseType, String>();
+  private static Map<TypeUtils.ParseType, String> sJavaTypes =
+      new HashMap<TypeUtils.ParseType, String>();
+
   static {
     sExactFormatters.put(TypeUtils.ParseType.BOOLEAN, "${parser_object}.getBooleanValue()");
     sExactFormatters.put(TypeUtils.ParseType.BOOLEAN_OBJECT,
@@ -355,7 +371,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
     sCoercedFormatters.put(TypeUtils.ParseType.DOUBLE, "${parser_object}.getValueAsDouble()");
     sCoercedFormatters.put(
         TypeUtils.ParseType.DOUBLE_OBJECT, "Double.valueOf(${parser_object}.getValueAsDouble())");
-    sCoercedFormatters.put(TypeUtils.ParseType.STRING, "${parser_object}.getText()");
+    sCoercedFormatters.put(TypeUtils.ParseType.STRING,
+        "(${parser_object}.getCurrentToken() == JsonToken.VALUE_NULL ? null : ${parser_object}.getText())");
 
     sJavaTypes.put(TypeUtils.ParseType.BOOLEAN_OBJECT, "Boolean");
     sJavaTypes.put(TypeUtils.ParseType.INTEGER_OBJECT, "Integer");
@@ -373,8 +390,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       TypeData data = entry.getValue();
       String serializeCode = data.getSerializeCodeFormatter();
 
-      if (data.isInCollection()) {
-        if (Strings.isNullOrEmpty(serializeCode)) {
+      if (data.getCollectionType() != TypeUtils.CollectionType.NOT_A_COLLECTION) {
+        if (StringUtil.isNullOrEmpty(serializeCode)) {
           if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
             serializeCode = PARSABLE_OBJECT_ARRAY_SERIALIZE_CALL;
           } else {
@@ -382,6 +399,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
           }
         }
 
+        // needed to do a typecast for erased types
+        String interfaceType = mapCollectionTypeToInterfaceType(data.getCollectionType());
         String listType = getJavaType(messager, entry.getValue());
 
         writer
@@ -389,7 +408,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
               .emitStatement("generator.writeFieldName(\"%s\")", data.getFieldName())
               .emitStatement("generator.writeStartArray()")
               .beginControlFlow("for (" + listType +
-                  " element : (List<" + listType + ">) object." + entry.getKey() + ")")
+                  " element : (" + interfaceType + "<" + listType + ">)" +
+                  "object." + entry.getKey() + ")")
                 .beginControlFlow("if (element != null)")
                   .emitStatement(
                       StrFormat.createStringFormatter(serializeCode)
@@ -405,7 +425,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
             .endControlFlow();
       } else {
         if (data.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT) {
-          if (Strings.isNullOrEmpty(serializeCode)) {
+          if (StringUtil.isNullOrEmpty(serializeCode)) {
             serializeCode = PARSABLE_OBJECT_SERIALIZE_CALL;
           }
           writer
@@ -422,7 +442,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
                         .format())
               .endControlFlow();
         } else {
-          if (Strings.isNullOrEmpty(serializeCode)) {
+          if (StringUtil.isNullOrEmpty(serializeCode)) {
             serializeCode = mScalarSerializeCalls.get(data.getParseType());
           }
 
@@ -462,8 +482,10 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
   private static final String PARSABLE_OBJECT_ARRAY_SERIALIZE_CALL =
       "${subobject_helper_class}.serializeToJson(${generator_object}, ${iterator}, true)";
 
-  private static Map<TypeUtils.ParseType, String> mScalarSerializeCalls = Maps.newHashMap();
-  private static Map<TypeUtils.ParseType, String> mArraySerializeCalls = Maps.newHashMap();
+  private static Map<TypeUtils.ParseType, String> mScalarSerializeCalls =
+      new HashMap<TypeUtils.ParseType, String>();
+  private static Map<TypeUtils.ParseType, String> mArraySerializeCalls =
+      new HashMap<TypeUtils.ParseType, String>();
   static {
     mScalarSerializeCalls.put(TypeUtils.ParseType.BOOLEAN,
         "${generator_object}.writeBooleanField(\"${json_fieldname}\", ${object_varname}.${field_varname})");
@@ -512,4 +534,24 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
         "${generator_object}.writeString(${iterator})");
 
   }
+
+  private String mapCollectionTypeToInterfaceType(TypeUtils.CollectionType collectionType) {
+    switch (collectionType) {
+      case LIST:
+        return "List";
+      case QUEUE:
+        return "Queue";
+    }
+    throw new IllegalStateException("unknown collection type");
+  }
+
+  private String mapCollectionTypeToConcreteType(TypeUtils.CollectionType collectionType) {
+    switch (collectionType) {
+      case LIST:
+        return "ArrayList";
+      case QUEUE:
+        return "ArrayDeque";
+    }
+    throw new IllegalStateException("unknown collection type");
+  }
 }
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java
index 50c8919..3cea068 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/StrFormat.java
@@ -2,9 +2,9 @@
 
 package com.instagram.common.json.annotation.processor;
 
+import java.util.HashMap;
 import java.util.Map;
 
-import com.google.common.collect.Maps;
 import org.apache.commons.lang3.text.StrSubstitutor;
 
 /**
@@ -16,7 +16,7 @@ class StrFormat {
 
   StrFormat(String formatString) {
     mFormatString = formatString;
-    mInternalMap = Maps.newHashMap();
+    mInternalMap = new HashMap<String, String>();
   }
 
   StrFormat addParam(String variableName, String replacementText) {
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
index 8e9f656..f8ff1c7 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
@@ -14,7 +14,7 @@ class TypeData {
   private String mValueExtractFormatter;
   private String mAssignmentFormatter;
   private String mSerializeCodeFormatter;
-  private boolean mInCollection;
+  private TypeUtils.CollectionType mCollectionType;
   private TypeUtils.ParseType mParseType;
   private String mParsableType;
   private String mParsableTypeParserClass;
@@ -59,12 +59,12 @@ class TypeData {
     mSerializeCodeFormatter = serializeCodeFormatter;
   }
 
-  boolean isInCollection() {
-    return mInCollection;
+  TypeUtils.CollectionType getCollectionType() {
+    return mCollectionType;
   }
 
-  void setInCollection(boolean inCollection) {
-    mInCollection = inCollection;
+  void setCollectionType(TypeUtils.CollectionType collectionType) {
+    mCollectionType = collectionType;
   }
 
   TypeUtils.ParseType getParseType() {
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
index 087ae51..7f5ed51 100644
--- a/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
@@ -4,7 +4,9 @@ package com.instagram.common.json.annotation.processor;
 
 import java.io.IOException;
 import java.io.StringWriter;
+import java.util.Arrays;
 import java.util.List;
+import java.util.Queue;
 
 import com.instagram.common.json.annotation.processor.support.ExtensibleJSONWriter;
 
@@ -12,6 +14,7 @@ import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.junit.Test;
@@ -30,6 +33,7 @@ public class DeserializeTest {
     final float floatObjValue = 2.0f;
     final String stringValue = "hello world\r\n\'\"";
     final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final Queue<Integer> integerQueue = Queues.newArrayDeque(Arrays.asList(1, 2, 3, 4));
     final int subIntValue = 30;
 
     StringWriter stringWriter = new StringWriter();
@@ -52,6 +56,17 @@ public class DeserializeTest {
             }
           })
           .endArray()
+        .key(SimpleParseUUT.INTEGER_QUEUE_FIELD_NAME)
+        .array()
+        .extend(new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            for (Integer integer : integerQueue) {
+              writer.value(integer);
+            }
+          }
+        })
+        .endArray()
         .key(SimpleParseUUT.SUBOBJECT_FIELD_NAME)
           .object()
             .key(SimpleParseUUT.SubobjectParseUUT.INT_FIELD_NAME).value(subIntValue)
@@ -69,6 +84,9 @@ public class DeserializeTest {
     assertEquals(Float.valueOf(floatObjValue), uut.FloatField);
     assertEquals(stringValue, uut.stringField);
     assertEquals(integerList, uut.integerListField);
+    // NOTE: this is because ArrayDeque hilariously does not implement .equals()/.hashcode().
+    assertEquals(Lists.newArrayList(integerQueue),
+        Lists.newArrayList(uut.integerQueueField));
     assertSame(subIntValue, uut.subobjectField.intField);
   }
 
@@ -335,4 +353,22 @@ public class DeserializeTest {
     assertEquals(3, uut.integerListField.get(1).intValue());
     assertEquals(4, uut.integerListField.get(2).intValue());
   }
+
+  @Test
+  public void nullString() throws IOException, JSONException {
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(SimpleParseUUT.STRING_FIELD_NAME)
+        .value(null)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    SimpleParseUUT uut = SimpleParseUUT__JsonHelper.parseFromJson(jp);
+
+    assertNull(uut.stringField);
+  }
 }
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java
index 87c01d4..32bf8df 100644
--- a/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/InterModuleTest.java
@@ -6,6 +6,8 @@ import java.io.IOException;
 
 import com.instagram.common.json.annotation.processor.dependent.SubclassUUT;
 import com.instagram.common.json.annotation.processor.dependent.SubclassUUT__JsonHelper;
+import com.instagram.common.json.annotation.processor.dependent.SubclassWithAbstractParentUUT;
+import com.instagram.common.json.annotation.processor.dependent.SubclassWithAbstractParentUUT__JsonHelper;
 import com.instagram.common.json.annotation.processor.dependent.WrapperClassUUT;
 import com.instagram.common.json.annotation.processor.dependent.WrapperClassUUT__JsonHelper;
 import com.instagram.common.json.annotation.processor.parent.ParentUUT;
@@ -45,6 +47,31 @@ public class InterModuleTest {
   }
 
   /**
+   * Subclasses an abstract java object in a different class.
+   */
+  @Test
+  public void abstractSubclassingTest() throws IOException, JSONException {
+    final int intValue = 25;
+    final String stringValue = "hello world\r\n\'\"";
+    final int subIntValue = 30;
+
+    SubclassWithAbstractParentUUT uut = new SubclassWithAbstractParentUUT();
+    uut.parentInt = intValue;
+    uut.subclassInt = subIntValue;
+    uut.parentString = stringValue;
+
+    // serialize it
+    String serialized = SubclassWithAbstractParentUUT__JsonHelper.serializeToJson(uut);
+
+    SubclassWithAbstractParentUUT parsed =
+        SubclassWithAbstractParentUUT__JsonHelper.parseFromJson(serialized);
+
+    assertEquals(uut.parentInt, parsed.parentInt);
+    assertEquals(uut.parentString, parsed.parentString);
+    assertEquals(uut.subclassInt, parsed.subclassInt);
+  }
+
+  /**
    * Includes a java object in a different class.
    */
   @Test
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
index 0f6dab8..8fe6998 100644
--- a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
@@ -3,6 +3,7 @@
 package com.instagram.common.json.annotation.processor;
 
 import java.util.List;
+import java.util.Queue;
 
 import com.instagram.common.json.annotation.JsonField;
 import com.instagram.common.json.annotation.JsonType;
@@ -18,6 +19,7 @@ public class SimpleParseUUT {
   public static final String FLOAT_OBJ_FIELD_NAME = "Float";
   public static final String STRING_FIELD_NAME = "String";
   public static final String INTEGER_LIST_FIELD_NAME = "IntegerList";
+  public static final String INTEGER_QUEUE_FIELD_NAME = "IntegerQueue";
   public static final String SUBOBJECT_FIELD_NAME = "Subobject";
 
   @JsonField(fieldName = INT_FIELD_NAME)
@@ -38,6 +40,9 @@ public class SimpleParseUUT {
   @JsonField(fieldName = INTEGER_LIST_FIELD_NAME)
   public List<Integer> integerListField;
 
+  @JsonField(fieldName = INTEGER_QUEUE_FIELD_NAME)
+  public Queue<Integer> integerQueueField;
+
   @JsonField(fieldName = SUBOBJECT_FIELD_NAME)
   public SubobjectParseUUT subobjectField;
 
diff --git a/util/build.gradle b/util/build.gradle
index 61b7953..e6405a3 100644
--- a/util/build.gradle
+++ b/util/build.gradle
@@ -5,7 +5,7 @@ repositories {
 }
 
 dependencies {
-  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  compile group: 'com.google.guava', name: 'guava', version: '12.0.1+'
   testCompile group: 'junit', name: 'junit', version: '4.8.2+'
   testCompile project(':util:testuut')
 }
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
index 9d80d0f..708ff54 100644
--- a/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
@@ -2,9 +2,9 @@
 
 package com.instagram.common.json.annotation.util;
 
-import com.google.common.collect.Maps;
-
 import javax.annotation.processing.Messager;
+
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -50,7 +50,7 @@ abstract public class ProcessorClassData<AnnotationKeyType, AnnotationRecordType
     mClassName = className;
     mInjectedClassName = injectedClassName;
     mFactory = factory;
-    mData = Maps.newHashMap();
+    mData = new HashMap<AnnotationKeyType, AnnotationRecordType>();
   }
 
   /**
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
index 2d91bc5..9cfc1da 100644
--- a/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
@@ -38,6 +38,12 @@ public class TypeUtils {
     ENUM_OBJECT,
   };
 
+  public enum CollectionType {
+    NOT_A_COLLECTION,
+    LIST,
+    QUEUE,
+  }
+
   private static final String JAVA_LANG_STRING = "java.lang.String";
   private static final String JAVA_LANG_BOOLEAN = "java.lang.Boolean";
   private static final String JAVA_LANG_INTEGER = "java.lang.Integer";
@@ -46,6 +52,8 @@ public class TypeUtils {
   private static final String JAVA_LANG_DOUBLE = "java.lang.Double";
   private static final String JAVA_UTIL_LIST = "java.util.List<?>";
   private static final String JAVA_UTIL_LIST_UNTYPED = "java.util.List";
+  private static final String JAVA_UTIL_QUEUE = "java.util.Queue<?>";
+  private static final String JAVA_UTIL_QUEUE_UNTYPED = "java.util.Queue";
   private static final String JAVA_LANG_ENUM = "java.lang.Enum<?>";
 
   private final Types mTypes;
@@ -108,8 +116,14 @@ public class TypeUtils {
     return ParseType.UNSUPPORTED;
   }
 
-  public boolean isListType(TypeMirror typeMirror) {
-    return JAVA_UTIL_LIST_UNTYPED.equals(mTypes.erasure(typeMirror).toString());
+  public CollectionType getCollectionType(TypeMirror typeMirror) {
+    String erasedType = mTypes.erasure(typeMirror).toString();
+    if (JAVA_UTIL_LIST_UNTYPED.equals(erasedType)) {
+      return CollectionType.LIST;
+    } else if (JAVA_UTIL_QUEUE_UNTYPED.equals(erasedType)) {
+      return CollectionType.QUEUE;
+    }
+    return CollectionType.NOT_A_COLLECTION;
   }
 
   /**
@@ -119,7 +133,7 @@ public class TypeUtils {
    * Returns null if {@code typeMirror} does not represent a list type or if we cannot divine the
    * type of the contents.
    */
-  public TypeMirror getListParameterizedType(TypeMirror typeMirror) {
+  public TypeMirror getCollectionParameterizedType(TypeMirror typeMirror) {
     if (!(typeMirror instanceof DeclaredType)) {
       return null;
     }
@@ -131,10 +145,11 @@ public class TypeUtils {
     TypeElement typeElement = (TypeElement) element;
     List<? extends TypeParameterElement> typeParameterElements = typeElement.getTypeParameters();
 
-    if (JAVA_UTIL_LIST.equals(getCanonicalTypeName(declaredType))) {
+    if (JAVA_UTIL_QUEUE.equals(getCanonicalTypeName(declaredType)) ||
+        JAVA_UTIL_LIST.equals(getCanonicalTypeName(declaredType))) {
       // sanity check.
       if (typeParameterElements.size() != 1) {
-        throw new IllegalStateException("java list is not expected generic type");
+        throw new IllegalStateException("java list/queue is not expected generic type");
       }
 
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
diff --git a/util/testprocessor/build.gradle b/util/testprocessor/build.gradle
index 0afb606..55f1f7a 100644
--- a/util/testprocessor/build.gradle
+++ b/util/testprocessor/build.gradle
@@ -1,7 +1,7 @@
 apply plugin: 'java'
 
 dependencies {
-  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  compile group: 'com.google.guava', name: 'guava', version: '12.0.1+'
   compile project(':util')
   compile project(':javawriter')
 }
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
index 0bfbeaa..9e082d1 100644
--- a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
@@ -194,9 +194,10 @@ public class TestAnnotationProcessor extends AbstractProcessor {
     TypeGathererClassData injector = mState.mClassElementToInjectorMap.get(enclosingElement);
 
     FieldData data = injector.getOrCreateRecord(element.getSimpleName().toString());
-    if (data.mIsList = mTypeUtils.isListType(type)) {
+    if (data.mIsList =
+        (mTypeUtils.getCollectionType(type) != TypeUtils.CollectionType.NOT_A_COLLECTION)) {
       // inspect the inner type.
-      type = mTypeUtils.getListParameterizedType(type);
+      type = mTypeUtils.getCollectionParameterizedType(type);
     }
 
     data.mParseType = mTypeUtils.getParseType(type, MarkedTypes.class);
diff --git a/util/testuut/build.gradle b/util/testuut/build.gradle
index 7628375..e1a2089 100644
--- a/util/testuut/build.gradle
+++ b/util/testuut/build.gradle
@@ -7,6 +7,6 @@ compileJava {
   ]
 }
 dependencies {
-  compile group: 'com.google.guava', name: 'guava', version: '10.0.1+'
+  compile group: 'com.google.guava', name: 'guava', version: '12.0.1+'
   compile project(':util:testprocessor')
 }
diff --git a/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java
index 08cbd26..971327f 100644
--- a/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java
+++ b/util/testuut/src/main/java/com/instagram/common/json/annotation/util/TypeInspectionUUT.java
@@ -3,6 +3,7 @@
 package com.instagram.common.json.annotation.util;
 
 import java.util.List;
+import java.util.Queue;
 
 /**
  * Basic class that contains all the supported types.
@@ -113,6 +114,13 @@ class TypeInspectionUUT {
   String integerList__ParseTypeGeneratedClass;
 
   @TypeTesting
+  Queue<Integer> integerQueue;
+
+  boolean integerQueue__IsList;
+  String integerQueue__ParseType;
+  String integerQueue__ParseTypeGeneratedClass;
+
+  @TypeTesting
   InheritedExtendsSpecifiesType integerInheritedList;
 
   boolean integerInheritedList__IsList;

commit 2af031c9eb42310f539e17f9db97a4dab622b12e
Author: Tony Tung <tonytung@merly.org>
Date:   Sat Sep 6 22:22:42 2014 -0700

    updated README

diff --git a/README.md b/README.md
index 06cdc2b..f77f879 100644
--- a/README.md
+++ b/README.md
@@ -2,3 +2,65 @@ ig-json-parser
 ==============
 
 Fast JSON parser for java projects
+
+
+Getting started
+===============
+
+The easiest way to get started is to look at the unit tests or the demo.
+
+Requirements for model classes
+------------------------------
+
+There should be a package-visible no-argument constructor for each of your
+model classes.  The fields also need to be package-visible.
+
+Each class that needs a serializer/deserializer generated should be
+annotated with `@JsonType`.  Each field that needs to be mapped to/from
+JSON should be annotated with `@JsonField`.  The `@JsonField` annotation
+has one mandatory argument, which is the fieldname for the field in the
+JSON.
+
+The following is an example of a very simple model class:
+
+    @JsonType
+    class Dessert {
+      @JsonField(fieldName="type")
+      String type;
+
+      @JsonField(fieldName="rating")
+      float rating;
+    }
+
+Supported data types
+--------------------
+
+The following scalar types are supported:
+* String
+* boolean/Boolean
+* int/Integer
+* long/Long
+* float/Float
+* double/Double
+
+If a json field is another dictionary, it can be represented by another
+model class.  That model class must also have the `@JsonType` annotation.
+
+Lists of objects are supported either as Java Lists or Queues.
+
+Advanced features
+=================
+
+Postprocessing
+--------------
+
+TODO: Document this.  See the documentation in
+common/src/main/java/com/instagram/common/json/annotation/JsonType.java in
+the meanwhile.
+
+Customized parsing code
+-----------------------
+
+TODO: Document this.  See the documentation in
+common/src/main/java/com/instagram/common/json/annotation/JsonField.java
+in the meanwhile.

commit 9eb16f37ad6d78a2d656bd48029da43cff9a2c0e
Author: Tony Tung <tonytung@merly.org>
Date:   Tue Sep 9 23:24:31 2014 -0700

    produce 4 types of jars: annotation processor, runtime, sources, and javadoc

diff --git a/build.gradle b/build.gradle
index 94b4bcc..b7c725a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,15 +2,49 @@ buildscript {
 }
 
 apply plugin: 'groovy'
-jar {
+
+subprojects {
+  repositories {
+    mavenCentral()
+  }
+}
+
+task processorJar(type: Jar, dependsOn: classes) {
     from files( { project(':javawriter').sourceSets.main.output.classesDir } )
     from files( { project(':common').sourceSets.main.output.classesDir } )
     from files( { project(':util').sourceSets.main.output.classesDir } )
     from files( { project(':processor').sourceSets.main.output.classesDir } )
+    baseName 'processor'
 }
 
-subprojects {
-  repositories {
-    mavenCentral()
-  }
+task runtimeJar(type: Jar, dependsOn: classes) {
+    from files( { project(':common').sourceSets.main.output.classesDir } )
+    baseName 'runtime'
+}
+
+task sourcesJar(type: Jar, dependsOn: classes) {
+    classifier = 'sources'
+    from files( { project(':javawriter').sourceSets.main.allSource } )
+    from files( { project(':common').sourceSets.main.allSource } )
+    from files( { project(':util').sourceSets.main.allSource } )
+    from files( { project(':processor').sourceSets.main.allSource } )
+}
+
+task myJavadocs(type: Javadoc) {
+    source files( { project(':javawriter').sourceSets.main.allSource } )
+    source files( { project(':common').sourceSets.main.allSource } )
+    source files( { project(':util').sourceSets.main.allSource } )
+    source files( { project(':processor').sourceSets.main.allSource } )
+}
+
+task javadocJar(type: Jar, dependsOn: myJavadocs) {
+    classifier = 'javadoc'
+    from javadoc.destinationDir
+}
+
+artifacts {
+    archives processorJar
+    archives runtimeJar
+    archives sourcesJar
+    archives javadocJar
 }
diff --git a/common/build.gradle b/common/build.gradle
index 0034129..e053e10 100644
--- a/common/build.gradle
+++ b/common/build.gradle
@@ -3,4 +3,3 @@ apply plugin: 'java'
 dependencies {
   compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3+'
 }
-

commit 0bc0ac5e3b40bde3ffc2db26a90e7e3de7c0bfb4
Author: Jake Wharton <jw@squareup.com>
Date:   Wed Sep 10 11:29:19 2014 -0700

    Flip executable bit on gradlew.

diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755

commit 34665568dc6341c074c28fe7e51ceb98329e5b54
Merge: 9eb16f3 0bc0ac5
Author: ttung <ttung@fb.com>
Date:   Wed Sep 10 12:16:10 2014 -0700

    Merge pull request #1 from JakeWharton/jw/chmod
    
    Flip executable bit on gradlew.

commit c06084405c545f96263c28b1efb29befd19ad143
Author: Tony Tung <tonytung@merly.org>
Date:   Wed Sep 10 12:16:27 2014 -0700

    add new files

diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/StringUtil.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/StringUtil.java
new file mode 100644
index 0000000..b76db4a
--- /dev/null
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/StringUtil.java
@@ -0,0 +1,13 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+public class StringUtil {
+
+  /**
+   * We don't want to pull in guava strings just for this one function.
+   */
+  /*package*/ static boolean isNullOrEmpty(String string) {
+    return string == null || string.isEmpty();
+  }
+}
diff --git a/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassWithAbstractParentUUT.java b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassWithAbstractParentUUT.java
new file mode 100644
index 0000000..8f64928
--- /dev/null
+++ b/processor/testuut/dependent/src/main/java/com/instagram/common/json/annotation/processor/SubclassWithAbstractParentUUT.java
@@ -0,0 +1,18 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.dependent;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+import com.instagram.common.json.annotation.processor.parent.AbstractParentUUT;
+
+/**
+ * UUT with abstract superclass.
+ */
+@JsonType
+public class SubclassWithAbstractParentUUT extends AbstractParentUUT {
+  public static final String SUBCLASS_INT_KEY = "subclass_int";
+
+  @JsonField(fieldName = SUBCLASS_INT_KEY)
+  public int subclassInt;
+}
diff --git a/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/AbstractParentUUT.java b/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/AbstractParentUUT.java
new file mode 100644
index 0000000..c8be239
--- /dev/null
+++ b/processor/testuut/parent/src/main/java/com/instagram/common/json/annotation/processor/AbstractParentUUT.java
@@ -0,0 +1,21 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor.parent;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+/**
+ * Abstract parent class to test that abstract parent classes are processed properly.
+ */
+@JsonType
+public abstract class AbstractParentUUT {
+  public static final String PARENT_STRING_KEY = "parent_string";
+  public static final String PARENT_INT_KEY = "parent_int";
+
+  @JsonField(fieldName = PARENT_STRING_KEY)
+  public String parentString;
+
+  @JsonField(fieldName = PARENT_INT_KEY)
+  public int parentInt;
+}

commit 0064b7739f73dc4f7d38c619362a77b4d8724e16
Author: Tony Tung <tonytung@merly.org>
Date:   Mon Sep 15 00:30:33 2014 -0700

    bump android plugin version to 0.12.0 because 0.9.0 is not compatible with
    android studio.

diff --git a/demo/build.gradle b/demo/build.gradle
index ed8cf2b..a57f2fd 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -4,7 +4,7 @@ buildscript {
   }
 
   dependencies {
-    classpath group: 'com.android.tools.build', name: 'gradle', version: '0.9.0+'
+    classpath group: 'com.android.tools.build', name: 'gradle', version: '0.12.0+'
   }
 }
 

commit 23886842fd04cef076f984009c7e7513ffd43f4f
Author: Tony Tung <tonytung@merly.org>
Date:   Mon Sep 15 17:12:25 2014 -0700

    testing jdk17 compatibility

diff --git a/common/build.gradle b/common/build.gradle
index e053e10..bec31a4 100644
--- a/common/build.gradle
+++ b/common/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 dependencies {
   compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.3+'
 }
diff --git a/demo/build.gradle b/demo/build.gradle
index a57f2fd..8776bb0 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -25,6 +25,11 @@ android {
     targetSdkVersion 19
   }
 
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_7
+    targetCompatibility JavaVersion.VERSION_1_7
+  }
+
   sourceSets {
     main {
       manifest {
diff --git a/demo/igmodel/build.gradle b/demo/igmodel/build.gradle
index 17a0b52..4549e11 100644
--- a/demo/igmodel/build.gradle
+++ b/demo/igmodel/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 compileJava {
   options.compilerArgs += [
                        '-processor',
diff --git a/javawriter/build.gradle b/javawriter/build.gradle
index 544652f..8ca34d3 100644
--- a/javawriter/build.gradle
+++ b/javawriter/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 repositories {
   mavenCentral()
 }
diff --git a/processor/build.gradle b/processor/build.gradle
index f333aa8..f606cbf 100644
--- a/processor/build.gradle
+++ b/processor/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 repositories {
   mavenCentral()
 }
diff --git a/processor/support/build.gradle b/processor/support/build.gradle
index e758d62..5e9886e 100644
--- a/processor/support/build.gradle
+++ b/processor/support/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 dependencies {
   compile group: 'org.json', name: 'json', version: '20090211'
 }
diff --git a/util/build.gradle b/util/build.gradle
index e6405a3..3b1f6bb 100644
--- a/util/build.gradle
+++ b/util/build.gradle
@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
 repositories {
   mavenCentral()
 }

commit 6045e73b4039ea507f6c3ad2160d296ef6be6b30
Merge: 0064b77 2388684
Author: ttung <ttung@fb.com>
Date:   Mon Sep 15 21:01:56 2014 -0700

    Merge pull request #7 from Instagram/jdk17
    
    jdk17 compatibility

commit 0a822b38c6d241c5c56381dc51c6ba0604cca56a
Author: Tony Tung <tonytung@merly.org>
Date:   Tue Sep 16 11:27:42 2014 -0700

    place the generated sources in a directory that android studio can see.

diff --git a/.gitignore b/.gitignore
index f8b92c3..28989c3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 .gradle
 build
+gen-src
diff --git a/demo/igmodel/build.gradle b/demo/igmodel/build.gradle
index 4549e11..c0b25a0 100644
--- a/demo/igmodel/build.gradle
+++ b/demo/igmodel/build.gradle
@@ -3,10 +3,29 @@ apply plugin: 'java'
 sourceCompatibility = 1.7
 targetCompatibility = 1.7
 
+ext {
+  generatedSourcesDir = file("gen-src/main/java")
+}
+
+sourceSets {
+  main {
+    java {
+      srcDir 'src/main/java'
+      srcDir 'gen-src/main/java'
+    }
+  }
+}
+
 compileJava {
+  doFirst {
+    // Directory should exists before compilation started.
+    generatedSourcesDir.mkdirs()
+  }
   options.compilerArgs += [
                        '-processor',
-                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor'
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor',
+                       '-s',
+                       generatedSourcesDir
   ]
 }
 dependencies {

commit d2670b3bd5fe8c45bb70ca95556fe4b721dce0f9
Author: Tony Tung <tonytung@merly.org>
Date:   Tue Sep 16 11:28:01 2014 -0700

    generate the artifacts needed to upload to maven.

diff --git a/build.gradle b/build.gradle
index b7c725a..3047710 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,7 +9,8 @@ subprojects {
   }
 }
 
-task processorJar(type: Jar, dependsOn: classes) {
+task processorJar(type: Jar,
+        dependsOn:["javawriter:build","common:build","util:build","processor:build"]) {
     from files( { project(':javawriter').sourceSets.main.output.classesDir } )
     from files( { project(':common').sourceSets.main.output.classesDir } )
     from files( { project(':util').sourceSets.main.output.classesDir } )
@@ -17,34 +18,57 @@ task processorJar(type: Jar, dependsOn: classes) {
     baseName 'processor'
 }
 
-task runtimeJar(type: Jar, dependsOn: classes) {
+task runtimeJar(type: Jar,
+        dependsOn: "common:build") {
     from files( { project(':common').sourceSets.main.output.classesDir } )
     baseName 'runtime'
 }
 
-task sourcesJar(type: Jar, dependsOn: classes) {
+task runtimeSourcesJar(type: Jar) {
     classifier = 'sources'
+    baseName 'runtime'
+    from files( { project(':common').sourceSets.main.allSource } )
+}
+
+task processorSourcesJar(type: Jar) {
+    classifier = 'sources'
+    baseName 'processor'
     from files( { project(':javawriter').sourceSets.main.allSource } )
     from files( { project(':common').sourceSets.main.allSource } )
     from files( { project(':util').sourceSets.main.allSource } )
     from files( { project(':processor').sourceSets.main.allSource } )
 }
 
-task myJavadocs(type: Javadoc) {
+task runtimeJavadoc(type: Javadoc) {
+    source files( { project(':common').sourceSets.main.allSource } )
+    destinationDir = new File("${project.docsDir}", "runtime-javadoc")
+}
+
+task runtimeJavadocJar(type: Jar, dependsOn: runtimeJavadoc) {
+    classifier = 'javadoc'
+    baseName 'runtime'
+    from runtimeJavadoc.destinationDir
+}
+
+task processorJavadoc(type: Javadoc) {
     source files( { project(':javawriter').sourceSets.main.allSource } )
     source files( { project(':common').sourceSets.main.allSource } )
     source files( { project(':util').sourceSets.main.allSource } )
     source files( { project(':processor').sourceSets.main.allSource } )
+    destinationDir = new File("${project.docsDir}", "processor-javadoc")
 }
 
-task javadocJar(type: Jar, dependsOn: myJavadocs) {
+task processorJavadocJar(type: Jar, dependsOn: processorJavadoc) {
     classifier = 'javadoc'
-    from javadoc.destinationDir
+    baseName 'processor'
+    from processorJavadoc.destinationDir
 }
 
 artifacts {
     archives processorJar
     archives runtimeJar
-    archives sourcesJar
-    archives javadocJar
+    archives runtimeSourcesJar
+    archives processorSourcesJar
+    archives runtimeJavadocJar
+    archives processorJavadocJar
 }

commit 27f804827b4680603e705f3b962ce8f857950c83
Author: Tony Tung <tonytung@merly.org>
Date:   Wed Sep 17 11:29:32 2014 -0700

    demo using maven.

diff --git a/maven-example/Dessert.java b/maven-example/Dessert.java
new file mode 100644
index 0000000..ae64f7f
--- /dev/null
+++ b/maven-example/Dessert.java
@@ -0,0 +1,8 @@
+@JsonType
+class Dessert {
+  @JsonField(fieldName="type")
+  String type;
+
+  @JsonField(fieldName="rating")
+  float rating;
+}
diff --git a/maven-example/build.gradle b/maven-example/build.gradle
new file mode 100644
index 0000000..4b5a8f7
--- /dev/null
+++ b/maven-example/build.gradle
@@ -0,0 +1,41 @@
+apply plugin: 'java'
+
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
+ext {
+  generatedSourcesDir = file("gen-src/main/java")
+}
+
+repositories {
+  mavenCentral()
+}
+
+sourceSets {
+  main {
+    java {
+      srcDir 'src/main/java'
+    }
+  }
+  gensrc {
+    java {
+      srcDir 'gen-src/main/java'
+    }
+  }
+}
+
+compileJava {
+  doFirst {
+    // Directory should exists before compilation started.
+    generatedSourcesDir.mkdirs()
+  }
+  options.compilerArgs += [
+                       '-processor',
+                       'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor',
+                       '-s',
+                       generatedSourcesDir
+  ]
+}
+dependencies {
+  compile group: 'com.instagram', name: 'ig-json-parser-processor', version: '0.0.3+'
+}
diff --git a/maven-example/src/main/java/com/instagram/Consumer.java b/maven-example/src/main/java/com/instagram/Consumer.java
new file mode 100644
index 0000000..40522c0
--- /dev/null
+++ b/maven-example/src/main/java/com/instagram/Consumer.java
@@ -0,0 +1,16 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram;
+
+import java.io.IOException;
+
+public class Consumer {
+  public static void main(String[] args) {
+    try {
+      Dessert parsed = Dessert__JsonHelper.parseFromJson("{\"type\": \"macaron\"}");
+      System.out.println("dessert type: " + parsed.type);
+    } catch (IOException ex) {
+      System.out.println("fatal: " + ex);
+    }
+  }
+}
diff --git a/maven-example/src/main/java/com/instagram/Dessert.java b/maven-example/src/main/java/com/instagram/Dessert.java
new file mode 100644
index 0000000..e8dcea7
--- /dev/null
+++ b/maven-example/src/main/java/com/instagram/Dessert.java
@@ -0,0 +1,15 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+@JsonType
+class Dessert {
+  @JsonField(fieldName="type")
+  String type;
+
+  @JsonField(fieldName="rating")
+  float rating;
+}

commit a5da469c51c491152327b4428a67a22c55500103
Author: Tony Tung <tonytung@merly.org>
Date:   Wed Sep 17 11:29:46 2014 -0700

    update gitignore.

diff --git a/.gitignore b/.gitignore
index 28989c3..6bce8ff 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
 .gradle
+.idea
 build
 gen-src
+*.iml

commit 4e7df42f62a4dc8c2aa21836b4654a4b58ba4df5
Author: Tony Tung <tonytung@merly.org>
Date:   Wed Sep 17 11:29:54 2014 -0700

    two separate trees to avoid the generated file being re-included in the
    command line.

diff --git a/README.md b/README.md
index f77f879..cc2f892 100644
--- a/README.md
+++ b/README.md
@@ -7,7 +7,52 @@ Fast JSON parser for java projects
 Getting started
 ===============
 
-The easiest way to get started is to look at the unit tests or the demo.
+The easiest way to get started is to look at maven-example.  For more
+comprehensive examples, check out the unit tests or the demo.
+
+
+Maven
+-----
+
+To use this library, add this to your build.gradle file:
+
+    ext {
+      generatedSourcesDir = file("gen-src/main/java")
+    }
+    
+    repositories {
+      mavenCentral()
+    }
+    
+    sourceSets {
+      main {
+        java {
+          srcDir 'src/main/java'
+        }
+      }
+      gensrc {
+        java {
+          srcDir 'gen-src/main/java'
+        }
+      }
+    }
+    
+    compileJava {
+      doFirst {
+        // Directory should exists before compilation started.
+        generatedSourcesDir.mkdirs()
+      }
+      options.compilerArgs += [
+                           '-processor',
+                           'com.instagram.common.json.annotation.processor.JsonAnnotationProcessor',
+                           '-s',
+                           generatedSourcesDir
+      ]
+    }
+    dependencies {
+      compile group: 'com.instagram', name: 'ig-json-parser-processor', version: '0.0.3+'
+    }
+
 
 Requirements for model classes
 ------------------------------
@@ -32,6 +77,23 @@ The following is an example of a very simple model class:
       float rating;
     }
 
+
+Serializer/deserializer
+-----------------------
+
+Compiling your model classes with the annotations will automatically
+generate the serializer and deserializer.  They will be in a generated
+class with the same name as your class, except with the suffix
+`__JsonHelper`.  For example, to deserialize the `Dessert` class above,
+simply run the code:
+
+    Dessert parsed = Dessert__JsonHelper.parseFromJson(inputJsonString);
+
+To serialize a class, run:
+
+    String serialized = Dessert__JsonHelper.serializeToJson(dessertObject);
+
+
 Supported data types
 --------------------
 
diff --git a/demo/igmodel/build.gradle b/demo/igmodel/build.gradle
index c0b25a0..9b22732 100644
--- a/demo/igmodel/build.gradle
+++ b/demo/igmodel/build.gradle
@@ -11,6 +11,10 @@ sourceSets {
   main {
     java {
       srcDir 'src/main/java'
+    }
+  }
+  gensrc {
+    java {
       srcDir 'gen-src/main/java'
     }
   }

commit fd72d000160d6b3cacf4ba95a506856a10bdb85b
Author: Tommy Visic <tommy@tastemade>
Date:   Thu Sep 18 16:47:48 2014 -0500

    Added some notes regarding Proguard compatability to README.md

diff --git a/README.md b/README.md
index cc2f892..05a5e09 100644
--- a/README.md
+++ b/README.md
@@ -19,11 +19,11 @@ To use this library, add this to your build.gradle file:
     ext {
       generatedSourcesDir = file("gen-src/main/java")
     }
-    
+
     repositories {
       mavenCentral()
     }
-    
+
     sourceSets {
       main {
         java {
@@ -36,7 +36,7 @@ To use this library, add this to your build.gradle file:
         }
       }
     }
-    
+
     compileJava {
       doFirst {
         // Directory should exists before compilation started.
@@ -110,6 +110,14 @@ model class.  That model class must also have the `@JsonType` annotation.
 
 Lists of objects are supported either as Java Lists or Queues.
 
+Proguard
+===============
+
+Add the following lines to your proguard-rules file:
+
+    -dontwarn sun.misc.Unsafe
+    -dontwarn javax.annotation.**
+
 Advanced features
 =================
 

commit 916c561e9aeeace7d91b4bed07788f26a75ded8c
Merge: 4e7df42 fd72d00
Author: ttung <ttung@fb.com>
Date:   Thu Sep 18 15:07:29 2014 -0700

    Merge pull request #13 from TommyVisic/master
    
    Added some notes regarding Proguard compatability to README.md

commit 1aaad6bb56a880e7c27914652b7e1686d5478fb7
Author: Tony Tung <tonytung@merly.org>
Date:   Thu Sep 25 21:25:17 2014 -0700

    1) alternate json field name for the same java field.
    2) support for json lists to be parsed into a set.
    3) prettier generated code.
    4) improved internal documentation.

diff --git a/common/src/main/java/com/instagram/common/json/annotation/JsonField.java b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
index a6fe545..b64cc13 100644
--- a/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
+++ b/common/src/main/java/com/instagram/common/json/annotation/JsonField.java
@@ -32,6 +32,12 @@ public @interface JsonField {
   String fieldName();
 
   /**
+   * Alternate field names which should be parsed to the same field. Only used during
+   * deserialization.
+   */
+  String [] alternateFieldNames() default {};
+
+  /**
    * This controls how we deal with type mismatches.  Note that this is ignored if
    * {@link #valueExtractFormatter()} is specified.
    * @see TypeMapping
diff --git a/demo/proguard.cfg b/demo/proguard.cfg
new file mode 100644
index 0000000..bc783e7
--- /dev/null
+++ b/demo/proguard.cfg
@@ -0,0 +1,4 @@
+-dontwarn com.fasterxml.jackson.databind.ext.DOMSerializer
+-dontwarn com.google.common.primitives.UnsignedBytes*
+-dontwarn com.instagram.common.json.**
+-dontwarn com.squareup.javawriter.JavaWriter
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
index 63cf290..79e3580 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonAnnotationProcessor.java
@@ -180,6 +180,7 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
       injector = new JsonParserClassData(
           packageName,
           typeElement.getQualifiedName().toString(),
+          mTypeUtils.getClassName(typeElement, packageName),
           mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName) +
               JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX,
           new ProcessorClassData.AnnotationRecordFactory<String, TypeData>() {
@@ -235,6 +236,7 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
     JsonField annotation = element.getAnnotation(JsonField.class);
 
     data.setFieldName(annotation.fieldName());
+    data.setAlternateFieldNames(annotation.alternateFieldNames());
     data.setMapping(annotation.mapping());
     data.setValueExtractFormatter(annotation.valueExtractFormatter());
     data.setAssignmentFormatter(annotation.fieldAssignmentFormatter());
@@ -254,11 +256,11 @@ public class JsonAnnotationProcessor extends AbstractProcessor {
       TypeElement typeElement = (TypeElement) declaredType.asElement();
 
       String packageName = mTypeUtils.getPackageName(mElements, typeElement);
-      String className = mTypeUtils.getClassName(typeElement, packageName);
-      String parserClassName = mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName);
 
-      data.setParsableType(packageName + "." + className);
-      data.setParsableTypeParserClass(packageName + "." + parserClassName);
+      data.setPackageName(packageName);
+      data.setParsableType(mTypeUtils.getClassName(typeElement, packageName));
+      data.setParsableTypeParserClass(
+          mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName));
     } else if (data.getParseType() == TypeUtils.ParseType.ENUM_OBJECT) {
       // verify that we have value extract and serializer formatters.
       if (StringUtil.isNullOrEmpty(annotation.valueExtractFormatter()) ||
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
index cb41d7d..15fcdc2 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
@@ -6,18 +6,28 @@ import javax.annotation.processing.Messager;
 
 import java.io.IOException;
 import java.io.StringWriter;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
+import java.util.Queue;
+import java.util.Set;
 
 import com.instagram.common.json.JsonAnnotationProcessorConstants;
+import com.instagram.common.json.JsonFactoryHolder;
 import com.instagram.common.json.annotation.JsonField;
 import com.instagram.common.json.annotation.JsonType;
 import com.instagram.common.json.annotation.util.Console;
 import com.instagram.common.json.annotation.util.ProcessorClassData;
 import com.instagram.common.json.annotation.util.TypeUtils;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 import com.squareup.javawriter.JavaWriter;
 
 import static javax.lang.model.element.Modifier.*;
@@ -33,12 +43,15 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
   private final String mParentInjectedClassName;
 
   public JsonParserClassData(
-      String classPackage, String className, String injectedClassName,
+      String classPackage,
+      String qualifiedClassName,
+      String simpleClassName,
+      String injectedClassName,
       AnnotationRecordFactory<String, TypeData> factory,
       boolean abstractClass,
       boolean postprocessingEnabled,
       String parentInjectedClassName) {
-    super(classPackage, className, injectedClassName, factory);
+    super(classPackage, qualifiedClassName, simpleClassName, injectedClassName, factory);
     mAbstractClass = abstractClass;
     mPostprocessingEnabled = postprocessingEnabled;
     mParentInjectedClassName = parentInjectedClassName;
@@ -53,19 +66,43 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       writer.emitPackage(mClassPackage);
 
       writer.emitImports(
-          "java.io.IOException",
-          "java.io.StringWriter",
-          "java.util.ArrayDeque",
-          "java.util.ArrayList",
-          "java.util.List",
-          "java.util.Queue",
-          "com.fasterxml.jackson.core.JsonGenerator",
-          "com.fasterxml.jackson.core.JsonParser",
-          "com.fasterxml.jackson.core.JsonToken",
-          "com.instagram.common.json.JsonFactoryHolder"
-      );
+          IOException.class,
+          StringWriter.class,
+          ArrayList.class,
+          ArrayDeque.class,
+          HashSet.class,
+          List.class,
+          Queue.class,
+          Set.class,
+          JsonGenerator.class,
+          JsonParser.class,
+          JsonToken.class,
+          JsonFactoryHolder.class);
+
+      // Generate the set of imports from the parsable objects referenced.
+      Set<String> typeImports = new HashSet<String>();
+      for (Map.Entry<String, TypeData> entry : getIterator()) {
+        TypeData typeData = entry.getValue();
+        if (typeData.getCollectionType() != TypeUtils.CollectionType.NOT_A_COLLECTION) {
+          if (typeData.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT &&
+              !typeData.getPackageName().equals(mClassPackage)) {
+            typeImports.add(typeData.getPackageName() + "." + typeData.getParsableType());
+            typeImports.add(
+                typeData.getPackageName() + "." + typeData.getParsableTypeParserClass() +
+                    JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX);
+          }
+        } else if (typeData.getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT &&
+            !typeData.getPackageName().equals(mClassPackage)) {
+          typeImports.add(
+              typeData.getPackageName() + "." + typeData.getParsableTypeParserClass() +
+                  JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX);
+        }
+      }
+      writer.emitImports(typeImports);
+      writer.emitEmptyLine();
 
       writer.beginType(mInjectedClassName, "class", EnumSet.of(PUBLIC, FINAL));
+      writer.emitEmptyLine();
 
       String returnValue = mPostprocessingEnabled ?
           ("instance." + JsonType.POSTPROCESSING_METHOD_NAME + "()") : "instance";
@@ -73,17 +110,19 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       if (!mAbstractClass) {
         writer
               .beginMethod(
-                  mClassName,
+                  mSimpleClassName,
                   "parseFromJson",
-                  EnumSet.of(PUBLIC, STATIC, FINAL),
+                  EnumSet.of(PUBLIC, STATIC),
                   Arrays.asList("JsonParser", "jp"),
                   Arrays.asList("IOException"))
-                .emitStatement("%s instance = new %s()", mClassName, mClassName)
+                .emitStatement("%s instance = new %s()", mSimpleClassName, mSimpleClassName)
+                .emitEmptyLine()
                 .emitSingleLineComment("validate that we're on the right token")
                 .beginControlFlow("if (jp.getCurrentToken() != JsonToken.START_OBJECT)")
                   .emitStatement("jp.skipChildren()")
                   .emitStatement("return null")
                 .endControlFlow()
+                .emitEmptyLine()
                 .beginControlFlow("while (jp.nextToken() != JsonToken.END_OBJECT)")
                   .emitStatement("String fieldName = jp.getCurrentName()")
                   .emitStatement("jp.nextToken()")
@@ -93,6 +132,7 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
                   // forward if we're seeing something unexpected.
                   .emitStatement("jp.skipChildren()")
                 .endControlFlow()
+                .emitEmptyLine()
                 .emitStatement("return %s", returnValue)
               .endMethod()
               .emitEmptyLine();
@@ -102,8 +142,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
           .beginMethod(
               "boolean",
               "processSingleField",
-              EnumSet.of(PUBLIC, STATIC, FINAL),
-              Arrays.asList(mClassName, "instance", "String", "fieldName", "JsonParser", "jp"),
+              EnumSet.of(PUBLIC, STATIC),
+              Arrays.asList(mSimpleClassName, "instance", "String", "fieldName", "JsonParser", "jp"),
               Arrays.asList("IOException"))
           .emitWithGenerator(
               new JavaWriter.JavaGenerator() {
@@ -127,9 +167,9 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
       if (!mAbstractClass) {
         writer
               .beginMethod(
-                  mClassName,
+                  mSimpleClassName,
                   "parseFromJson",
-                  EnumSet.of(PUBLIC, STATIC, FINAL),
+                  EnumSet.of(PUBLIC, STATIC),
                   Arrays.asList("String", "inputString"),
                   Arrays.asList("IOException"))
               .emitStatement(
@@ -144,9 +184,9 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
             .beginMethod(
                 "void",
                 "serializeToJson",
-                EnumSet.of(PUBLIC, STATIC, FINAL),
+                EnumSet.of(PUBLIC, STATIC),
                 Arrays.asList("JsonGenerator", "generator",
-                    mClassName, "object",
+                    mSimpleClassName, "object",
                     "boolean", "writeStartAndEnd"),
                 Arrays.asList("IOException"))
               .beginControlFlow("if (writeStartAndEnd)")
@@ -177,8 +217,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
             .beginMethod(
                 "String",
                 "serializeToJson",
-                EnumSet.of(PUBLIC, STATIC, FINAL),
-                Arrays.asList(mClassName, "object"),
+                EnumSet.of(PUBLIC, STATIC),
+                Arrays.asList(mSimpleClassName, "object"),
                 Arrays.asList("IOException"))
             .emitStatement("StringWriter stringWriter = new StringWriter()")
             .emitStatement(
@@ -212,10 +252,16 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
     for (Map.Entry<String, TypeData> entry : getIterator()) {
       TypeData data = entry.getValue();
 
+      String condition = "\"" + data.getFieldName() + "\".equals(fieldName)";
+
+      for (String alternateFieldName : data.getAlternateFieldNames()) {
+        condition += "|| \"" + alternateFieldName + "\".equals(fieldName)";
+      }
+
       if (firstEntry) {
-        writer.beginControlFlow("if (\"" + data.getFieldName() + "\".equals(fieldName))");
+        writer.beginControlFlow("if (" + condition + ")");
       } else {
-        writer.nextControlFlow("else if (\"" + data.getFieldName() + "\".equals(fieldName))");
+        writer.nextControlFlow("else if (" + condition + ")");
       }
 
       if (data.getCollectionType() != TypeUtils.CollectionType.NOT_A_COLLECTION) {
@@ -312,7 +358,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
     }
 
     throw new IllegalStateException(
-        "Could not divine java type for " + type.getFieldName() + " in class " + mClassName);
+        "Could not divine java type for " + type.getFieldName() + " in class " +
+            mQualifiedClassName);
   }
 
   // These are all the default formatters.
@@ -541,6 +588,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
         return "List";
       case QUEUE:
         return "Queue";
+      case SET:
+        return "Set";
     }
     throw new IllegalStateException("unknown collection type");
   }
@@ -551,6 +600,8 @@ public class JsonParserClassData extends ProcessorClassData<String, TypeData> {
         return "ArrayList";
       case QUEUE:
         return "ArrayDeque";
+      case SET:
+        return "HashSet";
     }
     throw new IllegalStateException("unknown collection type");
   }
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
index f8ff1c7..8a92815 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/TypeData.java
@@ -3,20 +3,74 @@
 package com.instagram.common.json.annotation.processor;
 
 import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
 import com.instagram.common.json.annotation.util.TypeUtils;
 
 /**
- * Represents the data needed to serialize and deserialize a field.
+ * Represents the data needed to serialize and deserialize a field. These roughly correspond
+ * to the attributes of the JsonField annotation.
  */
 class TypeData {
+
+  /**
+   * {@link JsonField#fieldName()}
+   */
   private String mFieldName;
+
+  /**
+   * {@link JsonField#alternateFieldNames()}
+   */
+  private String[] mAlternateFieldNames;
+
+  /**
+   * {@link JsonField#mapping()}
+   */
   private JsonField.TypeMapping mMapping;
+
+  /**
+   * {@link JsonField#valueExtractFormatter()}
+   */
   private String mValueExtractFormatter;
+
+  /**
+   * {@link JsonField#fieldAssignmentFormatter()}
+   */
   private String mAssignmentFormatter;
+
+  /**
+   * {@link JsonField#serializeCodeFormatter()}
+   */
   private String mSerializeCodeFormatter;
+
+  /**
+   * The collection type of the field, if the field is a collection, otherwise it is set to
+   * {@link TypeUtils.CollectionType#NOT_A_COLLECTION}
+   */
   private TypeUtils.CollectionType mCollectionType;
+
+  /**
+   * The parse type of the field. This is either the
+   * <p>
+   * 1) the generic type if the field is a collection<br/>
+   * 2) an internal type that we know how to parse<br/>
+   * 3) parsable object, if it refers to an object that is annotated with {@link JsonType}
+   *
+   */
   private TypeUtils.ParseType mParseType;
+
+  /**
+   * If this is a parsable object, the package name for this field's class.
+   */
+  private String mPackageName;
+
+  /**
+   * If this is a parsable object, the name of this field's class.
+   */
   private String mParsableType;
+
+  /**
+   * If this is a parsable object, the name of this field's parser class.
+   */
   private String mParsableTypeParserClass;
 
   String getFieldName() {
@@ -27,6 +81,14 @@ class TypeData {
     this.mFieldName = fieldName;
   }
 
+  public String[] getAlternateFieldNames() {
+    return mAlternateFieldNames;
+  }
+
+  public void setAlternateFieldNames(String[] alternateFieldNames) {
+    mAlternateFieldNames = alternateFieldNames;
+  }
+
   JsonField.TypeMapping getMapping() {
     return mMapping;
   }
@@ -75,6 +137,14 @@ class TypeData {
     mParseType = parseType;
   }
 
+  public String getPackageName() {
+    return mPackageName;
+  }
+
+  public void setPackageName(String packageName) {
+    mPackageName = packageName;
+  }
+
   String getParsableType() {
     return mParsableType;
   }
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
index 7f5ed51..1db5ae1 100644
--- a/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/DeserializeTest.java
@@ -7,6 +7,7 @@ import java.io.StringWriter;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Queue;
+import java.util.Set;
 
 import com.instagram.common.json.annotation.processor.support.ExtensibleJSONWriter;
 
@@ -15,6 +16,7 @@ import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.junit.Test;
@@ -34,6 +36,7 @@ public class DeserializeTest {
     final String stringValue = "hello world\r\n\'\"";
     final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
     final Queue<Integer> integerQueue = Queues.newArrayDeque(Arrays.asList(1, 2, 3, 4));
+    final Set<Integer> integerSet = Sets.newHashSet(1, 2, 3, 4);
     final int subIntValue = 30;
 
     StringWriter stringWriter = new StringWriter();
@@ -67,6 +70,17 @@ public class DeserializeTest {
           }
         })
         .endArray()
+        .key(SimpleParseUUT.INTEGER_SET_FIELD_NAME)
+        .array()
+        .extend(new ExtensibleJSONWriter.Extender() {
+          @Override
+          public void extend(ExtensibleJSONWriter writer) throws JSONException {
+            for (Integer integer : integerSet) {
+              writer.value(integer);
+            }
+          }
+        })
+        .endArray()
         .key(SimpleParseUUT.SUBOBJECT_FIELD_NAME)
           .object()
             .key(SimpleParseUUT.SubobjectParseUUT.INT_FIELD_NAME).value(subIntValue)
@@ -87,6 +101,7 @@ public class DeserializeTest {
     // NOTE: this is because ArrayDeque hilariously does not implement .equals()/.hashcode().
     assertEquals(Lists.newArrayList(integerQueue),
         Lists.newArrayList(uut.integerQueueField));
+    assertEquals(integerSet, uut.integerSetField);
     assertSame(subIntValue, uut.subobjectField.intField);
   }
 
@@ -355,6 +370,30 @@ public class DeserializeTest {
   }
 
   @Test
+  public void testAlternateFieldNames() throws Exception {
+    testAlternateFieldNameHelper(AlternateFieldUUT.FIELD_NAME, "value1");
+    testAlternateFieldNameHelper(AlternateFieldUUT.ALTERNATE_FIELD_NAME_1, "value2");
+    testAlternateFieldNameHelper(AlternateFieldUUT.ALTERNATE_FIELD_NAME_2, "value3");
+  }
+
+  private void testAlternateFieldNameHelper(String fieldName, String value) throws Exception {
+    StringWriter stringWriter = new StringWriter();
+    ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
+
+    writer.object()
+        .key(fieldName)
+        .value(value)
+        .endObject();
+
+    String inputString = stringWriter.toString();
+    JsonParser jp = new JsonFactory().createParser(inputString);
+    jp.nextToken();
+    AlternateFieldUUT uut = AlternateFieldUUT__JsonHelper.parseFromJson(jp);
+
+    assertEquals(value, uut.nameField);
+  }
+
+  @Test
   public void nullString() throws IOException, JSONException {
     StringWriter stringWriter = new StringWriter();
     ExtensibleJSONWriter writer = new ExtensibleJSONWriter(stringWriter);
diff --git a/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java b/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java
index 9b674f0..21ea66e 100644
--- a/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java
+++ b/processor/src/test/java/com/instagram/common/json/annotation/processor/SerializeTest.java
@@ -4,12 +4,17 @@ package com.instagram.common.json.annotation.processor;
 
 import java.io.IOException;
 import java.io.StringWriter;
+import java.util.Arrays;
 import java.util.List;
+import java.util.Queue;
+import java.util.Set;
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
 import org.json.JSONException;
 import org.junit.Test;
 
@@ -27,6 +32,8 @@ public class SerializeTest {
     final int integerValue = 37;
     final String stringValue = "hello world\r\n\'\"";
     final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final Queue<Integer> integerQueue = Queues.newArrayDeque(Arrays.asList(1, 2, 3, 4));
+    final Set<Integer> integerSet = Sets.newHashSet(1, 2, 3, 4);
     final int subIntValue = 30;
 
     SimpleParseUUT source = new SimpleParseUUT();
@@ -34,6 +41,8 @@ public class SerializeTest {
     source.integerField = integerValue;
     source.stringField = stringValue;
     source.integerListField = integerList;
+    source.integerQueueField = integerQueue;
+    source.integerSetField = integerSet;
     source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
     source.subobjectField.intField = subIntValue;
 
@@ -52,6 +61,10 @@ public class SerializeTest {
     assertEquals(source.integerField, parsed.integerField);
     assertEquals(source.stringField, parsed.stringField);
     assertEquals(source.integerListField, parsed.integerListField);
+    // NOTE: this is because ArrayDeque hilariously does not implement .equals()/.hashcode().
+    assertEquals(Lists.newArrayList(source.integerQueueField),
+        Lists.newArrayList(parsed.integerQueueField));
+    assertEquals(source.integerSetField, parsed.integerSetField);
     assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
   }
 
@@ -61,6 +74,8 @@ public class SerializeTest {
     final int integerValue = 37;
     final String stringValue = "hello world\r\n\'\"";
     final List<Integer> integerList = Lists.newArrayList(1, 2, 3, 4);
+    final Queue<Integer> integerQueue = Queues.newArrayDeque(Arrays.asList(1, 2, 3, 4));
+    final Set<Integer> integerSet = Sets.newHashSet(1, 2, 3, 4);
     final int subIntValue = 30;
 
     SimpleParseUUT source = new SimpleParseUUT();
@@ -68,6 +83,8 @@ public class SerializeTest {
     source.integerField = integerValue;
     source.stringField = stringValue;
     source.integerListField = integerList;
+    source.integerQueueField = integerQueue;
+    source.integerSetField = integerSet;
     source.subobjectField = new SimpleParseUUT.SubobjectParseUUT();
     source.subobjectField.intField = subIntValue;
 
@@ -78,6 +95,10 @@ public class SerializeTest {
     assertEquals(source.integerField, parsed.integerField);
     assertEquals(source.stringField, parsed.stringField);
     assertEquals(source.integerListField, parsed.integerListField);
+    // NOTE: this is because ArrayDeque hilariously does not implement .equals()/.hashcode().
+    assertEquals(Lists.newArrayList(source.integerQueueField),
+        Lists.newArrayList(parsed.integerQueueField));
+    assertEquals(source.integerSetField, parsed.integerSetField);
     assertSame(source.subobjectField.intField, parsed.subobjectField.intField);
   }
 
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/AlternateFieldUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/AlternateFieldUUT.java
new file mode 100644
index 0000000..cd2fa51
--- /dev/null
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/AlternateFieldUUT.java
@@ -0,0 +1,19 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.instagram.common.json.annotation.processor;
+
+import com.instagram.common.json.annotation.JsonField;
+import com.instagram.common.json.annotation.JsonType;
+
+@JsonType
+public class AlternateFieldUUT {
+
+  public static final String FIELD_NAME = "tyler";
+  public static final String ALTERNATE_FIELD_NAME_1 = "josh";
+  public static final String ALTERNATE_FIELD_NAME_2 = "kang";
+
+  @JsonField(fieldName = FIELD_NAME,
+      alternateFieldNames = {ALTERNATE_FIELD_NAME_1, ALTERNATE_FIELD_NAME_2})
+  String nameField;
+
+}
diff --git a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
index 8fe6998..2ddc5a8 100644
--- a/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
+++ b/processor/testuut/src/main/java/com/instagram/common/json/annotation/processor/SimpleParseUUT.java
@@ -4,6 +4,7 @@ package com.instagram.common.json.annotation.processor;
 
 import java.util.List;
 import java.util.Queue;
+import java.util.Set;
 
 import com.instagram.common.json.annotation.JsonField;
 import com.instagram.common.json.annotation.JsonType;
@@ -20,6 +21,7 @@ public class SimpleParseUUT {
   public static final String STRING_FIELD_NAME = "String";
   public static final String INTEGER_LIST_FIELD_NAME = "IntegerList";
   public static final String INTEGER_QUEUE_FIELD_NAME = "IntegerQueue";
+  public static final String INTEGER_SET_FIELD_NAME = "IntegerSet";
   public static final String SUBOBJECT_FIELD_NAME = "Subobject";
 
   @JsonField(fieldName = INT_FIELD_NAME)
@@ -43,6 +45,9 @@ public class SimpleParseUUT {
   @JsonField(fieldName = INTEGER_QUEUE_FIELD_NAME)
   public Queue<Integer> integerQueueField;
 
+  @JsonField(fieldName = INTEGER_SET_FIELD_NAME)
+  public Set<Integer> integerSetField;
+
   @JsonField(fieldName = SUBOBJECT_FIELD_NAME)
   public SubobjectParseUUT subobjectField;
 
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
index 708ff54..541591b 100644
--- a/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/ProcessorClassData.java
@@ -30,7 +30,8 @@ abstract public class ProcessorClassData<AnnotationKeyType, AnnotationRecordType
   }
 
   protected final String mClassPackage;
-  protected final String mClassName;
+  protected final String mQualifiedClassName;
+  protected final String mSimpleClassName;
   protected final String mInjectedClassName;
   private final AnnotationRecordFactory<AnnotationKeyType, AnnotationRecordType> mFactory;
   private Map<AnnotationKeyType, AnnotationRecordType> mData;
@@ -38,16 +39,24 @@ abstract public class ProcessorClassData<AnnotationKeyType, AnnotationRecordType
   /**
    * Creates a ProcessorClassData.
    * @param classPackage the package of the class being inspected.
-   * @param className the simple class name of the class being inspected.  See
-   * {@link Class#getSimpleName()}.
+   * @param qualifiedClassName the fully-qualified class name of the class being inspected.  See
+   * {@link Class#getQualifiedName()}.
+   * @param simpleClassName the simple class name of the class being inspected. See
+   * {@link Class#getSimpleName()}. This may be a partially-qualified name if the class is an
+   * inner class.
    * @param injectedClassName the simple class name of the class this injector will write its
    * generated code to.  See {@link Class#getSimpleName()}.
    * @param factory creates data records.
    */
-  protected ProcessorClassData(String classPackage, String className, String injectedClassName,
+  protected ProcessorClassData(
+      String classPackage,
+      String qualifiedClassName,
+      String simpleClassName,
+      String injectedClassName,
       AnnotationRecordFactory<AnnotationKeyType, AnnotationRecordType> factory) {
     mClassPackage = classPackage;
-    mClassName = className;
+    mQualifiedClassName = qualifiedClassName;
+    mSimpleClassName = simpleClassName;
     mInjectedClassName = injectedClassName;
     mFactory = factory;
     mData = new HashMap<AnnotationKeyType, AnnotationRecordType>();
diff --git a/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
index 9cfc1da..ac384eb 100644
--- a/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
+++ b/util/src/main/java/com/instagram/common/json/annotation/util/TypeUtils.java
@@ -36,12 +36,13 @@ public class TypeUtils {
     STRING,
     PARSABLE_OBJECT,
     ENUM_OBJECT,
-  };
+  }
 
   public enum CollectionType {
     NOT_A_COLLECTION,
     LIST,
     QUEUE,
+    SET,
   }
 
   private static final String JAVA_LANG_STRING = "java.lang.String";
@@ -54,6 +55,8 @@ public class TypeUtils {
   private static final String JAVA_UTIL_LIST_UNTYPED = "java.util.List";
   private static final String JAVA_UTIL_QUEUE = "java.util.Queue<?>";
   private static final String JAVA_UTIL_QUEUE_UNTYPED = "java.util.Queue";
+  private static final String JAVA_UTIL_SET = "java.util.Set<?>";
+  private static final String JAVA_UTIL_SET_UNTYPED = "java.util.Set";
   private static final String JAVA_LANG_ENUM = "java.lang.Enum<?>";
 
   private final Types mTypes;
@@ -122,6 +125,8 @@ public class TypeUtils {
       return CollectionType.LIST;
     } else if (JAVA_UTIL_QUEUE_UNTYPED.equals(erasedType)) {
       return CollectionType.QUEUE;
+    } else if (JAVA_UTIL_SET_UNTYPED.equals(erasedType)) {
+      return CollectionType.SET;
     }
     return CollectionType.NOT_A_COLLECTION;
   }
@@ -146,10 +151,12 @@ public class TypeUtils {
     List<? extends TypeParameterElement> typeParameterElements = typeElement.getTypeParameters();
 
     if (JAVA_UTIL_QUEUE.equals(getCanonicalTypeName(declaredType)) ||
-        JAVA_UTIL_LIST.equals(getCanonicalTypeName(declaredType))) {
+        JAVA_UTIL_LIST.equals(getCanonicalTypeName(declaredType)) ||
+        JAVA_UTIL_SET.equals(getCanonicalTypeName(declaredType))) {
       // sanity check.
       if (typeParameterElements.size() != 1) {
-        throw new IllegalStateException("java list/queue is not expected generic type");
+        throw new IllegalStateException(
+            String.format("%s is not expected generic type", declaredType));
       }
 
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
index 9e082d1..e14069a 100644
--- a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TestAnnotationProcessor.java
@@ -154,6 +154,7 @@ public class TestAnnotationProcessor extends AbstractProcessor {
       injector = new TypeGathererClassData(
           packageName,
           typeElement.getQualifiedName().toString(),
+          mTypeUtils.getClassName(typeElement, packageName),
           mTypeUtils.getPrefixForGeneratedClass(typeElement, packageName) + TYPE_DATA_SUFFIX,
           new ProcessorClassData.AnnotationRecordFactory<String, FieldData>() {
 
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
index fa98393..5bea3d8 100644
--- a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
@@ -34,9 +34,13 @@ import static javax.lang.model.element.Modifier.STATIC;
 public class TypeGathererClassData extends ProcessorClassData<String, FieldData> {
   private TypeGathererClassData mParentClassData;
 
-  public TypeGathererClassData(String classPackage, String className, String injectedClassName,
+  public TypeGathererClassData(
+      String classPackage,
+      String qualifiedClassName,
+      String simpleClassName,
+      String injectedClassName,
       AnnotationRecordFactory<String, FieldData> factory) {
-    super(classPackage, className, injectedClassName, factory);
+    super(classPackage, qualifiedClassName, simpleClassName, injectedClassName, factory);
   }
 
   @Override
@@ -48,7 +52,7 @@ public class TypeGathererClassData extends ProcessorClassData<String, FieldData>
       writer.emitPackage(mClassPackage)
           .beginType(mInjectedClassName, "class", EnumSet.of(PUBLIC, FINAL))
             .beginMethod("void", "injectTypeData", EnumSet.of(PUBLIC, FINAL, STATIC),
-                mClassName, "instance")
+                mSimpleClassName, "instance")
               .emitWithGenerator(new JavaWriter.JavaGenerator() {
                 @Override
                 public void emitJava(JavaWriter writer) throws IOException {

commit 29a594bde083f9a0144e43fc74ecc55177f1ace4
Author: Tony Tung <tonytung@merly.org>
Date:   Thu Sep 25 22:55:29 2014 -0700

    update LICENSE and PATENTS

diff --git a/LICENSE b/LICENSE
index 3ca18f4..dfbfd9c 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,23 +1,30 @@
-Copyright (c) 2014, Instagram
-All rights reserved.
+BSD License
 
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
+For ig-json-parser
 
-* Redistributions of source code must retain the above copyright notice, this
-  list of conditions and the following disclaimer.
+Copyright (c) 2014, Facebook, Inc. All rights reserved.
 
-* Redistributions in binary form must reproduce the above copyright notice,
-  this list of conditions and the following disclaimer in the documentation
-  and/or other materials provided with the distribution.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
 
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
+ * Redistributions of source code must retain the above copyright notice, this
+   list of conditions and the following disclaimer.
+
+ * Redistributions in binary form must reproduce the above copyright notice,
+   this list of conditions and the following disclaimer in the documentation
+   and/or other materials provided with the distribution.
+
+ * Neither the name Facebook nor the names of its contributors may be used to
+   endorse or promote products derived from this software without specific
+   prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/PATENTS b/PATENTS
new file mode 100644
index 0000000..4be7b80
--- /dev/null
+++ b/PATENTS
@@ -0,0 +1,23 @@
+Additional Grant of Patent Rights
+
+"Software" means the ig-json-parser software distributed by Facebook, Inc.
+
+Facebook hereby grants you a perpetual, worldwide, royalty-free, non-exclusive,
+irrevocable (subject to the termination provision below) license under any
+rights in any patent claims owned by Facebook, to make, have made, use, sell,
+offer to sell, import, and otherwise transfer the Software. For avoidance of
+doubt, no license is granted under Facebook’s rights in any patent claims that
+are infringed by (i) modifications to the Software made by you or a third party,
+or (ii) the Software in combination with any software or other technology
+provided by you or a third party.
+
+The license granted hereunder will terminate, automatically and without notice,
+for anyone that makes any claim (including by filing any lawsuit, assertion or
+other action) alleging (a) direct, indirect, or contributory infringement or
+inducement to infringe any patent: (i) by Facebook or any of its subsidiaries or
+affiliates, whether or not such claim is related to the Software, (ii) by any
+party if such claim arises in whole or in part from any software, product or
+service of Facebook or any of its subsidiaries or affiliates, whether or not
+such claim is related to the Software, or (iii) by any party relating to the
+Software; or (b) that any right in any patent claim of Facebook is invalid or
+unenforceable.

commit 4d6c69b5704a5caff88a71eafc3abac5a5c866d6
Author: Tony Tung <tonytung@merly.org>
Date:   Fri Sep 26 12:06:09 2014 -0700

    moved javawriter to a different package to avoid conflict with square's
    version.
    
    removed one instance of static final

diff --git a/javawriter/src/main/java/com/instagram/javawriter/JavaWriter.java b/javawriter/src/main/java/com/instagram/javawriter/JavaWriter.java
new file mode 100644
index 0000000..2c364b3
--- /dev/null
+++ b/javawriter/src/main/java/com/instagram/javawriter/JavaWriter.java
@@ -0,0 +1,856 @@
+// Copyright 2013 Square, Inc.
+package com.instagram.javawriter;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.Writer;
+import java.lang.annotation.Annotation;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Deque;
+import java.util.EnumSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.lang.model.element.Modifier;
+
+import static javax.lang.model.element.Modifier.ABSTRACT;
+
+/** A utility class which aids in generating Java source files. */
+public class JavaWriter implements Closeable {
+  public interface JavaGenerator {
+    public void emitJava(JavaWriter writer) throws IOException;
+  }
+
+  private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w\\.*$]+)");
+  private static final int MAX_SINGLE_LINE_ATTRIBUTES = 3;
+  private static final String INDENT = "  ";
+
+  /** Map fully qualified type names to their short names. */
+  private final Map<String, String> importedTypes = new LinkedHashMap<String, String>();
+
+  private String packagePrefix;
+  private final Deque<Scope> scopes = new ArrayDeque<Scope>();
+  private final Deque<String> types = new ArrayDeque<String>();
+  private final Writer out;
+  private boolean isCompressingTypes = true;
+  private String indent = INDENT;
+
+  /**
+   * @param out the stream to which Java source will be written. This should be a buffered stream.
+   */
+  public JavaWriter(Writer out) {
+    this.out = out;
+  }
+
+  public void setCompressingTypes(boolean isCompressingTypes) {
+    this.isCompressingTypes = isCompressingTypes;
+  }
+
+  public boolean isCompressingTypes() {
+    return isCompressingTypes;
+  }
+
+  public void setIndent(String indent) {
+    this.indent = indent;
+  }
+
+  public String getIndent() {
+    return indent;
+  }
+
+  public JavaWriter emitWithGenerator(JavaGenerator generator) throws IOException {
+    generator.emitJava(this);
+    return this;
+  }
+
+  /** Emit a package declaration and empty line. */
+  public JavaWriter emitPackage(String packageName) throws IOException {
+    if (this.packagePrefix != null) {
+      throw new IllegalStateException();
+    }
+    if (packageName.isEmpty()) {
+      this.packagePrefix = "";
+    } else {
+      out.write("package ");
+      out.write(packageName);
+      out.write(";\n\n");
+      this.packagePrefix = packageName + ".";
+    }
+    return this;
+  }
+
+  /**
+   * Emit an import for each {@code type} provided. For the duration of the file, all references to
+   * these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(String... types) throws IOException {
+    return emitImports(Arrays.asList(types));
+  }
+
+  /**
+   * Emit an import for each {@code type} provided. For the duration of the file, all references to
+   * these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(Class<?>... types) throws IOException {
+    List<String> classNames = new ArrayList<String>(types.length);
+    for (Class<?> classToImport : types) {
+      classNames.add(classToImport.getName());
+    }
+    return emitImports(classNames);
+  }
+
+  /**
+   * Emit an import for each {@code type} in the provided {@code Collection}. For the duration of
+   * the file, all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitImports(Collection<String> types) throws IOException {
+    for (String type : new TreeSet<String>(types)) {
+      Matcher matcher = TYPE_PATTERN.matcher(type);
+      if (!matcher.matches()) {
+        throw new IllegalArgumentException(type);
+      }
+      if (importedTypes.put(type, matcher.group(1)) != null) {
+        throw new IllegalArgumentException(type);
+      }
+      out.write("import ");
+      out.write(type);
+      out.write(";\n");
+    }
+    return this;
+  }
+
+  /**
+   * Emit a static import for each {@code type} provided. For the duration of the file,
+   * all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitStaticImports(String... types) throws IOException {
+    return emitStaticImports(Arrays.asList(types));
+  }
+
+  /**
+   * Emit a static import for each {@code type} in the provided {@code Collection}. For the
+   * duration of the file, all references to these classes will be automatically shortened.
+   */
+  public JavaWriter emitStaticImports(Collection<String> types) throws IOException {
+    for (String type : new TreeSet<String>(types)) {
+      Matcher matcher = TYPE_PATTERN.matcher(type);
+      if (!matcher.matches()) {
+        throw new IllegalArgumentException(type);
+      }
+      if (importedTypes.put(type, matcher.group(1)) != null) {
+        throw new IllegalArgumentException(type);
+      }
+      out.write("import static ");
+      out.write(type);
+      out.write(";\n");
+    }
+    return this;
+  }
+
+  /**
+   * Emits a name like {@code java.lang.String} or {@code java.util.List<java.lang.String>},
+   * compressing it with imports if possible. Type compression will only be enabled if
+   * {@link #isCompressingTypes} is true.
+   */
+  private JavaWriter emitCompressedType(String type) throws IOException {
+    if (isCompressingTypes) {
+      out.write(compressType(type));
+    } else {
+      out.write(type);
+    }
+    return this;
+  }
+
+  /** Try to compress a fully-qualified class name to only the class name. */
+  public String compressType(String type) {
+    StringBuilder sb = new StringBuilder();
+    if (this.packagePrefix == null) {
+      throw new IllegalStateException();
+    }
+
+    Matcher m = TYPE_PATTERN.matcher(type);
+    int pos = 0;
+    while (true) {
+      boolean found = m.find(pos);
+
+      // Copy non-matching characters like "<".
+      int typeStart = found ? m.start() : type.length();
+      sb.append(type, pos, typeStart);
+
+      if (!found) {
+        break;
+      }
+
+      // Copy a single class name, shortening it if possible.
+      String name = m.group(0);
+      String imported = importedTypes.get(name);
+      if (imported != null) {
+        sb.append(imported);
+      } else if (isClassInPackage(name, packagePrefix)) {
+        String compressed = name.substring(packagePrefix.length());
+        if (isAmbiguous(compressed)) {
+          sb.append(name);
+        } else {
+          sb.append(compressed);
+        }
+      } else if (isClassInPackage(name, "java.lang.")) {
+        sb.append(name.substring("java.lang.".length()));
+      } else {
+        sb.append(name);
+      }
+      pos = m.end();
+    }
+    return sb.toString();
+  }
+
+  private static boolean isClassInPackage(String name, String packagePrefix) {
+    if (name.startsWith(packagePrefix)) {
+      if (name.indexOf('.', packagePrefix.length()) == -1) {
+        return true;
+      }
+      // check to see if the part after the package looks like a class
+      if (Character.isUpperCase(name.charAt(packagePrefix.length()))) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Returns true if the imports contain a class with same simple name as {@code compressed}.
+   *
+   * @param compressed simple name of the type
+   */
+  private boolean isAmbiguous(String compressed) {
+    return importedTypes.values().contains(compressed);
+  }
+
+  /**
+   * Emits an initializer declaration.
+   *
+   * @param isStatic true if it should be an static initializer, false for an instance initializer.
+   */
+  public JavaWriter beginInitializer(boolean isStatic) throws IOException {
+    indent();
+    if (isStatic) {
+      out.write("static");
+      out.write(" {\n");
+    } else {
+      out.write("{\n");
+    }
+    scopes.push(Scope.INITIALIZER);
+    return this;
+  }
+
+  /** Ends the current initializer declaration. */
+  public JavaWriter endInitializer() throws IOException {
+    popScope(Scope.INITIALIZER);
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+ /**
+  * Emits a type declaration.
+  *
+  * @param kind such as "class", "interface" or "enum".
+  */
+  public JavaWriter beginType(String type, String kind) throws IOException {
+    return beginType(type, kind, EnumSet.noneOf(Modifier.class), null);
+  }
+
+  /**
+   * Emits a type declaration.
+   *
+   * @param kind such as "class", "interface" or "enum".
+   */
+  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers)
+      throws IOException {
+    return beginType(type, kind, modifiers, null);
+  }
+
+  /**
+   * Emits a type declaration.
+   *
+   * @param kind such as "class", "interface" or "enum".
+   * @param extendsType the class to extend, or null for no extends clause.
+   */
+  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers, String extendsType,
+      String... implementsTypes) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    out.write(kind);
+    out.write(" ");
+    emitCompressedType(type);
+    if (extendsType != null) {
+      out.write(" extends ");
+      emitCompressedType(extendsType);
+    }
+    if (implementsTypes.length > 0) {
+      out.write("\n");
+      indent();
+      out.write("    implements ");
+      for (int i = 0; i < implementsTypes.length; i++) {
+        if (i != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(implementsTypes[i]);
+      }
+    }
+    out.write(" {\n");
+    scopes.push(Scope.TYPE_DECLARATION);
+    types.push(type);
+    return this;
+  }
+
+  /** Completes the current type declaration. */
+  public JavaWriter endType() throws IOException {
+    popScope(Scope.TYPE_DECLARATION);
+    types.pop();
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name) throws IOException {
+    return emitField(type, name, EnumSet.noneOf(Modifier.class), null);
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers)
+      throws IOException {
+    return emitField(type, name, modifiers, null);
+  }
+
+  /** Emits a field declaration. */
+  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers,
+      String initialValue) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    emitCompressedType(type);
+    out.write(" ");
+    out.write(name);
+
+    if (initialValue != null) {
+      out.write(" = ");
+
+      String[] lines = initialValue.split("\n", -1);
+      out.write(lines[0]);
+      for (int i = 1; i < lines.length; i++) {
+        out.write("\n");
+        hangingIndent();
+        out.write(lines[i]);
+      }
+    }
+    out.write(";\n");
+    return this;
+  }
+
+  /**
+   * Emit a method declaration.
+   *
+   * <p>A {@code null} return type may be used to indicate a constructor, but
+   * {@link #beginConstructor(Set, String...)} should be preferred. This behavior may be removed in
+   * a future release.
+   *
+   * @param returnType the method's return type, or null for constructors
+   * @param name the method name, or the fully qualified class name for constructors.
+   * @param modifiers the set of modifiers to be applied to the method
+   * @param parameters alternating parameter types and names.
+   */
+  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
+      String... parameters) throws IOException {
+    return beginMethod(returnType, name, modifiers, Arrays.asList(parameters), null);
+  }
+
+  /**
+   * Emit a method declaration.
+   *
+   * <p>A {@code null} return type may be used to indicate a constructor, but
+   * {@link #beginConstructor(Set, List, List)} should be preferred. This behavior may be removed in
+   * a future release.
+   *
+   * @param returnType the method's return type, or null for constructors.
+   * @param name the method name, or the fully qualified class name for constructors.
+   * @param modifiers the set of modifiers to be applied to the method
+   * @param parameters alternating parameter types and names.
+   * @param throwsTypes the classes to throw, or null for no throws clause.
+   */
+  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
+      List<String> parameters, List<String> throwsTypes) throws IOException {
+    indent();
+    emitModifiers(modifiers);
+    if (returnType != null) {
+      emitCompressedType(returnType);
+      out.write(" ");
+      out.write(name);
+    } else {
+      emitCompressedType(name);
+    }
+    out.write("(");
+    if (parameters != null) {
+      for (int p = 0; p < parameters.size();) {
+        if (p != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(parameters.get(p++));
+        out.write(" ");
+        emitCompressedType(parameters.get(p++));
+      }
+    }
+    out.write(")");
+    if (throwsTypes != null && throwsTypes.size() > 0) {
+      out.write("\n");
+      indent();
+      out.write("    throws ");
+      for (int i = 0; i < throwsTypes.size(); i++) {
+        if (i != 0) {
+          out.write(", ");
+        }
+        emitCompressedType(throwsTypes.get(i));
+      }
+    }
+    if (modifiers.contains(ABSTRACT)) {
+      out.write(";\n");
+      scopes.push(Scope.ABSTRACT_METHOD);
+    } else {
+      out.write(" {\n");
+      scopes.push(returnType == null ? Scope.CONSTRUCTOR : Scope.NON_ABSTRACT_METHOD);
+    }
+    return this;
+  }
+
+  public JavaWriter beginConstructor(Set<Modifier> modifiers, String... parameters)
+      throws IOException {
+    beginMethod(null, types.peekFirst(), modifiers, parameters);
+    return this;
+  }
+
+  public JavaWriter beginConstructor(Set<Modifier> modifiers,
+      List<String> parameters, List<String> throwsTypes)
+      throws IOException {
+    beginMethod(null, types.peekFirst(), modifiers, parameters, throwsTypes);
+    return this;
+  }
+
+  /** Emits some Javadoc comments with line separated by {@code \n}. */
+  public JavaWriter emitJavadoc(String javadoc, Object... params) throws IOException {
+    String formatted = String.format(javadoc, params);
+
+    indent();
+    out.write("/**\n");
+    for (String line : formatted.split("\n")) {
+      indent();
+      out.write(" *");
+      if (!line.isEmpty()) {
+        out.write(" ");
+        out.write(line);
+      }
+      out.write("\n");
+    }
+    indent();
+    out.write(" */\n");
+    return this;
+  }
+
+  /** Emits a single line comment. */
+  public JavaWriter emitSingleLineComment(String comment, Object... args) throws IOException {
+    indent();
+    out.write("// ");
+    out.write(String.format(comment, args));
+    out.write("\n");
+    return this;
+  }
+
+  public JavaWriter emitEmptyLine() throws IOException {
+    out.write("\n");
+    return this;
+  }
+
+  public JavaWriter emitEnumValue(String name) throws IOException {
+    indent();
+    out.write(name);
+    out.write(",\n");
+    return this;
+  }
+
+  /**
+   * A simple switch to emit the proper enum depending if its last causing it to be terminated
+   * by a semi-colon ({@code ;}).
+   */
+  public JavaWriter emitEnumValue(String name, boolean isLast) throws IOException {
+    return isLast ? emitLastEnumValue(name) : emitEnumValue(name);
+  }
+
+  private JavaWriter emitLastEnumValue(String name) throws IOException {
+    indent();
+    out.write(name);
+    out.write(";\n");
+    return this;
+  }
+
+  /** Emit a list of enum values followed by a semi-colon ({@code ;}). */
+  public JavaWriter emitEnumValues(Iterable<String> names) throws IOException {
+    Iterator<String> iterator = names.iterator();
+
+    while (iterator.hasNext()) {
+      String name = iterator.next();
+      if (iterator.hasNext()) {
+        emitEnumValue(name);
+      } else {
+        emitLastEnumValue(name);
+      }
+    }
+
+    return this;
+  }
+
+  /** Equivalent to {@code annotation(annotation, emptyMap())}. */
+  public JavaWriter emitAnnotation(String annotation) throws IOException {
+    return emitAnnotation(annotation, Collections.<String, Object>emptyMap());
+  }
+
+  /** Equivalent to {@code annotation(annotationType.getName(), emptyMap())}. */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType) throws IOException {
+    return emitAnnotation(type(annotationType), Collections.<String, Object>emptyMap());
+  }
+
+  /**
+   * Annotates the next element with {@code annotationType} and a {@code value}.
+   *
+   * @param value an object used as the default (value) parameter of the annotation. The value will
+   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
+   *     arrays are written one element per line.
+   */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType, Object value)
+      throws IOException {
+    return emitAnnotation(type(annotationType), value);
+  }
+
+  /**
+   * Annotates the next element with {@code annotation} and a {@code value}.
+   *
+   * @param value an object used as the default (value) parameter of the annotation. The value will
+   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
+   *     arrays are written one element per line.
+   */
+  public JavaWriter emitAnnotation(String annotation, Object value) throws IOException {
+    indent();
+    out.write("@");
+    emitCompressedType(annotation);
+    out.write("(");
+    emitAnnotationValue(value);
+    out.write(")");
+    out.write("\n");
+    return this;
+  }
+
+  /** Equivalent to {@code annotation(annotationType.getName(), attributes)}. */
+  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType,
+      Map<String, ?> attributes) throws IOException {
+    return emitAnnotation(type(annotationType), attributes);
+  }
+
+  /**
+   * Annotates the next element with {@code annotation} and {@code attributes}.
+   *
+   * @param attributes a map from annotation attribute names to their values. Values are encoded
+   *     using Object.toString(); use {@link #stringLiteral} for String values. Object arrays are
+   *     written one element per line.
+   */
+  public JavaWriter emitAnnotation(String annotation, Map<String, ?> attributes)
+      throws IOException {
+    indent();
+    out.write("@");
+    emitCompressedType(annotation);
+    switch (attributes.size()) {
+      case 0:
+        break;
+      case 1:
+        Entry<String, ?> onlyEntry = attributes.entrySet().iterator().next();
+        out.write("(");
+        if (!"value".equals(onlyEntry.getKey())) {
+          out.write(onlyEntry.getKey());
+          out.write(" = ");
+        }
+        emitAnnotationValue(onlyEntry.getValue());
+        out.write(")");
+        break;
+      default:
+        boolean split = attributes.size() > MAX_SINGLE_LINE_ATTRIBUTES
+            || containsArray(attributes.values());
+        out.write("(");
+        scopes.push(Scope.ANNOTATION_ATTRIBUTE);
+        String separator = split ? "\n" : "";
+        for (Map.Entry<String, ?> entry : attributes.entrySet()) {
+          out.write(separator);
+          separator = split ? ",\n" : ", ";
+          if (split) {
+            indent();
+          }
+          out.write(entry.getKey());
+          out.write(" = ");
+          Object value = entry.getValue();
+          emitAnnotationValue(value);
+        }
+        popScope(Scope.ANNOTATION_ATTRIBUTE);
+        if (split) {
+          out.write("\n");
+          indent();
+        }
+        out.write(")");
+        break;
+    }
+    out.write("\n");
+    return this;
+  }
+
+  private boolean containsArray(Collection<?> values) {
+    for (Object value : values) {
+      if (value instanceof Object[]) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Writes a single annotation value. If the value is an array, each element in the array will be
+   * written to its own line.
+   */
+  private JavaWriter emitAnnotationValue(Object value) throws IOException {
+    if (value instanceof Object[]) {
+      out.write("{");
+      boolean firstValue = true;
+      scopes.push(Scope.ANNOTATION_ARRAY_VALUE);
+      for (Object o : ((Object[]) value)) {
+        if (firstValue) {
+          firstValue = false;
+          out.write("\n");
+        } else {
+          out.write(",\n");
+        }
+        indent();
+        out.write(o.toString());
+      }
+      popScope(Scope.ANNOTATION_ARRAY_VALUE);
+      out.write("\n");
+      indent();
+      out.write("}");
+    } else {
+      out.write(value.toString());
+    }
+    return this;
+  }
+
+  /**
+   * @param pattern a code pattern like "int i = %s". Newlines will be further indented. Should not
+   *     contain trailing semicolon.
+   */
+  public JavaWriter emitStatement(String pattern, Object... args) throws IOException {
+    checkInMethod();
+    String[] lines = String.format(pattern, args).split("\n", -1);
+    indent();
+    out.write(lines[0]);
+    for (int i = 1; i < lines.length; i++) {
+      out.write("\n");
+      hangingIndent();
+      out.write(lines[i]);
+    }
+    out.write(";\n");
+    return this;
+  }
+
+  /**
+   * @param controlFlow the control flow construct and its code, such as "if (foo == 5)". Shouldn't
+   *     contain braces or newline characters.
+   */
+  public JavaWriter beginControlFlow(String controlFlow) throws IOException {
+    checkInMethod();
+    indent();
+    out.write(controlFlow);
+    out.write(" {\n");
+    scopes.push(Scope.CONTROL_FLOW);
+    return this;
+  }
+
+  /**
+   * @param controlFlow the control flow construct and its code, such as "else if (foo == 10)".
+   *     Shouldn't contain braces or newline characters.
+   */
+  public JavaWriter nextControlFlow(String controlFlow) throws IOException {
+    popScope(Scope.CONTROL_FLOW);
+    indent();
+    scopes.push(Scope.CONTROL_FLOW);
+    out.write("} ");
+    out.write(controlFlow);
+    out.write(" {\n");
+    return this;
+  }
+
+  public JavaWriter endControlFlow() throws IOException {
+    return endControlFlow(null);
+  }
+
+  /**
+   * @param controlFlow the optional control flow construct and its code, such as
+   *     "while(foo == 20)". Only used for "do/while" control flows.
+   */
+  public JavaWriter endControlFlow(String controlFlow) throws IOException {
+    popScope(Scope.CONTROL_FLOW);
+    indent();
+    if (controlFlow != null) {
+      out.write("} ");
+      out.write(controlFlow);
+      out.write(";\n");
+    } else {
+      out.write("}\n");
+    }
+    return this;
+  }
+
+  /** Completes the current method declaration. */
+  public JavaWriter endMethod() throws IOException {
+    Scope popped = scopes.pop();
+    // support calling a constructor a "method" to support the legacy code
+    if (popped == Scope.NON_ABSTRACT_METHOD || popped == Scope.CONSTRUCTOR) {
+      indent();
+      out.write("}\n");
+    } else if (popped != Scope.ABSTRACT_METHOD) {
+      throw new IllegalStateException();
+    }
+    return this;
+  }
+
+  /** Completes the current constructor declaration. */
+  public JavaWriter endConstructor() throws IOException {
+    popScope(Scope.CONSTRUCTOR);
+    indent();
+    out.write("}\n");
+    return this;
+  }
+
+  /** Returns the string literal representing {@code data}, including wrapping quotes. */
+  public static String stringLiteral(String data) {
+    StringBuilder result = new StringBuilder();
+    result.append('"');
+    for (int i = 0; i < data.length(); i++) {
+      char c = data.charAt(i);
+      switch (c) {
+        case '"':
+          result.append("\\\"");
+          break;
+        case '\\':
+          result.append("\\\\");
+          break;
+        case '\b':
+          result.append("\\b");
+          break;
+        case '\t':
+          result.append("\\t");
+          break;
+        case '\n':
+          result.append("\\n");
+          break;
+        case '\f':
+          result.append("\\f");
+          break;
+        case '\r':
+          result.append("\\r");
+          break;
+        default:
+          if (Character.isISOControl(c)) {
+            result.append(String.format("\\u%04x", (int) c));
+          } else {
+            result.append(c);
+          }
+      }
+    }
+    result.append('"');
+    return result.toString();
+  }
+
+  /** Build a string representation of a type and optionally its generic type arguments. */
+  public static String type(Class<?> raw, String... parameters) {
+    if (parameters.length == 0) {
+      return raw.getCanonicalName();
+    }
+    if (raw.getTypeParameters().length != parameters.length) {
+      throw new IllegalArgumentException();
+    }
+    StringBuilder result = new StringBuilder();
+    result.append(raw.getCanonicalName());
+    result.append("<");
+    result.append(parameters[0]);
+    for (int i = 1; i < parameters.length; i++) {
+      result.append(", ");
+      result.append(parameters[i]);
+    }
+    result.append(">");
+    return result.toString();
+  }
+
+  @Override public void close() throws IOException {
+    out.close();
+  }
+
+  /** Emits the modifiers to the writer. */
+  private void emitModifiers(Set<Modifier> modifiers) throws IOException {
+    // Use an EnumSet to ensure the proper ordering
+    if (!(modifiers instanceof EnumSet)) {
+      modifiers = EnumSet.copyOf(modifiers);
+    }
+    for (Modifier modifier : modifiers) {
+      out.append(modifier.toString()).append(' ');
+    }
+  }
+
+  private void indent() throws IOException {
+    for (int i = 0, count = scopes.size(); i < count; i++) {
+      out.write(indent);
+    }
+  }
+
+  private void hangingIndent() throws IOException {
+    for (int i = 0, count = scopes.size() + 2; i < count; i++) {
+      out.write(indent);
+    }
+  }
+
+  private static final EnumSet<Scope> METHOD_SCOPES = EnumSet.of(
+      Scope.NON_ABSTRACT_METHOD, Scope.CONSTRUCTOR, Scope.CONTROL_FLOW, Scope.INITIALIZER);
+
+  private void checkInMethod() {
+    if (!METHOD_SCOPES.contains(scopes.peekFirst())) {
+      throw new IllegalArgumentException();
+    }
+  }
+
+  private void popScope(Scope expected) {
+    if (scopes.pop() != expected) {
+      throw new IllegalStateException();
+    }
+  }
+
+  private enum Scope {
+    TYPE_DECLARATION,
+    ABSTRACT_METHOD,
+    NON_ABSTRACT_METHOD,
+    CONSTRUCTOR,
+    CONTROL_FLOW,
+    ANNOTATION_ATTRIBUTE,
+    ANNOTATION_ARRAY_VALUE,
+    INITIALIZER
+  }
+}
diff --git a/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java b/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java
deleted file mode 100644
index 1b2dc5b..0000000
--- a/javawriter/src/main/java/com/squareup/javawriter/JavaWriter.java
+++ /dev/null
@@ -1,856 +0,0 @@
-// Copyright 2013 Square, Inc.
-package com.squareup.javawriter;
-
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.util.ArrayDeque;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Deque;
-import java.util.EnumSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import javax.lang.model.element.Modifier;
-
-import static javax.lang.model.element.Modifier.ABSTRACT;
-
-/** A utility class which aids in generating Java source files. */
-public class JavaWriter implements Closeable {
-  public interface JavaGenerator {
-    public void emitJava(JavaWriter writer) throws IOException;
-  }
-
-  private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w\\.*$]+)");
-  private static final int MAX_SINGLE_LINE_ATTRIBUTES = 3;
-  private static final String INDENT = "  ";
-
-  /** Map fully qualified type names to their short names. */
-  private final Map<String, String> importedTypes = new LinkedHashMap<String, String>();
-
-  private String packagePrefix;
-  private final Deque<Scope> scopes = new ArrayDeque<Scope>();
-  private final Deque<String> types = new ArrayDeque<String>();
-  private final Writer out;
-  private boolean isCompressingTypes = true;
-  private String indent = INDENT;
-
-  /**
-   * @param out the stream to which Java source will be written. This should be a buffered stream.
-   */
-  public JavaWriter(Writer out) {
-    this.out = out;
-  }
-
-  public void setCompressingTypes(boolean isCompressingTypes) {
-    this.isCompressingTypes = isCompressingTypes;
-  }
-
-  public boolean isCompressingTypes() {
-    return isCompressingTypes;
-  }
-
-  public void setIndent(String indent) {
-    this.indent = indent;
-  }
-
-  public String getIndent() {
-    return indent;
-  }
-
-  public JavaWriter emitWithGenerator(JavaGenerator generator) throws IOException {
-    generator.emitJava(this);
-    return this;
-  }
-
-  /** Emit a package declaration and empty line. */
-  public JavaWriter emitPackage(String packageName) throws IOException {
-    if (this.packagePrefix != null) {
-      throw new IllegalStateException();
-    }
-    if (packageName.isEmpty()) {
-      this.packagePrefix = "";
-    } else {
-      out.write("package ");
-      out.write(packageName);
-      out.write(";\n\n");
-      this.packagePrefix = packageName + ".";
-    }
-    return this;
-  }
-
-  /**
-   * Emit an import for each {@code type} provided. For the duration of the file, all references to
-   * these classes will be automatically shortened.
-   */
-  public JavaWriter emitImports(String... types) throws IOException {
-    return emitImports(Arrays.asList(types));
-  }
-
-  /**
-   * Emit an import for each {@code type} provided. For the duration of the file, all references to
-   * these classes will be automatically shortened.
-   */
-  public JavaWriter emitImports(Class<?>... types) throws IOException {
-    List<String> classNames = new ArrayList<String>(types.length);
-    for (Class<?> classToImport : types) {
-      classNames.add(classToImport.getName());
-    }
-    return emitImports(classNames);
-  }
-
-  /**
-   * Emit an import for each {@code type} in the provided {@code Collection}. For the duration of
-   * the file, all references to these classes will be automatically shortened.
-   */
-  public JavaWriter emitImports(Collection<String> types) throws IOException {
-    for (String type : new TreeSet<String>(types)) {
-      Matcher matcher = TYPE_PATTERN.matcher(type);
-      if (!matcher.matches()) {
-        throw new IllegalArgumentException(type);
-      }
-      if (importedTypes.put(type, matcher.group(1)) != null) {
-        throw new IllegalArgumentException(type);
-      }
-      out.write("import ");
-      out.write(type);
-      out.write(";\n");
-    }
-    return this;
-  }
-
-  /**
-   * Emit a static import for each {@code type} provided. For the duration of the file,
-   * all references to these classes will be automatically shortened.
-   */
-  public JavaWriter emitStaticImports(String... types) throws IOException {
-    return emitStaticImports(Arrays.asList(types));
-  }
-
-  /**
-   * Emit a static import for each {@code type} in the provided {@code Collection}. For the
-   * duration of the file, all references to these classes will be automatically shortened.
-   */
-  public JavaWriter emitStaticImports(Collection<String> types) throws IOException {
-    for (String type : new TreeSet<String>(types)) {
-      Matcher matcher = TYPE_PATTERN.matcher(type);
-      if (!matcher.matches()) {
-        throw new IllegalArgumentException(type);
-      }
-      if (importedTypes.put(type, matcher.group(1)) != null) {
-        throw new IllegalArgumentException(type);
-      }
-      out.write("import static ");
-      out.write(type);
-      out.write(";\n");
-    }
-    return this;
-  }
-
-  /**
-   * Emits a name like {@code java.lang.String} or {@code java.util.List<java.lang.String>},
-   * compressing it with imports if possible. Type compression will only be enabled if
-   * {@link #isCompressingTypes} is true.
-   */
-  private JavaWriter emitCompressedType(String type) throws IOException {
-    if (isCompressingTypes) {
-      out.write(compressType(type));
-    } else {
-      out.write(type);
-    }
-    return this;
-  }
-
-  /** Try to compress a fully-qualified class name to only the class name. */
-  public String compressType(String type) {
-    StringBuilder sb = new StringBuilder();
-    if (this.packagePrefix == null) {
-      throw new IllegalStateException();
-    }
-
-    Matcher m = TYPE_PATTERN.matcher(type);
-    int pos = 0;
-    while (true) {
-      boolean found = m.find(pos);
-
-      // Copy non-matching characters like "<".
-      int typeStart = found ? m.start() : type.length();
-      sb.append(type, pos, typeStart);
-
-      if (!found) {
-        break;
-      }
-
-      // Copy a single class name, shortening it if possible.
-      String name = m.group(0);
-      String imported = importedTypes.get(name);
-      if (imported != null) {
-        sb.append(imported);
-      } else if (isClassInPackage(name, packagePrefix)) {
-        String compressed = name.substring(packagePrefix.length());
-        if (isAmbiguous(compressed)) {
-          sb.append(name);
-        } else {
-          sb.append(compressed);
-        }
-      } else if (isClassInPackage(name, "java.lang.")) {
-        sb.append(name.substring("java.lang.".length()));
-      } else {
-        sb.append(name);
-      }
-      pos = m.end();
-    }
-    return sb.toString();
-  }
-
-  private static boolean isClassInPackage(String name, String packagePrefix) {
-    if (name.startsWith(packagePrefix)) {
-      if (name.indexOf('.', packagePrefix.length()) == -1) {
-        return true;
-      }
-      // check to see if the part after the package looks like a class
-      if (Character.isUpperCase(name.charAt(packagePrefix.length()))) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  /**
-   * Returns true if the imports contain a class with same simple name as {@code compressed}.
-   *
-   * @param compressed simple name of the type
-   */
-  private boolean isAmbiguous(String compressed) {
-    return importedTypes.values().contains(compressed);
-  }
-
-  /**
-   * Emits an initializer declaration.
-   *
-   * @param isStatic true if it should be an static initializer, false for an instance initializer.
-   */
-  public JavaWriter beginInitializer(boolean isStatic) throws IOException {
-    indent();
-    if (isStatic) {
-      out.write("static");
-      out.write(" {\n");
-    } else {
-      out.write("{\n");
-    }
-    scopes.push(Scope.INITIALIZER);
-    return this;
-  }
-
-  /** Ends the current initializer declaration. */
-  public JavaWriter endInitializer() throws IOException {
-    popScope(Scope.INITIALIZER);
-    indent();
-    out.write("}\n");
-    return this;
-  }
-
- /**
-  * Emits a type declaration.
-  *
-  * @param kind such as "class", "interface" or "enum".
-  */
-  public JavaWriter beginType(String type, String kind) throws IOException {
-    return beginType(type, kind, EnumSet.noneOf(Modifier.class), null);
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   */
-  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers)
-      throws IOException {
-    return beginType(type, kind, modifiers, null);
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   * @param extendsType the class to extend, or null for no extends clause.
-   */
-  public JavaWriter beginType(String type, String kind, Set<Modifier> modifiers, String extendsType,
-      String... implementsTypes) throws IOException {
-    indent();
-    emitModifiers(modifiers);
-    out.write(kind);
-    out.write(" ");
-    emitCompressedType(type);
-    if (extendsType != null) {
-      out.write(" extends ");
-      emitCompressedType(extendsType);
-    }
-    if (implementsTypes.length > 0) {
-      out.write("\n");
-      indent();
-      out.write("    implements ");
-      for (int i = 0; i < implementsTypes.length; i++) {
-        if (i != 0) {
-          out.write(", ");
-        }
-        emitCompressedType(implementsTypes[i]);
-      }
-    }
-    out.write(" {\n");
-    scopes.push(Scope.TYPE_DECLARATION);
-    types.push(type);
-    return this;
-  }
-
-  /** Completes the current type declaration. */
-  public JavaWriter endType() throws IOException {
-    popScope(Scope.TYPE_DECLARATION);
-    types.pop();
-    indent();
-    out.write("}\n");
-    return this;
-  }
-
-  /** Emits a field declaration. */
-  public JavaWriter emitField(String type, String name) throws IOException {
-    return emitField(type, name, EnumSet.noneOf(Modifier.class), null);
-  }
-
-  /** Emits a field declaration. */
-  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers)
-      throws IOException {
-    return emitField(type, name, modifiers, null);
-  }
-
-  /** Emits a field declaration. */
-  public JavaWriter emitField(String type, String name, Set<Modifier> modifiers,
-      String initialValue) throws IOException {
-    indent();
-    emitModifiers(modifiers);
-    emitCompressedType(type);
-    out.write(" ");
-    out.write(name);
-
-    if (initialValue != null) {
-      out.write(" = ");
-
-      String[] lines = initialValue.split("\n", -1);
-      out.write(lines[0]);
-      for (int i = 1; i < lines.length; i++) {
-        out.write("\n");
-        hangingIndent();
-        out.write(lines[i]);
-      }
-    }
-    out.write(";\n");
-    return this;
-  }
-
-  /**
-   * Emit a method declaration.
-   *
-   * <p>A {@code null} return type may be used to indicate a constructor, but
-   * {@link #beginConstructor(Set, String...)} should be preferred. This behavior may be removed in
-   * a future release.
-   *
-   * @param returnType the method's return type, or null for constructors
-   * @param name the method name, or the fully qualified class name for constructors.
-   * @param modifiers the set of modifiers to be applied to the method
-   * @param parameters alternating parameter types and names.
-   */
-  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
-      String... parameters) throws IOException {
-    return beginMethod(returnType, name, modifiers, Arrays.asList(parameters), null);
-  }
-
-  /**
-   * Emit a method declaration.
-   *
-   * <p>A {@code null} return type may be used to indicate a constructor, but
-   * {@link #beginConstructor(Set, List, List)} should be preferred. This behavior may be removed in
-   * a future release.
-   *
-   * @param returnType the method's return type, or null for constructors.
-   * @param name the method name, or the fully qualified class name for constructors.
-   * @param modifiers the set of modifiers to be applied to the method
-   * @param parameters alternating parameter types and names.
-   * @param throwsTypes the classes to throw, or null for no throws clause.
-   */
-  public JavaWriter beginMethod(String returnType, String name, Set<Modifier> modifiers,
-      List<String> parameters, List<String> throwsTypes) throws IOException {
-    indent();
-    emitModifiers(modifiers);
-    if (returnType != null) {
-      emitCompressedType(returnType);
-      out.write(" ");
-      out.write(name);
-    } else {
-      emitCompressedType(name);
-    }
-    out.write("(");
-    if (parameters != null) {
-      for (int p = 0; p < parameters.size();) {
-        if (p != 0) {
-          out.write(", ");
-        }
-        emitCompressedType(parameters.get(p++));
-        out.write(" ");
-        emitCompressedType(parameters.get(p++));
-      }
-    }
-    out.write(")");
-    if (throwsTypes != null && throwsTypes.size() > 0) {
-      out.write("\n");
-      indent();
-      out.write("    throws ");
-      for (int i = 0; i < throwsTypes.size(); i++) {
-        if (i != 0) {
-          out.write(", ");
-        }
-        emitCompressedType(throwsTypes.get(i));
-      }
-    }
-    if (modifiers.contains(ABSTRACT)) {
-      out.write(";\n");
-      scopes.push(Scope.ABSTRACT_METHOD);
-    } else {
-      out.write(" {\n");
-      scopes.push(returnType == null ? Scope.CONSTRUCTOR : Scope.NON_ABSTRACT_METHOD);
-    }
-    return this;
-  }
-
-  public JavaWriter beginConstructor(Set<Modifier> modifiers, String... parameters)
-      throws IOException {
-    beginMethod(null, types.peekFirst(), modifiers, parameters);
-    return this;
-  }
-
-  public JavaWriter beginConstructor(Set<Modifier> modifiers,
-      List<String> parameters, List<String> throwsTypes)
-      throws IOException {
-    beginMethod(null, types.peekFirst(), modifiers, parameters, throwsTypes);
-    return this;
-  }
-
-  /** Emits some Javadoc comments with line separated by {@code \n}. */
-  public JavaWriter emitJavadoc(String javadoc, Object... params) throws IOException {
-    String formatted = String.format(javadoc, params);
-
-    indent();
-    out.write("/**\n");
-    for (String line : formatted.split("\n")) {
-      indent();
-      out.write(" *");
-      if (!line.isEmpty()) {
-        out.write(" ");
-        out.write(line);
-      }
-      out.write("\n");
-    }
-    indent();
-    out.write(" */\n");
-    return this;
-  }
-
-  /** Emits a single line comment. */
-  public JavaWriter emitSingleLineComment(String comment, Object... args) throws IOException {
-    indent();
-    out.write("// ");
-    out.write(String.format(comment, args));
-    out.write("\n");
-    return this;
-  }
-
-  public JavaWriter emitEmptyLine() throws IOException {
-    out.write("\n");
-    return this;
-  }
-
-  public JavaWriter emitEnumValue(String name) throws IOException {
-    indent();
-    out.write(name);
-    out.write(",\n");
-    return this;
-  }
-
-  /**
-   * A simple switch to emit the proper enum depending if its last causing it to be terminated
-   * by a semi-colon ({@code ;}).
-   */
-  public JavaWriter emitEnumValue(String name, boolean isLast) throws IOException {
-    return isLast ? emitLastEnumValue(name) : emitEnumValue(name);
-  }
-
-  private JavaWriter emitLastEnumValue(String name) throws IOException {
-    indent();
-    out.write(name);
-    out.write(";\n");
-    return this;
-  }
-
-  /** Emit a list of enum values followed by a semi-colon ({@code ;}). */
-  public JavaWriter emitEnumValues(Iterable<String> names) throws IOException {
-    Iterator<String> iterator = names.iterator();
-
-    while (iterator.hasNext()) {
-      String name = iterator.next();
-      if (iterator.hasNext()) {
-        emitEnumValue(name);
-      } else {
-        emitLastEnumValue(name);
-      }
-    }
-
-    return this;
-  }
-
-  /** Equivalent to {@code annotation(annotation, emptyMap())}. */
-  public JavaWriter emitAnnotation(String annotation) throws IOException {
-    return emitAnnotation(annotation, Collections.<String, Object>emptyMap());
-  }
-
-  /** Equivalent to {@code annotation(annotationType.getName(), emptyMap())}. */
-  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType) throws IOException {
-    return emitAnnotation(type(annotationType), Collections.<String, Object>emptyMap());
-  }
-
-  /**
-   * Annotates the next element with {@code annotationType} and a {@code value}.
-   *
-   * @param value an object used as the default (value) parameter of the annotation. The value will
-   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
-   *     arrays are written one element per line.
-   */
-  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType, Object value)
-      throws IOException {
-    return emitAnnotation(type(annotationType), value);
-  }
-
-  /**
-   * Annotates the next element with {@code annotation} and a {@code value}.
-   *
-   * @param value an object used as the default (value) parameter of the annotation. The value will
-   *     be encoded using Object.toString(); use {@link #stringLiteral} for String values. Object
-   *     arrays are written one element per line.
-   */
-  public JavaWriter emitAnnotation(String annotation, Object value) throws IOException {
-    indent();
-    out.write("@");
-    emitCompressedType(annotation);
-    out.write("(");
-    emitAnnotationValue(value);
-    out.write(")");
-    out.write("\n");
-    return this;
-  }
-
-  /** Equivalent to {@code annotation(annotationType.getName(), attributes)}. */
-  public JavaWriter emitAnnotation(Class<? extends Annotation> annotationType,
-      Map<String, ?> attributes) throws IOException {
-    return emitAnnotation(type(annotationType), attributes);
-  }
-
-  /**
-   * Annotates the next element with {@code annotation} and {@code attributes}.
-   *
-   * @param attributes a map from annotation attribute names to their values. Values are encoded
-   *     using Object.toString(); use {@link #stringLiteral} for String values. Object arrays are
-   *     written one element per line.
-   */
-  public JavaWriter emitAnnotation(String annotation, Map<String, ?> attributes)
-      throws IOException {
-    indent();
-    out.write("@");
-    emitCompressedType(annotation);
-    switch (attributes.size()) {
-      case 0:
-        break;
-      case 1:
-        Entry<String, ?> onlyEntry = attributes.entrySet().iterator().next();
-        out.write("(");
-        if (!"value".equals(onlyEntry.getKey())) {
-          out.write(onlyEntry.getKey());
-          out.write(" = ");
-        }
-        emitAnnotationValue(onlyEntry.getValue());
-        out.write(")");
-        break;
-      default:
-        boolean split = attributes.size() > MAX_SINGLE_LINE_ATTRIBUTES
-            || containsArray(attributes.values());
-        out.write("(");
-        scopes.push(Scope.ANNOTATION_ATTRIBUTE);
-        String separator = split ? "\n" : "";
-        for (Map.Entry<String, ?> entry : attributes.entrySet()) {
-          out.write(separator);
-          separator = split ? ",\n" : ", ";
-          if (split) {
-            indent();
-          }
-          out.write(entry.getKey());
-          out.write(" = ");
-          Object value = entry.getValue();
-          emitAnnotationValue(value);
-        }
-        popScope(Scope.ANNOTATION_ATTRIBUTE);
-        if (split) {
-          out.write("\n");
-          indent();
-        }
-        out.write(")");
-        break;
-    }
-    out.write("\n");
-    return this;
-  }
-
-  private boolean containsArray(Collection<?> values) {
-    for (Object value : values) {
-      if (value instanceof Object[]) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  /**
-   * Writes a single annotation value. If the value is an array, each element in the array will be
-   * written to its own line.
-   */
-  private JavaWriter emitAnnotationValue(Object value) throws IOException {
-    if (value instanceof Object[]) {
-      out.write("{");
-      boolean firstValue = true;
-      scopes.push(Scope.ANNOTATION_ARRAY_VALUE);
-      for (Object o : ((Object[]) value)) {
-        if (firstValue) {
-          firstValue = false;
-          out.write("\n");
-        } else {
-          out.write(",\n");
-        }
-        indent();
-        out.write(o.toString());
-      }
-      popScope(Scope.ANNOTATION_ARRAY_VALUE);
-      out.write("\n");
-      indent();
-      out.write("}");
-    } else {
-      out.write(value.toString());
-    }
-    return this;
-  }
-
-  /**
-   * @param pattern a code pattern like "int i = %s". Newlines will be further indented. Should not
-   *     contain trailing semicolon.
-   */
-  public JavaWriter emitStatement(String pattern, Object... args) throws IOException {
-    checkInMethod();
-    String[] lines = String.format(pattern, args).split("\n", -1);
-    indent();
-    out.write(lines[0]);
-    for (int i = 1; i < lines.length; i++) {
-      out.write("\n");
-      hangingIndent();
-      out.write(lines[i]);
-    }
-    out.write(";\n");
-    return this;
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as "if (foo == 5)". Shouldn't
-   *     contain braces or newline characters.
-   */
-  public JavaWriter beginControlFlow(String controlFlow) throws IOException {
-    checkInMethod();
-    indent();
-    out.write(controlFlow);
-    out.write(" {\n");
-    scopes.push(Scope.CONTROL_FLOW);
-    return this;
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as "else if (foo == 10)".
-   *     Shouldn't contain braces or newline characters.
-   */
-  public JavaWriter nextControlFlow(String controlFlow) throws IOException {
-    popScope(Scope.CONTROL_FLOW);
-    indent();
-    scopes.push(Scope.CONTROL_FLOW);
-    out.write("} ");
-    out.write(controlFlow);
-    out.write(" {\n");
-    return this;
-  }
-
-  public JavaWriter endControlFlow() throws IOException {
-    return endControlFlow(null);
-  }
-
-  /**
-   * @param controlFlow the optional control flow construct and its code, such as
-   *     "while(foo == 20)". Only used for "do/while" control flows.
-   */
-  public JavaWriter endControlFlow(String controlFlow) throws IOException {
-    popScope(Scope.CONTROL_FLOW);
-    indent();
-    if (controlFlow != null) {
-      out.write("} ");
-      out.write(controlFlow);
-      out.write(";\n");
-    } else {
-      out.write("}\n");
-    }
-    return this;
-  }
-
-  /** Completes the current method declaration. */
-  public JavaWriter endMethod() throws IOException {
-    Scope popped = scopes.pop();
-    // support calling a constructor a "method" to support the legacy code
-    if (popped == Scope.NON_ABSTRACT_METHOD || popped == Scope.CONSTRUCTOR) {
-      indent();
-      out.write("}\n");
-    } else if (popped != Scope.ABSTRACT_METHOD) {
-      throw new IllegalStateException();
-    }
-    return this;
-  }
-
-  /** Completes the current constructor declaration. */
-  public JavaWriter endConstructor() throws IOException {
-    popScope(Scope.CONSTRUCTOR);
-    indent();
-    out.write("}\n");
-    return this;
-  }
-
-  /** Returns the string literal representing {@code data}, including wrapping quotes. */
-  public static String stringLiteral(String data) {
-    StringBuilder result = new StringBuilder();
-    result.append('"');
-    for (int i = 0; i < data.length(); i++) {
-      char c = data.charAt(i);
-      switch (c) {
-        case '"':
-          result.append("\\\"");
-          break;
-        case '\\':
-          result.append("\\\\");
-          break;
-        case '\b':
-          result.append("\\b");
-          break;
-        case '\t':
-          result.append("\\t");
-          break;
-        case '\n':
-          result.append("\\n");
-          break;
-        case '\f':
-          result.append("\\f");
-          break;
-        case '\r':
-          result.append("\\r");
-          break;
-        default:
-          if (Character.isISOControl(c)) {
-            result.append(String.format("\\u%04x", (int) c));
-          } else {
-            result.append(c);
-          }
-      }
-    }
-    result.append('"');
-    return result.toString();
-  }
-
-  /** Build a string representation of a type and optionally its generic type arguments. */
-  public static String type(Class<?> raw, String... parameters) {
-    if (parameters.length == 0) {
-      return raw.getCanonicalName();
-    }
-    if (raw.getTypeParameters().length != parameters.length) {
-      throw new IllegalArgumentException();
-    }
-    StringBuilder result = new StringBuilder();
-    result.append(raw.getCanonicalName());
-    result.append("<");
-    result.append(parameters[0]);
-    for (int i = 1; i < parameters.length; i++) {
-      result.append(", ");
-      result.append(parameters[i]);
-    }
-    result.append(">");
-    return result.toString();
-  }
-
-  @Override public void close() throws IOException {
-    out.close();
-  }
-
-  /** Emits the modifiers to the writer. */
-  private void emitModifiers(Set<Modifier> modifiers) throws IOException {
-    // Use an EnumSet to ensure the proper ordering
-    if (!(modifiers instanceof EnumSet)) {
-      modifiers = EnumSet.copyOf(modifiers);
-    }
-    for (Modifier modifier : modifiers) {
-      out.append(modifier.toString()).append(' ');
-    }
-  }
-
-  private void indent() throws IOException {
-    for (int i = 0, count = scopes.size(); i < count; i++) {
-      out.write(indent);
-    }
-  }
-
-  private void hangingIndent() throws IOException {
-    for (int i = 0, count = scopes.size() + 2; i < count; i++) {
-      out.write(indent);
-    }
-  }
-
-  private static final EnumSet<Scope> METHOD_SCOPES = EnumSet.of(
-      Scope.NON_ABSTRACT_METHOD, Scope.CONSTRUCTOR, Scope.CONTROL_FLOW, Scope.INITIALIZER);
-
-  private void checkInMethod() {
-    if (!METHOD_SCOPES.contains(scopes.peekFirst())) {
-      throw new IllegalArgumentException();
-    }
-  }
-
-  private void popScope(Scope expected) {
-    if (scopes.pop() != expected) {
-      throw new IllegalStateException();
-    }
-  }
-
-  private enum Scope {
-    TYPE_DECLARATION,
-    ABSTRACT_METHOD,
-    NON_ABSTRACT_METHOD,
-    CONSTRUCTOR,
-    CONTROL_FLOW,
-    ANNOTATION_ATTRIBUTE,
-    ANNOTATION_ARRAY_VALUE,
-    INITIALIZER
-  }
-}
diff --git a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
index 15fcdc2..bbc2966 100644
--- a/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
+++ b/processor/src/main/java/com/instagram/common/json/annotation/processor/JsonParserClassData.java
@@ -28,7 +28,7 @@ import com.instagram.common.json.annotation.util.TypeUtils;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonToken;
-import com.squareup.javawriter.JavaWriter;
+import com.instagram.javawriter.JavaWriter;
 
 import static javax.lang.model.element.Modifier.*;
 
diff --git a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
index 5bea3d8..7b996ca 100644
--- a/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
+++ b/util/testprocessor/src/main/java/com/instagram/common/json/annotation/util/TypeGathererClassData.java
@@ -6,11 +6,10 @@ import javax.annotation.processing.Messager;
 
 import java.io.IOException;
 import java.io.StringWriter;
-import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.Map;
 
-import com.squareup.javawriter.JavaWriter;
+import com.instagram.javawriter.JavaWriter;
 
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -51,7 +50,7 @@ public class TypeGathererClassData extends ProcessorClassData<String, FieldData>
     try {
       writer.emitPackage(mClassPackage)
           .beginType(mInjectedClassName, "class", EnumSet.of(PUBLIC, FINAL))
-            .beginMethod("void", "injectTypeData", EnumSet.of(PUBLIC, FINAL, STATIC),
+            .beginMethod("void", "injectTypeData", EnumSet.of(PUBLIC, STATIC),
                 mSimpleClassName, "instance")
               .emitWithGenerator(new JavaWriter.JavaGenerator() {
                 @Override

commit 5aaefb034c6615eaf16ed8d0fdf5c68673d25923
Author: Tony Tung <tonytung@merly.org>
Date:   Fri Sep 26 13:23:51 2014 -0700

    bump to 0.0.4

diff --git a/README.md b/README.md
index 05a5e09..6f8cf35 100644
--- a/README.md
+++ b/README.md
@@ -50,7 +50,7 @@ To use this library, add this to your build.gradle file:
       ]
     }
     dependencies {
-      compile group: 'com.instagram', name: 'ig-json-parser-processor', version: '0.0.3+'
+      compile group: 'com.instagram', name: 'ig-json-parser-processor', version: '0.0.4+'
     }
 
 
